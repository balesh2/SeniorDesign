Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o (exit)
/usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
                              idle.o (__do_clear_bss)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o)
                              telemetry.o (__eerd_word_m128)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o)
                              telemetry.o (__eeupd_block_m128)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_byte_atmega128.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o) (__eeupd_r18_m128)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_word_atmega128.o)
                              telemetry.o (__eeupd_word_m128)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_block_atmega128.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o) (__eerd_blraw_m128)

Allocating common symbols
Common symbol       size              file

plate_retracted_flg
                    0x1               retract.o
current_address     0x2               telemetry.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800100 0x000000000000ff00 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
user_signatures  0x0000000000850000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
LOAD main.o
LOAD science_hardcoded.o
LOAD idle.o
LOAD retract.o
LOAD safety.o
LOAD RSXAVRD.o
LOAD telemetry.o
LOAD observation.o
LOAD off.o
START GROUP
LOAD /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libm.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x93a
 *(.vectors)
 .vectors       0x0000000000000000       0x8c /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x000000000000008c                . = ALIGN (0x2)
                0x000000000000008c                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x000000000000008c        0x0 linker stubs
 *(.trampolines*)
                0x000000000000008c                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x000000000000008c                __ctors_start = .
 *(.ctors)
                0x000000000000008c                __ctors_end = .
                0x000000000000008c                __dtors_start = .
 *(.dtors)
                0x000000000000008c                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x000000000000008c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
                0x000000000000008c                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x000000000000008c        0xc /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000098       0x1a /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
                0x0000000000000098                __do_copy_data
 .init4         0x00000000000000b2       0x10 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
                0x00000000000000b2                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000000000000c2        0x8 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
 *(.init9)
 *(.text)
 .text          0x00000000000000ca        0x4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
                0x00000000000000ca                __vector_22
                0x00000000000000ca                __vector_28
                0x00000000000000ca                __vector_32
                0x00000000000000ca                __vector_34
                0x00000000000000ca                __vector_24
                0x00000000000000ca                __bad_interrupt
                0x00000000000000ca                __vector_31
                0x00000000000000ca                __vector_23
                0x00000000000000ca                __vector_30
                0x00000000000000ca                __vector_25
                0x00000000000000ca                __vector_11
                0x00000000000000ca                __vector_13
                0x00000000000000ca                __vector_17
                0x00000000000000ca                __vector_19
                0x00000000000000ca                __vector_27
                0x00000000000000ca                __vector_33
                0x00000000000000ca                __vector_9
                0x00000000000000ca                __vector_21
                0x00000000000000ca                __vector_15
                0x00000000000000ca                __vector_29
                0x00000000000000ca                __vector_8
                0x00000000000000ca                __vector_26
                0x00000000000000ca                __vector_14
                0x00000000000000ca                __vector_10
                0x00000000000000ca                __vector_16
                0x00000000000000ca                __vector_18
                0x00000000000000ca                __vector_20
 .text          0x00000000000000ce        0x0 main.o
 .text          0x00000000000000ce       0xb4 science_hardcoded.o
                0x00000000000000ce                science
 .text          0x0000000000000182       0x2c idle.o
                0x0000000000000182                __vector_7
                0x00000000000001a0                idle
 .text          0x00000000000001ae      0x108 retract.o
                0x00000000000001ae                retract
                0x0000000000000226                __vector_6
                0x000000000000027e                extend
 .text          0x00000000000002b6        0xe safety.o
                0x00000000000002b6                safety
 .text          0x00000000000002c4      0x48a RSXAVRD.o
                0x00000000000002c4                get_time
                0x00000000000002ce                get_calibration_status
                0x00000000000002d4                __vector_1
                0x00000000000002f6                __vector_2
                0x0000000000000318                __vector_3
                0x000000000000033a                __vector_4
                0x000000000000035c                __vector_5
                0x000000000000037e                __vector_12
                0x00000000000003ac                AVR_init
                0x00000000000003fa                timer_counter_enable
                0x000000000000043c                timer_event_enable
                0x000000000000048c                send_code
                0x00000000000004d4                camera_enable
                0x0000000000000514                touch_sensor_check
                0x000000000000051c                temperature_probe_sample
                0x0000000000000532                motor_calibration_enable
                0x000000000000059c                motor_pwr
                0x0000000000000602                motor_dir
                0x0000000000000662                motor_step
 .text          0x000000000000074e       0x6e telemetry.o
                0x000000000000074e                telemetry_init
                0x000000000000076c                telemetry_send_code
                0x000000000000076e                eeprom_log
 .text          0x00000000000007bc       0xb6 observation.o
                0x00000000000007bc                observation
 .text          0x0000000000000872        0xa off.o
                0x0000000000000872                off
 .text          0x000000000000087c        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text          0x000000000000087c        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text          0x000000000000087c        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text          0x000000000000087c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o)
 .text          0x000000000000087c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o)
 .text          0x000000000000087c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_byte_atmega128.o)
 .text          0x000000000000087c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_word_atmega128.o)
 .text          0x000000000000087c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_block_atmega128.o)
                0x000000000000087c                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x000000000000087c       0x40 main.o
                0x000000000000087c                main
 .text.libgcc.mul
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc.div
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc   0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.fixed
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.mul
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc   0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.fixed
                0x00000000000008bc        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.avr-libc
                0x00000000000008bc        0xc /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o)
                0x00000000000008bc                __eerd_word_m128
 .text.avr-libc
                0x00000000000008c8       0x20 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o)
                0x00000000000008c8                __eeupd_block_m128
 .text.avr-libc
                0x00000000000008e8       0x22 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_byte_atmega128.o)
                0x00000000000008e8                __eeupd_byte_m128
                0x00000000000008ea                __eeupd_r18_m128
 .text.avr-libc
                0x000000000000090a        0xc /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_word_atmega128.o)
                0x000000000000090a                __eeupd_word_m128
 .text.avr-libc
                0x0000000000000916       0x20 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_block_atmega128.o)
                0x0000000000000916                __eerd_block_m128
                0x000000000000091a                __eerd_blraw_m128
                0x0000000000000936                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000000936        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
                0x0000000000000936                exit
                0x0000000000000936                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000000936        0x4 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 *(.fini0)
                0x000000000000093a                _etext = .

.data           0x0000000000800100       0xe0 load address 0x000000000000093a
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
 .data          0x0000000000800100        0x0 main.o
 .data          0x0000000000800100        0x0 science_hardcoded.o
 .data          0x0000000000800100        0x0 idle.o
 .data          0x0000000000800100        0x0 retract.o
 .data          0x0000000000800100        0x0 safety.o
 .data          0x0000000000800100        0x0 RSXAVRD.o
 .data          0x0000000000800100        0x0 telemetry.o
 .data          0x0000000000800100        0x0 observation.o
 .data          0x0000000000800100        0x0 off.o
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_byte_atmega128.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_word_atmega128.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_block_atmega128.o)
 *(.data*)
 *(.rodata)
 .rodata        0x0000000000800100       0x12 RSXAVRD.o
 *(.rodata*)
 .rodata.str1.1
                0x0000000000800112        0xf main.o
 .rodata.str1.1
                0x0000000000800121       0x2c science_hardcoded.o
 .rodata.str1.1
                0x000000000080014d       0x14 idle.o
 .rodata.str1.1
                0x0000000000800161       0x1e retract.o
 .rodata.str1.1
                0x000000000080017f       0x1f safety.o
 .rodata.str1.1
                0x000000000080019e       0x38 observation.o
 .rodata.str1.1
                0x00000000008001d6        0xa off.o
 *(.gnu.linkonce.d*)
                0x00000000008001e0                . = ALIGN (0x2)
                0x00000000008001e0                _edata = .
                0x00000000008001e0                PROVIDE (__data_end, .)

.bss            0x00000000008001e0        0x8
                0x00000000008001e0                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x00000000008001e0        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
 .bss           0x00000000008001e0        0x0 main.o
 .bss           0x00000000008001e0        0x0 science_hardcoded.o
 .bss           0x00000000008001e0        0x1 idle.o
                0x00000000008001e0                ready
 .bss           0x00000000008001e1        0x0 retract.o
 .bss           0x00000000008001e1        0x0 safety.o
 .bss           0x00000000008001e1        0x4 RSXAVRD.o
                0x00000000008001e1                time
                0x00000000008001e3                calibration_flg
 .bss           0x00000000008001e5        0x0 telemetry.o
 .bss           0x00000000008001e5        0x0 observation.o
 .bss           0x00000000008001e5        0x0 off.o
 .bss           0x00000000008001e5        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .bss           0x00000000008001e5        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .bss           0x00000000008001e5        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .bss           0x00000000008001e5        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o)
 .bss           0x00000000008001e5        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o)
 .bss           0x00000000008001e5        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_byte_atmega128.o)
 .bss           0x00000000008001e5        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_word_atmega128.o)
 .bss           0x00000000008001e5        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_block_atmega128.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x00000000008001e5        0x1 retract.o
                0x00000000008001e5                plate_retracted_flg
 COMMON         0x00000000008001e6        0x2 telemetry.o
                0x00000000008001e6                current_address
                0x00000000008001e8                PROVIDE (__bss_end, .)
                0x000000000000093a                __data_load_start = LOADADDR (.data)
                0x0000000000000a1a                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x00000000008001e8        0x0
                0x00000000008001e8                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x00000000008001e8                PROVIDE (__noinit_end, .)
                0x00000000008001e8                _end = .
                0x00000000008001e8                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.user_signatures
 *(.user_signatures*)

.stab           0x0000000000000000     0x3828
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
 .stab          0x00000000000006cc      0x534 main.o
                                        0x540 (size before relaxing)
 .stab          0x0000000000000c00      0x360 science_hardcoded.o
                                        0x528 (size before relaxing)
 .stab          0x0000000000000f60      0x378 idle.o
                                        0x540 (size before relaxing)
 .stab          0x00000000000012d8      0x498 retract.o
                                        0x660 (size before relaxing)
 .stab          0x0000000000001770      0x300 safety.o
                                        0x4c8 (size before relaxing)
 .stab          0x0000000000001a70      0xed0 RSXAVRD.o
                                       0x1098 (size before relaxing)
 .stab          0x0000000000002940      0x45c telemetry.o
                                        0x624 (size before relaxing)
 .stab          0x0000000000002d9c      0x3fc observation.o
                                        0x5c4 (size before relaxing)
 .stab          0x0000000000003198      0x2d0 off.o
                                        0x450 (size before relaxing)
 .stab          0x0000000000003468       0x6c /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o)
                                         0x78 (size before relaxing)
 .stab          0x00000000000034d4       0xe4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o)
                                         0xf0 (size before relaxing)
 .stab          0x00000000000035b8      0x108 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_byte_atmega128.o)
                                        0x114 (size before relaxing)
 .stab          0x00000000000036c0       0x60 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_word_atmega128.o)
                                         0x6c (size before relaxing)
 .stab          0x0000000000003720      0x108 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_block_atmega128.o)
                                        0x114 (size before relaxing)

.stabstr        0x0000000000000000     0x1285
 *(.stabstr)
 .stabstr       0x0000000000000000     0x1285 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 main.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 science_hardcoded.o
 .comment       0x0000000000000000       0x12 idle.o
 .comment       0x0000000000000000       0x12 retract.o
 .comment       0x0000000000000000       0x12 safety.o
 .comment       0x0000000000000000       0x12 RSXAVRD.o
 .comment       0x0000000000000000       0x12 telemetry.o
 .comment       0x0000000000000000       0x12 observation.o
 .comment       0x0000000000000000       0x12 off.o

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(main.elf elf32-avr)
LOAD linker stubs
