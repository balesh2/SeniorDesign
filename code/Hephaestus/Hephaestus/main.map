Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_divmodhi4.o)
                              science.o (__divmodhi4)
/usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o (exit)
/usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
                              RSXAVRD.o (__do_copy_data)
/usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
                              idle.o (__do_clear_bss)
/usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_udivmodhi4.o)
                              /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_divmodhi4.o) (__udivmodhi4)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o)
                              telemetry.o (__eerd_word_m128)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o)
                              telemetry.o (__eeupd_block_m128)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_byte_atmega128.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o) (__eeupd_r18_m128)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_word_atmega128.o)
                              telemetry.o (__eeupd_word_m128)
/usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_block_atmega128.o)
                              /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o) (__eerd_blraw_m128)

Allocating common symbols
Common symbol       size              file

plate_retracted_flg
                    0x1               retract.o
current_address     0x2               telemetry.o

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800100 0x000000000000ff00 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
user_signatures  0x0000000000850000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800100
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
LOAD main.o
LOAD science.o
LOAD idle.o
LOAD retract.o
LOAD safety.o
LOAD RSXAVRD.o
LOAD telemetry.o
LOAD observation.o
LOAD off.o
START GROUP
LOAD /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libm.a
LOAD /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a
END GROUP

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x90e
 *(.vectors)
 .vectors       0x0000000000000000       0x8c /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x000000000000008c                . = ALIGN (0x2)
                0x000000000000008c                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x000000000000008c        0x0 linker stubs
 *(.trampolines*)
                0x000000000000008c                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x000000000000008c                __ctors_start = .
 *(.ctors)
                0x000000000000008c                __ctors_end = .
                0x000000000000008c                __dtors_start = .
 *(.dtors)
                0x000000000000008c                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x000000000000008c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
                0x000000000000008c                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x000000000000008c        0xc /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x0000000000000098       0x1a /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
                0x0000000000000098                __do_copy_data
 .init4         0x00000000000000b2       0x10 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
                0x00000000000000b2                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x00000000000000c2        0x8 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
 *(.init9)
 *(.text)
 .text          0x00000000000000ca        0x4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
                0x00000000000000ca                __vector_22
                0x00000000000000ca                __vector_28
                0x00000000000000ca                __vector_32
                0x00000000000000ca                __vector_34
                0x00000000000000ca                __vector_24
                0x00000000000000ca                __bad_interrupt
                0x00000000000000ca                __vector_31
                0x00000000000000ca                __vector_23
                0x00000000000000ca                __vector_30
                0x00000000000000ca                __vector_25
                0x00000000000000ca                __vector_11
                0x00000000000000ca                __vector_13
                0x00000000000000ca                __vector_17
                0x00000000000000ca                __vector_19
                0x00000000000000ca                __vector_27
                0x00000000000000ca                __vector_33
                0x00000000000000ca                __vector_9
                0x00000000000000ca                __vector_21
                0x00000000000000ca                __vector_15
                0x00000000000000ca                __vector_29
                0x00000000000000ca                __vector_8
                0x00000000000000ca                __vector_26
                0x00000000000000ca                __vector_14
                0x00000000000000ca                __vector_10
                0x00000000000000ca                __vector_16
                0x00000000000000ca                __vector_18
                0x00000000000000ca                __vector_20
 .text          0x00000000000000ce        0x0 main.o
 .text          0x00000000000000ce       0xde science.o
                0x00000000000000ce                science
 .text          0x00000000000001ac       0x2e idle.o
                0x00000000000001ac                __vector_7
                0x00000000000001ca                idle
 .text          0x00000000000001da       0xf8 retract.o
                0x00000000000001da                retract
                0x0000000000000242                __vector_6
                0x000000000000029a                extend
 .text          0x00000000000002d2        0x6 safety.o
                0x00000000000002d2                safety
 .text          0x00000000000002d8      0x48c RSXAVRD.o
                0x00000000000002d8                get_time
                0x00000000000002e2                get_calibration_status
                0x00000000000002e8                __vector_1
                0x000000000000030a                __vector_2
                0x000000000000032c                __vector_3
                0x000000000000034e                __vector_4
                0x0000000000000370                __vector_5
                0x0000000000000392                __vector_12
                0x00000000000003b0                AVR_init
                0x00000000000003fe                timer_counter_enable
                0x0000000000000440                timer_event_enable
                0x0000000000000490                send_code
                0x00000000000004ea                camera_enable
                0x000000000000052a                touch_sensor_check
                0x0000000000000532                temperature_probe_sample
                0x0000000000000548                motor_calibration_enable
                0x00000000000005b2                motor_pwr
                0x0000000000000618                motor_dir
                0x0000000000000678                motor_step
 .text          0x0000000000000764       0x74 telemetry.o
                0x0000000000000764                telemetry_init
                0x0000000000000780                telemetry_send_code
                0x0000000000000786                eeprom_log
 .text          0x00000000000007d8       0x32 observation.o
                0x00000000000007d8                observation
 .text          0x000000000000080a        0x2 off.o
                0x000000000000080a                off
 .text          0x000000000000080c        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_divmodhi4.o)
 .text          0x000000000000080c        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text          0x000000000000080c        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text          0x000000000000080c        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text          0x000000000000080c        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_udivmodhi4.o)
 .text          0x000000000000080c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o)
 .text          0x000000000000080c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o)
 .text          0x000000000000080c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_byte_atmega128.o)
 .text          0x000000000000080c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_word_atmega128.o)
 .text          0x000000000000080c        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_block_atmega128.o)
                0x000000000000080c                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x000000000000080c       0x34 main.o
                0x000000000000080c                main
 .text.libgcc.mul
                0x0000000000000840        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_divmodhi4.o)
 .text.libgcc.div
                0x0000000000000840       0x28 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_divmodhi4.o)
                0x0000000000000840                __divmodhi4
                0x0000000000000840                _div
 .text.libgcc   0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_divmodhi4.o)
 .text.libgcc.prologue
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_divmodhi4.o)
 .text.libgcc.builtins
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_divmodhi4.o)
 .text.libgcc.fmul
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_divmodhi4.o)
 .text.libgcc.fixed
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_divmodhi4.o)
 .text.libgcc.mul
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc.div
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.fixed
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .text.libgcc.mul
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc   0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.fixed
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .text.libgcc.mul
                0x0000000000000868        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_udivmodhi4.o)
 .text.libgcc.div
                0x0000000000000868       0x28 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_udivmodhi4.o)
                0x0000000000000868                __udivmodhi4
 .text.libgcc   0x0000000000000890        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_udivmodhi4.o)
 .text.libgcc.prologue
                0x0000000000000890        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_udivmodhi4.o)
 .text.libgcc.builtins
                0x0000000000000890        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_udivmodhi4.o)
 .text.libgcc.fmul
                0x0000000000000890        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_udivmodhi4.o)
 .text.libgcc.fixed
                0x0000000000000890        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_udivmodhi4.o)
 .text.avr-libc
                0x0000000000000890        0xc /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o)
                0x0000000000000890                __eerd_word_m128
 .text.avr-libc
                0x000000000000089c       0x20 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o)
                0x000000000000089c                __eeupd_block_m128
 .text.avr-libc
                0x00000000000008bc       0x22 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_byte_atmega128.o)
                0x00000000000008bc                __eeupd_byte_m128
                0x00000000000008be                __eeupd_r18_m128
 .text.avr-libc
                0x00000000000008de        0xc /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_word_atmega128.o)
                0x00000000000008de                __eeupd_word_m128
 .text.avr-libc
                0x00000000000008ea       0x20 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_block_atmega128.o)
                0x00000000000008ea                __eerd_block_m128
                0x00000000000008ee                __eerd_blraw_m128
                0x000000000000090a                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x000000000000090a        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
                0x000000000000090a                exit
                0x000000000000090a                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x000000000000090a        0x4 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 *(.fini0)
                0x000000000000090e                _etext = .

.data           0x0000000000800100       0x12 load address 0x000000000000090e
                0x0000000000800100                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
 .data          0x0000000000800100        0x0 main.o
 .data          0x0000000000800100        0x0 science.o
 .data          0x0000000000800100        0x0 idle.o
 .data          0x0000000000800100        0x0 retract.o
 .data          0x0000000000800100        0x0 safety.o
 .data          0x0000000000800100        0x0 RSXAVRD.o
 .data          0x0000000000800100        0x0 telemetry.o
 .data          0x0000000000800100        0x0 observation.o
 .data          0x0000000000800100        0x0 off.o
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_divmodhi4.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_udivmodhi4.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_byte_atmega128.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_word_atmega128.o)
 .data          0x0000000000800100        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_block_atmega128.o)
 *(.data*)
 *(.rodata)
 .rodata        0x0000000000800100       0x12 RSXAVRD.o
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800112                . = ALIGN (0x2)
                0x0000000000800112                _edata = .
                0x0000000000800112                PROVIDE (__data_end, .)

.bss            0x0000000000800112        0x8
                0x0000000000800112                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800112        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
 .bss           0x0000000000800112        0x0 main.o
 .bss           0x0000000000800112        0x0 science.o
 .bss           0x0000000000800112        0x1 idle.o
                0x0000000000800112                ready
 .bss           0x0000000000800113        0x0 retract.o
 .bss           0x0000000000800113        0x0 safety.o
 .bss           0x0000000000800113        0x4 RSXAVRD.o
                0x0000000000800113                time
                0x0000000000800115                calibration_flg
 .bss           0x0000000000800117        0x0 telemetry.o
 .bss           0x0000000000800117        0x0 observation.o
 .bss           0x0000000000800117        0x0 off.o
 .bss           0x0000000000800117        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_divmodhi4.o)
 .bss           0x0000000000800117        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_exit.o)
 .bss           0x0000000000800117        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_copy_data.o)
 .bss           0x0000000000800117        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_clear_bss.o)
 .bss           0x0000000000800117        0x0 /usr/lib/gcc/avr/4.8.2/avr51/libgcc.a(_udivmodhi4.o)
 .bss           0x0000000000800117        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o)
 .bss           0x0000000000800117        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o)
 .bss           0x0000000000800117        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_byte_atmega128.o)
 .bss           0x0000000000800117        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_word_atmega128.o)
 .bss           0x0000000000800117        0x0 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_block_atmega128.o)
 *(.bss*)
 *(COMMON)
 COMMON         0x0000000000800117        0x1 retract.o
                0x0000000000800117                plate_retracted_flg
 COMMON         0x0000000000800118        0x2 telemetry.o
                0x0000000000800118                current_address
                0x000000000080011a                PROVIDE (__bss_end, .)
                0x000000000000090e                __data_load_start = LOADADDR (.data)
                0x0000000000000920                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x000000000080011a        0x0
                0x000000000080011a                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x000000000080011a                PROVIDE (__noinit_end, .)
                0x000000000080011a                _end = .
                0x000000000080011a                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.user_signatures
 *(.user_signatures*)

.stab           0x0000000000000000     0x3798
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o
 .stab          0x00000000000006cc      0x51c main.o
                                        0x528 (size before relaxing)
 .stab          0x0000000000000be8      0x408 science.o
                                        0x5d0 (size before relaxing)
 .stab          0x0000000000000ff0      0x378 idle.o
                                        0x540 (size before relaxing)
 .stab          0x0000000000001368      0x480 retract.o
                                        0x648 (size before relaxing)
 .stab          0x00000000000017e8      0x2f4 safety.o
                                        0x4bc (size before relaxing)
 .stab          0x0000000000001adc      0xec4 RSXAVRD.o
                                       0x108c (size before relaxing)
 .stab          0x00000000000029a0      0x468 telemetry.o
                                        0x63c (size before relaxing)
 .stab          0x0000000000002e08      0x330 observation.o
                                        0x4f8 (size before relaxing)
 .stab          0x0000000000003138      0x2a0 off.o
                                        0x2ac (size before relaxing)
 .stab          0x00000000000033d8       0x6c /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_word_atmega128.o)
                                         0x78 (size before relaxing)
 .stab          0x0000000000003444       0xe4 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_block_atmega128.o)
                                         0xf0 (size before relaxing)
 .stab          0x0000000000003528      0x108 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_byte_atmega128.o)
                                        0x114 (size before relaxing)
 .stab          0x0000000000003630       0x60 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eeupd_word_atmega128.o)
                                         0x6c (size before relaxing)
 .stab          0x0000000000003690      0x108 /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/libc.a(eerd_block_atmega128.o)
                                        0x114 (size before relaxing)

.stabstr        0x0000000000000000     0x127e
 *(.stabstr)
 .stabstr       0x0000000000000000     0x127e /usr/lib/gcc/avr/4.8.2/../../../avr/lib/avr51/crtm128.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 main.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 science.o
 .comment       0x0000000000000000       0x12 idle.o
 .comment       0x0000000000000000       0x12 retract.o
 .comment       0x0000000000000000       0x12 safety.o
 .comment       0x0000000000000000       0x12 RSXAVRD.o
 .comment       0x0000000000000000       0x12 telemetry.o
 .comment       0x0000000000000000       0x12 observation.o
 .comment       0x0000000000000000       0x12 off.o

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)
OUTPUT(main.elf elf32-avr)
LOAD linker stubs
