
sd_card_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00005fee  00006082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800130  00800130  000060b2  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000060b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000081  00000000  00000000  00006780  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000188  00000000  00000000  00006808  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005461  00000000  00000000  00006990  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b32  00000000  00000000  0000bdf1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019bb  00000000  00000000  0000c923  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f74  00000000  00000000  0000e2e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a75  00000000  00000000  0000f254  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009e7e  00000000  00000000  0000fcc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  00019b47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 25 07 	jmp	0xe4a	; 0xe4a <__vector_1>
       8:	0c 94 36 07 	jmp	0xe6c	; 0xe6c <__vector_2>
       c:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <__vector_3>
      10:	0c 94 58 07 	jmp	0xeb0	; 0xeb0 <__vector_4>
      14:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__vector_5>
      18:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__vector_6>
      1c:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__vector_7>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 98 07 	jmp	0xf30	; 0xf30 <__vector_12>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee ee       	ldi	r30, 0xEE	; 238
      a0:	ff e5       	ldi	r31, 0x5F	; 95
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 33       	cpi	r26, 0x30	; 48
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
      b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e3       	ldi	r26, 0x30	; 48
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a1 34       	cpi	r26, 0x41	; 65
      c0:	b1 07       	cpc	r27, r17
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <main>
      c8:	0c 94 f5 2f 	jmp	0x5fea	; 0x5fea <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <wait_ready>:
)
{
	BYTE d;


	Timer2 = wt / 10;
      d0:	6a e0       	ldi	r22, 0x0A	; 10
      d2:	70 e0       	ldi	r23, 0x00	; 0
      d4:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <__udivmodhi4>
      d8:	60 93 30 01 	sts	0x0130, r22
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
      dc:	2f ef       	ldi	r18, 0xFF	; 255
      de:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
      e0:	77 9b       	sbis	0x0e, 7	; 14
      e2:	fe cf       	rjmp	.-4      	; 0xe0 <wait_ready+0x10>
	return SPDR;
      e4:	9f b1       	in	r25, 0x0f	; 15


	Timer2 = wt / 10;
	do{
		d = xchg_spi(0xFF);
		Timer2--;
      e6:	80 91 30 01 	lds	r24, 0x0130
      ea:	81 50       	subi	r24, 0x01	; 1
      ec:	80 93 30 01 	sts	0x0130, r24
	}while (d != 0xFF && Timer2);
      f0:	9f 3f       	cpi	r25, 0xFF	; 255
      f2:	39 f0       	breq	.+14     	; 0x102 <wait_ready+0x32>
      f4:	80 91 30 01 	lds	r24, 0x0130
      f8:	88 23       	and	r24, r24
      fa:	89 f7       	brne	.-30     	; 0xde <wait_ready+0xe>
      fc:	80 e0       	ldi	r24, 0x00	; 0
      fe:	90 e0       	ldi	r25, 0x00	; 0
     100:	08 95       	ret
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	90 e0       	ldi	r25, 0x00	; 0

	return (d == 0xFF) ? 1 : 0;
}
     106:	08 95       	ret

00000108 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
     108:	c0 98       	cbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     10a:	8f ef       	ldi	r24, 0xFF	; 255
     10c:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     10e:	77 9b       	sbis	0x0e, 7	; 14
     110:	fe cf       	rjmp	.-4      	; 0x10e <select+0x6>
	return SPDR;
     112:	8f b1       	in	r24, 0x0f	; 15
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
     114:	84 ef       	ldi	r24, 0xF4	; 244
     116:	91 e0       	ldi	r25, 0x01	; 1
     118:	0e 94 68 00 	call	0xd0	; 0xd0 <wait_ready>
     11c:	00 97       	sbiw	r24, 0x00	; 0
     11e:	49 f4       	brne	.+18     	; 0x132 <select+0x2a>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     120:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     122:	8f ef       	ldi	r24, 0xFF	; 255
     124:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     126:	77 9b       	sbis	0x0e, 7	; 14
     128:	fe cf       	rjmp	.-4      	; 0x126 <select+0x1e>
	return SPDR;
     12a:	8f b1       	in	r24, 0x0f	; 15
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
     136:	08 95       	ret

00000138 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     138:	cf 92       	push	r12
     13a:	df 92       	push	r13
     13c:	ef 92       	push	r14
     13e:	ff 92       	push	r15
     140:	cf 93       	push	r28
     142:	c8 2f       	mov	r28, r24
     144:	6a 01       	movw	r12, r20
     146:	7b 01       	movw	r14, r22
	BYTE n, res;
	

	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     148:	87 fd       	sbrc	r24, 7
     14a:	59 c0       	rjmp	.+178    	; 0x1fe <send_cmd+0xc6>
		if (res > 1) // > 1
		 return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     14c:	cc 30       	cpi	r28, 0x0C	; 12
     14e:	89 f0       	breq	.+34     	; 0x172 <send_cmd+0x3a>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     150:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     152:	8f ef       	ldi	r24, 0xFF	; 255
     154:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     156:	77 9b       	sbis	0x0e, 7	; 14
     158:	fe cf       	rjmp	.-4      	; 0x156 <send_cmd+0x1e>
	return SPDR;
     15a:	8f b1       	in	r24, 0x0f	; 15
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()){
     15c:	0e 94 84 00 	call	0x108	; 0x108 <select>
     160:	00 97       	sbiw	r24, 0x00	; 0
     162:	39 f4       	brne	.+14     	; 0x172 <send_cmd+0x3a>
		 return 0xFF;
     164:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     166:	cf 91       	pop	r28
     168:	ff 90       	pop	r15
     16a:	ef 90       	pop	r14
     16c:	df 90       	pop	r13
     16e:	cf 90       	pop	r12
     170:	08 95       	ret
		 return 0xFF;
		}
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     172:	8c 2f       	mov	r24, r28
     174:	80 64       	ori	r24, 0x40	; 64
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     176:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     178:	77 9b       	sbis	0x0e, 7	; 14
     17a:	fe cf       	rjmp	.-4      	; 0x178 <send_cmd+0x40>
	return SPDR;
     17c:	8f b1       	in	r24, 0x0f	; 15
		}
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     17e:	8f 2d       	mov	r24, r15
     180:	99 27       	eor	r25, r25
     182:	aa 27       	eor	r26, r26
     184:	bb 27       	eor	r27, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     186:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     188:	77 9b       	sbis	0x0e, 7	; 14
     18a:	fe cf       	rjmp	.-4      	; 0x188 <send_cmd+0x50>
	return SPDR;
     18c:	8f b1       	in	r24, 0x0f	; 15
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     18e:	c7 01       	movw	r24, r14
     190:	aa 27       	eor	r26, r26
     192:	bb 27       	eor	r27, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     194:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     196:	77 9b       	sbis	0x0e, 7	; 14
     198:	fe cf       	rjmp	.-4      	; 0x196 <send_cmd+0x5e>
	return SPDR;
     19a:	8f b1       	in	r24, 0x0f	; 15

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     19c:	77 27       	eor	r23, r23
     19e:	6f 2d       	mov	r22, r15
     1a0:	5e 2d       	mov	r21, r14
     1a2:	4d 2d       	mov	r20, r13
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     1a4:	4f b9       	out	0x0f, r20	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     1a6:	77 9b       	sbis	0x0e, 7	; 14
     1a8:	fe cf       	rjmp	.-4      	; 0x1a6 <send_cmd+0x6e>
	return SPDR;
     1aa:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     1ac:	cf b8       	out	0x0f, r12	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     1ae:	77 9b       	sbis	0x0e, 7	; 14
     1b0:	fe cf       	rjmp	.-4      	; 0x1ae <send_cmd+0x76>
	return SPDR;
     1b2:	8f b1       	in	r24, 0x0f	; 15
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     1b4:	cc 23       	and	r28, r28
     1b6:	c9 f0       	breq	.+50     	; 0x1ea <send_cmd+0xb2>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     1b8:	c8 30       	cpi	r28, 0x08	; 8
     1ba:	c9 f4       	brne	.+50     	; 0x1ee <send_cmd+0xb6>
     1bc:	87 e8       	ldi	r24, 0x87	; 135
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     1be:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     1c0:	77 9b       	sbis	0x0e, 7	; 14
     1c2:	fe cf       	rjmp	.-4      	; 0x1c0 <send_cmd+0x88>
	return SPDR;
     1c4:	8f b1       	in	r24, 0x0f	; 15
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     1c6:	cc 30       	cpi	r28, 0x0C	; 12
     1c8:	a1 f0       	breq	.+40     	; 0x1f2 <send_cmd+0xba>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     1ca:	9a e0       	ldi	r25, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     1cc:	2f ef       	ldi	r18, 0xFF	; 255
     1ce:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     1d0:	77 9b       	sbis	0x0e, 7	; 14
     1d2:	fe cf       	rjmp	.-4      	; 0x1d0 <send_cmd+0x98>
	return SPDR;
     1d4:	8f b1       	in	r24, 0x0f	; 15
	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);
     1d6:	87 ff       	sbrs	r24, 7
     1d8:	c6 cf       	rjmp	.-116    	; 0x166 <send_cmd+0x2e>
     1da:	91 50       	subi	r25, 0x01	; 1
     1dc:	c1 f7       	brne	.-16     	; 0x1ce <send_cmd+0x96>

	return res;			/* Return with the response value */
}
     1de:	cf 91       	pop	r28
     1e0:	ff 90       	pop	r15
     1e2:	ef 90       	pop	r14
     1e4:	df 90       	pop	r13
     1e6:	cf 90       	pop	r12
     1e8:	08 95       	ret
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     1ea:	85 e9       	ldi	r24, 0x95	; 149
     1ec:	e8 cf       	rjmp	.-48     	; 0x1be <send_cmd+0x86>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	e6 cf       	rjmp	.-52     	; 0x1be <send_cmd+0x86>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     1f2:	8f ef       	ldi	r24, 0xFF	; 255
     1f4:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     1f6:	77 9b       	sbis	0x0e, 7	; 14
     1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <send_cmd+0xbe>
	return SPDR;
     1fa:	8f b1       	in	r24, 0x0f	; 15
     1fc:	e6 cf       	rjmp	.-52     	; 0x1ca <send_cmd+0x92>
	BYTE n, res;
	

	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     1fe:	87 e3       	ldi	r24, 0x37	; 55
     200:	40 e0       	ldi	r20, 0x00	; 0
     202:	50 e0       	ldi	r21, 0x00	; 0
     204:	ba 01       	movw	r22, r20
     206:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
		if (res > 1) // > 1
     20a:	82 30       	cpi	r24, 0x02	; 2
     20c:	08 f0       	brcs	.+2      	; 0x210 <send_cmd+0xd8>
     20e:	ab cf       	rjmp	.-170    	; 0x166 <send_cmd+0x2e>
{
	BYTE n, res;
	

	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     210:	cf 77       	andi	r28, 0x7F	; 127
     212:	9c cf       	rjmp	.-200    	; 0x14c <send_cmd+0x14>

00000214 <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     214:	fc 01       	movw	r30, r24
	BYTE token;

	
	Timer1 = 20;
     216:	84 e1       	ldi	r24, 0x14	; 20
     218:	80 93 31 01 	sts	0x0131, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     21c:	9f ef       	ldi	r25, 0xFF	; 255
     21e:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     220:	77 9b       	sbis	0x0e, 7	; 14
     222:	fe cf       	rjmp	.-4      	; 0x220 <rcvr_datablock+0xc>
	return SPDR;
     224:	8f b1       	in	r24, 0x0f	; 15

	
	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
     226:	8f 3f       	cpi	r24, 0xFF	; 255
     228:	39 f4       	brne	.+14     	; 0x238 <rcvr_datablock+0x24>
     22a:	80 91 31 01 	lds	r24, 0x0131
     22e:	88 23       	and	r24, r24
     230:	b1 f7       	brne	.-20     	; 0x21e <rcvr_datablock+0xa>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	08 95       	ret
     238:	8e 3f       	cpi	r24, 0xFE	; 254
     23a:	e1 f4       	brne	.+56     	; 0x274 <rcvr_datablock+0x60>
	BYTE *p,	/* Data read buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF;
     23c:	8f ef       	ldi	r24, 0xFF	; 255
     23e:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     240:	77 9b       	sbis	0x0e, 7	; 14
     242:	fe cf       	rjmp	.-4      	; 0x240 <rcvr_datablock+0x2c>
		*p++ = SPDR;
     244:	9f b1       	in	r25, 0x0f	; 15
     246:	90 83       	st	Z, r25
		SPDR = 0xFF;
     248:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     24a:	77 9b       	sbis	0x0e, 7	; 14
     24c:	fe cf       	rjmp	.-4      	; 0x24a <rcvr_datablock+0x36>
		*p++ = SPDR;
     24e:	9f b1       	in	r25, 0x0f	; 15
     250:	91 83       	std	Z+1, r25	; 0x01
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
int rcvr_datablock (
     252:	32 96       	adiw	r30, 0x02	; 2
		loop_until_bit_is_set(SPSR, SPIF);
		*p++ = SPDR;
		SPDR = 0xFF;
		loop_until_bit_is_set(SPSR, SPIF);
		*p++ = SPDR;
	} while (cnt -= 2);
     254:	62 50       	subi	r22, 0x02	; 2
     256:	70 40       	sbci	r23, 0x00	; 0
     258:	91 f7       	brne	.-28     	; 0x23e <rcvr_datablock+0x2a>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     25a:	8f ef       	ldi	r24, 0xFF	; 255
     25c:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     25e:	77 9b       	sbis	0x0e, 7	; 14
     260:	fe cf       	rjmp	.-4      	; 0x25e <rcvr_datablock+0x4a>
	return SPDR;
     262:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     268:	77 9b       	sbis	0x0e, 7	; 14
     26a:	fe cf       	rjmp	.-4      	; 0x268 <rcvr_datablock+0x54>
	return SPDR;
     26c:	8f b1       	in	r24, 0x0f	; 15
     26e:	81 e0       	ldi	r24, 0x01	; 1
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	08 95       	ret
	
	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     278:	08 95       	ret

0000027a <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	0f 92       	push	r0
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	8c 01       	movw	r16, r24
	BYTE resp;


	if (!wait_ready(500)) return 0;
     28a:	84 ef       	ldi	r24, 0xF4	; 244
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	69 83       	std	Y+1, r22	; 0x01
     290:	0e 94 68 00 	call	0xd0	; 0xd0 <wait_ready>
     294:	69 81       	ldd	r22, Y+1	; 0x01
     296:	00 97       	sbiw	r24, 0x00	; 0
     298:	61 f1       	breq	.+88     	; 0x2f2 <xmit_datablock+0x78>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     29a:	6f b9       	out	0x0f, r22	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     29c:	77 9b       	sbis	0x0e, 7	; 14
     29e:	fe cf       	rjmp	.-4      	; 0x29c <xmit_datablock+0x22>
	return SPDR;
     2a0:	8f b1       	in	r24, 0x0f	; 15


	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
     2a2:	6d 3f       	cpi	r22, 0xFD	; 253
     2a4:	71 f1       	breq	.+92     	; 0x302 <xmit_datablock+0x88>
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
     2a6:	c8 01       	movw	r24, r16
     2a8:	80 50       	subi	r24, 0x00	; 0
     2aa:	9e 4f       	sbci	r25, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++;
     2ac:	f8 01       	movw	r30, r16
     2ae:	20 81       	ld	r18, Z
     2b0:	2f b9       	out	0x0f, r18	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2b2:	77 9b       	sbis	0x0e, 7	; 14
     2b4:	fe cf       	rjmp	.-4      	; 0x2b2 <xmit_datablock+0x38>
		SPDR = *p++;
     2b6:	f8 01       	movw	r30, r16
     2b8:	21 81       	ldd	r18, Z+1	; 0x01
     2ba:	2f b9       	out	0x0f, r18	; 15
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
     2bc:	0e 5f       	subi	r16, 0xFE	; 254
     2be:	1f 4f       	sbci	r17, 0xFF	; 255
{
	do {
		SPDR = *p++;
		loop_until_bit_is_set(SPSR, SPIF);
		SPDR = *p++;
		loop_until_bit_is_set(SPSR, SPIF);
     2c0:	77 9b       	sbis	0x0e, 7	; 14
     2c2:	fe cf       	rjmp	.-4      	; 0x2c0 <xmit_datablock+0x46>
	} while (cnt -= 2);
     2c4:	80 17       	cp	r24, r16
     2c6:	91 07       	cpc	r25, r17
     2c8:	89 f7       	brne	.-30     	; 0x2ac <xmit_datablock+0x32>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     2ce:	77 9b       	sbis	0x0e, 7	; 14
     2d0:	fe cf       	rjmp	.-4      	; 0x2ce <xmit_datablock+0x54>
	return SPDR;
     2d2:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     2d4:	8f ef       	ldi	r24, 0xFF	; 255
     2d6:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     2d8:	77 9b       	sbis	0x0e, 7	; 14
     2da:	fe cf       	rjmp	.-4      	; 0x2d8 <xmit_datablock+0x5e>
	return SPDR;
     2dc:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     2de:	8f ef       	ldi	r24, 0xFF	; 255
     2e0:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     2e2:	77 9b       	sbis	0x0e, 7	; 14
     2e4:	fe cf       	rjmp	.-4      	; 0x2e2 <xmit_datablock+0x68>
	return SPDR;
     2e6:	2f b1       	in	r18, 0x0f	; 15
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
		xchg_spi(0xFF);
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     2e8:	2f 71       	andi	r18, 0x1F	; 31
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	25 30       	cpi	r18, 0x05	; 5
     2f0:	11 f0       	breq	.+4      	; 0x2f6 <xmit_datablock+0x7c>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
}
     2f6:	0f 90       	pop	r0
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	08 95       	ret
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	90 e0       	ldi	r25, 0x00	; 0
}
     306:	0f 90       	pop	r0
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	08 95       	ret

00000312 <mmc_disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_initialize (void)
{
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	00 d0       	rcall	.+0      	; 0x320 <mmc_disk_initialize+0xe>
     320:	00 d0       	rcall	.+0      	; 0x322 <mmc_disk_initialize+0x10>
     322:	cd b7       	in	r28, 0x3d	; 61
     324:	de b7       	in	r29, 0x3e	; 62
{
	/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
	// N/a for our design

	/* Configure MOSI/MISO/SCLK/CS pins */
	DDRB |= 0x07;
     326:	87 b3       	in	r24, 0x17	; 23
     328:	87 60       	ori	r24, 0x07	; 7
     32a:	87 bb       	out	0x17, r24	; 23

	/* Enable SPI module in SPI mode 0 */
	//Enable AVR SPI as Master, SCK as Fosc/64 = 250kHz, SPI mode 0
	SPCR = (1<<SPE | 1<<MSTR | 1<<SPR1);
     32c:	82 e5       	ldi	r24, 0x52	; 82
     32e:	8d b9       	out	0x0d, r24	; 13
	//power_off();						/* Turn off the socket power to reset the card */
	//for (Timer1 = 10; Timer1; ) ;		/* Wait for 100ms */
	//if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */

	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
     330:	69 9a       	sbi	0x0d, 1	; 13
     332:	68 98       	cbi	0x0d, 0	; 13
     334:	8a e0       	ldi	r24, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     336:	9f ef       	ldi	r25, 0xFF	; 255
     338:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     33a:	77 9b       	sbis	0x0e, 7	; 14
     33c:	fe cf       	rjmp	.-4      	; 0x33a <mmc_disk_initialize+0x28>
	return SPDR;
     33e:	2f b1       	in	r18, 0x0f	; 15
     340:	81 50       	subi	r24, 0x01	; 1
	//if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */

	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
	
	for (n = 10; n; n--) xchg_spi(0xFF);	 /*80 dummy clocks */
     342:	d1 f7       	brne	.-12     	; 0x338 <mmc_disk_initialize+0x26>
	
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {	/* Put the card SPI mode */
     344:	40 e0       	ldi	r20, 0x00	; 0
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	ba 01       	movw	r22, r20
     34a:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     34e:	81 30       	cpi	r24, 0x01	; 1
     350:	31 f1       	breq	.+76     	; 0x39e <mmc_disk_initialize+0x8c>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
     352:	00 e0       	ldi	r16, 0x00	; 0
		}
	}
	CardType = ty;
     354:	00 93 32 01 	sts	0x0132, r16
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     358:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     35e:	77 9b       	sbis	0x0e, 7	; 14
     360:	fe cf       	rjmp	.-4      	; 0x35e <mmc_disk_initialize+0x4c>
	return SPDR;
     362:	8f b1       	in	r24, 0x0f	; 15
	CardType = ty;
	deselect();

	

	if (ty) {			/* Initialization succeded */
     364:	00 23       	and	r16, r16
     366:	99 f4       	brne	.+38     	; 0x38e <mmc_disk_initialize+0x7c>

static
void power_off (void)
{
	/* Disable SPI function */
	SPCR &= ~(1<<SPE | 1<<MSTR | 1<<SPR1);
     368:	8d b1       	in	r24, 0x0d	; 13
     36a:	8d 7a       	andi	r24, 0xAD	; 173
     36c:	8d b9       	out	0x0d, r24	; 13

	/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
	DDRB &= ~(0x0F);
     36e:	87 b3       	in	r24, 0x17	; 23
     370:	80 7f       	andi	r24, 0xF0	; 240
     372:	87 bb       	out	0x17, r24	; 23
	}
	else {			/* Initialization failed */
		power_off();
	}

	return Stat;
     374:	80 91 0d 01 	lds	r24, 0x010D
}
     378:	0f 90       	pop	r0
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	1f 91       	pop	r17
     386:	0f 91       	pop	r16
     388:	ff 90       	pop	r15
     38a:	ef 90       	pop	r14
     38c:	08 95       	ret
	deselect();

	

	if (ty) {			/* Initialization succeded */
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     38e:	80 91 0d 01 	lds	r24, 0x010D
     392:	8e 7f       	andi	r24, 0xFE	; 254
     394:	80 93 0d 01 	sts	0x010D, r24
		FCLK_FAST();
     398:	69 98       	cbi	0x0d, 1	; 13
     39a:	68 9a       	sbi	0x0d, 0	; 13
     39c:	eb cf       	rjmp	.-42     	; 0x374 <mmc_disk_initialize+0x62>
	
	for (n = 10; n; n--) xchg_spi(0xFF);	 /*80 dummy clocks */
	
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {	/* Put the card SPI mode */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     39e:	84 e6       	ldi	r24, 0x64	; 100
     3a0:	80 93 31 01 	sts	0x0131, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
     3a4:	88 e0       	ldi	r24, 0x08	; 8
     3a6:	4a ea       	ldi	r20, 0xAA	; 170
     3a8:	51 e0       	ldi	r21, 0x01	; 1
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	09 f0       	breq	.+2      	; 0x3b8 <mmc_disk_initialize+0xa6>
     3b6:	44 c0       	rjmp	.+136    	; 0x440 <mmc_disk_initialize+0x12e>
     3b8:	7e 01       	movw	r14, r28
     3ba:	08 94       	sec
     3bc:	e1 1c       	adc	r14, r1
     3be:	f1 1c       	adc	r15, r1

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_initialize (void)
     3c0:	8e 01       	movw	r16, r28
     3c2:	0b 5f       	subi	r16, 0xFB	; 251
     3c4:	1f 4f       	sbci	r17, 0xFF	; 255
     3c6:	f7 01       	movw	r30, r14
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     3c8:	9f ef       	ldi	r25, 0xFF	; 255
     3ca:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     3cc:	77 9b       	sbis	0x0e, 7	; 14
     3ce:	fe cf       	rjmp	.-4      	; 0x3cc <mmc_disk_initialize+0xba>
	return SPDR;
     3d0:	8f b1       	in	r24, 0x0f	; 15
	
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {	/* Put the card SPI mode */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */				
     3d2:	81 93       	st	Z+, r24
     3d4:	e0 17       	cp	r30, r16
     3d6:	f1 07       	cpc	r31, r17
     3d8:	c1 f7       	brne	.-16     	; 0x3ca <mmc_disk_initialize+0xb8>
				
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */	
     3da:	8b 81       	ldd	r24, Y+3	; 0x03
     3dc:	81 30       	cpi	r24, 0x01	; 1
     3de:	09 f0       	breq	.+2      	; 0x3e2 <mmc_disk_initialize+0xd0>
     3e0:	b8 cf       	rjmp	.-144    	; 0x352 <mmc_disk_initialize+0x40>
     3e2:	8c 81       	ldd	r24, Y+4	; 0x04
     3e4:	8a 3a       	cpi	r24, 0xAA	; 170
     3e6:	09 f0       	breq	.+2      	; 0x3ea <mmc_disk_initialize+0xd8>
     3e8:	b4 cf       	rjmp	.-152    	; 0x352 <mmc_disk_initialize+0x40>
			
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     3ea:	80 91 31 01 	lds	r24, 0x0131
     3ee:	88 23       	and	r24, r24
     3f0:	49 f0       	breq	.+18     	; 0x404 <mmc_disk_initialize+0xf2>
     3f2:	89 ea       	ldi	r24, 0xA9	; 169
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	60 e0       	ldi	r22, 0x00	; 0
     3fa:	70 e4       	ldi	r23, 0x40	; 64
     3fc:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     400:	88 23       	and	r24, r24
     402:	99 f7       	brne	.-26     	; 0x3ea <mmc_disk_initialize+0xd8>
				
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */						
     404:	80 91 31 01 	lds	r24, 0x0131
     408:	88 23       	and	r24, r24
     40a:	09 f4       	brne	.+2      	; 0x40e <mmc_disk_initialize+0xfc>
     40c:	a2 cf       	rjmp	.-188    	; 0x352 <mmc_disk_initialize+0x40>
     40e:	8a e3       	ldi	r24, 0x3A	; 58
     410:	40 e0       	ldi	r20, 0x00	; 0
     412:	50 e0       	ldi	r21, 0x00	; 0
     414:	ba 01       	movw	r22, r20
     416:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     41a:	88 23       	and	r24, r24
     41c:	09 f0       	breq	.+2      	; 0x420 <mmc_disk_initialize+0x10e>
     41e:	99 cf       	rjmp	.-206    	; 0x352 <mmc_disk_initialize+0x40>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     424:	77 9b       	sbis	0x0e, 7	; 14
     426:	fe cf       	rjmp	.-4      	; 0x424 <mmc_disk_initialize+0x112>
	return SPDR;
     428:	9f b1       	in	r25, 0x0f	; 15
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */	
			
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */						
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF); /* line doesn't add light???? - nevermind it's good??? */
     42a:	f7 01       	movw	r30, r14
     42c:	91 93       	st	Z+, r25
     42e:	7f 01       	movw	r14, r30
     430:	0e 17       	cp	r16, r30
     432:	1f 07       	cpc	r17, r31
     434:	b1 f7       	brne	.-20     	; 0x422 <mmc_disk_initialize+0x110>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
     436:	89 81       	ldd	r24, Y+1	; 0x01
     438:	86 ff       	sbrs	r24, 6
     43a:	2b c0       	rjmp	.+86     	; 0x492 <mmc_disk_initialize+0x180>
     43c:	0c e0       	ldi	r16, 0x0C	; 12
     43e:	8a cf       	rjmp	.-236    	; 0x354 <mmc_disk_initialize+0x42>
				}
			}
		} else {							/* SDv1 or MMCv3 */			
			if (send_cmd(ACMD41, 0) <= 1) 	{
     440:	89 ea       	ldi	r24, 0xA9	; 169
     442:	40 e0       	ldi	r20, 0x00	; 0
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	ba 01       	movw	r22, r20
     448:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     44c:	82 30       	cpi	r24, 0x02	; 2
     44e:	f0 f0       	brcs	.+60     	; 0x48c <mmc_disk_initialize+0x17a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     450:	01 e0       	ldi	r16, 0x01	; 1
     452:	11 e0       	ldi	r17, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     454:	80 91 31 01 	lds	r24, 0x0131
     458:	88 23       	and	r24, r24
     45a:	41 f0       	breq	.+16     	; 0x46c <mmc_disk_initialize+0x15a>
     45c:	81 2f       	mov	r24, r17
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	ba 01       	movw	r22, r20
     464:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     468:	88 23       	and	r24, r24
     46a:	a1 f7       	brne	.-24     	; 0x454 <mmc_disk_initialize+0x142>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     46c:	80 91 31 01 	lds	r24, 0x0131
     470:	88 23       	and	r24, r24
     472:	09 f4       	brne	.+2      	; 0x476 <mmc_disk_initialize+0x164>
     474:	6e cf       	rjmp	.-292    	; 0x352 <mmc_disk_initialize+0x40>
     476:	80 e1       	ldi	r24, 0x10	; 16
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	52 e0       	ldi	r21, 0x02	; 2
     47c:	60 e0       	ldi	r22, 0x00	; 0
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     484:	88 23       	and	r24, r24
     486:	09 f0       	breq	.+2      	; 0x48a <mmc_disk_initialize+0x178>
     488:	64 cf       	rjmp	.-312    	; 0x352 <mmc_disk_initialize+0x40>
     48a:	64 cf       	rjmp	.-312    	; 0x354 <mmc_disk_initialize+0x42>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */			
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     48c:	02 e0       	ldi	r16, 0x02	; 2
     48e:	19 ea       	ldi	r17, 0xA9	; 169
     490:	e1 cf       	rjmp	.-62     	; 0x454 <mmc_disk_initialize+0x142>
			
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */						
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF); /* line doesn't add light???? - nevermind it's good??? */
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
     492:	04 e0       	ldi	r16, 0x04	; 4
     494:	5f cf       	rjmp	.-322    	; 0x354 <mmc_disk_initialize+0x42>

00000496 <mmc_disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_status (void)
{
	return Stat;
     496:	80 91 0d 01 	lds	r24, 0x010D
}
     49a:	08 95       	ret

0000049c <mmc_disk_read>:
DRESULT mmc_disk_read (
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     49c:	ff 92       	push	r15
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	ec 01       	movw	r28, r24
     4a8:	89 01       	movw	r16, r18
	BYTE cmd;
	

	if (!count) {
     4aa:	21 15       	cp	r18, r1
     4ac:	31 05       	cpc	r19, r1
     4ae:	49 f4       	brne	.+18     	; 0x4c2 <mmc_disk_read+0x26>
		return RES_PARERR;
     4b0:	c4 e0       	ldi	r28, 0x04	; 4
     4b2:	d0 e0       	ldi	r29, 0x00	; 0
	if(count == 0){
		
	}

	return count ? RES_ERROR : RES_OK;
}
     4b4:	ce 01       	movw	r24, r28
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	ff 90       	pop	r15
     4c0:	08 95       	ret
	

	if (!count) {
		return RES_PARERR;
	}
	if (Stat & STA_NOINIT) {
     4c2:	80 91 0d 01 	lds	r24, 0x010D
     4c6:	80 ff       	sbrs	r24, 0
     4c8:	09 c0       	rjmp	.+18     	; 0x4dc <mmc_disk_read+0x40>
		return RES_NOTRDY;
     4ca:	c3 e0       	ldi	r28, 0x03	; 3
     4cc:	d0 e0       	ldi	r29, 0x00	; 0
	if(count == 0){
		
	}

	return count ? RES_ERROR : RES_OK;
}
     4ce:	ce 01       	movw	r24, r28
     4d0:	df 91       	pop	r29
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	ff 90       	pop	r15
     4da:	08 95       	ret
	if (Stat & STA_NOINIT) {
		return RES_NOTRDY;
	}

	
	if (!(CardType & CT_BLOCK)){
     4dc:	80 91 32 01 	lds	r24, 0x0132
     4e0:	83 fd       	sbrc	r24, 3
     4e2:	07 c0       	rjmp	.+14     	; 0x4f2 <mmc_disk_read+0x56>
		sector *= 512;	/* Convert to byte address if needed */
     4e4:	f9 e0       	ldi	r31, 0x09	; 9
     4e6:	44 0f       	add	r20, r20
     4e8:	55 1f       	adc	r21, r21
     4ea:	66 1f       	adc	r22, r22
     4ec:	77 1f       	adc	r23, r23
     4ee:	fa 95       	dec	r31
     4f0:	d1 f7       	brne	.-12     	; 0x4e6 <mmc_disk_read+0x4a>
	}



	cmd = count > 1 ? CMD18 : CMD17;		/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
     4f2:	02 30       	cpi	r16, 0x02	; 2
     4f4:	11 05       	cpc	r17, r1
     4f6:	70 f1       	brcs	.+92     	; 0x554 <mmc_disk_read+0xb8>
     4f8:	e2 e1       	ldi	r30, 0x12	; 18
     4fa:	fe 2e       	mov	r15, r30

	if(sector == 0){
		// what is the sector number during the bad call? should be 0
	}

	if (send_cmd(cmd, sector) == 0) {	
     4fc:	8f 2d       	mov	r24, r15
     4fe:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     502:	88 23       	and	r24, r24
     504:	79 f0       	breq	.+30     	; 0x524 <mmc_disk_read+0x88>
     506:	c1 e0       	ldi	r28, 0x01	; 1
     508:	d0 e0       	ldi	r29, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     50a:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     510:	77 9b       	sbis	0x0e, 7	; 14
     512:	fe cf       	rjmp	.-4      	; 0x510 <mmc_disk_read+0x74>
	return SPDR;
     514:	8f b1       	in	r24, 0x0f	; 15
	if(count == 0){
		
	}

	return count ? RES_ERROR : RES_OK;
}
     516:	ce 01       	movw	r24, r28
     518:	df 91       	pop	r29
     51a:	cf 91       	pop	r28
     51c:	1f 91       	pop	r17
     51e:	0f 91       	pop	r16
     520:	ff 90       	pop	r15
     522:	08 95       	ret
		// what is the sector number during the bad call? should be 0
	}

	if (send_cmd(cmd, sector) == 0) {	
		do {
			if (!rcvr_datablock(buff, 512)){
     524:	ce 01       	movw	r24, r28
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	72 e0       	ldi	r23, 0x02	; 2
     52a:	0e 94 0a 01 	call	0x214	; 0x214 <rcvr_datablock>
     52e:	00 97       	sbiw	r24, 0x00	; 0
     530:	a1 f0       	breq	.+40     	; 0x55a <mmc_disk_read+0xbe>
			 break;
			}
			buff += 512;
     532:	c0 50       	subi	r28, 0x00	; 0
     534:	de 4f       	sbci	r29, 0xFE	; 254
		} while (--count);
     536:	01 50       	subi	r16, 0x01	; 1
     538:	10 40       	sbci	r17, 0x00	; 0
     53a:	a1 f7       	brne	.-24     	; 0x524 <mmc_disk_read+0x88>
     53c:	c0 e0       	ldi	r28, 0x00	; 0
     53e:	d0 e0       	ldi	r29, 0x00	; 0

		if (cmd == CMD18){
     540:	82 e1       	ldi	r24, 0x12	; 18
     542:	f8 16       	cp	r15, r24
     544:	11 f7       	brne	.-60     	; 0x50a <mmc_disk_read+0x6e>
			send_cmd(CMD12, 0);
     546:	8c e0       	ldi	r24, 0x0C	; 12
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	ba 01       	movw	r22, r20
     54e:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     552:	db cf       	rjmp	.-74     	; 0x50a <mmc_disk_read+0x6e>
		sector *= 512;	/* Convert to byte address if needed */
	}



	cmd = count > 1 ? CMD18 : CMD17;		/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
     554:	31 e1       	ldi	r19, 0x11	; 17
     556:	f3 2e       	mov	r15, r19
     558:	d1 cf       	rjmp	.-94     	; 0x4fc <mmc_disk_read+0x60>
		// what is the sector number during the bad call? should be 0
	}

	if (send_cmd(cmd, sector) == 0) {	
		do {
			if (!rcvr_datablock(buff, 512)){
     55a:	c1 e0       	ldi	r28, 0x01	; 1
     55c:	d0 e0       	ldi	r29, 0x00	; 0
     55e:	01 15       	cp	r16, r1
     560:	11 05       	cpc	r17, r1
     562:	71 f7       	brne	.-36     	; 0x540 <mmc_disk_read+0xa4>
     564:	eb cf       	rjmp	.-42     	; 0x53c <mmc_disk_read+0xa0>

00000566 <mmc_disk_write>:
DRESULT mmc_disk_write (
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     566:	cf 92       	push	r12
     568:	df 92       	push	r13
     56a:	ef 92       	push	r14
     56c:	ff 92       	push	r15
     56e:	0f 93       	push	r16
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	00 d0       	rcall	.+0      	; 0x578 <mmc_disk_write+0x12>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	8c 01       	movw	r16, r24
     57e:	6a 01       	movw	r12, r20
     580:	7b 01       	movw	r14, r22
	if (!count) return RES_PARERR;
     582:	21 15       	cp	r18, r1
     584:	31 05       	cpc	r19, r1
     586:	69 f4       	brne	.+26     	; 0x5a2 <mmc_disk_write+0x3c>
     588:	84 e0       	ldi	r24, 0x04	; 4
     58a:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	df 91       	pop	r29
     592:	cf 91       	pop	r28
     594:	1f 91       	pop	r17
     596:	0f 91       	pop	r16
     598:	ff 90       	pop	r15
     59a:	ef 90       	pop	r14
     59c:	df 90       	pop	r13
     59e:	cf 90       	pop	r12
     5a0:	08 95       	ret
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (!count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     5a2:	80 91 0d 01 	lds	r24, 0x010D
     5a6:	80 ff       	sbrs	r24, 0
     5a8:	03 c0       	rjmp	.+6      	; 0x5b0 <mmc_disk_write+0x4a>
     5aa:	83 e0       	ldi	r24, 0x03	; 3
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	ee cf       	rjmp	.-36     	; 0x58c <mmc_disk_write+0x26>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     5b0:	80 91 0d 01 	lds	r24, 0x010D
     5b4:	82 ff       	sbrs	r24, 2
     5b6:	03 c0       	rjmp	.+6      	; 0x5be <mmc_disk_write+0x58>
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	e7 cf       	rjmp	.-50     	; 0x58c <mmc_disk_write+0x26>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     5be:	80 91 32 01 	lds	r24, 0x0132
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	83 fd       	sbrc	r24, 3
     5c6:	07 c0       	rjmp	.+14     	; 0x5d6 <mmc_disk_write+0x70>
     5c8:	a9 e0       	ldi	r26, 0x09	; 9
     5ca:	cc 0c       	add	r12, r12
     5cc:	dd 1c       	adc	r13, r13
     5ce:	ee 1c       	adc	r14, r14
     5d0:	ff 1c       	adc	r15, r15
     5d2:	aa 95       	dec	r26
     5d4:	d1 f7       	brne	.-12     	; 0x5ca <mmc_disk_write+0x64>

	if (count == 1) {	/* Single block write */
     5d6:	21 30       	cpi	r18, 0x01	; 1
     5d8:	31 05       	cpc	r19, r1
     5da:	09 f4       	brne	.+2      	; 0x5de <mmc_disk_write+0x78>
     5dc:	45 c0       	rjmp	.+138    	; 0x668 <mmc_disk_write+0x102>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     5de:	86 70       	andi	r24, 0x06	; 6
     5e0:	90 70       	andi	r25, 0x00	; 0
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	b1 f5       	brne	.+108    	; 0x652 <mmc_disk_write+0xec>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     5e6:	89 e1       	ldi	r24, 0x19	; 25
     5e8:	b7 01       	movw	r22, r14
     5ea:	a6 01       	movw	r20, r12
     5ec:	29 83       	std	Y+1, r18	; 0x01
     5ee:	3a 83       	std	Y+2, r19	; 0x02
     5f0:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     5f4:	29 81       	ldd	r18, Y+1	; 0x01
     5f6:	3a 81       	ldd	r19, Y+2	; 0x02
     5f8:	88 23       	and	r24, r24
     5fa:	49 f0       	breq	.+18     	; 0x60e <mmc_disk_write+0xa8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     600:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     602:	2f ef       	ldi	r18, 0xFF	; 255
     604:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     606:	77 9b       	sbis	0x0e, 7	; 14
     608:	fe cf       	rjmp	.-4      	; 0x606 <mmc_disk_write+0xa0>
	return SPDR;
     60a:	2f b1       	in	r18, 0x0f	; 15
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     60c:	bf cf       	rjmp	.-130    	; 0x58c <mmc_disk_write+0x26>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     60e:	c8 01       	movw	r24, r16
     610:	6c ef       	ldi	r22, 0xFC	; 252
     612:	29 83       	std	Y+1, r18	; 0x01
     614:	3a 83       	std	Y+2, r19	; 0x02
     616:	0e 94 3d 01 	call	0x27a	; 0x27a <xmit_datablock>
     61a:	29 81       	ldd	r18, Y+1	; 0x01
     61c:	3a 81       	ldd	r19, Y+2	; 0x02
     61e:	00 97       	sbiw	r24, 0x00	; 0
     620:	29 f0       	breq	.+10     	; 0x62c <mmc_disk_write+0xc6>
				buff += 512;
     622:	00 50       	subi	r16, 0x00	; 0
     624:	1e 4f       	sbci	r17, 0xFE	; 254
			} while (--count);
     626:	21 50       	subi	r18, 0x01	; 1
     628:	30 40       	sbci	r19, 0x00	; 0
     62a:	89 f7       	brne	.-30     	; 0x60e <mmc_disk_write+0xa8>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	6d ef       	ldi	r22, 0xFD	; 253
     632:	29 83       	std	Y+1, r18	; 0x01
     634:	3a 83       	std	Y+2, r19	; 0x02
     636:	0e 94 3d 01 	call	0x27a	; 0x27a <xmit_datablock>
     63a:	29 81       	ldd	r18, Y+1	; 0x01
     63c:	3a 81       	ldd	r19, Y+2	; 0x02
     63e:	00 97       	sbiw	r24, 0x00	; 0
     640:	e9 f2       	breq	.-70     	; 0x5fc <mmc_disk_write+0x96>
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	21 15       	cp	r18, r1
     648:	31 05       	cpc	r19, r1
     64a:	d1 f6       	brne	.-76     	; 0x600 <mmc_disk_write+0x9a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
     64c:	80 e0       	ldi	r24, 0x00	; 0
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	d7 cf       	rjmp	.-82     	; 0x600 <mmc_disk_write+0x9a>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     652:	a9 01       	movw	r20, r18
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	87 e9       	ldi	r24, 0x97	; 151
     65a:	29 83       	std	Y+1, r18	; 0x01
     65c:	3a 83       	std	Y+2, r19	; 0x02
     65e:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     662:	3a 81       	ldd	r19, Y+2	; 0x02
     664:	29 81       	ldd	r18, Y+1	; 0x01
     666:	bf cf       	rjmp	.-130    	; 0x5e6 <mmc_disk_write+0x80>
	if (Stat & STA_PROTECT) return RES_WRPRT;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     668:	88 e1       	ldi	r24, 0x18	; 24
     66a:	b7 01       	movw	r22, r14
     66c:	a6 01       	movw	r20, r12
     66e:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     672:	88 23       	and	r24, r24
     674:	19 f6       	brne	.-122    	; 0x5fc <mmc_disk_write+0x96>
			&& xmit_datablock(buff, 0xFE))
     676:	c8 01       	movw	r24, r16
     678:	6e ef       	ldi	r22, 0xFE	; 254
     67a:	0e 94 3d 01 	call	0x27a	; 0x27a <xmit_datablock>
     67e:	00 97       	sbiw	r24, 0x00	; 0
     680:	29 f7       	brne	.-54     	; 0x64c <mmc_disk_write+0xe6>
     682:	bc cf       	rjmp	.-136    	; 0x5fc <mmc_disk_write+0x96>

00000684 <mmc_disk_ioctl>:
#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     684:	cf 92       	push	r12
     686:	df 92       	push	r13
     688:	ef 92       	push	r14
     68a:	ff 92       	push	r15
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	60 97       	sbiw	r28, 0x10	; 16
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	6b 01       	movw	r12, r22
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
     6a6:	90 91 0d 01 	lds	r25, 0x010D
     6aa:	90 ff       	sbrs	r25, 0
     6ac:	12 c0       	rjmp	.+36     	; 0x6d2 <mmc_disk_ioctl+0x4e>
     6ae:	23 e0       	ldi	r18, 0x03	; 3
     6b0:	30 e0       	ldi	r19, 0x00	; 0
#endif
	default:
		res = RES_PARERR;
	}
	return res;
}
     6b2:	c9 01       	movw	r24, r18
     6b4:	60 96       	adiw	r28, 0x10	; 16
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	df 90       	pop	r13
     6ce:	cf 90       	pop	r12
     6d0:	08 95       	ret
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
     6d2:	83 33       	cpi	r24, 0x33	; 51
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <mmc_disk_ioctl+0x54>
     6d6:	11 c1       	rjmp	.+546    	; 0x8fa <mmc_disk_ioctl+0x276>
     6d8:	84 33       	cpi	r24, 0x34	; 52
     6da:	08 f4       	brcc	.+2      	; 0x6de <mmc_disk_ioctl+0x5a>
     6dc:	68 c0       	rjmp	.+208    	; 0x7ae <mmc_disk_ioctl+0x12a>
     6de:	86 33       	cpi	r24, 0x36	; 54
     6e0:	09 f4       	brne	.+2      	; 0x6e4 <mmc_disk_ioctl+0x60>
     6e2:	2c c1       	rjmp	.+600    	; 0x93c <mmc_disk_ioctl+0x2b8>
     6e4:	87 33       	cpi	r24, 0x37	; 55
     6e6:	08 f4       	brcc	.+2      	; 0x6ea <mmc_disk_ioctl+0x66>
     6e8:	7e c0       	rjmp	.+252    	; 0x7e6 <mmc_disk_ioctl+0x162>
     6ea:	88 33       	cpi	r24, 0x38	; 56
     6ec:	09 f4       	brne	.+2      	; 0x6f0 <mmc_disk_ioctl+0x6c>
     6ee:	a2 c1       	rjmp	.+836    	; 0xa34 <mmc_disk_ioctl+0x3b0>
     6f0:	88 33       	cpi	r24, 0x38	; 56
     6f2:	08 f4       	brcc	.+2      	; 0x6f6 <mmc_disk_ioctl+0x72>
     6f4:	57 c1       	rjmp	.+686    	; 0x9a4 <mmc_disk_ioctl+0x320>
     6f6:	89 33       	cpi	r24, 0x39	; 57
     6f8:	09 f0       	breq	.+2      	; 0x6fc <mmc_disk_ioctl+0x78>
     6fa:	79 c0       	rjmp	.+242    	; 0x7ee <mmc_disk_ioctl+0x16a>
		deselect();
		break;

	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
     6fc:	db 01       	movw	r26, r22
     6fe:	13 96       	adiw	r26, 0x03	; 3
     700:	4d 91       	ld	r20, X+
     702:	5d 91       	ld	r21, X+
     704:	6d 91       	ld	r22, X+
     706:	7c 91       	ld	r23, X
     708:	16 97       	sbiw	r26, 0x06	; 6
     70a:	19 e0       	ldi	r17, 0x09	; 9
     70c:	44 0f       	add	r20, r20
     70e:	55 1f       	adc	r21, r21
     710:	66 1f       	adc	r22, r22
     712:	77 1f       	adc	r23, r23
     714:	1a 95       	dec	r17
     716:	d1 f7       	brne	.-12     	; 0x70c <mmc_disk_ioctl+0x88>
     718:	74 68       	ori	r23, 0x84	; 132
     71a:	8c 91       	ld	r24, X
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	0c e1       	ldi	r16, 0x1C	; 28
     724:	88 0f       	add	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	aa 1f       	adc	r26, r26
     72a:	bb 1f       	adc	r27, r27
     72c:	0a 95       	dec	r16
     72e:	d1 f7       	brne	.-12     	; 0x724 <mmc_disk_ioctl+0xa0>
     730:	48 2b       	or	r20, r24
     732:	59 2b       	or	r21, r25
     734:	6a 2b       	or	r22, r26
     736:	7b 2b       	or	r23, r27
     738:	f6 01       	movw	r30, r12
     73a:	82 81       	ldd	r24, Z+2	; 0x02
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	a0 e0       	ldi	r26, 0x00	; 0
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	48 2b       	or	r20, r24
     744:	59 2b       	or	r21, r25
     746:	6a 2b       	or	r22, r26
     748:	7b 2b       	or	r23, r27
     74a:	81 e3       	ldi	r24, 0x31	; 49
     74c:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     750:	88 23       	and	r24, r24
     752:	21 f5       	brne	.+72     	; 0x79c <mmc_disk_ioctl+0x118>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     754:	8f ef       	ldi	r24, 0xFF	; 255
     756:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     758:	77 9b       	sbis	0x0e, 7	; 14
     75a:	fe cf       	rjmp	.-4      	; 0x758 <mmc_disk_ioctl+0xd4>
	return SPDR;
     75c:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     75e:	8e ef       	ldi	r24, 0xFE	; 254
     760:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     762:	77 9b       	sbis	0x0e, 7	; 14
     764:	fe cf       	rjmp	.-4      	; 0x762 <mmc_disk_ioctl+0xde>
	return SPDR;
     766:	8f b1       	in	r24, 0x0f	; 15

	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
     768:	d6 01       	movw	r26, r12
     76a:	11 96       	adiw	r26, 0x01	; 1
     76c:	8c 91       	ld	r24, X
     76e:	11 97       	sbiw	r26, 0x01	; 1
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     770:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     772:	77 9b       	sbis	0x0e, 7	; 14
     774:	fe cf       	rjmp	.-4      	; 0x772 <mmc_disk_ioctl+0xee>
	return SPDR;
     776:	8f b1       	in	r24, 0x0f	; 15
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	92 e0       	ldi	r25, 0x02	; 2
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     77c:	2f ef       	ldi	r18, 0xFF	; 255
     77e:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     780:	77 9b       	sbis	0x0e, 7	; 14
     782:	fe cf       	rjmp	.-4      	; 0x780 <mmc_disk_ioctl+0xfc>
	return SPDR;
     784:	3f b1       	in	r19, 0x0f	; 15
     786:	01 97       	sbiw	r24, 0x01	; 1
	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
     788:	d1 f7       	brne	.-12     	; 0x77e <mmc_disk_ioctl+0xfa>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     78a:	8f ef       	ldi	r24, 0xFF	; 255
     78c:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     78e:	77 9b       	sbis	0x0e, 7	; 14
     790:	fe cf       	rjmp	.-4      	; 0x78e <mmc_disk_ioctl+0x10a>
	return SPDR;
     792:	8f b1       	in	r24, 0x0f	; 15
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
     794:	8f 71       	andi	r24, 0x1F	; 31
     796:	85 30       	cpi	r24, 0x05	; 5
     798:	09 f4       	brne	.+2      	; 0x79c <mmc_disk_ioctl+0x118>
     79a:	a8 c2       	rjmp	.+1360   	; 0xcec <mmc_disk_ioctl+0x668>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     79c:	21 e0       	ldi	r18, 0x01	; 1
     79e:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     7a0:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     7a2:	8f ef       	ldi	r24, 0xFF	; 255
     7a4:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     7a6:	77 9b       	sbis	0x0e, 7	; 14
     7a8:	fe cf       	rjmp	.-4      	; 0x7a6 <mmc_disk_ioctl+0x122>
	return SPDR;
     7aa:	8f b1       	in	r24, 0x0f	; 15
     7ac:	82 cf       	rjmp	.-252    	; 0x6b2 <mmc_disk_ioctl+0x2e>
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
     7ae:	83 30       	cpi	r24, 0x03	; 3
     7b0:	09 f4       	brne	.+2      	; 0x7b4 <mmc_disk_ioctl+0x130>
     7b2:	64 c0       	rjmp	.+200    	; 0x87c <mmc_disk_ioctl+0x1f8>
     7b4:	84 30       	cpi	r24, 0x04	; 4
     7b6:	f0 f4       	brcc	.+60     	; 0x7f4 <mmc_disk_ioctl+0x170>
     7b8:	88 23       	and	r24, r24
     7ba:	09 f4       	brne	.+2      	; 0x7be <mmc_disk_ioctl+0x13a>
     7bc:	b0 c0       	rjmp	.+352    	; 0x91e <mmc_disk_ioctl+0x29a>
     7be:	81 30       	cpi	r24, 0x01	; 1
     7c0:	b1 f4       	brne	.+44     	; 0x7ee <mmc_disk_ioctl+0x16a>
		if (select()) res = RES_OK;
		deselect();
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     7c2:	89 e0       	ldi	r24, 0x09	; 9
     7c4:	40 e0       	ldi	r20, 0x00	; 0
     7c6:	50 e0       	ldi	r21, 0x00	; 0
     7c8:	ba 01       	movw	r22, r20
     7ca:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     7ce:	88 23       	and	r24, r24
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <mmc_disk_ioctl+0x150>
     7d2:	de c1       	rjmp	.+956    	; 0xb90 <mmc_disk_ioctl+0x50c>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     7d4:	21 e0       	ldi	r18, 0x01	; 1
     7d6:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     7d8:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     7da:	8f ef       	ldi	r24, 0xFF	; 255
     7dc:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     7de:	77 9b       	sbis	0x0e, 7	; 14
     7e0:	fe cf       	rjmp	.-4      	; 0x7de <mmc_disk_ioctl+0x15a>
	return SPDR;
     7e2:	8f b1       	in	r24, 0x0f	; 15
     7e4:	66 cf       	rjmp	.-308    	; 0x6b2 <mmc_disk_ioctl+0x2e>
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
     7e6:	84 33       	cpi	r24, 0x34	; 52
     7e8:	b9 f1       	breq	.+110    	; 0x858 <mmc_disk_ioctl+0x1d4>
     7ea:	85 33       	cpi	r24, 0x35	; 53
     7ec:	b9 f0       	breq	.+46     	; 0x81c <mmc_disk_ioctl+0x198>
		}
		deselect();
		break;
#endif
	default:
		res = RES_PARERR;
     7ee:	24 e0       	ldi	r18, 0x04	; 4
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	5f cf       	rjmp	.-322    	; 0x6b2 <mmc_disk_ioctl+0x2e>
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
     7f4:	87 30       	cpi	r24, 0x07	; 7
     7f6:	09 f4       	brne	.+2      	; 0x7fa <mmc_disk_ioctl+0x176>
     7f8:	c7 c0       	rjmp	.+398    	; 0x988 <mmc_disk_ioctl+0x304>
     7fa:	82 33       	cpi	r24, 0x32	; 50
     7fc:	09 f4       	brne	.+2      	; 0x800 <mmc_disk_ioctl+0x17c>
     7fe:	bd c0       	rjmp	.+378    	; 0x97a <mmc_disk_ioctl+0x2f6>
     800:	84 30       	cpi	r24, 0x04	; 4
     802:	a9 f7       	brne	.-22     	; 0x7ee <mmc_disk_ioctl+0x16a>
		}
		deselect();
		break;

	case CTRL_TRIM:		/* Erase a block of sectors (used when _USE_TRIM in ffconf.h is 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
     804:	00 91 32 01 	lds	r16, 0x0132
     808:	10 e0       	ldi	r17, 0x00	; 0
     80a:	c8 01       	movw	r24, r16
     80c:	86 70       	andi	r24, 0x06	; 6
     80e:	90 70       	andi	r25, 0x00	; 0
     810:	00 97       	sbiw	r24, 0x00	; 0
     812:	09 f0       	breq	.+2      	; 0x816 <mmc_disk_ioctl+0x192>
     814:	1c c2       	rjmp	.+1080   	; 0xc4e <mmc_disk_ioctl+0x5ca>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     816:	21 e0       	ldi	r18, 0x01	; 1
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	4b cf       	rjmp	.-362    	; 0x6b2 <mmc_disk_ioctl+0x2e>
			res = RES_OK;
		deselect();
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
     81c:	8a e3       	ldi	r24, 0x3A	; 58
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	ba 01       	movw	r22, r20
     824:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     828:	88 23       	and	r24, r24
     82a:	09 f0       	breq	.+2      	; 0x82e <mmc_disk_ioctl+0x1aa>
     82c:	77 c1       	rjmp	.+750    	; 0xb1c <mmc_disk_ioctl+0x498>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
     82e:	c6 01       	movw	r24, r12
     830:	04 96       	adiw	r24, 0x04	; 4
     832:	f6 01       	movw	r30, r12
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     834:	3f ef       	ldi	r19, 0xFF	; 255
     836:	3f b9       	out	0x0f, r19	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     838:	77 9b       	sbis	0x0e, 7	; 14
     83a:	fe cf       	rjmp	.-4      	; 0x838 <mmc_disk_ioctl+0x1b4>
	return SPDR;
     83c:	2f b1       	in	r18, 0x0f	; 15
		deselect();
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
     83e:	21 93       	st	Z+, r18
     840:	e8 17       	cp	r30, r24
     842:	f9 07       	cpc	r31, r25
     844:	c1 f7       	brne	.-16     	; 0x836 <mmc_disk_ioctl+0x1b2>
			res = RES_OK;
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     84a:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     850:	77 9b       	sbis	0x0e, 7	; 14
     852:	fe cf       	rjmp	.-4      	; 0x850 <mmc_disk_ioctl+0x1cc>
	return SPDR;
     854:	8f b1       	in	r24, 0x0f	; 15
     856:	2d cf       	rjmp	.-422    	; 0x6b2 <mmc_disk_ioctl+0x2e>
			res = RES_OK;
		deselect();
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))		/* READ_CID */
     858:	8a e0       	ldi	r24, 0x0A	; 10
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	ba 01       	movw	r22, r20
     860:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     864:	88 23       	and	r24, r24
     866:	09 f4       	brne	.+2      	; 0x86a <mmc_disk_ioctl+0x1e6>
     868:	dc c1       	rjmp	.+952    	; 0xc22 <mmc_disk_ioctl+0x59e>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     86a:	21 e0       	ldi	r18, 0x01	; 1
     86c:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     86e:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     870:	8f ef       	ldi	r24, 0xFF	; 255
     872:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     874:	77 9b       	sbis	0x0e, 7	; 14
     876:	fe cf       	rjmp	.-4      	; 0x874 <mmc_disk_ioctl+0x1f0>
	return SPDR;
     878:	8f b1       	in	r24, 0x0f	; 15
     87a:	1b cf       	rjmp	.-458    	; 0x6b2 <mmc_disk_ioctl+0x2e>
		}
		deselect();
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
     87c:	00 91 32 01 	lds	r16, 0x0132
     880:	02 ff       	sbrs	r16, 2
     882:	4f c1       	rjmp	.+670    	; 0xb22 <mmc_disk_ioctl+0x49e>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     884:	8d e8       	ldi	r24, 0x8D	; 141
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	ba 01       	movw	r22, r20
     88c:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     890:	88 23       	and	r24, r24
     892:	09 f0       	breq	.+2      	; 0x896 <mmc_disk_ioctl+0x212>
     894:	3d c1       	rjmp	.+634    	; 0xb10 <mmc_disk_ioctl+0x48c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     896:	8f ef       	ldi	r24, 0xFF	; 255
     898:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     89a:	77 9b       	sbis	0x0e, 7	; 14
     89c:	fe cf       	rjmp	.-4      	; 0x89a <mmc_disk_ioctl+0x216>
	return SPDR;
     89e:	8f b1       	in	r24, 0x0f	; 15

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
				xchg_spi(0xFF);
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     8a0:	ce 01       	movw	r24, r28
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	60 e1       	ldi	r22, 0x10	; 16
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	0e 94 0a 01 	call	0x214	; 0x214 <rcvr_datablock>
     8ac:	00 97       	sbiw	r24, 0x00	; 0
     8ae:	09 f4       	brne	.+2      	; 0x8b2 <mmc_disk_ioctl+0x22e>
     8b0:	2f c1       	rjmp	.+606    	; 0xb10 <mmc_disk_ioctl+0x48c>
     8b2:	80 e3       	ldi	r24, 0x30	; 48
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     8b4:	9f ef       	ldi	r25, 0xFF	; 255
     8b6:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     8b8:	77 9b       	sbis	0x0e, 7	; 14
     8ba:	fe cf       	rjmp	.-4      	; 0x8b8 <mmc_disk_ioctl+0x234>
	return SPDR;
     8bc:	2f b1       	in	r18, 0x0f	; 15
     8be:	81 50       	subi	r24, 0x01	; 1
	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
				xchg_spi(0xFF);
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
     8c0:	d1 f7       	brne	.-12     	; 0x8b6 <mmc_disk_ioctl+0x232>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
     8c2:	2b 85       	ldd	r18, Y+11	; 0x0b
     8c4:	22 95       	swap	r18
     8c6:	2f 70       	andi	r18, 0x0F	; 15
     8c8:	80 e1       	ldi	r24, 0x10	; 16
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	a0 e0       	ldi	r26, 0x00	; 0
     8ce:	b0 e0       	ldi	r27, 0x00	; 0
     8d0:	04 c0       	rjmp	.+8      	; 0x8da <mmc_disk_ioctl+0x256>
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	aa 1f       	adc	r26, r26
     8d8:	bb 1f       	adc	r27, r27
     8da:	2a 95       	dec	r18
     8dc:	d2 f7       	brpl	.-12     	; 0x8d2 <mmc_disk_ioctl+0x24e>
     8de:	f6 01       	movw	r30, r12
     8e0:	80 83       	st	Z, r24
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	a2 83       	std	Z+2, r26	; 0x02
     8e6:	b3 83       	std	Z+3, r27	; 0x03
					res = RES_OK;
     8e8:	20 e0       	ldi	r18, 0x00	; 0
     8ea:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     8ec:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     8ee:	8f ef       	ldi	r24, 0xFF	; 255
     8f0:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     8f2:	77 9b       	sbis	0x0e, 7	; 14
     8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <mmc_disk_ioctl+0x26e>
	return SPDR;
     8f6:	8f b1       	in	r24, 0x0f	; 15
     8f8:	dc ce       	rjmp	.-584    	; 0x6b2 <mmc_disk_ioctl+0x2e>
		*ptr = CardType;
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))		/* READ_CSD */
     8fa:	89 e0       	ldi	r24, 0x09	; 9
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	ba 01       	movw	r22, r20
     902:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     906:	88 23       	and	r24, r24
     908:	09 f4       	brne	.+2      	; 0x90c <mmc_disk_ioctl+0x288>
     90a:	96 c1       	rjmp	.+812    	; 0xc38 <mmc_disk_ioctl+0x5b4>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     90c:	21 e0       	ldi	r18, 0x01	; 1
     90e:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     910:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     912:	8f ef       	ldi	r24, 0xFF	; 255
     914:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     916:	77 9b       	sbis	0x0e, 7	; 14
     918:	fe cf       	rjmp	.-4      	; 0x916 <mmc_disk_ioctl+0x292>
	return SPDR;
     91a:	8f b1       	in	r24, 0x0f	; 15
     91c:	ca ce       	rjmp	.-620    	; 0x6b2 <mmc_disk_ioctl+0x2e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
     91e:	0e 94 84 00 	call	0x108	; 0x108 <select>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     922:	21 e0       	ldi	r18, 0x01	; 1
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	11 f0       	breq	.+4      	; 0x92e <mmc_disk_ioctl+0x2aa>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     92e:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     934:	77 9b       	sbis	0x0e, 7	; 14
     936:	fe cf       	rjmp	.-4      	; 0x934 <mmc_disk_ioctl+0x2b0>
	return SPDR;
     938:	8f b1       	in	r24, 0x0f	; 15
     93a:	bb ce       	rjmp	.-650    	; 0x6b2 <mmc_disk_ioctl+0x2e>
		}
		deselect();
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
     93c:	8d e8       	ldi	r24, 0x8D	; 141
     93e:	40 e0       	ldi	r20, 0x00	; 0
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	ba 01       	movw	r22, r20
     944:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     948:	88 23       	and	r24, r24
     94a:	09 f0       	breq	.+2      	; 0x94e <mmc_disk_ioctl+0x2ca>
     94c:	e4 c0       	rjmp	.+456    	; 0xb16 <mmc_disk_ioctl+0x492>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     94e:	8f ef       	ldi	r24, 0xFF	; 255
     950:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     952:	77 9b       	sbis	0x0e, 7	; 14
     954:	fe cf       	rjmp	.-4      	; 0x952 <mmc_disk_ioctl+0x2ce>
	return SPDR;
     956:	8f b1       	in	r24, 0x0f	; 15
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
			xchg_spi(0xFF);
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
     958:	c6 01       	movw	r24, r12
     95a:	60 e4       	ldi	r22, 0x40	; 64
     95c:	70 e0       	ldi	r23, 0x00	; 0
     95e:	0e 94 0a 01 	call	0x214	; 0x214 <rcvr_datablock>
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	09 f4       	brne	.+2      	; 0x968 <mmc_disk_ioctl+0x2e4>
     966:	d7 c0       	rjmp	.+430    	; 0xb16 <mmc_disk_ioctl+0x492>
     968:	20 e0       	ldi	r18, 0x00	; 0
     96a:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     96c:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     96e:	8f ef       	ldi	r24, 0xFF	; 255
     970:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     972:	77 9b       	sbis	0x0e, 7	; 14
     974:	fe cf       	rjmp	.-4      	; 0x972 <mmc_disk_ioctl+0x2ee>
	return SPDR;
     976:	8f b1       	in	r24, 0x0f	; 15
     978:	9c ce       	rjmp	.-712    	; 0x6b2 <mmc_disk_ioctl+0x2e>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
     97a:	80 91 32 01 	lds	r24, 0x0132
     97e:	fb 01       	movw	r30, r22
     980:	80 83       	st	Z, r24
		res = RES_OK;
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	30 e0       	ldi	r19, 0x00	; 0
		break;
     986:	95 ce       	rjmp	.-726    	; 0x6b2 <mmc_disk_ioctl+0x2e>

static
void power_off (void)
{
	/* Disable SPI function */
	SPCR &= ~(1<<SPE | 1<<MSTR | 1<<SPR1);
     988:	8d b1       	in	r24, 0x0d	; 13
     98a:	8d 7a       	andi	r24, 0xAD	; 173
     98c:	8d b9       	out	0x0d, r24	; 13

	/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
	DDRB &= ~(0x0F);
     98e:	87 b3       	in	r24, 0x17	; 23
     990:	80 7f       	andi	r24, 0xF0	; 240
     992:	87 bb       	out	0x17, r24	; 23
		deselect();
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
     994:	80 91 0d 01 	lds	r24, 0x010D
     998:	81 60       	ori	r24, 0x01	; 1
     99a:	80 93 0d 01 	sts	0x010D, r24
		res = RES_OK;
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
		break;
     9a2:	87 ce       	rjmp	.-754    	; 0x6b2 <mmc_disk_ioctl+0x2e>
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
     9a4:	db 01       	movw	r26, r22
     9a6:	13 96       	adiw	r26, 0x03	; 3
     9a8:	4d 91       	ld	r20, X+
     9aa:	5d 91       	ld	r21, X+
     9ac:	6d 91       	ld	r22, X+
     9ae:	7c 91       	ld	r23, X
     9b0:	16 97       	sbiw	r26, 0x06	; 6
     9b2:	39 e0       	ldi	r19, 0x09	; 9
     9b4:	44 0f       	add	r20, r20
     9b6:	55 1f       	adc	r21, r21
     9b8:	66 1f       	adc	r22, r22
     9ba:	77 1f       	adc	r23, r23
     9bc:	3a 95       	dec	r19
     9be:	d1 f7       	brne	.-12     	; 0x9b4 <mmc_disk_ioctl+0x330>
     9c0:	70 68       	ori	r23, 0x80	; 128
     9c2:	8c 91       	ld	r24, X
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	a0 e0       	ldi	r26, 0x00	; 0
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	ec e1       	ldi	r30, 0x1C	; 28
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	aa 1f       	adc	r26, r26
     9d2:	bb 1f       	adc	r27, r27
     9d4:	ea 95       	dec	r30
     9d6:	d1 f7       	brne	.-12     	; 0x9cc <mmc_disk_ioctl+0x348>
     9d8:	48 2b       	or	r20, r24
     9da:	59 2b       	or	r21, r25
     9dc:	6a 2b       	or	r22, r26
     9de:	7b 2b       	or	r23, r27
     9e0:	f6 01       	movw	r30, r12
     9e2:	81 81       	ldd	r24, Z+1	; 0x01
     9e4:	92 81       	ldd	r25, Z+2	; 0x02
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	a0 e0       	ldi	r26, 0x00	; 0
     9ea:	b0 e0       	ldi	r27, 0x00	; 0
     9ec:	91 70       	andi	r25, 0x01	; 1
     9ee:	a0 70       	andi	r26, 0x00	; 0
     9f0:	b0 70       	andi	r27, 0x00	; 0
     9f2:	48 2b       	or	r20, r24
     9f4:	59 2b       	or	r21, r25
     9f6:	6a 2b       	or	r22, r26
     9f8:	7b 2b       	or	r23, r27
     9fa:	80 e3       	ldi	r24, 0x30	; 48
     9fc:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     a00:	88 23       	and	r24, r24
     a02:	79 f4       	brne	.+30     	; 0xa22 <mmc_disk_ioctl+0x39e>
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
     a04:	84 e6       	ldi	r24, 0x64	; 100
     a06:	80 93 31 01 	sts	0x0131, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     a0a:	9f ef       	ldi	r25, 0xFF	; 255
     a0c:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     a0e:	77 9b       	sbis	0x0e, 7	; 14
     a10:	fe cf       	rjmp	.-4      	; 0xa0e <mmc_disk_ioctl+0x38a>
	return SPDR;
     a12:	8f b1       	in	r24, 0x0f	; 15
		break;
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
     a14:	8f 3f       	cpi	r24, 0xFF	; 255
     a16:	09 f0       	breq	.+2      	; 0xa1a <mmc_disk_ioctl+0x396>
     a18:	6c c1       	rjmp	.+728    	; 0xcf2 <mmc_disk_ioctl+0x66e>
     a1a:	80 91 31 01 	lds	r24, 0x0131
     a1e:	88 23       	and	r24, r24
     a20:	a9 f7       	brne	.-22     	; 0xa0c <mmc_disk_ioctl+0x388>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     a22:	21 e0       	ldi	r18, 0x01	; 1
     a24:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     a26:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     a2c:	77 9b       	sbis	0x0e, 7	; 14
     a2e:	fe cf       	rjmp	.-4      	; 0xa2c <mmc_disk_ioctl+0x3a8>
	return SPDR;
     a30:	8f b1       	in	r24, 0x0f	; 15
     a32:	3f ce       	rjmp	.-898    	; 0x6b2 <mmc_disk_ioctl+0x2e>
		deselect();
		break;

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
     a34:	db 01       	movw	r26, r22
     a36:	13 96       	adiw	r26, 0x03	; 3
     a38:	4d 91       	ld	r20, X+
     a3a:	5d 91       	ld	r21, X+
     a3c:	6d 91       	ld	r22, X+
     a3e:	7c 91       	ld	r23, X
     a40:	16 97       	sbiw	r26, 0x06	; 6
     a42:	89 e0       	ldi	r24, 0x09	; 9
     a44:	44 0f       	add	r20, r20
     a46:	55 1f       	adc	r21, r21
     a48:	66 1f       	adc	r22, r22
     a4a:	77 1f       	adc	r23, r23
     a4c:	8a 95       	dec	r24
     a4e:	d1 f7       	brne	.-12     	; 0xa44 <mmc_disk_ioctl+0x3c0>
     a50:	70 68       	ori	r23, 0x80	; 128
     a52:	8c 91       	ld	r24, X
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	a0 e0       	ldi	r26, 0x00	; 0
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	2c e1       	ldi	r18, 0x1C	; 28
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	aa 1f       	adc	r26, r26
     a62:	bb 1f       	adc	r27, r27
     a64:	2a 95       	dec	r18
     a66:	d1 f7       	brne	.-12     	; 0xa5c <mmc_disk_ioctl+0x3d8>
     a68:	48 2b       	or	r20, r24
     a6a:	59 2b       	or	r21, r25
     a6c:	6a 2b       	or	r22, r26
     a6e:	7b 2b       	or	r23, r27
     a70:	f6 01       	movw	r30, r12
     a72:	81 81       	ldd	r24, Z+1	; 0x01
     a74:	92 81       	ldd	r25, Z+2	; 0x02
     a76:	01 97       	sbiw	r24, 0x01	; 1
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	91 70       	andi	r25, 0x01	; 1
     a7e:	a0 70       	andi	r26, 0x00	; 0
     a80:	b0 70       	andi	r27, 0x00	; 0
     a82:	48 2b       	or	r20, r24
     a84:	59 2b       	or	r21, r25
     a86:	6a 2b       	or	r22, r26
     a88:	7b 2b       	or	r23, r27
     a8a:	81 e3       	ldi	r24, 0x31	; 49
     a8c:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     a90:	88 23       	and	r24, r24
     a92:	a9 f5       	brne	.+106    	; 0xafe <mmc_disk_ioctl+0x47a>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     a94:	8f ef       	ldi	r24, 0xFF	; 255
     a96:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     a98:	77 9b       	sbis	0x0e, 7	; 14
     a9a:	fe cf       	rjmp	.-4      	; 0xa98 <mmc_disk_ioctl+0x414>
	return SPDR;
     a9c:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     a9e:	8e ef       	ldi	r24, 0xFE	; 254
     aa0:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     aa2:	77 9b       	sbis	0x0e, 7	; 14
     aa4:	fe cf       	rjmp	.-4      	; 0xaa2 <mmc_disk_ioctl+0x41e>
	return SPDR;
     aa6:	8f b1       	in	r24, 0x0f	; 15

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
     aa8:	d6 01       	movw	r26, r12
     aaa:	17 96       	adiw	r26, 0x07	; 7
     aac:	ed 91       	ld	r30, X+
     aae:	fc 91       	ld	r31, X
     ab0:	18 97       	sbiw	r26, 0x08	; 8
     ab2:	11 96       	adiw	r26, 0x01	; 1
     ab4:	8d 91       	ld	r24, X+
     ab6:	9c 91       	ld	r25, X
     ab8:	12 97       	sbiw	r26, 0x02	; 2
     aba:	00 97       	sbiw	r24, 0x00	; 0
     abc:	09 f4       	brne	.+2      	; 0xac0 <mmc_disk_ioctl+0x43c>
     abe:	45 c1       	rjmp	.+650    	; 0xd4a <mmc_disk_ioctl+0x6c6>
     ac0:	21 91       	ld	r18, Z+
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     ac2:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     ac4:	77 9b       	sbis	0x0e, 7	; 14
     ac6:	fe cf       	rjmp	.-4      	; 0xac4 <mmc_disk_ioctl+0x440>
	return SPDR;
     ac8:	2f b1       	in	r18, 0x0f	; 15

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	c9 f7       	brne	.-14     	; 0xac0 <mmc_disk_ioctl+0x43c>
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	f6 01       	movw	r30, r12
     ad4:	21 81       	ldd	r18, Z+1	; 0x01
     ad6:	32 81       	ldd	r19, Z+2	; 0x02
     ad8:	82 1b       	sub	r24, r18
     ada:	93 0b       	sbc	r25, r19
     adc:	39 f0       	breq	.+14     	; 0xaec <mmc_disk_ioctl+0x468>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     ade:	2f ef       	ldi	r18, 0xFF	; 255
     ae0:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     ae2:	77 9b       	sbis	0x0e, 7	; 14
     ae4:	fe cf       	rjmp	.-4      	; 0xae2 <mmc_disk_ioctl+0x45e>
	return SPDR;
     ae6:	3f b1       	in	r19, 0x0f	; 15
	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     ae8:	01 97       	sbiw	r24, 0x01	; 1
     aea:	d1 f7       	brne	.-12     	; 0xae0 <mmc_disk_ioctl+0x45c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     aec:	8f ef       	ldi	r24, 0xFF	; 255
     aee:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     af0:	77 9b       	sbis	0x0e, 7	; 14
     af2:	fe cf       	rjmp	.-4      	; 0xaf0 <mmc_disk_ioctl+0x46c>
	return SPDR;
     af4:	8f b1       	in	r24, 0x0f	; 15
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
     af6:	8f 71       	andi	r24, 0x1F	; 31
     af8:	85 30       	cpi	r24, 0x05	; 5
     afa:	09 f4       	brne	.+2      	; 0xafe <mmc_disk_ioctl+0x47a>
     afc:	23 c1       	rjmp	.+582    	; 0xd44 <mmc_disk_ioctl+0x6c0>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     afe:	21 e0       	ldi	r18, 0x01	; 1
     b00:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     b02:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     b08:	77 9b       	sbis	0x0e, 7	; 14
     b0a:	fe cf       	rjmp	.-4      	; 0xb08 <mmc_disk_ioctl+0x484>
	return SPDR;
     b0c:	8f b1       	in	r24, 0x0f	; 15
     b0e:	d1 cd       	rjmp	.-1118   	; 0x6b2 <mmc_disk_ioctl+0x2e>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     b10:	21 e0       	ldi	r18, 0x01	; 1
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	eb ce       	rjmp	.-554    	; 0x8ec <mmc_disk_ioctl+0x268>
     b16:	21 e0       	ldi	r18, 0x01	; 1
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	28 cf       	rjmp	.-432    	; 0x96c <mmc_disk_ioctl+0x2e8>
     b1c:	21 e0       	ldi	r18, 0x01	; 1
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	94 ce       	rjmp	.-728    	; 0x84a <mmc_disk_ioctl+0x1c6>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     b22:	89 e0       	ldi	r24, 0x09	; 9
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	ba 01       	movw	r22, r20
     b2a:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     b2e:	88 23       	and	r24, r24
     b30:	79 f7       	brne	.-34     	; 0xb10 <mmc_disk_ioctl+0x48c>
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	60 e1       	ldi	r22, 0x10	; 16
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	0e 94 0a 01 	call	0x214	; 0x214 <rcvr_datablock>
     b3e:	00 97       	sbiw	r24, 0x00	; 0
     b40:	39 f3       	breq	.-50     	; 0xb10 <mmc_disk_ioctl+0x48c>
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     b42:	8c 85       	ldd	r24, Y+12	; 0x0c
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
     b44:	01 ff       	sbrs	r16, 1
     b46:	05 c1       	rjmp	.+522    	; 0xd52 <mmc_disk_ioctl+0x6ce>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     b48:	88 1f       	adc	r24, r24
     b4a:	88 27       	eor	r24, r24
     b4c:	88 1f       	adc	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	2b 85       	ldd	r18, Y+11	; 0x0b
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	2f 73       	andi	r18, 0x3F	; 63
     b58:	30 70       	andi	r19, 0x00	; 0
     b5a:	22 0f       	add	r18, r18
     b5c:	33 1f       	adc	r19, r19
     b5e:	82 0f       	add	r24, r18
     b60:	93 1f       	adc	r25, r19
     b62:	2e 85       	ldd	r18, Y+14	; 0x0e
     b64:	22 95       	swap	r18
     b66:	26 95       	lsr	r18
     b68:	26 95       	lsr	r18
     b6a:	23 70       	andi	r18, 0x03	; 3
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	21 50       	subi	r18, 0x01	; 1
     b70:	30 40       	sbci	r19, 0x00	; 0
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <mmc_disk_ioctl+0x4f4>
     b74:	88 0f       	add	r24, r24
     b76:	99 1f       	adc	r25, r25
     b78:	2a 95       	dec	r18
     b7a:	e2 f7       	brpl	.-8      	; 0xb74 <mmc_disk_ioctl+0x4f0>
     b7c:	a0 e0       	ldi	r26, 0x00	; 0
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	f6 01       	movw	r30, r12
     b82:	80 83       	st	Z, r24
     b84:	91 83       	std	Z+1, r25	; 0x01
     b86:	a2 83       	std	Z+2, r26	; 0x02
     b88:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	ae ce       	rjmp	.-676    	; 0x8ec <mmc_disk_ioctl+0x268>
		if (select()) res = RES_OK;
		deselect();
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     b90:	ce 01       	movw	r24, r28
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	60 e1       	ldi	r22, 0x10	; 16
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	0e 94 0a 01 	call	0x214	; 0x214 <rcvr_datablock>
     b9c:	00 97       	sbiw	r24, 0x00	; 0
     b9e:	09 f4       	brne	.+2      	; 0xba2 <mmc_disk_ioctl+0x51e>
     ba0:	19 ce       	rjmp	.-974    	; 0x7d4 <mmc_disk_ioctl+0x150>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	82 95       	swap	r24
     ba6:	86 95       	lsr	r24
     ba8:	86 95       	lsr	r24
     baa:	83 70       	andi	r24, 0x03	; 3
     bac:	81 30       	cpi	r24, 0x01	; 1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <mmc_disk_ioctl+0x52e>
     bb0:	fc c0       	rjmp	.+504    	; 0xdaa <mmc_disk_ioctl+0x726>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     bb2:	89 85       	ldd	r24, Y+9	; 0x09
     bb4:	82 95       	swap	r24
     bb6:	86 95       	lsr	r24
     bb8:	86 95       	lsr	r24
     bba:	83 70       	andi	r24, 0x03	; 3
     bbc:	48 85       	ldd	r20, Y+8	; 0x08
     bbe:	50 e0       	ldi	r21, 0x00	; 0
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	44 0f       	add	r20, r20
     bc6:	55 1f       	adc	r21, r21
     bc8:	48 0f       	add	r20, r24
     bca:	51 1d       	adc	r21, r1
     bcc:	4f 5f       	subi	r20, 0xFF	; 255
     bce:	5f 4f       	sbci	r21, 0xFF	; 255
     bd0:	8f 81       	ldd	r24, Y+7	; 0x07
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	83 70       	andi	r24, 0x03	; 3
     bd6:	90 70       	andi	r25, 0x00	; 0
     bd8:	98 2f       	mov	r25, r24
     bda:	88 27       	eor	r24, r24
     bdc:	99 0f       	add	r25, r25
     bde:	99 0f       	add	r25, r25
     be0:	48 0f       	add	r20, r24
     be2:	59 1f       	adc	r21, r25
     be4:	60 e0       	ldi	r22, 0x00	; 0
     be6:	70 e0       	ldi	r23, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     be8:	8e 81       	ldd	r24, Y+6	; 0x06
     bea:	8f 70       	andi	r24, 0x0F	; 15
     bec:	9b 85       	ldd	r25, Y+11	; 0x0b
     bee:	99 1f       	adc	r25, r25
     bf0:	99 27       	eor	r25, r25
     bf2:	99 1f       	adc	r25, r25
     bf4:	89 0f       	add	r24, r25
     bf6:	8e 5f       	subi	r24, 0xFE	; 254
     bf8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bfa:	93 70       	andi	r25, 0x03	; 3
     bfc:	99 0f       	add	r25, r25
     bfe:	89 0f       	add	r24, r25
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	09 97       	sbiw	r24, 0x09	; 9
     c04:	04 c0       	rjmp	.+8      	; 0xc0e <mmc_disk_ioctl+0x58a>
     c06:	44 0f       	add	r20, r20
     c08:	55 1f       	adc	r21, r21
     c0a:	66 1f       	adc	r22, r22
     c0c:	77 1f       	adc	r23, r23
     c0e:	8a 95       	dec	r24
     c10:	d2 f7       	brpl	.-12     	; 0xc06 <mmc_disk_ioctl+0x582>
     c12:	f6 01       	movw	r30, r12
     c14:	40 83       	st	Z, r20
     c16:	51 83       	std	Z+1, r21	; 0x01
     c18:	62 83       	std	Z+2, r22	; 0x02
     c1a:	73 83       	std	Z+3, r23	; 0x03
			}
			res = RES_OK;
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	db cd       	rjmp	.-1098   	; 0x7d8 <mmc_disk_ioctl+0x154>
			res = RES_OK;
		deselect();
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))		/* READ_CID */
     c22:	c6 01       	movw	r24, r12
     c24:	60 e1       	ldi	r22, 0x10	; 16
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	0e 94 0a 01 	call	0x214	; 0x214 <rcvr_datablock>
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	09 f4       	brne	.+2      	; 0xc32 <mmc_disk_ioctl+0x5ae>
     c30:	1c ce       	rjmp	.-968    	; 0x86a <mmc_disk_ioctl+0x1e6>
			
			res = RES_OK;
     c32:	20 e0       	ldi	r18, 0x00	; 0
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	1b ce       	rjmp	.-970    	; 0x86e <mmc_disk_ioctl+0x1ea>
		*ptr = CardType;
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))		/* READ_CSD */
     c38:	c6 01       	movw	r24, r12
     c3a:	60 e1       	ldi	r22, 0x10	; 16
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	0e 94 0a 01 	call	0x214	; 0x214 <rcvr_datablock>
     c42:	00 97       	sbiw	r24, 0x00	; 0
     c44:	09 f4       	brne	.+2      	; 0xc48 <mmc_disk_ioctl+0x5c4>
     c46:	62 ce       	rjmp	.-828    	; 0x90c <mmc_disk_ioctl+0x288>
			res = RES_OK;
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	61 ce       	rjmp	.-830    	; 0x910 <mmc_disk_ioctl+0x28c>
		deselect();
		break;

	case CTRL_TRIM:		/* Erase a block of sectors (used when _USE_TRIM in ffconf.h is 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
		if (mmc_disk_ioctl(MMC_GET_CSD, csd)) break;	/* Get CSD */
     c4e:	83 e3       	ldi	r24, 0x33	; 51
     c50:	be 01       	movw	r22, r28
     c52:	6f 5f       	subi	r22, 0xFF	; 255
     c54:	7f 4f       	sbci	r23, 0xFF	; 255
     c56:	0e 94 42 03 	call	0x684	; 0x684 <mmc_disk_ioctl>
     c5a:	00 97       	sbiw	r24, 0x00	; 0
     c5c:	09 f0       	breq	.+2      	; 0xc60 <mmc_disk_ioctl+0x5dc>
     c5e:	db cd       	rjmp	.-1098   	; 0x816 <mmc_disk_ioctl+0x192>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	82 95       	swap	r24
     c64:	86 95       	lsr	r24
     c66:	86 95       	lsr	r24
     c68:	83 70       	andi	r24, 0x03	; 3
     c6a:	19 f4       	brne	.+6      	; 0xc72 <mmc_disk_ioctl+0x5ee>
     c6c:	8b 85       	ldd	r24, Y+11	; 0x0b
     c6e:	86 ff       	sbrs	r24, 6
     c70:	d2 cd       	rjmp	.-1116   	; 0x816 <mmc_disk_ioctl+0x192>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
     c72:	d6 01       	movw	r26, r12
     c74:	4d 91       	ld	r20, X+
     c76:	5d 91       	ld	r21, X+
     c78:	6d 91       	ld	r22, X+
     c7a:	7c 91       	ld	r23, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	14 96       	adiw	r26, 0x04	; 4
     c80:	cd 90       	ld	r12, X+
     c82:	dd 90       	ld	r13, X+
     c84:	ed 90       	ld	r14, X+
     c86:	fc 90       	ld	r15, X
     c88:	17 97       	sbiw	r26, 0x07	; 7
		if (!(CardType & CT_BLOCK)) {
     c8a:	03 fd       	sbrc	r16, 3
     c8c:	0e c0       	rjmp	.+28     	; 0xcaa <mmc_disk_ioctl+0x626>
			st *= 512; ed *= 512;
     c8e:	f9 e0       	ldi	r31, 0x09	; 9
     c90:	44 0f       	add	r20, r20
     c92:	55 1f       	adc	r21, r21
     c94:	66 1f       	adc	r22, r22
     c96:	77 1f       	adc	r23, r23
     c98:	fa 95       	dec	r31
     c9a:	d1 f7       	brne	.-12     	; 0xc90 <mmc_disk_ioctl+0x60c>
     c9c:	a9 e0       	ldi	r26, 0x09	; 9
     c9e:	cc 0c       	add	r12, r12
     ca0:	dd 1c       	adc	r13, r13
     ca2:	ee 1c       	adc	r14, r14
     ca4:	ff 1c       	adc	r15, r15
     ca6:	aa 95       	dec	r26
     ca8:	d1 f7       	brne	.-12     	; 0xc9e <mmc_disk_ioctl+0x61a>
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))	/* Erase sector block */
     caa:	80 e2       	ldi	r24, 0x20	; 32
     cac:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     cb0:	88 23       	and	r24, r24
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <mmc_disk_ioctl+0x632>
     cb4:	b0 cd       	rjmp	.-1184   	; 0x816 <mmc_disk_ioctl+0x192>
     cb6:	81 e2       	ldi	r24, 0x21	; 33
     cb8:	b7 01       	movw	r22, r14
     cba:	a6 01       	movw	r20, r12
     cbc:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     cc0:	88 23       	and	r24, r24
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <mmc_disk_ioctl+0x642>
     cc4:	a8 cd       	rjmp	.-1200   	; 0x816 <mmc_disk_ioctl+0x192>
     cc6:	86 e2       	ldi	r24, 0x26	; 38
     cc8:	40 e0       	ldi	r20, 0x00	; 0
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	ba 01       	movw	r22, r20
     cce:	0e 94 9c 00 	call	0x138	; 0x138 <send_cmd>
     cd2:	88 23       	and	r24, r24
     cd4:	09 f0       	breq	.+2      	; 0xcd8 <mmc_disk_ioctl+0x654>
     cd6:	9f cd       	rjmp	.-1218   	; 0x816 <mmc_disk_ioctl+0x192>
     cd8:	80 e3       	ldi	r24, 0x30	; 48
     cda:	95 e7       	ldi	r25, 0x75	; 117
     cdc:	0e 94 68 00 	call	0xd0	; 0xd0 <wait_ready>
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
     ce0:	21 e0       	ldi	r18, 0x01	; 1
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	00 97       	sbiw	r24, 0x00	; 0
     ce6:	09 f4       	brne	.+2      	; 0xcea <mmc_disk_ioctl+0x666>
     ce8:	e4 cc       	rjmp	.-1592   	; 0x6b2 <mmc_disk_ioctl+0x2e>
     cea:	59 ce       	rjmp	.-846    	; 0x99e <mmc_disk_ioctl+0x31a>
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	57 cd       	rjmp	.-1362   	; 0x7a0 <mmc_disk_ioctl+0x11c>
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
     cf2:	8e 3f       	cpi	r24, 0xFE	; 254
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <mmc_disk_ioctl+0x674>
     cf6:	95 ce       	rjmp	.-726    	; 0xa22 <mmc_disk_ioctl+0x39e>
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
     cf8:	d6 01       	movw	r26, r12
     cfa:	17 96       	adiw	r26, 0x07	; 7
     cfc:	ed 91       	ld	r30, X+
     cfe:	fc 91       	ld	r31, X
     d00:	18 97       	sbiw	r26, 0x08	; 8
     d02:	11 96       	adiw	r26, 0x01	; 1
     d04:	8d 91       	ld	r24, X+
     d06:	9c 91       	ld	r25, X
     d08:	12 97       	sbiw	r26, 0x02	; 2
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	09 f4       	brne	.+2      	; 0xd10 <mmc_disk_ioctl+0x68c>
     d0e:	77 c0       	rjmp	.+238    	; 0xdfe <mmc_disk_ioctl+0x77a>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     d10:	3f ef       	ldi	r19, 0xFF	; 255
     d12:	3f b9       	out	0x0f, r19	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     d14:	77 9b       	sbis	0x0e, 7	; 14
     d16:	fe cf       	rjmp	.-4      	; 0xd14 <mmc_disk_ioctl+0x690>
	return SPDR;
     d18:	2f b1       	in	r18, 0x0f	; 15
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
     d1a:	21 93       	st	Z+, r18
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	c9 f7       	brne	.-14     	; 0xd12 <mmc_disk_ioctl+0x68e>
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     d20:	82 e0       	ldi	r24, 0x02	; 2
     d22:	92 e0       	ldi	r25, 0x02	; 2
     d24:	f6 01       	movw	r30, r12
     d26:	21 81       	ldd	r18, Z+1	; 0x01
     d28:	32 81       	ldd	r19, Z+2	; 0x02
     d2a:	82 1b       	sub	r24, r18
     d2c:	93 0b       	sbc	r25, r19
     d2e:	39 f0       	breq	.+14     	; 0xd3e <mmc_disk_ioctl+0x6ba>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     d30:	2f ef       	ldi	r18, 0xFF	; 255
     d32:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
     d34:	77 9b       	sbis	0x0e, 7	; 14
     d36:	fe cf       	rjmp	.-4      	; 0xd34 <mmc_disk_ioctl+0x6b0>
	return SPDR;
     d38:	3f b1       	in	r19, 0x0f	; 15
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	d1 f7       	brne	.-12     	; 0xd32 <mmc_disk_ioctl+0x6ae>
				res = RES_OK;
     d3e:	20 e0       	ldi	r18, 0x00	; 0
     d40:	30 e0       	ldi	r19, 0x00	; 0
     d42:	71 ce       	rjmp	.-798    	; 0xa26 <mmc_disk_ioctl+0x3a2>
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	dc ce       	rjmp	.-584    	; 0xb02 <mmc_disk_ioctl+0x47e>
	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	92 e0       	ldi	r25, 0x02	; 2
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     d4e:	2f ef       	ldi	r18, 0xFF	; 255
     d50:	c7 ce       	rjmp	.-626    	; 0xae0 <mmc_disk_ioctl+0x45c>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     d52:	48 2f       	mov	r20, r24
     d54:	50 e0       	ldi	r21, 0x00	; 0
     d56:	43 70       	andi	r20, 0x03	; 3
     d58:	50 70       	andi	r21, 0x00	; 0
     d5a:	44 0f       	add	r20, r20
     d5c:	55 1f       	adc	r21, r21
     d5e:	44 0f       	add	r20, r20
     d60:	55 1f       	adc	r21, r21
     d62:	44 0f       	add	r20, r20
     d64:	55 1f       	adc	r21, r21
     d66:	82 95       	swap	r24
     d68:	86 95       	lsr	r24
     d6a:	87 70       	andi	r24, 0x07	; 7
     d6c:	48 0f       	add	r20, r24
     d6e:	51 1d       	adc	r21, r1
     d70:	4f 5f       	subi	r20, 0xFF	; 255
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	8b 85       	ldd	r24, Y+11	; 0x0b
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	8c 77       	andi	r24, 0x7C	; 124
     d7a:	90 70       	andi	r25, 0x00	; 0
     d7c:	95 95       	asr	r25
     d7e:	87 95       	ror	r24
     d80:	95 95       	asr	r25
     d82:	87 95       	ror	r24
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	48 9f       	mul	r20, r24
     d88:	90 01       	movw	r18, r0
     d8a:	49 9f       	mul	r20, r25
     d8c:	30 0d       	add	r19, r0
     d8e:	58 9f       	mul	r21, r24
     d90:	30 0d       	add	r19, r0
     d92:	11 24       	eor	r1, r1
     d94:	c9 01       	movw	r24, r18
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	f6 01       	movw	r30, r12
     d9c:	80 83       	st	Z, r24
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	a2 83       	std	Z+2, r26	; 0x02
     da2:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	a1 cd       	rjmp	.-1214   	; 0x8ec <mmc_disk_ioctl+0x268>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
     daa:	48 85       	ldd	r20, Y+8	; 0x08
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	4f 73       	andi	r20, 0x3F	; 63
     db4:	50 70       	andi	r21, 0x00	; 0
     db6:	60 70       	andi	r22, 0x00	; 0
     db8:	70 70       	andi	r23, 0x00	; 0
     dba:	ba 01       	movw	r22, r20
     dbc:	55 27       	eor	r21, r21
     dbe:	44 27       	eor	r20, r20
     dc0:	4f 5f       	subi	r20, 0xFF	; 255
     dc2:	5f 4f       	sbci	r21, 0xFF	; 255
     dc4:	6f 4f       	sbci	r22, 0xFF	; 255
     dc6:	7f 4f       	sbci	r23, 0xFF	; 255
     dc8:	99 85       	ldd	r25, Y+9	; 0x09
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	2a 85       	ldd	r18, Y+10	; 0x0a
     dce:	82 0f       	add	r24, r18
     dd0:	91 1d       	adc	r25, r1
     dd2:	a0 e0       	ldi	r26, 0x00	; 0
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	48 0f       	add	r20, r24
     dd8:	59 1f       	adc	r21, r25
     dda:	6a 1f       	adc	r22, r26
     ddc:	7b 1f       	adc	r23, r27
				*(DWORD*)buff = csize << 10;
     dde:	ea e0       	ldi	r30, 0x0A	; 10
     de0:	44 0f       	add	r20, r20
     de2:	55 1f       	adc	r21, r21
     de4:	66 1f       	adc	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	ea 95       	dec	r30
     dea:	d1 f7       	brne	.-12     	; 0xde0 <mmc_disk_ioctl+0x75c>
     dec:	d6 01       	movw	r26, r12
     dee:	4d 93       	st	X+, r20
     df0:	5d 93       	st	X+, r21
     df2:	6d 93       	st	X+, r22
     df4:	7c 93       	st	X, r23
     df6:	13 97       	sbiw	r26, 0x03	; 3
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	ed cc       	rjmp	.-1574   	; 0x7d8 <mmc_disk_ioctl+0x154>
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	92 e0       	ldi	r25, 0x02	; 2
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
     e02:	2f ef       	ldi	r18, 0xFF	; 255
     e04:	96 cf       	rjmp	.-212    	; 0xd32 <mmc_disk_ioctl+0x6ae>

00000e06 <mmc_disk_timerproc>:
void mmc_disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
     e06:	80 91 31 01 	lds	r24, 0x0131
	if (n) Timer1 = --n;
     e0a:	88 23       	and	r24, r24
     e0c:	19 f0       	breq	.+6      	; 0xe14 <mmc_disk_timerproc+0xe>
     e0e:	81 50       	subi	r24, 0x01	; 1
     e10:	80 93 31 01 	sts	0x0131, r24
	n = Timer2;
     e14:	80 91 30 01 	lds	r24, 0x0130
	if (n) Timer2 = --n;
     e18:	88 23       	and	r24, r24
     e1a:	19 f0       	breq	.+6      	; 0xe22 <mmc_disk_timerproc+0x1c>
     e1c:	81 50       	subi	r24, 0x01	; 1
     e1e:	80 93 30 01 	sts	0x0130, r24

	s = Stat;
     e22:	80 91 0d 01 	lds	r24, 0x010D
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if(MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
     e26:	89 7f       	andi	r24, 0xF9	; 249
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
     e28:	80 93 0d 01 	sts	0x010D, r24
}
     e2c:	08 95       	ret

00000e2e <get_time>:
uint8_t calibration_flg = 0x00; //Will hold number other than 0 when calibration switch triggered
uint8_t timer_event0_flg = 0x00; //Will switch to 1 once experiment begin signal received
uint8_t timer_event1_flg = 0x00; //Will switch to 1 once emergency retract signel receieved
uint16_t time = 0x0000; //Holds time count in tenths of a second from when timer_counter_enable() is turned on

uint16_t get_time(){return time;}
     e2e:	80 91 33 01 	lds	r24, 0x0133
     e32:	90 91 34 01 	lds	r25, 0x0134
     e36:	08 95       	ret

00000e38 <get_TE0_status>:
uint8_t get_TE0_status(){return timer_event0_flg;}
     e38:	80 91 36 01 	lds	r24, 0x0136
     e3c:	08 95       	ret

00000e3e <get_TE1_status>:
uint8_t get_TE1_status(){return timer_event1_flg;}
     e3e:	80 91 35 01 	lds	r24, 0x0135
     e42:	08 95       	ret

00000e44 <get_calibration_status>:
uint8_t get_calibration_status(){return calibration_flg;}
     e44:	80 91 37 01 	lds	r24, 0x0137
     e48:	08 95       	ret

00000e4a <__vector_1>:

/*********Interrupt Vectors*********/
//EXTERNAL INT 0: Calibration Interrupt function for motor 0
ISR(INT0_vect){
     e4a:	1f 92       	push	r1
     e4c:	0f 92       	push	r0
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	0f 92       	push	r0
     e52:	11 24       	eor	r1, r1
     e54:	8f 93       	push	r24
	calibration_flg |= 0x01;
     e56:	80 91 37 01 	lds	r24, 0x0137
     e5a:	81 60       	ori	r24, 0x01	; 1
     e5c:	80 93 37 01 	sts	0x0137, r24
}
     e60:	8f 91       	pop	r24
     e62:	0f 90       	pop	r0
     e64:	0f be       	out	0x3f, r0	; 63
     e66:	0f 90       	pop	r0
     e68:	1f 90       	pop	r1
     e6a:	18 95       	reti

00000e6c <__vector_2>:

//EXTERNAL INT 1: Calibration Interrupt function for motor 1
ISR(INT1_vect){
     e6c:	1f 92       	push	r1
     e6e:	0f 92       	push	r0
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	0f 92       	push	r0
     e74:	11 24       	eor	r1, r1
     e76:	8f 93       	push	r24
	calibration_flg |= 0x02;
     e78:	80 91 37 01 	lds	r24, 0x0137
     e7c:	82 60       	ori	r24, 0x02	; 2
     e7e:	80 93 37 01 	sts	0x0137, r24
}
     e82:	8f 91       	pop	r24
     e84:	0f 90       	pop	r0
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	0f 90       	pop	r0
     e8a:	1f 90       	pop	r1
     e8c:	18 95       	reti

00000e8e <__vector_3>:

//EXTERNAL INT 2: Calibration Interrupt function for motor 2
ISR(INT2_vect){
     e8e:	1f 92       	push	r1
     e90:	0f 92       	push	r0
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	0f 92       	push	r0
     e96:	11 24       	eor	r1, r1
     e98:	8f 93       	push	r24
	calibration_flg |= 0x04;
     e9a:	80 91 37 01 	lds	r24, 0x0137
     e9e:	84 60       	ori	r24, 0x04	; 4
     ea0:	80 93 37 01 	sts	0x0137, r24
}
     ea4:	8f 91       	pop	r24
     ea6:	0f 90       	pop	r0
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	0f 90       	pop	r0
     eac:	1f 90       	pop	r1
     eae:	18 95       	reti

00000eb0 <__vector_4>:

//EXTERNAL INT 3: Calibration Interrupt function for motor 3
ISR(INT3_vect){
     eb0:	1f 92       	push	r1
     eb2:	0f 92       	push	r0
     eb4:	0f b6       	in	r0, 0x3f	; 63
     eb6:	0f 92       	push	r0
     eb8:	11 24       	eor	r1, r1
     eba:	8f 93       	push	r24
	calibration_flg |= 0x08;
     ebc:	80 91 37 01 	lds	r24, 0x0137
     ec0:	88 60       	ori	r24, 0x08	; 8
     ec2:	80 93 37 01 	sts	0x0137, r24
}
     ec6:	8f 91       	pop	r24
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_5>:

//EXTERNAL INT 4: Calibration Interrupt function for motor 4
ISR(INT4_vect){
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	8f 93       	push	r24
	calibration_flg |= 0x10;
     ede:	80 91 37 01 	lds	r24, 0x0137
     ee2:	80 61       	ori	r24, 0x10	; 16
     ee4:	80 93 37 01 	sts	0x0137, r24
}
     ee8:	8f 91       	pop	r24
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <__vector_6>:

//EXTERNAL INT 5: Timer Event 1 Function - Emergency Shutoff
ISR(INT5_vect){
     ef4:	1f 92       	push	r1
     ef6:	0f 92       	push	r0
     ef8:	0f b6       	in	r0, 0x3f	; 63
     efa:	0f 92       	push	r0
     efc:	11 24       	eor	r1, r1
     efe:	8f 93       	push	r24
	timer_event1_flg = 0x01;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	80 93 35 01 	sts	0x0135, r24
	/* CONSIDER REVISING THIS FOR FINAL */
}
     f06:	8f 91       	pop	r24
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	0f 90       	pop	r0
     f0e:	1f 90       	pop	r1
     f10:	18 95       	reti

00000f12 <__vector_7>:

//EXTERNAL INT 6: Timer Event 0 Interrupt Function - Begin Experiment
ISR(INT6_vect){
     f12:	1f 92       	push	r1
     f14:	0f 92       	push	r0
     f16:	0f b6       	in	r0, 0x3f	; 63
     f18:	0f 92       	push	r0
     f1a:	11 24       	eor	r1, r1
     f1c:	8f 93       	push	r24
	timer_event0_flg = 0x01;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 36 01 	sts	0x0136, r24
}
     f24:	8f 91       	pop	r24
     f26:	0f 90       	pop	r0
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	0f 90       	pop	r0
     f2c:	1f 90       	pop	r1
     f2e:	18 95       	reti

00000f30 <__vector_12>:

//TIMER COUNTER 1 INT: Time Keeping Interrupt - increments time variable every 0.1 sec
ISR(TIMER1_COMPA_vect){
     f30:	1f 92       	push	r1
     f32:	0f 92       	push	r0
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	0f 92       	push	r0
     f38:	11 24       	eor	r1, r1
     f3a:	8f 93       	push	r24
     f3c:	9f 93       	push	r25
	//PORTD ^= 0x01; //For timing testing
	time++;
     f3e:	80 91 33 01 	lds	r24, 0x0133
     f42:	90 91 34 01 	lds	r25, 0x0134
     f46:	01 96       	adiw	r24, 0x01	; 1
     f48:	90 93 34 01 	sts	0x0134, r25
     f4c:	80 93 33 01 	sts	0x0133, r24
}
     f50:	9f 91       	pop	r25
     f52:	8f 91       	pop	r24
     f54:	0f 90       	pop	r0
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	0f 90       	pop	r0
     f5a:	1f 90       	pop	r1
     f5c:	18 95       	reti

00000f5e <AVR_init>:

/***********************************General***********************************/
void AVR_init(){
	//Motor Data Direction Setup
	*MOTOR_EN_DDR |= (1<<MOT0_EN_PIN | 1<<MOT1_EN_PIN | 1<<MOT2_EN_PIN | 1<<MOT3_EN_PIN | 1<<MOT4_EN_PIN | 1<<MOT5_EN_PIN);
     f5e:	e1 e6       	ldi	r30, 0x61	; 97
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	8c 6f       	ori	r24, 0xFC	; 252
     f66:	80 83       	st	Z, r24
	*MOTOR_DIR_DDR |= (1<<MOT0_DIR_PIN | 1<<MOT1_DIR_PIN | 1<<MOT2_DIR_PIN | 1<<MOT3_DIR_PIN | 1<<MOT4_DIR_PIN | 1<<MOT5_DIR_PIN);
     f68:	8a b3       	in	r24, 0x1a	; 26
     f6a:	8f 63       	ori	r24, 0x3F	; 63
     f6c:	8a bb       	out	0x1a, r24	; 26
	*MOTOR_STEP_DDR |= (1<<MOT0_STEP_PIN | 1<<MOT1_STEP_PIN | 1<<MOT2_STEP_PIN | 1<<MOT3_STEP_PIN | 1<<MOT4_STEP_PIN | 1<<MOT5_STEP_PIN);
     f6e:	84 b3       	in	r24, 0x14	; 20
     f70:	8f 63       	ori	r24, 0x3F	; 63
     f72:	84 bb       	out	0x14, r24	; 20
	
	//Parallel Lines Data Direction Setup
	*LINES_DDR |= (1<<LINE0_PIN | 1<<LINE1_PIN | 1<<LINE2_PIN | 1<<LINE3_PIN);
     f74:	81 b3       	in	r24, 0x11	; 17
     f76:	80 6f       	ori	r24, 0xF0	; 240
     f78:	81 bb       	out	0x11, r24	; 17
	
	//Camera Data Direction Setup
	*CAMERA_EN_DDR |= (1<<CAMERA_EN_PIN);
     f7a:	bd 9a       	sbi	0x17, 5	; 23
	
	//External Interrupt Settings
	//Set all interrupts to trigger on rising edge
	EICRA |= (1<<ISC31 | 1<<ISC30 | 1<<ISC21 | 1<<ISC20 | 1<<ISC11 | 1<<ISC10 | 1<<ISC01 | 1<<ISC00);
     f7c:	ea e6       	ldi	r30, 0x6A	; 106
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8f ef       	ldi	r24, 0xFF	; 255
     f84:	80 83       	st	Z, r24
	EICRB |= (1<<ISC61 | 1<<ISC60 | 1<<ISC51 | 1<<ISC50 | 1<<ISC41 | 1<<ISC40);
     f86:	8a b7       	in	r24, 0x3a	; 58
     f88:	8f 63       	ori	r24, 0x3F	; 63
     f8a:	8a bf       	out	0x3a, r24	; 58
	
	//TimerCounter1: 16-bit CTC mode, 64 prescale, 12500 top, no output latching
	TCCR1B |= (1<<WGM12 | 1<<CS11 | 1<<CS10);
     f8c:	8e b5       	in	r24, 0x2e	; 46
     f8e:	8b 60       	ori	r24, 0x0B	; 11
     f90:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x30D4;
     f92:	84 ed       	ldi	r24, 0xD4	; 212
     f94:	90 e3       	ldi	r25, 0x30	; 48
     f96:	9b bd       	out	0x2b, r25	; 43
     f98:	8a bd       	out	0x2a, r24	; 42
	
	//Enable ADC, single conversion mode, use external common GND, right-adjusted.
	ADMUX |= (1<<REFS0);
     f9a:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |= (1<<ADEN);
     f9c:	37 9a       	sbi	0x06, 7	; 6
}
     f9e:	08 95       	ret

00000fa0 <timer_counter_enable>:

void timer_counter_enable(uint8_t flag){
	cli();
     fa0:	f8 94       	cli
	if(flag == 0x01)
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	49 f0       	breq	.+18     	; 0xfb8 <timer_counter_enable+0x18>
		TIMSK |= (1<<OCIE1A);
	else{
		TIMSK &= ~(1<<OCIE1A);
     fa6:	87 b7       	in	r24, 0x37	; 55
     fa8:	8f 7e       	andi	r24, 0xEF	; 239
     faa:	87 bf       	out	0x37, r24	; 55
		time = 0x0000;
     fac:	10 92 34 01 	sts	0x0134, r1
     fb0:	10 92 33 01 	sts	0x0133, r1
	}
	sei();
     fb4:	78 94       	sei
}
     fb6:	08 95       	ret
}

void timer_counter_enable(uint8_t flag){
	cli();
	if(flag == 0x01)
		TIMSK |= (1<<OCIE1A);
     fb8:	87 b7       	in	r24, 0x37	; 55
     fba:	80 61       	ori	r24, 0x10	; 16
     fbc:	87 bf       	out	0x37, r24	; 55
	else{
		TIMSK &= ~(1<<OCIE1A);
		time = 0x0000;
	}
	sei();
     fbe:	78 94       	sei
}
     fc0:	08 95       	ret

00000fc2 <timer_event_enable>:

void timer_event_enable(uint8_t event, uint8_t flag){
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <timer_event_enable+0x6>
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
	cli();
     fcc:	f8 94       	cli
	uint8_t eventID[2] = {RSX_TE0_INT, RSX_TE1_INT};
     fce:	96 e0       	ldi	r25, 0x06	; 6
     fd0:	99 83       	std	Y+1, r25	; 0x01
     fd2:	95 e0       	ldi	r25, 0x05	; 5
     fd4:	9a 83       	std	Y+2, r25	; 0x02
	if(flag == 0x01)
		EIMSK |= (1<<eventID[event]);
     fd6:	29 b7       	in	r18, 0x39	; 57
     fd8:	fe 01       	movw	r30, r28
     fda:	e8 0f       	add	r30, r24
     fdc:	f1 1d       	adc	r31, r1
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	01 80       	ldd	r0, Z+1	; 0x01
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <timer_event_enable+0x28>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <timer_event_enable+0x24>
}

void timer_event_enable(uint8_t event, uint8_t flag){
	cli();
	uint8_t eventID[2] = {RSX_TE0_INT, RSX_TE1_INT};
	if(flag == 0x01)
     fee:	61 30       	cpi	r22, 0x01	; 1
     ff0:	61 f0       	breq	.+24     	; 0x100a <timer_event_enable+0x48>
		EIMSK |= (1<<eventID[event]);
	else{
		EIMSK &= (1<<eventID[event]);
     ff2:	28 23       	and	r18, r24
     ff4:	29 bf       	out	0x39, r18	; 57
		timer_event0_flg = 0x00;
     ff6:	10 92 36 01 	sts	0x0136, r1
		timer_event1_flg = 0x00;
     ffa:	10 92 35 01 	sts	0x0135, r1
	}
	sei();
     ffe:	78 94       	sei
}
    1000:	0f 90       	pop	r0
    1002:	0f 90       	pop	r0
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

void timer_event_enable(uint8_t event, uint8_t flag){
	cli();
	uint8_t eventID[2] = {RSX_TE0_INT, RSX_TE1_INT};
	if(flag == 0x01)
		EIMSK |= (1<<eventID[event]);
    100a:	28 2b       	or	r18, r24
    100c:	29 bf       	out	0x39, r18	; 57
	else{
		EIMSK &= (1<<eventID[event]);
		timer_event0_flg = 0x00;
		timer_event1_flg = 0x00;
	}
	sei();
    100e:	78 94       	sei
}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <send_code>:

void send_code(uint8_t code, uint8_t ms){
	uint8_t i;
	while((*LINE_STROBE_PORT & (1<<LINE_STROBE_PIN)) == 0x00){} //wait for PRS
    101a:	b6 9b       	sbis	0x16, 6	; 22
    101c:	fe cf       	rjmp	.-4      	; 0x101a <send_code>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    101e:	9a e1       	ldi	r25, 0x1A	; 26
    1020:	9a 95       	dec	r25
    1022:	f1 f7       	brne	.-4      	; 0x1020 <send_code+0x6>
    1024:	00 c0       	rjmp	.+0      	; 0x1026 <send_code+0xc>
	_delay_us(5); //wait for end of READ phase
	*LINES_PORT |= ((code&0x01)<<LINE0_PIN | (code&0x02)<<LINE1_PIN | (code&0x04)<<LINE2_PIN | (code&0x08)<<LINE3_PIN); //send code
    1026:	42 b3       	in	r20, 0x12	; 18
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	9c 01       	movw	r18, r24
    102c:	21 70       	andi	r18, 0x01	; 1
    102e:	30 70       	andi	r19, 0x00	; 0
    1030:	22 95       	swap	r18
    1032:	32 95       	swap	r19
    1034:	30 7f       	andi	r19, 0xF0	; 240
    1036:	32 27       	eor	r19, r18
    1038:	20 7f       	andi	r18, 0xF0	; 240
    103a:	32 27       	eor	r19, r18
    103c:	82 70       	andi	r24, 0x02	; 2
    103e:	90 70       	andi	r25, 0x00	; 0
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	82 95       	swap	r24
    1046:	92 95       	swap	r25
    1048:	90 7f       	andi	r25, 0xF0	; 240
    104a:	98 27       	eor	r25, r24
    104c:	80 7f       	andi	r24, 0xF0	; 240
    104e:	98 27       	eor	r25, r24
    1050:	82 2b       	or	r24, r18
    1052:	84 2b       	or	r24, r20
    1054:	82 bb       	out	0x12, r24	; 18
	for(i=0;i<ms;i++)
    1056:	66 23       	and	r22, r22
    1058:	51 f0       	breq	.+20     	; 0x106e <send_code+0x54>
    105a:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    105c:	ef e9       	ldi	r30, 0x9F	; 159
    105e:	ff e0       	ldi	r31, 0x0F	; 15
    1060:	31 97       	sbiw	r30, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <send_code+0x46>
    1064:	00 c0       	rjmp	.+0      	; 0x1066 <send_code+0x4c>
    1066:	00 00       	nop
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	86 17       	cp	r24, r22
    106c:	b9 f7       	brne	.-18     	; 0x105c <send_code+0x42>
		_delay_ms(1);
	while((*LINE_STROBE_PORT & (1<<LINE_STROBE_PIN)) == 0x00){} //wait for pulse
    106e:	b6 9b       	sbis	0x16, 6	; 22
    1070:	fe cf       	rjmp	.-4      	; 0x106e <send_code+0x54>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1072:	fa e1       	ldi	r31, 0x1A	; 26
    1074:	fa 95       	dec	r31
    1076:	f1 f7       	brne	.-4      	; 0x1074 <send_code+0x5a>
    1078:	00 c0       	rjmp	.+0      	; 0x107a <send_code+0x60>
	_delay_us(5); //wait for end of READ phase
	*LINES_PORT &= ~(1<<LINE0_PIN | 1<<LINE1_PIN | 1<<LINE2_PIN | 1<<LINE3_PIN); //reset to 0's
    107a:	82 b3       	in	r24, 0x12	; 18
    107c:	8f 70       	andi	r24, 0x0F	; 15
    107e:	82 bb       	out	0x12, r24	; 18
}
    1080:	08 95       	ret

00001082 <camera_enable>:

/**************************************Device Functions**************************************/
void camera_enable(uint8_t flag){
	static uint8_t power = 0x00;
	if (((flag == 0x01)&(power == 0x00))||((flag == 0x00)&(power == 0x01))){
    1082:	90 91 38 01 	lds	r25, 0x0138
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	29 f0       	breq	.+10     	; 0x1094 <camera_enable+0x12>
    108a:	88 23       	and	r24, r24
    108c:	11 f4       	brne	.+4      	; 0x1092 <camera_enable+0x10>
    108e:	91 30       	cpi	r25, 0x01	; 1
    1090:	19 f0       	breq	.+6      	; 0x1098 <camera_enable+0x16>
    1092:	08 95       	ret
    1094:	99 23       	and	r25, r25
    1096:	99 f4       	brne	.+38     	; 0x10be <camera_enable+0x3c>
		*CAMERA_EN_PORT |= (1<<CAMERA_EN_PIN);
    1098:	c5 9a       	sbi	0x18, 5	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    109a:	2f ef       	ldi	r18, 0xFF	; 255
    109c:	31 ee       	ldi	r19, 0xE1	; 225
    109e:	44 e0       	ldi	r20, 0x04	; 4
    10a0:	21 50       	subi	r18, 0x01	; 1
    10a2:	30 40       	sbci	r19, 0x00	; 0
    10a4:	40 40       	sbci	r20, 0x00	; 0
    10a6:	e1 f7       	brne	.-8      	; 0x10a0 <camera_enable+0x1e>
    10a8:	00 c0       	rjmp	.+0      	; 0x10aa <camera_enable+0x28>
    10aa:	00 00       	nop
		_delay_ms(100);
		*CAMERA_EN_PORT &= ~(1<<CAMERA_EN_PIN);
    10ac:	c5 98       	cbi	0x18, 5	; 24
		power = (power + 1) % 2;
    10ae:	89 2f       	mov	r24, r25
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	01 96       	adiw	r24, 0x01	; 1
    10b4:	81 70       	andi	r24, 0x01	; 1
    10b6:	90 70       	andi	r25, 0x00	; 0
    10b8:	80 93 38 01 	sts	0x0138, r24
    10bc:	08 95       	ret
    10be:	08 95       	ret

000010c0 <touch_sensor_check>:
	}
}

uint8_t touch_sensor_check(){
	if((*TOUCH_PORT & (1<<TOUCH_PIN)) > 0x00)
		return 0x01;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	b4 9b       	sbis	0x16, 4	; 22
    10c4:	80 e0       	ldi	r24, 0x00	; 0
	else
		return 0x00;
}
    10c6:	08 95       	ret

000010c8 <temperature_probe_sample>:

uint16_t temperature_probe_sample(uint8_t probe){
	if(probe == 0x00)
    10c8:	88 23       	and	r24, r24
    10ca:	39 f4       	brne	.+14     	; 0x10da <temperature_probe_sample+0x12>
		ADMUX &= ~(1<<MUX0);
    10cc:	38 98       	cbi	0x07, 0	; 7
	else
		ADMUX |= (1<<MUX0);
	ADCSRA |= (1<<ADSC); //Starts conversion
    10ce:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
    10d0:	36 99       	sbic	0x06, 6	; 6
    10d2:	fe cf       	rjmp	.-4      	; 0x10d0 <temperature_probe_sample+0x8>
	return ADC;
    10d4:	84 b1       	in	r24, 0x04	; 4
    10d6:	95 b1       	in	r25, 0x05	; 5
}
    10d8:	08 95       	ret

uint16_t temperature_probe_sample(uint8_t probe){
	if(probe == 0x00)
		ADMUX &= ~(1<<MUX0);
	else
		ADMUX |= (1<<MUX0);
    10da:	38 9a       	sbi	0x07, 0	; 7
    10dc:	f8 cf       	rjmp	.-16     	; 0x10ce <temperature_probe_sample+0x6>

000010de <motor_calibration_enable>:
	while(ADCSRA & (1<<ADSC));
	return ADC;
}

/***********************************Motor Driver Functions***********************************/
void motor_calibration_enable(uint8_t motor, uint8_t flag){
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <motor_calibration_enable+0x6>
    10e4:	00 d0       	rcall	.+0      	; 0x10e6 <motor_calibration_enable+0x8>
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <motor_calibration_enable+0xa>
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	uint8_t motorCBID[6] = {MOT0_CALIB_INT, MOT1_CALIB_INT, MOT2_CALIB_INT, MOT3_CALIB_INT, MOT4_CALIB_INT};
    10ec:	fe 01       	movw	r30, r28
    10ee:	31 96       	adiw	r30, 0x01	; 1
    10f0:	96 e0       	ldi	r25, 0x06	; 6
    10f2:	df 01       	movw	r26, r30
    10f4:	1d 92       	st	X+, r1
    10f6:	9a 95       	dec	r25
    10f8:	e9 f7       	brne	.-6      	; 0x10f4 <motor_calibration_enable+0x16>
    10fa:	91 e0       	ldi	r25, 0x01	; 1
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	92 e0       	ldi	r25, 0x02	; 2
    1100:	9b 83       	std	Y+3, r25	; 0x03
    1102:	93 e0       	ldi	r25, 0x03	; 3
    1104:	9c 83       	std	Y+4, r25	; 0x04
    1106:	94 e0       	ldi	r25, 0x04	; 4
    1108:	9d 83       	std	Y+5, r25	; 0x05
	cli();
    110a:	f8 94       	cli
	if(flag == 0x01)
		EIMSK |= (1<<motorCBID[motor]);
    110c:	29 b7       	in	r18, 0x39	; 57
    110e:	e8 0f       	add	r30, r24
    1110:	f1 1d       	adc	r31, r1
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	00 80       	ld	r0, Z
    1118:	02 c0       	rjmp	.+4      	; 0x111e <__stack+0x1f>
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	0a 94       	dec	r0
    1120:	e2 f7       	brpl	.-8      	; 0x111a <__stack+0x1b>

/***********************************Motor Driver Functions***********************************/
void motor_calibration_enable(uint8_t motor, uint8_t flag){
	uint8_t motorCBID[6] = {MOT0_CALIB_INT, MOT1_CALIB_INT, MOT2_CALIB_INT, MOT3_CALIB_INT, MOT4_CALIB_INT};
	cli();
	if(flag == 0x01)
    1122:	61 30       	cpi	r22, 0x01	; 1
    1124:	71 f0       	breq	.+28     	; 0x1142 <__stack+0x43>
		EIMSK |= (1<<motorCBID[motor]);
	else
		EIMSK &= (1<<motorCBID[motor]);
    1126:	28 23       	and	r18, r24
    1128:	29 bf       	out	0x39, r18	; 57
	calibration_flg = 0x00;
    112a:	10 92 37 01 	sts	0x0137, r1
	sei();
    112e:	78 94       	sei
}
    1130:	26 96       	adiw	r28, 0x06	; 6
    1132:	0f b6       	in	r0, 0x3f	; 63
    1134:	f8 94       	cli
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	0f be       	out	0x3f, r0	; 63
    113a:	cd bf       	out	0x3d, r28	; 61
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	08 95       	ret
/***********************************Motor Driver Functions***********************************/
void motor_calibration_enable(uint8_t motor, uint8_t flag){
	uint8_t motorCBID[6] = {MOT0_CALIB_INT, MOT1_CALIB_INT, MOT2_CALIB_INT, MOT3_CALIB_INT, MOT4_CALIB_INT};
	cli();
	if(flag == 0x01)
		EIMSK |= (1<<motorCBID[motor]);
    1142:	28 2b       	or	r18, r24
    1144:	29 bf       	out	0x39, r18	; 57
    1146:	f1 cf       	rjmp	.-30     	; 0x112a <__stack+0x2b>

00001148 <motor_pwr>:
		EIMSK &= (1<<motorCBID[motor]);
	calibration_flg = 0x00;
	sei();
}

void motor_pwr(uint8_t motor, uint8_t flag){
    1148:	cf 93       	push	r28
    114a:	df 93       	push	r29
    114c:	00 d0       	rcall	.+0      	; 0x114e <motor_pwr+0x6>
    114e:	00 d0       	rcall	.+0      	; 0x1150 <motor_pwr+0x8>
    1150:	00 d0       	rcall	.+0      	; 0x1152 <motor_pwr+0xa>
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	uint8_t motorENID[6] = {MOT0_EN_PIN, MOT1_EN_PIN, MOT2_EN_PIN,
    1156:	de 01       	movw	r26, r28
    1158:	11 96       	adiw	r26, 0x01	; 1
    115a:	ee e0       	ldi	r30, 0x0E	; 14
    115c:	f1 e0       	ldi	r31, 0x01	; 1
    115e:	96 e0       	ldi	r25, 0x06	; 6
    1160:	01 90       	ld	r0, Z+
    1162:	0d 92       	st	X+, r0
    1164:	91 50       	subi	r25, 0x01	; 1
    1166:	e1 f7       	brne	.-8      	; 0x1160 <motor_pwr+0x18>
					   MOT3_EN_PIN, MOT4_EN_PIN, MOT5_EN_PIN};
	if(flag == 0x01)
		*MOTOR_EN_PORT &= ~(1<<motorENID[motor]);
    1168:	20 91 62 00 	lds	r18, 0x0062
    116c:	e1 e0       	ldi	r30, 0x01	; 1
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	ec 0f       	add	r30, r28
    1172:	fd 1f       	adc	r31, r29
    1174:	e8 0f       	add	r30, r24
    1176:	f1 1d       	adc	r31, r1
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	00 80       	ld	r0, Z
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <motor_pwr+0x3c>
    1180:	88 0f       	add	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	0a 94       	dec	r0
    1186:	e2 f7       	brpl	.-8      	; 0x1180 <motor_pwr+0x38>
}

void motor_pwr(uint8_t motor, uint8_t flag){
	uint8_t motorENID[6] = {MOT0_EN_PIN, MOT1_EN_PIN, MOT2_EN_PIN,
					   MOT3_EN_PIN, MOT4_EN_PIN, MOT5_EN_PIN};
	if(flag == 0x01)
    1188:	61 30       	cpi	r22, 0x01	; 1
    118a:	61 f0       	breq	.+24     	; 0x11a4 <motor_pwr+0x5c>
		*MOTOR_EN_PORT &= ~(1<<motorENID[motor]);
	else
		*MOTOR_EN_PORT |= (1<<motorENID[motor]);
    118c:	28 2b       	or	r18, r24
    118e:	20 93 62 00 	sts	0x0062, r18
}
    1192:	26 96       	adiw	r28, 0x06	; 6
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	08 95       	ret

void motor_pwr(uint8_t motor, uint8_t flag){
	uint8_t motorENID[6] = {MOT0_EN_PIN, MOT1_EN_PIN, MOT2_EN_PIN,
					   MOT3_EN_PIN, MOT4_EN_PIN, MOT5_EN_PIN};
	if(flag == 0x01)
		*MOTOR_EN_PORT &= ~(1<<motorENID[motor]);
    11a4:	80 95       	com	r24
    11a6:	82 23       	and	r24, r18
    11a8:	80 93 62 00 	sts	0x0062, r24
    11ac:	f2 cf       	rjmp	.-28     	; 0x1192 <motor_pwr+0x4a>

000011ae <motor_dir>:
	else
		*MOTOR_EN_PORT |= (1<<motorENID[motor]);
}

void motor_dir(uint8_t motor, uint8_t dir){
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <motor_dir+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <motor_dir+0x8>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <motor_dir+0xa>
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
	uint8_t motorDIRID[6] = {MOT0_DIR_PIN, MOT1_DIR_PIN, MOT2_DIR_PIN,
    11bc:	de 01       	movw	r26, r28
    11be:	11 96       	adiw	r26, 0x01	; 1
    11c0:	e4 e1       	ldi	r30, 0x14	; 20
    11c2:	f1 e0       	ldi	r31, 0x01	; 1
    11c4:	96 e0       	ldi	r25, 0x06	; 6
    11c6:	01 90       	ld	r0, Z+
    11c8:	0d 92       	st	X+, r0
    11ca:	91 50       	subi	r25, 0x01	; 1
    11cc:	e1 f7       	brne	.-8      	; 0x11c6 <motor_dir+0x18>
					   MOT3_DIR_PIN, MOT4_DIR_PIN, MOT5_DIR_PIN};
	if(dir == 0x01)
		*MOTOR_DIR_PORT |= (1<<motorDIRID[motor]);
    11ce:	2b b3       	in	r18, 0x1b	; 27
    11d0:	e1 e0       	ldi	r30, 0x01	; 1
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	ec 0f       	add	r30, r28
    11d6:	fd 1f       	adc	r31, r29
    11d8:	e8 0f       	add	r30, r24
    11da:	f1 1d       	adc	r31, r1
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	00 80       	ld	r0, Z
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <motor_dir+0x3a>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	0a 94       	dec	r0
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <motor_dir+0x36>
}

void motor_dir(uint8_t motor, uint8_t dir){
	uint8_t motorDIRID[6] = {MOT0_DIR_PIN, MOT1_DIR_PIN, MOT2_DIR_PIN,
					   MOT3_DIR_PIN, MOT4_DIR_PIN, MOT5_DIR_PIN};
	if(dir == 0x01)
    11ec:	61 30       	cpi	r22, 0x01	; 1
    11ee:	61 f0       	breq	.+24     	; 0x1208 <motor_dir+0x5a>
		*MOTOR_DIR_PORT |= (1<<motorDIRID[motor]);
	else
		*MOTOR_DIR_PORT &= ~(1<<motorDIRID[motor]);
    11f0:	80 95       	com	r24
    11f2:	82 23       	and	r24, r18
    11f4:	8b bb       	out	0x1b, r24	; 27
}
    11f6:	26 96       	adiw	r28, 0x06	; 6
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

void motor_dir(uint8_t motor, uint8_t dir){
	uint8_t motorDIRID[6] = {MOT0_DIR_PIN, MOT1_DIR_PIN, MOT2_DIR_PIN,
					   MOT3_DIR_PIN, MOT4_DIR_PIN, MOT5_DIR_PIN};
	if(dir == 0x01)
		*MOTOR_DIR_PORT |= (1<<motorDIRID[motor]);
    1208:	28 2b       	or	r18, r24
    120a:	2b bb       	out	0x1b, r18	; 27
    120c:	f4 cf       	rjmp	.-24     	; 0x11f6 <motor_dir+0x48>

0000120e <motor_step>:
	else
		*MOTOR_DIR_PORT &= ~(1<<motorDIRID[motor]);
}

void motor_step(uint8_t motor, uint16_t steps, uint16_t speed){
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	00 d0       	rcall	.+0      	; 0x1216 <motor_step+0x8>
    1216:	00 d0       	rcall	.+0      	; 0x1218 <motor_step+0xa>
    1218:	00 d0       	rcall	.+0      	; 0x121a <motor_step+0xc>
    121a:	cd b7       	in	r28, 0x3d	; 61
    121c:	de b7       	in	r29, 0x3e	; 62
    121e:	18 2f       	mov	r17, r24
	uint16_t j,k;
	uint8_t motorSTEPID[6] = {MOT0_STEP_PIN, MOT1_STEP_PIN, MOT2_STEP_PIN, MOT3_STEP_PIN, MOT4_STEP_PIN, MOT5_STEP_PIN};
    1220:	de 01       	movw	r26, r28
    1222:	11 96       	adiw	r26, 0x01	; 1
    1224:	e4 e1       	ldi	r30, 0x14	; 20
    1226:	f1 e0       	ldi	r31, 0x01	; 1
    1228:	86 e0       	ldi	r24, 0x06	; 6
    122a:	01 90       	ld	r0, Z+
    122c:	0d 92       	st	X+, r0
    122e:	81 50       	subi	r24, 0x01	; 1
    1230:	e1 f7       	brne	.-8      	; 0x122a <motor_step+0x1c>
	speed = -99*(speed)+10000;
    1232:	8d e9       	ldi	r24, 0x9D	; 157
    1234:	9f ef       	ldi	r25, 0xFF	; 255
    1236:	48 9f       	mul	r20, r24
    1238:	90 01       	movw	r18, r0
    123a:	49 9f       	mul	r20, r25
    123c:	30 0d       	add	r19, r0
    123e:	58 9f       	mul	r21, r24
    1240:	30 0d       	add	r19, r0
    1242:	11 24       	eor	r1, r1
    1244:	20 5f       	subi	r18, 0xF0	; 240
    1246:	38 4d       	sbci	r19, 0xD8	; 216
	steps = 2*steps;
    1248:	db 01       	movw	r26, r22
    124a:	aa 0f       	add	r26, r26
    124c:	bb 1f       	adc	r27, r27
	for (j=0;j<steps;j++){
    124e:	10 97       	sbiw	r26, 0x00	; 0
    1250:	51 f1       	breq	.+84     	; 0x12a6 <motor_step+0x98>
		if(calibration_flg == 0x00){
    1252:	80 91 37 01 	lds	r24, 0x0137
    1256:	88 23       	and	r24, r24
    1258:	81 f5       	brne	.+96     	; 0x12ba <motor_step+0xac>
void motor_step(uint8_t motor, uint16_t steps, uint16_t speed){
	uint16_t j,k;
	uint8_t motorSTEPID[6] = {MOT0_STEP_PIN, MOT1_STEP_PIN, MOT2_STEP_PIN, MOT3_STEP_PIN, MOT4_STEP_PIN, MOT5_STEP_PIN};
	speed = -99*(speed)+10000;
	steps = 2*steps;
	for (j=0;j<steps;j++){
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	50 e0       	ldi	r21, 0x00	; 0
		if(calibration_flg == 0x00){
			*MOTOR_STEP_PORT ^= (1<<motorSTEPID[motor]);
    125e:	e1 e0       	ldi	r30, 0x01	; 1
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	ec 0f       	add	r30, r28
    1264:	fd 1f       	adc	r31, r29
    1266:	e1 0f       	add	r30, r17
    1268:	f1 1d       	adc	r31, r1
    126a:	61 e0       	ldi	r22, 0x01	; 1
    126c:	70 e0       	ldi	r23, 0x00	; 0
    126e:	15 b3       	in	r17, 0x15	; 21
    1270:	cb 01       	movw	r24, r22
    1272:	00 80       	ld	r0, Z
    1274:	02 c0       	rjmp	.+4      	; 0x127a <motor_step+0x6c>
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	0a 94       	dec	r0
    127c:	e2 f7       	brpl	.-8      	; 0x1276 <motor_step+0x68>
    127e:	18 27       	eor	r17, r24
    1280:	15 bb       	out	0x15, r17	; 21
			for (k=0;k<speed;k++)
    1282:	21 15       	cp	r18, r1
    1284:	31 05       	cpc	r19, r1
    1286:	51 f0       	breq	.+20     	; 0x129c <motor_step+0x8e>
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    128c:	15 e0       	ldi	r17, 0x05	; 5
    128e:	1a 95       	dec	r17
    1290:	f1 f7       	brne	.-4      	; 0x128e <motor_step+0x80>
    1292:	00 00       	nop
    1294:	01 96       	adiw	r24, 0x01	; 1
    1296:	82 17       	cp	r24, r18
    1298:	93 07       	cpc	r25, r19
    129a:	c0 f3       	brcs	.-16     	; 0x128c <motor_step+0x7e>
void motor_step(uint8_t motor, uint16_t steps, uint16_t speed){
	uint16_t j,k;
	uint8_t motorSTEPID[6] = {MOT0_STEP_PIN, MOT1_STEP_PIN, MOT2_STEP_PIN, MOT3_STEP_PIN, MOT4_STEP_PIN, MOT5_STEP_PIN};
	speed = -99*(speed)+10000;
	steps = 2*steps;
	for (j=0;j<steps;j++){
    129c:	4f 5f       	subi	r20, 0xFF	; 255
    129e:	5f 4f       	sbci	r21, 0xFF	; 255
    12a0:	4a 17       	cp	r20, r26
    12a2:	5b 07       	cpc	r21, r27
    12a4:	21 f7       	brne	.-56     	; 0x126e <motor_step+0x60>
		}else{
			*MOTOR_STEP_PORT &= (1<<motorSTEPID[motor]);
			break;
		}
	}
}
    12a6:	26 96       	adiw	r28, 0x06	; 6
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	08 95       	ret
		if(calibration_flg == 0x00){
			*MOTOR_STEP_PORT ^= (1<<motorSTEPID[motor]);
			for (k=0;k<speed;k++)
				_delay_us(1);
		}else{
			*MOTOR_STEP_PORT &= (1<<motorSTEPID[motor]);
    12ba:	25 b3       	in	r18, 0x15	; 21
    12bc:	e1 e0       	ldi	r30, 0x01	; 1
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	ec 0f       	add	r30, r28
    12c2:	fd 1f       	adc	r31, r29
    12c4:	e1 0f       	add	r30, r17
    12c6:	f1 1d       	adc	r31, r1
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	00 80       	ld	r0, Z
    12ce:	02 c0       	rjmp	.+4      	; 0x12d4 <motor_step+0xc6>
    12d0:	88 0f       	add	r24, r24
    12d2:	99 1f       	adc	r25, r25
    12d4:	0a 94       	dec	r0
    12d6:	e2 f7       	brpl	.-8      	; 0x12d0 <motor_step+0xc2>
    12d8:	28 23       	and	r18, r24
    12da:	25 bb       	out	0x15, r18	; 21
			break;
    12dc:	e4 cf       	rjmp	.-56     	; 0x12a6 <motor_step+0x98>

000012de <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	ec 01       	movw	r28, r24
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
    12e4:	a8 81       	ld	r26, Y
    12e6:	b9 81       	ldd	r27, Y+1	; 0x01
    12e8:	10 97       	sbiw	r26, 0x00	; 0
    12ea:	11 f1       	breq	.+68     	; 0x1330 <get_ldnumber+0x52>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    12ec:	2c 91       	ld	r18, X
    12ee:	21 32       	cpi	r18, 0x21	; 33
    12f0:	70 f0       	brcs	.+28     	; 0x130e <get_ldnumber+0x30>
    12f2:	2a 33       	cpi	r18, 0x3A	; 58
    12f4:	e9 f0       	breq	.+58     	; 0x1330 <get_ldnumber+0x52>
/*-----------------------------------------------------------------------*/
/* Get logical drive number from path name                               */
/*-----------------------------------------------------------------------*/

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
    12f6:	ad 01       	movw	r20, r26
    12f8:	4f 5f       	subi	r20, 0xFF	; 255
    12fa:	5f 4f       	sbci	r21, 0xFF	; 255
    12fc:	ca 01       	movw	r24, r20
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <get_ldnumber+0x28>
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    1300:	3a 33       	cpi	r19, 0x3A	; 58
    1302:	59 f0       	breq	.+22     	; 0x131a <get_ldnumber+0x3c>
    1304:	cf 01       	movw	r24, r30
    1306:	fc 01       	movw	r30, r24
    1308:	31 91       	ld	r19, Z+
    130a:	31 32       	cpi	r19, 0x21	; 33
    130c:	c8 f7       	brcc	.-14     	; 0x1300 <get_ldnumber+0x22>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
#endif
	}
	return vol;
}
    1312:	c9 01       	movw	r24, r18
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
    131a:	33 27       	eor	r19, r19
    131c:	27 fd       	sbrc	r18, 7
    131e:	30 95       	com	r19
    1320:	20 53       	subi	r18, 0x30	; 48
    1322:	30 40       	sbci	r19, 0x00	; 0
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
    1324:	2a 30       	cpi	r18, 0x0A	; 10
    1326:	31 05       	cpc	r19, r1
    1328:	18 f4       	brcc	.+6      	; 0x1330 <get_ldnumber+0x52>
    132a:	84 17       	cp	r24, r20
    132c:	95 07       	cpc	r25, r21
    132e:	31 f0       	breq	.+12     	; 0x133c <get_ldnumber+0x5e>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
    1330:	2f ef       	ldi	r18, 0xFF	; 255
    1332:	3f ef       	ldi	r19, 0xFF	; 255
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
    1334:	c9 01       	movw	r24, r18
    1336:	df 91       	pop	r29
    1338:	cf 91       	pop	r28
    133a:	08 95       	ret
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
    133c:	21 15       	cp	r18, r1
    133e:	31 05       	cpc	r19, r1
    1340:	b9 f7       	brne	.-18     	; 0x1330 <get_ldnumber+0x52>
					vol = (int)i;
					*path = ++tt;
    1342:	12 96       	adiw	r26, 0x02	; 2
    1344:	b9 83       	std	Y+1, r27	; 0x01
    1346:	a8 83       	st	Y, r26
    1348:	e4 cf       	rjmp	.-56     	; 0x1312 <get_ldnumber+0x34>

0000134a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	void* dfp,		/* Pointer to the FIL/DIR object to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	00 d0       	rcall	.+0      	; 0x1354 <validate+0xa>
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	8c 01       	movw	r16, r24
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (mmc_disk_status(obj->fs->drv) & STA_NOINIT)) {
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	49 f0       	breq	.+18     	; 0x1370 <validate+0x26>
    135e:	dc 01       	movw	r26, r24
    1360:	ed 91       	ld	r30, X+
    1362:	fc 91       	ld	r31, X
    1364:	11 97       	sbiw	r26, 0x01	; 1
    1366:	30 97       	sbiw	r30, 0x00	; 0
    1368:	19 f0       	breq	.+6      	; 0x1370 <validate+0x26>
    136a:	80 81       	ld	r24, Z
    136c:	88 23       	and	r24, r24
    136e:	61 f4       	brne	.+24     	; 0x1388 <validate+0x3e>
		*fs = 0;				/* The object is invalid */
    1370:	fb 01       	movw	r30, r22
    1372:	11 82       	std	Z+1, r1	; 0x01
    1374:	10 82       	st	Z, r1
		res = FR_INVALID_OBJECT;
    1376:	89 e0       	ldi	r24, 0x09	; 9
    1378:	90 e0       	ldi	r25, 0x00	; 0
		*fs = obj->fs;			/* Owner file sytem object */
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
	}
	return res;
}
    137a:	0f 90       	pop	r0
    137c:	0f 90       	pop	r0
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	1f 91       	pop	r17
    1384:	0f 91       	pop	r16
    1386:	08 95       	ret
{
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (mmc_disk_status(obj->fs->drv) & STA_NOINIT)) {
    1388:	85 81       	ldd	r24, Z+5	; 0x05
    138a:	96 81       	ldd	r25, Z+6	; 0x06
    138c:	12 96       	adiw	r26, 0x02	; 2
    138e:	2d 91       	ld	r18, X+
    1390:	3c 91       	ld	r19, X
    1392:	13 97       	sbiw	r26, 0x03	; 3
    1394:	82 17       	cp	r24, r18
    1396:	93 07       	cpc	r25, r19
    1398:	59 f7       	brne	.-42     	; 0x1370 <validate+0x26>
    139a:	81 81       	ldd	r24, Z+1	; 0x01
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	69 83       	std	Y+1, r22	; 0x01
    13a0:	7a 83       	std	Y+2, r23	; 0x02
    13a2:	0e 94 4b 02 	call	0x496	; 0x496 <mmc_disk_status>
    13a6:	69 81       	ldd	r22, Y+1	; 0x01
    13a8:	7a 81       	ldd	r23, Y+2	; 0x02
    13aa:	80 fd       	sbrc	r24, 0
    13ac:	e1 cf       	rjmp	.-62     	; 0x1370 <validate+0x26>
		*fs = 0;				/* The object is invalid */
		res = FR_INVALID_OBJECT;
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
    13ae:	d8 01       	movw	r26, r16
    13b0:	8d 91       	ld	r24, X+
    13b2:	9c 91       	ld	r25, X
    13b4:	11 97       	sbiw	r26, 0x01	; 1
    13b6:	fb 01       	movw	r30, r22
    13b8:	91 83       	std	Z+1, r25	; 0x01
    13ba:	80 83       	st	Z, r24
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	dc cf       	rjmp	.-72     	; 0x137a <validate+0x30>

000013c2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    13c2:	fc 01       	movw	r30, r24
    13c4:	db 01       	movw	r26, r22
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
    13c6:	41 15       	cp	r20, r1
    13c8:	51 05       	cpc	r21, r1
    13ca:	29 f0       	breq	.+10     	; 0x13d6 <mem_cpy+0x14>
		do *d++ = *s++; while (--cnt);
    13cc:	8d 91       	ld	r24, X+
    13ce:	81 93       	st	Z+, r24
    13d0:	41 50       	subi	r20, 0x01	; 1
    13d2:	50 40       	sbci	r21, 0x00	; 0
    13d4:	d9 f7       	brne	.-10     	; 0x13cc <mem_cpy+0xa>
    13d6:	08 95       	ret

000013d8 <get_fileinfo.isra.3.part.4>:
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/

static
void get_fileinfo (		/* No return code */
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	dc 01       	movw	r26, r24
    13de:	eb 01       	movw	r28, r22
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e0       	ldi	r25, 0x00	; 0
	i = j = 0;
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
    13e8:	5e e2       	ldi	r21, 0x2E	; 46
    13ea:	0c c0       	rjmp	.+24     	; 0x1404 <get_fileinfo.isra.3.part.4+0x2c>
    13ec:	89 30       	cpi	r24, 0x09	; 9
    13ee:	91 05       	cpc	r25, r1
    13f0:	c1 f0       	breq	.+48     	; 0x1422 <get_fileinfo.isra.3.part.4+0x4a>
		fno->fname[j++] = c;
    13f2:	fe 01       	movw	r30, r28
    13f4:	e2 0f       	add	r30, r18
    13f6:	f3 1f       	adc	r31, r19
    13f8:	41 87       	std	Z+9, r20	; 0x09
    13fa:	2f 5f       	subi	r18, 0xFF	; 255
    13fc:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
	while (i < 11) {		/* Copy name body and extension */
    13fe:	8b 30       	cpi	r24, 0x0B	; 11
    1400:	91 05       	cpc	r25, r1
    1402:	b1 f0       	breq	.+44     	; 0x1430 <get_fileinfo.isra.3.part.4+0x58>
		c = (TCHAR)dp->dir[i++];
    1404:	ed 91       	ld	r30, X+
    1406:	fc 91       	ld	r31, X
    1408:	11 97       	sbiw	r26, 0x01	; 1
    140a:	e8 0f       	add	r30, r24
    140c:	f9 1f       	adc	r31, r25
    140e:	40 81       	ld	r20, Z
    1410:	01 96       	adiw	r24, 0x01	; 1
		if (c == ' ') continue;				/* Skip padding spaces */
    1412:	40 32       	cpi	r20, 0x20	; 32
    1414:	a1 f3       	breq	.-24     	; 0x13fe <get_fileinfo.isra.3.part.4+0x26>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
    1416:	45 30       	cpi	r20, 0x05	; 5
    1418:	49 f7       	brne	.-46     	; 0x13ec <get_fileinfo.isra.3.part.4+0x14>
    141a:	45 ee       	ldi	r20, 0xE5	; 229
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
    141c:	89 30       	cpi	r24, 0x09	; 9
    141e:	91 05       	cpc	r25, r1
    1420:	41 f7       	brne	.-48     	; 0x13f2 <get_fileinfo.isra.3.part.4+0x1a>
    1422:	fe 01       	movw	r30, r28
    1424:	e2 0f       	add	r30, r18
    1426:	f3 1f       	adc	r31, r19
    1428:	51 87       	std	Z+9, r21	; 0x09
    142a:	2f 5f       	subi	r18, 0xFF	; 255
    142c:	3f 4f       	sbci	r19, 0xFF	; 255
    142e:	e1 cf       	rjmp	.-62     	; 0x13f2 <get_fileinfo.isra.3.part.4+0x1a>
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
    1430:	2c 0f       	add	r18, r28
    1432:	3d 1f       	adc	r19, r29
    1434:	f9 01       	movw	r30, r18
    1436:	11 86       	std	Z+9, r1	; 0x09
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
    1438:	ed 91       	ld	r30, X+
    143a:	fc 91       	ld	r31, X
    143c:	11 97       	sbiw	r26, 0x01	; 1
    143e:	83 85       	ldd	r24, Z+11	; 0x0b
    1440:	88 87       	std	Y+8, r24	; 0x08
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
    1442:	ed 91       	ld	r30, X+
    1444:	fc 91       	ld	r31, X
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    1446:	87 8d       	ldd	r24, Z+31	; 0x1f
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	a0 e0       	ldi	r26, 0x00	; 0
    144c:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    144e:	ba 2f       	mov	r27, r26
    1450:	a9 2f       	mov	r26, r25
    1452:	98 2f       	mov	r25, r24
    1454:	88 27       	eor	r24, r24
    1456:	46 8d       	ldd	r20, Z+30	; 0x1e
    1458:	50 e0       	ldi	r21, 0x00	; 0
    145a:	60 e0       	ldi	r22, 0x00	; 0
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	84 2b       	or	r24, r20
    1460:	95 2b       	or	r25, r21
    1462:	a6 2b       	or	r26, r22
    1464:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    1466:	ba 2f       	mov	r27, r26
    1468:	a9 2f       	mov	r26, r25
    146a:	98 2f       	mov	r25, r24
    146c:	88 27       	eor	r24, r24
    146e:	45 8d       	ldd	r20, Z+29	; 0x1d
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	84 2b       	or	r24, r20
    1478:	95 2b       	or	r25, r21
    147a:	a6 2b       	or	r26, r22
    147c:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    147e:	ba 2f       	mov	r27, r26
    1480:	a9 2f       	mov	r26, r25
    1482:	98 2f       	mov	r25, r24
    1484:	88 27       	eor	r24, r24
    1486:	44 8d       	ldd	r20, Z+28	; 0x1c
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	60 e0       	ldi	r22, 0x00	; 0
    148c:	70 e0       	ldi	r23, 0x00	; 0
    148e:	84 2b       	or	r24, r20
    1490:	95 2b       	or	r25, r21
    1492:	a6 2b       	or	r26, r22
    1494:	b7 2b       	or	r27, r23
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
    1496:	88 83       	st	Y, r24
    1498:	99 83       	std	Y+1, r25	; 0x01
    149a:	aa 83       	std	Y+2, r26	; 0x02
    149c:	bb 83       	std	Y+3, r27	; 0x03
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    149e:	81 8d       	ldd	r24, Z+25	; 0x19
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	a0 e0       	ldi	r26, 0x00	; 0
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    14a6:	ba 2f       	mov	r27, r26
    14a8:	a9 2f       	mov	r26, r25
    14aa:	98 2f       	mov	r25, r24
    14ac:	88 27       	eor	r24, r24
    14ae:	40 8d       	ldd	r20, Z+24	; 0x18
    14b0:	50 e0       	ldi	r21, 0x00	; 0
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	84 2b       	or	r24, r20
    14b8:	95 2b       	or	r25, r21
    14ba:	a6 2b       	or	r26, r22
    14bc:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    14be:	ba 2f       	mov	r27, r26
    14c0:	a9 2f       	mov	r26, r25
    14c2:	98 2f       	mov	r25, r24
    14c4:	88 27       	eor	r24, r24
    14c6:	47 89       	ldd	r20, Z+23	; 0x17
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	84 2b       	or	r24, r20
    14d0:	95 2b       	or	r25, r21
    14d2:	a6 2b       	or	r26, r22
    14d4:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    14d6:	ba 2f       	mov	r27, r26
    14d8:	a9 2f       	mov	r26, r25
    14da:	98 2f       	mov	r25, r24
    14dc:	88 27       	eor	r24, r24
    14de:	46 89       	ldd	r20, Z+22	; 0x16
    14e0:	50 e0       	ldi	r21, 0x00	; 0
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	84 2b       	or	r24, r20
    14e8:	95 2b       	or	r25, r21
    14ea:	a6 2b       	or	r26, r22
    14ec:	b7 2b       	or	r27, r23
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
    14ee:	9f 83       	std	Y+7, r25	; 0x07
    14f0:	8e 83       	std	Y+6, r24	; 0x06
    14f2:	bd 83       	std	Y+5, r27	; 0x05
    14f4:	ac 83       	std	Y+4, r26	; 0x04
}
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	08 95       	ret

000014fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
    14fc:	8f 92       	push	r8
    14fe:	9f 92       	push	r9
    1500:	af 92       	push	r10
    1502:	bf 92       	push	r11
    1504:	cf 92       	push	r12
    1506:	df 92       	push	r13
    1508:	ef 92       	push	r14
    150a:	ff 92       	push	r15
    150c:	0f 93       	push	r16
    150e:	1f 93       	push	r17
    1510:	cf 93       	push	r28
    1512:	df 93       	push	r29
    1514:	ec 01       	movw	r28, r24
	uint8_t num = 0x00;

	// do we go in this function? - WE DO


	if (fs->wflag) {	/* Write back the sector if it is dirty */
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	88 23       	and	r24, r24
    151a:	79 f4       	brne	.+30     	; 0x153a <sync_window+0x3e>
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	90 e0       	ldi	r25, 0x00	; 0
		}
	}


	return res;
}
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	bf 90       	pop	r11
    1532:	af 90       	pop	r10
    1534:	9f 90       	pop	r9
    1536:	8f 90       	pop	r8
    1538:	08 95       	ret

	// do we go in this function? - WE DO


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
    153a:	cb a4       	lds	r28, 0xab
    153c:	dc a4       	lds	r29, 0xac
    153e:	ed a4       	lds	r30, 0xad
    1540:	fe a4       	lds	r31, 0xae
		if (mmc_disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
    1542:	8f e2       	ldi	r24, 0x2F	; 47
    1544:	88 2e       	mov	r8, r24
    1546:	91 2c       	mov	r9, r1
    1548:	8c 0e       	add	r8, r28
    154a:	9d 1e       	adc	r9, r29
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	b4 01       	movw	r22, r8
    1552:	a7 01       	movw	r20, r14
    1554:	96 01       	movw	r18, r12
    1556:	01 e0       	ldi	r16, 0x01	; 1
    1558:	10 e0       	ldi	r17, 0x00	; 0
    155a:	0e 94 b3 02 	call	0x566	; 0x566 <mmc_disk_write>
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	a1 f5       	brne	.+104    	; 0x15ca <sync_window+0xce>
			// mmc_disk_write returns RES_OK
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
    1562:	1b 82       	std	Y+3, r1	; 0x03
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
    1564:	8f 89       	ldd	r24, Y+23	; 0x17
    1566:	98 8d       	ldd	r25, Y+24	; 0x18
    1568:	a9 8d       	ldd	r26, Y+25	; 0x19
    156a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    156c:	4f 8d       	ldd	r20, Y+31	; 0x1f
    156e:	58 a1       	lds	r21, 0x48
    1570:	69 a1       	lds	r22, 0x49
    1572:	7a a1       	lds	r23, 0x4a
    1574:	97 01       	movw	r18, r14
    1576:	86 01       	movw	r16, r12
    1578:	04 1b       	sub	r16, r20
    157a:	15 0b       	sbc	r17, r21
    157c:	26 0b       	sbc	r18, r22
    157e:	37 0b       	sbc	r19, r23
    1580:	08 17       	cp	r16, r24
    1582:	19 07       	cpc	r17, r25
    1584:	2a 07       	cpc	r18, r26
    1586:	3b 07       	cpc	r19, r27
    1588:	48 f6       	brcc	.-110    	; 0x151c <sync_window+0x20>
				// doesn't get in here - not sure if that's an issue
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    158a:	aa 80       	ldd	r10, Y+2	; 0x02
    158c:	bb 24       	eor	r11, r11
    158e:	12 e0       	ldi	r17, 0x02	; 2
    1590:	a1 16       	cp	r10, r17
    1592:	b1 04       	cpc	r11, r1
    1594:	28 f4       	brcc	.+10     	; 0x15a0 <sync_window+0xa4>
    1596:	c2 cf       	rjmp	.-124    	; 0x151c <sync_window+0x20>
    1598:	8f 89       	ldd	r24, Y+23	; 0x17
    159a:	98 8d       	ldd	r25, Y+24	; 0x18
    159c:	a9 8d       	ldd	r26, Y+25	; 0x19
    159e:	ba 8d       	ldd	r27, Y+26	; 0x1a
					wsect += fs->fsize;
    15a0:	c8 0e       	add	r12, r24
    15a2:	d9 1e       	adc	r13, r25
    15a4:	ea 1e       	adc	r14, r26
    15a6:	fb 1e       	adc	r15, r27
					mmc_disk_write(fs->drv, fs->win, wsect, 1);
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	b4 01       	movw	r22, r8
    15ae:	a7 01       	movw	r20, r14
    15b0:	96 01       	movw	r18, r12
    15b2:	01 e0       	ldi	r16, 0x01	; 1
    15b4:	10 e0       	ldi	r17, 0x00	; 0
    15b6:	0e 94 b3 02 	call	0x566	; 0x566 <mmc_disk_write>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				// doesn't get in here - not sure if that's an issue
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    15ba:	08 94       	sec
    15bc:	a1 08       	sbc	r10, r1
    15be:	b1 08       	sbc	r11, r1
    15c0:	21 e0       	ldi	r18, 0x01	; 1
    15c2:	a2 16       	cp	r10, r18
    15c4:	b1 04       	cpc	r11, r1
    15c6:	41 f7       	brne	.-48     	; 0x1598 <sync_window+0x9c>
    15c8:	a9 cf       	rjmp	.-174    	; 0x151c <sync_window+0x20>

	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (mmc_disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			// mmc_disk_write returns RES_OK
			res = FR_DISK_ERR;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	a8 cf       	rjmp	.-176    	; 0x1520 <sync_window+0x24>

000015d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	ec 01       	movw	r28, r24
	FRESULT res;


	res = sync_window(fs);
    15da:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <sync_window>
    15de:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	69 f4       	brne	.+26     	; 0x15fe <sync_fs+0x2e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    15e4:	88 81       	ld	r24, Y
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	c1 f0       	breq	.+48     	; 0x161a <sync_fs+0x4a>
			fs->winsect = fs->volbase + 1;
			disk_write(fs->drv, fs->win, fs->winsect, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	40 e0       	ldi	r20, 0x00	; 0
    15f0:	50 e0       	ldi	r21, 0x00	; 0
    15f2:	0e 94 1a 2e 	call	0x5c34	; 0x5c34 <disk_ioctl>
    15f6:	21 e0       	ldi	r18, 0x01	; 1
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	31 f0       	breq	.+12     	; 0x160a <sync_fs+0x3a>
	}

	return res;
}
    15fe:	c9 01       	movw	r24, r18
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	08 95       	ret
			fs->winsect = fs->volbase + 1;
			disk_write(fs->drv, fs->win, fs->winsect, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    160e:	c9 01       	movw	r24, r18
    1610:	df 91       	pop	r29
    1612:	cf 91       	pop	r28
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	08 95       	ret


	res = sync_window(fs);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    161a:	8c 81       	ldd	r24, Y+4	; 0x04
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	29 f7       	brne	.-54     	; 0x15ea <sync_fs+0x1a>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
    1620:	be 01       	movw	r22, r28
    1622:	61 5d       	subi	r22, 0xD1	; 209
    1624:	7f 4f       	sbci	r23, 0xFF	; 255
/*-----------------------------------------------------------------------*/
/* Synchronize file system and strage device                             */
/*-----------------------------------------------------------------------*/

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
    1626:	ce 01       	movw	r24, r28
    1628:	81 5d       	subi	r24, 0xD1	; 209
    162a:	9d 4f       	sbci	r25, 0xFD	; 253
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    162c:	fb 01       	movw	r30, r22

	do *d++ = (BYTE)val; while (--cnt);
    162e:	11 92       	st	Z+, r1
    1630:	e8 17       	cp	r30, r24
    1632:	f9 07       	cpc	r31, r25
    1634:	e1 f7       	brne	.-8      	; 0x162e <sync_fs+0x5e>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1636:	fe 01       	movw	r30, r28
    1638:	e3 5d       	subi	r30, 0xD3	; 211
    163a:	fd 4f       	sbci	r31, 0xFD	; 253
    163c:	85 e5       	ldi	r24, 0x55	; 85
    163e:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    1640:	fe 01       	movw	r30, r28
    1642:	e2 5d       	subi	r30, 0xD2	; 210
    1644:	fd 4f       	sbci	r31, 0xFD	; 253
    1646:	8a ea       	ldi	r24, 0xAA	; 170
    1648:	80 83       	st	Z, r24
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    164a:	82 e5       	ldi	r24, 0x52	; 82
    164c:	8f a7       	lds	r24, 0x7f
	*ptr++ = (BYTE)val; val >>= 8;
    164e:	88 ab       	sts	0x58, r24
	*ptr++ = (BYTE)val; val >>= 8;
    1650:	81 e6       	ldi	r24, 0x61	; 97
    1652:	89 ab       	sts	0x59, r24
	*ptr++ = (BYTE)val;
    1654:	91 e4       	ldi	r25, 0x41	; 65
    1656:	9a ab       	sts	0x5a, r25
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1658:	fe 01       	movw	r30, r28
    165a:	ed 5e       	subi	r30, 0xED	; 237
    165c:	fd 4f       	sbci	r31, 0xFD	; 253
    165e:	22 e7       	ldi	r18, 0x72	; 114
    1660:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    1662:	fe 01       	movw	r30, r28
    1664:	ec 5e       	subi	r30, 0xEC	; 236
    1666:	fd 4f       	sbci	r31, 0xFD	; 253
    1668:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    166a:	fe 01       	movw	r30, r28
    166c:	eb 5e       	subi	r30, 0xEB	; 235
    166e:	fd 4f       	sbci	r31, 0xFD	; 253
    1670:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    1672:	fe 01       	movw	r30, r28
    1674:	ea 5e       	subi	r30, 0xEA	; 234
    1676:	fd 4f       	sbci	r31, 0xFD	; 253
    1678:	80 83       	st	Z, r24
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
			st_word(fs->win + BS_55AA, 0xAA55);
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
    167a:	3f 85       	ldd	r19, Y+15	; 0x0f
    167c:	28 89       	ldd	r18, Y+16	; 0x10
    167e:	99 89       	ldd	r25, Y+17	; 0x11
    1680:	8a 89       	ldd	r24, Y+18	; 0x12
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1682:	fe 01       	movw	r30, r28
    1684:	e9 5e       	subi	r30, 0xE9	; 233
    1686:	fd 4f       	sbci	r31, 0xFD	; 253
    1688:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
    168a:	fe 01       	movw	r30, r28
    168c:	e8 5e       	subi	r30, 0xE8	; 232
    168e:	fd 4f       	sbci	r31, 0xFD	; 253
    1690:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    1692:	fe 01       	movw	r30, r28
    1694:	e7 5e       	subi	r30, 0xE7	; 231
    1696:	fd 4f       	sbci	r31, 0xFD	; 253
    1698:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    169a:	fe 01       	movw	r30, r28
    169c:	e6 5e       	subi	r30, 0xE6	; 230
    169e:	fd 4f       	sbci	r31, 0xFD	; 253
    16a0:	80 83       	st	Z, r24
			mem_set(fs->win, 0, SS(fs));
			st_word(fs->win + BS_55AA, 0xAA55);
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
    16a2:	3b 85       	ldd	r19, Y+11	; 0x0b
    16a4:	2c 85       	ldd	r18, Y+12	; 0x0c
    16a6:	9d 85       	ldd	r25, Y+13	; 0x0d
    16a8:	8e 85       	ldd	r24, Y+14	; 0x0e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    16aa:	fe 01       	movw	r30, r28
    16ac:	e5 5e       	subi	r30, 0xE5	; 229
    16ae:	fd 4f       	sbci	r31, 0xFD	; 253
    16b0:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
    16b2:	fe 01       	movw	r30, r28
    16b4:	e4 5e       	subi	r30, 0xE4	; 228
    16b6:	fd 4f       	sbci	r31, 0xFD	; 253
    16b8:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    16ba:	fe 01       	movw	r30, r28
    16bc:	e3 5e       	subi	r30, 0xE3	; 227
    16be:	fd 4f       	sbci	r31, 0xFD	; 253
    16c0:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    16c2:	fe 01       	movw	r30, r28
    16c4:	e2 5e       	subi	r30, 0xE2	; 226
    16c6:	fd 4f       	sbci	r31, 0xFD	; 253
    16c8:	80 83       	st	Z, r24
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
    16ca:	0b 8d       	ldd	r16, Y+27	; 0x1b
    16cc:	1c 8d       	ldd	r17, Y+28	; 0x1c
    16ce:	2d 8d       	ldd	r18, Y+29	; 0x1d
    16d0:	3e 8d       	ldd	r19, Y+30	; 0x1e
    16d2:	0f 5f       	subi	r16, 0xFF	; 255
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	2f 4f       	sbci	r18, 0xFF	; 255
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	0b a7       	lds	r16, 0x7b
    16dc:	1c a7       	lds	r17, 0x7c
    16de:	2d a7       	lds	r18, 0x7d
    16e0:	3e a7       	lds	r19, 0x7e
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    16e2:	89 81       	ldd	r24, Y+1	; 0x01
    16e4:	a9 01       	movw	r20, r18
    16e6:	98 01       	movw	r18, r16
    16e8:	01 e0       	ldi	r16, 0x01	; 1
    16ea:	10 e0       	ldi	r17, 0x00	; 0
    16ec:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <disk_write>
			fs->fsi_flag = 0;
    16f0:	1c 82       	std	Y+4, r1	; 0x04
    16f2:	7b cf       	rjmp	.-266    	; 0x15ea <sync_fs+0x1a>

000016f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
    16f4:	cf 92       	push	r12
    16f6:	df 92       	push	r13
    16f8:	ef 92       	push	r14
    16fa:	ff 92       	push	r15
    16fc:	0f 93       	push	r16
    16fe:	1f 93       	push	r17
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	8c 01       	movw	r16, r24
    1706:	6a 01       	movw	r12, r20
    1708:	7b 01       	movw	r14, r22
	FRESULT res = FR_OK;
	uint8_t num = 0x00;

	// what is sector during bad call from f_write?

	if (sector != fs->winsect) {	/* Window offset changed? */
    170a:	fc 01       	movw	r30, r24
    170c:	83 a5       	lds	r24, 0x63
    170e:	94 a5       	lds	r25, 0x64
    1710:	a5 a5       	lds	r26, 0x65
    1712:	b6 a5       	lds	r27, 0x66
    1714:	84 17       	cp	r24, r20
    1716:	95 07       	cpc	r25, r21
    1718:	a6 07       	cpc	r26, r22
    171a:	b7 07       	cpc	r27, r23
    171c:	31 f1       	breq	.+76     	; 0x176a <move_window+0x76>

#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
    171e:	c8 01       	movw	r24, r16
    1720:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <sync_window>
    1724:	ec 01       	movw	r28, r24
#endif
		if (res == FR_OK) {		/* Fill sector window with new data */
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	51 f0       	breq	.+20     	; 0x173e <move_window+0x4a>
	}
	if(res == FR_OK){

	}
	return res;
}
    172a:	ce 01       	movw	r24, r28
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0f 91       	pop	r16
    1734:	ff 90       	pop	r15
    1736:	ef 90       	pop	r14
    1738:	df 90       	pop	r13
    173a:	cf 90       	pop	r12
    173c:	08 95       	ret
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {		/* Fill sector window with new data */

			if (mmc_disk_read(fs->win, sector, 1) != RES_OK) {
    173e:	c8 01       	movw	r24, r16
    1740:	8f 96       	adiw	r24, 0x2f	; 47
    1742:	b7 01       	movw	r22, r14
    1744:	a6 01       	movw	r20, r12
    1746:	21 e0       	ldi	r18, 0x01	; 1
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	0e 94 4e 02 	call	0x49c	; 0x49c <mmc_disk_read>
    174e:	00 97       	sbiw	r24, 0x00	; 0
    1750:	31 f0       	breq	.+12     	; 0x175e <move_window+0x6a>
   					if(num == 0)
   						PORTB ^= 0xF0;
   				}*/
				// returns both RES_OK and RES_ERR so need to figure out what the diff is between the two
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;	
    1752:	c1 e0       	ldi	r28, 0x01	; 1
    1754:	d0 e0       	ldi	r29, 0x00	; 0
   					num = (num + 1) % 10000;
   					if(num == 0)
   						PORTB ^= 0xF0;
   				}*/
				// returns both RES_OK and RES_ERR so need to figure out what the diff is between the two
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
    1756:	cc 24       	eor	r12, r12
    1758:	ca 94       	dec	r12
    175a:	dc 2c       	mov	r13, r12
    175c:	76 01       	movw	r14, r12
			else{	
				
				res = FR_OK;
   			}

			fs->winsect = sector;
    175e:	f8 01       	movw	r30, r16
    1760:	c3 a6       	lds	r28, 0xb3
    1762:	d4 a6       	lds	r29, 0xb4
    1764:	e5 a6       	lds	r30, 0xb5
    1766:	f6 a6       	lds	r31, 0xb6
    1768:	e0 cf       	rjmp	.-64     	; 0x172a <move_window+0x36>
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
    176a:	c0 e0       	ldi	r28, 0x00	; 0
    176c:	d0 e0       	ldi	r29, 0x00	; 0
    176e:	dd cf       	rjmp	.-70     	; 0x172a <move_window+0x36>

00001770 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
    1770:	cf 93       	push	r28
    1772:	df 93       	push	r29
    1774:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
    1776:	1b 82       	std	Y+3, r1	; 0x03
    1778:	8f ef       	ldi	r24, 0xFF	; 255
    177a:	9f ef       	ldi	r25, 0xFF	; 255
    177c:	dc 01       	movw	r26, r24
    177e:	8b a7       	lds	r24, 0x7b
    1780:	9c a7       	lds	r25, 0x7c
    1782:	ad a7       	lds	r26, 0x7d
    1784:	be a7       	lds	r27, 0x7e
	if (move_window(fs, sect) != FR_OK) {
    1786:	ce 01       	movw	r24, r28
    1788:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	21 f0       	breq	.+8      	; 0x1798 <check_fs+0x28>
		return 4;	/* Load boot record */
    1790:	84 e0       	ldi	r24, 0x04	; 4
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	08 95       	ret
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    1798:	fe 01       	movw	r30, r28
    179a:	e2 5d       	subi	r30, 0xD2	; 210
    179c:	fd 4f       	sbci	r31, 0xFD	; 253
	rv = rv << 8 | ptr[0];
    179e:	90 81       	ld	r25, Z
    17a0:	80 e0       	ldi	r24, 0x00	; 0
    17a2:	fe 01       	movw	r30, r28
    17a4:	e3 5d       	subi	r30, 0xD3	; 211
    17a6:	fd 4f       	sbci	r31, 0xFD	; 253
    17a8:	20 81       	ld	r18, Z
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	28 2b       	or	r18, r24
    17ae:	39 2b       	or	r19, r25
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) {
		return 4;	/* Load boot record */
	}

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
    17b0:	8a ea       	ldi	r24, 0xAA	; 170
    17b2:	25 35       	cpi	r18, 0x55	; 85
    17b4:	38 07       	cpc	r19, r24
    17b6:	21 f0       	breq	.+8      	; 0x17c0 <check_fs+0x50>
    17b8:	83 e0       	ldi	r24, 0x03	; 3
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret
		return 4;	/* Load boot record */
	}

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
    17c0:	8f a5       	lds	r24, 0x6f
    17c2:	89 3e       	cpi	r24, 0xE9	; 233
    17c4:	39 f0       	breq	.+14     	; 0x17d4 <check_fs+0x64>
    17c6:	8b 3e       	cpi	r24, 0xEB	; 235
    17c8:	11 f0       	breq	.+4      	; 0x17ce <check_fs+0x5e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	e2 cf       	rjmp	.-60     	; 0x1792 <check_fs+0x22>
		return 4;	/* Load boot record */
	}

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
    17ce:	89 a9       	sts	0x49, r24
    17d0:	80 39       	cpi	r24, 0x90	; 144
    17d2:	d9 f7       	brne	.-10     	; 0x17ca <check_fs+0x5a>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    17d4:	fe 01       	movw	r30, r28
    17d6:	e8 59       	subi	r30, 0x98	; 152
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 81       	ld	r24, Z
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a0 e0       	ldi	r26, 0x00	; 0
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    17e2:	ba 2f       	mov	r27, r26
    17e4:	a9 2f       	mov	r26, r25
    17e6:	98 2f       	mov	r25, r24
    17e8:	88 27       	eor	r24, r24
    17ea:	fe 01       	movw	r30, r28
    17ec:	e9 59       	subi	r30, 0x99	; 153
    17ee:	ff 4f       	sbci	r31, 0xFF	; 255
    17f0:	40 81       	ld	r20, Z
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	84 2b       	or	r24, r20
    17fa:	95 2b       	or	r25, r21
    17fc:	a6 2b       	or	r26, r22
    17fe:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    1800:	ba 2f       	mov	r27, r26
    1802:	a9 2f       	mov	r26, r25
    1804:	98 2f       	mov	r25, r24
    1806:	88 27       	eor	r24, r24
    1808:	fe 01       	movw	r30, r28
    180a:	ea 59       	subi	r30, 0x9A	; 154
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	40 81       	ld	r20, Z
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	70 e0       	ldi	r23, 0x00	; 0
    1816:	84 2b       	or	r24, r20
    1818:	95 2b       	or	r25, r21
    181a:	a6 2b       	or	r26, r22
    181c:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    181e:	ba 2f       	mov	r27, r26
    1820:	a9 2f       	mov	r26, r25
    1822:	98 2f       	mov	r25, r24
    1824:	88 27       	eor	r24, r24
    1826:	fe 01       	movw	r30, r28
    1828:	eb 59       	subi	r30, 0x9B	; 155
    182a:	ff 4f       	sbci	r31, 0xFF	; 255
    182c:	40 81       	ld	r20, Z
    182e:	50 e0       	ldi	r21, 0x00	; 0
    1830:	60 e0       	ldi	r22, 0x00	; 0
    1832:	70 e0       	ldi	r23, 0x00	; 0
    1834:	84 2b       	or	r24, r20
    1836:	95 2b       	or	r25, r21
    1838:	a6 2b       	or	r26, r22
    183a:	b7 2b       	or	r27, r23
	}

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
    183c:	b0 70       	andi	r27, 0x00	; 0
    183e:	86 34       	cpi	r24, 0x46	; 70
    1840:	21 e4       	ldi	r18, 0x41	; 65
    1842:	92 07       	cpc	r25, r18
    1844:	24 e5       	ldi	r18, 0x54	; 84
    1846:	a2 07       	cpc	r26, r18
    1848:	20 e0       	ldi	r18, 0x00	; 0
    184a:	b2 07       	cpc	r27, r18
    184c:	e1 f1       	breq	.+120    	; 0x18c6 <check_fs+0x156>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    184e:	fe 01       	movw	r30, r28
    1850:	ec 57       	subi	r30, 0x7C	; 124
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	80 81       	ld	r24, Z
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    185c:	ba 2f       	mov	r27, r26
    185e:	a9 2f       	mov	r26, r25
    1860:	98 2f       	mov	r25, r24
    1862:	88 27       	eor	r24, r24
    1864:	fe 01       	movw	r30, r28
    1866:	ed 57       	subi	r30, 0x7D	; 125
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	40 81       	ld	r20, Z
    186c:	50 e0       	ldi	r21, 0x00	; 0
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	70 e0       	ldi	r23, 0x00	; 0
    1872:	84 2b       	or	r24, r20
    1874:	95 2b       	or	r25, r21
    1876:	a6 2b       	or	r26, r22
    1878:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    187a:	ba 2f       	mov	r27, r26
    187c:	a9 2f       	mov	r26, r25
    187e:	98 2f       	mov	r25, r24
    1880:	88 27       	eor	r24, r24
    1882:	fe 01       	movw	r30, r28
    1884:	ee 57       	subi	r30, 0x7E	; 126
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	40 81       	ld	r20, Z
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	84 2b       	or	r24, r20
    1892:	95 2b       	or	r25, r21
    1894:	a6 2b       	or	r26, r22
    1896:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    1898:	ba 2f       	mov	r27, r26
    189a:	a9 2f       	mov	r26, r25
    189c:	98 2f       	mov	r25, r24
    189e:	88 27       	eor	r24, r24
    18a0:	cf 57       	subi	r28, 0x7F	; 127
    18a2:	df 4f       	sbci	r29, 0xFF	; 255
    18a4:	48 81       	ld	r20, Y
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	84 2b       	or	r24, r20
    18ae:	95 2b       	or	r25, r21
    18b0:	a6 2b       	or	r26, r22
    18b2:	b7 2b       	or	r27, r23

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
    18b4:	86 34       	cpi	r24, 0x46	; 70
    18b6:	21 e4       	ldi	r18, 0x41	; 65
    18b8:	92 07       	cpc	r25, r18
    18ba:	24 e5       	ldi	r18, 0x54	; 84
    18bc:	a2 07       	cpc	r26, r18
    18be:	23 e3       	ldi	r18, 0x33	; 51
    18c0:	b2 07       	cpc	r27, r18
    18c2:	09 f0       	breq	.+2      	; 0x18c6 <check_fs+0x156>
    18c4:	82 cf       	rjmp	.-252    	; 0x17ca <check_fs+0x5a>
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	64 cf       	rjmp	.-312    	; 0x1792 <check_fs+0x22>

000018ca <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
    18ca:	2f 92       	push	r2
    18cc:	3f 92       	push	r3
    18ce:	4f 92       	push	r4
    18d0:	5f 92       	push	r5
    18d2:	6f 92       	push	r6
    18d4:	7f 92       	push	r7
    18d6:	8f 92       	push	r8
    18d8:	9f 92       	push	r9
    18da:	af 92       	push	r10
    18dc:	bf 92       	push	r11
    18de:	cf 92       	push	r12
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
    18f2:	6f 97       	sbiw	r28, 0x1f	; 31
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	f8 94       	cli
    18f8:	de bf       	out	0x3e, r29	; 62
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	cd bf       	out	0x3d, r28	; 61
    18fe:	7b 01       	movw	r14, r22
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
    1900:	db 01       	movw	r26, r22
    1902:	1d 92       	st	X+, r1
    1904:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
    1906:	4f 8f       	std	Y+31, r20	; 0x1f
    1908:	0e 94 6f 09 	call	0x12de	; 0x12de <get_ldnumber>
    190c:	8c 01       	movw	r16, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    190e:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1910:	97 fd       	sbrc	r25, 7
    1912:	3e c0       	rjmp	.+124    	; 0x1990 <find_volume+0xc6>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
    1914:	fc 01       	movw	r30, r24
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	e7 5c       	subi	r30, 0xC7	; 199
    191c:	fe 4f       	sbci	r31, 0xFE	; 254
    191e:	c0 80       	ld	r12, Z
    1920:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    1922:	c1 14       	cp	r12, r1
    1924:	d1 04       	cpc	r13, r1
    1926:	b9 f1       	breq	.+110    	; 0x1996 <find_volume+0xcc>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
    1928:	f7 01       	movw	r30, r14
    192a:	d1 82       	std	Z+1, r13	; 0x01
    192c:	c0 82       	st	Z, r12

	mode &= ~FA_READ;					/* Desired access mode, write access or not */
    192e:	6e ef       	ldi	r22, 0xFE	; 254
    1930:	e6 2e       	mov	r14, r22
    1932:	e4 22       	and	r14, r20
	if (fs->fs_type) {					/* If the volume has been mounted */
    1934:	d6 01       	movw	r26, r12
    1936:	8c 91       	ld	r24, X
    1938:	88 23       	and	r24, r24
    193a:	31 f0       	breq	.+12     	; 0x1948 <find_volume+0x7e>
		stat = disk_status(fs->drv);
    193c:	11 96       	adiw	r26, 0x01	; 1
    193e:	8c 91       	ld	r24, X
    1940:	0e 94 10 2e 	call	0x5c20	; 0x5c20 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    1944:	80 ff       	sbrs	r24, 0
    1946:	2a c0       	rjmp	.+84     	; 0x199c <find_volume+0xd2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    1948:	f6 01       	movw	r30, r12
    194a:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    194c:	01 83       	std	Z+1, r16	; 0x01
	stat = mmc_disk_initialize(fs->drv); /* Initialize the physical drive */
    194e:	80 2f       	mov	r24, r16
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 89 01 	call	0x312	; 0x312 <mmc_disk_initialize>
	if (stat & STA_NOINIT) { 		/* Check if the initialization succeeded */
    1956:	80 ff       	sbrs	r24, 0
    1958:	2b c0       	rjmp	.+86     	; 0x19b0 <find_volume+0xe6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    195a:	83 e0       	ldi	r24, 0x03	; 3
    195c:	90 e0       	ldi	r25, 0x00	; 0
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
    195e:	6f 96       	adiw	r28, 0x1f	; 31
    1960:	0f b6       	in	r0, 0x3f	; 63
    1962:	f8 94       	cli
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	0f be       	out	0x3f, r0	; 63
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	df 90       	pop	r13
    1978:	cf 90       	pop	r12
    197a:	bf 90       	pop	r11
    197c:	af 90       	pop	r10
    197e:	9f 90       	pop	r9
    1980:	8f 90       	pop	r8
    1982:	7f 90       	pop	r7
    1984:	6f 90       	pop	r6
    1986:	5f 90       	pop	r5
    1988:	4f 90       	pop	r4
    198a:	3f 90       	pop	r3
    198c:	2f 90       	pop	r2
    198e:	08 95       	ret


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
    1990:	8b e0       	ldi	r24, 0x0B	; 11
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	e4 cf       	rjmp	.-56     	; 0x195e <find_volume+0x94>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    1996:	8c e0       	ldi	r24, 0x0C	; 12
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	e1 cf       	rjmp	.-62     	; 0x195e <find_volume+0x94>

	mode &= ~FA_READ;					/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    199c:	ee 20       	and	r14, r14
    199e:	29 f0       	breq	.+10     	; 0x19aa <find_volume+0xe0>
    19a0:	82 ff       	sbrs	r24, 2
    19a2:	03 c0       	rjmp	.+6      	; 0x19aa <find_volume+0xe0>
	stat = mmc_disk_initialize(fs->drv); /* Initialize the physical drive */
	if (stat & STA_NOINIT) { 		/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    19a4:	8a e0       	ldi	r24, 0x0A	; 10
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	da cf       	rjmp	.-76     	; 0x195e <find_volume+0x94>
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	d7 cf       	rjmp	.-82     	; 0x195e <find_volume+0x94>
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = mmc_disk_initialize(fs->drv); /* Initialize the physical drive */
	if (stat & STA_NOINIT) { 		/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    19b0:	ee 20       	and	r14, r14
    19b2:	11 f0       	breq	.+4      	; 0x19b8 <find_volume+0xee>
    19b4:	82 fd       	sbrc	r24, 2
    19b6:	f6 cf       	rjmp	.-20     	; 0x19a4 <find_volume+0xda>
	 return FR_DISK_ERR;
	}
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
    19b8:	c6 01       	movw	r24, r12
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	50 e0       	ldi	r21, 0x00	; 0
    19be:	ba 01       	movw	r22, r20
    19c0:	0e 94 b8 0b 	call	0x1770	; 0x1770 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
    19c4:	82 30       	cpi	r24, 0x02	; 2
    19c6:	61 f0       	breq	.+24     	; 0x19e0 <find_volume+0x116>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))){
	 return FR_DISK_ERR;
	}
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
    19c8:	88 24       	eor	r8, r8
    19ca:	99 24       	eor	r9, r9
    19cc:	54 01       	movw	r10, r8
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) {
    19ce:	84 30       	cpi	r24, 0x04	; 4
    19d0:	09 f4       	brne	.+2      	; 0x19d4 <find_volume+0x10a>
    19d2:	72 c2       	rjmp	.+1252   	; 0x1eb8 <find_volume+0x5ee>
            SPDR = 0xAC;
            while(!(SPSR && (1<<SPIF)));
        }*/
		return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
	}
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    19d4:	82 30       	cpi	r24, 0x02	; 2
    19d6:	08 f4       	brcc	.+2      	; 0x19da <find_volume+0x110>
    19d8:	91 c0       	rjmp	.+290    	; 0x1afc <find_volume+0x232>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    19da:	8d e0       	ldi	r24, 0x0D	; 13
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	bf cf       	rjmp	.-130    	; 0x195e <find_volume+0x94>
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
    19e0:	96 01       	movw	r18, r12
    19e2:	2f 50       	subi	r18, 0x0F	; 15
    19e4:	3e 4f       	sbci	r19, 0xFE	; 254
	}
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
    19e6:	7e 01       	movw	r14, r28
    19e8:	08 94       	sec
    19ea:	e1 1c       	adc	r14, r1
    19ec:	f1 1c       	adc	r15, r1
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
    19ee:	81 e1       	ldi	r24, 0x11	; 17
    19f0:	68 2e       	mov	r6, r24
    19f2:	71 2c       	mov	r7, r1
    19f4:	6c 0e       	add	r6, r28
    19f6:	7d 1e       	adc	r7, r29
    19f8:	87 01       	movw	r16, r14
    19fa:	94 e0       	ldi	r25, 0x04	; 4
    19fc:	89 2e       	mov	r8, r25
    19fe:	91 2c       	mov	r9, r1
    1a00:	8c 0c       	add	r8, r12
    1a02:	9d 1c       	adc	r9, r13
    1a04:	4b e0       	ldi	r20, 0x0B	; 11
    1a06:	44 2e       	mov	r4, r20
    1a08:	51 2c       	mov	r5, r1
    1a0a:	4c 0c       	add	r4, r12
    1a0c:	5d 1c       	adc	r5, r13
    1a0e:	5a e0       	ldi	r21, 0x0A	; 10
    1a10:	25 2e       	mov	r2, r21
    1a12:	31 2c       	mov	r3, r1
    1a14:	2c 0c       	add	r2, r12
    1a16:	3d 1c       	adc	r3, r13
    1a18:	a6 01       	movw	r20, r12
    1a1a:	47 5f       	subi	r20, 0xF7	; 247
    1a1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a1e:	5a 8b       	std	Y+18, r21	; 0x12
    1a20:	49 8b       	std	Y+17, r20	; 0x11
    1a22:	c6 01       	movw	r24, r12
    1a24:	08 96       	adiw	r24, 0x08	; 8
    1a26:	9e 8b       	std	Y+22, r25	; 0x16
    1a28:	8d 8b       	std	Y+21, r24	; 0x15
    1a2a:	56 01       	movw	r10, r12
    1a2c:	67 01       	movw	r12, r14
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    1a2e:	d9 01       	movw	r26, r18
    1a30:	8c 91       	ld	r24, X
    1a32:	88 23       	and	r24, r24
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <find_volume+0x16e>
    1a36:	57 c0       	rjmp	.+174    	; 0x1ae6 <find_volume+0x21c>
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
    1a38:	79 01       	movw	r14, r18
    1a3a:	e8 18       	sub	r14, r8
    1a3c:	f9 08       	sbc	r15, r9
    1a3e:	f7 01       	movw	r30, r14
    1a40:	e4 0d       	add	r30, r4
    1a42:	f5 1d       	adc	r31, r5
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    1a44:	80 81       	ld	r24, Z
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	a0 e0       	ldi	r26, 0x00	; 0
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    1a4c:	44 27       	eor	r20, r20
    1a4e:	58 2f       	mov	r21, r24
    1a50:	69 2f       	mov	r22, r25
    1a52:	7a 2f       	mov	r23, r26
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
    1a54:	f7 01       	movw	r30, r14
    1a56:	e2 0d       	add	r30, r2
    1a58:	f3 1d       	adc	r31, r3
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
    1a5a:	80 81       	ld	r24, Z
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a0 e0       	ldi	r26, 0x00	; 0
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	48 2b       	or	r20, r24
    1a64:	59 2b       	or	r21, r25
    1a66:	6a 2b       	or	r22, r26
    1a68:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    1a6a:	76 2f       	mov	r23, r22
    1a6c:	65 2f       	mov	r22, r21
    1a6e:	54 2f       	mov	r21, r20
    1a70:	44 27       	eor	r20, r20
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
    1a72:	e9 89       	ldd	r30, Y+17	; 0x11
    1a74:	fa 89       	ldd	r31, Y+18	; 0x12
    1a76:	ee 0d       	add	r30, r14
    1a78:	ff 1d       	adc	r31, r15
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
    1a7a:	80 81       	ld	r24, Z
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	a0 e0       	ldi	r26, 0x00	; 0
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	48 2b       	or	r20, r24
    1a84:	59 2b       	or	r21, r25
    1a86:	6a 2b       	or	r22, r26
    1a88:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    1a8a:	76 2f       	mov	r23, r22
    1a8c:	65 2f       	mov	r22, r21
    1a8e:	54 2f       	mov	r21, r20
    1a90:	44 27       	eor	r20, r20
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
    1a92:	ed 89       	ldd	r30, Y+21	; 0x15
    1a94:	fe 89       	ldd	r31, Y+22	; 0x16
    1a96:	ee 0d       	add	r30, r14
    1a98:	ff 1d       	adc	r31, r15
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
    1a9a:	80 81       	ld	r24, Z
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 e0       	ldi	r26, 0x00	; 0
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	48 2b       	or	r20, r24
    1aa4:	59 2b       	or	r21, r25
    1aa6:	6a 2b       	or	r22, r26
    1aa8:	7b 2b       	or	r23, r27
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    1aaa:	f8 01       	movw	r30, r16
    1aac:	41 93       	st	Z+, r20
    1aae:	51 93       	st	Z+, r21
    1ab0:	61 93       	st	Z+, r22
    1ab2:	71 93       	st	Z+, r23
    1ab4:	8f 01       	movw	r16, r30
    1ab6:	20 5f       	subi	r18, 0xF0	; 240
    1ab8:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
    1aba:	e6 15       	cp	r30, r6
    1abc:	f7 05       	cpc	r31, r7
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <find_volume+0x1f8>
    1ac0:	b6 cf       	rjmp	.-148    	; 0x1a2e <find_volume+0x164>
    1ac2:	76 01       	movw	r14, r12
    1ac4:	65 01       	movw	r12, r10
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
    1ac6:	d7 01       	movw	r26, r14
    1ac8:	8d 90       	ld	r8, X+
    1aca:	9d 90       	ld	r9, X+
    1acc:	ad 90       	ld	r10, X+
    1ace:	bd 90       	ld	r11, X+
    1ad0:	7d 01       	movw	r14, r26
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    1ad2:	81 14       	cp	r8, r1
    1ad4:	91 04       	cpc	r9, r1
    1ad6:	a1 04       	cpc	r10, r1
    1ad8:	b1 04       	cpc	r11, r1
    1ada:	49 f4       	brne	.+18     	; 0x1aee <find_volume+0x224>
    1adc:	83 e0       	ldi	r24, 0x03	; 3
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
    1ade:	e6 14       	cp	r14, r6
    1ae0:	f7 04       	cpc	r15, r7
    1ae2:	89 f7       	brne	.-30     	; 0x1ac6 <find_volume+0x1fc>
    1ae4:	74 cf       	rjmp	.-280    	; 0x19ce <find_volume+0x104>
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    1ae6:	40 e0       	ldi	r20, 0x00	; 0
    1ae8:	50 e0       	ldi	r21, 0x00	; 0
    1aea:	ba 01       	movw	r22, r20
    1aec:	de cf       	rjmp	.-68     	; 0x1aaa <find_volume+0x1e0>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    1aee:	c6 01       	movw	r24, r12
    1af0:	b5 01       	movw	r22, r10
    1af2:	a4 01       	movw	r20, r8
    1af4:	0e 94 b8 0b 	call	0x1770	; 0x1770 <check_fs>
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
    1af8:	82 30       	cpi	r24, 0x02	; 2
    1afa:	88 f7       	brcc	.-30     	; 0x1ade <find_volume+0x214>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1afc:	f6 01       	movw	r30, r12
    1afe:	33 ad       	sts	0x63, r19
    1b00:	20 e0       	ldi	r18, 0x00	; 0
    1b02:	82 ad       	sts	0x62, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	82 2b       	or	r24, r18
    1b08:	93 2b       	or	r25, r19
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    1b0a:	f2 e0       	ldi	r31, 0x02	; 2
    1b0c:	80 30       	cpi	r24, 0x00	; 0
    1b0e:	9f 07       	cpc	r25, r31
    1b10:	09 f0       	breq	.+2      	; 0x1b14 <find_volume+0x24a>
    1b12:	63 cf       	rjmp	.-314    	; 0x19da <find_volume+0x110>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    1b14:	f6 01       	movw	r30, r12
    1b16:	ea 5b       	subi	r30, 0xBA	; 186
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    1b1a:	30 81       	ld	r19, Z
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	f6 01       	movw	r30, r12
    1b20:	eb 5b       	subi	r30, 0xBB	; 187
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	82 2b       	or	r24, r18
    1b2a:	93 2b       	or	r25, r19
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
    1b2c:	7c 01       	movw	r14, r24
    1b2e:	00 e0       	ldi	r16, 0x00	; 0
    1b30:	10 e0       	ldi	r17, 0x00	; 0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    1b32:	e1 14       	cp	r14, r1
    1b34:	f1 04       	cpc	r15, r1
    1b36:	01 05       	cpc	r16, r1
    1b38:	11 05       	cpc	r17, r1
    1b3a:	a1 f5       	brne	.+104    	; 0x1ba4 <find_volume+0x2da>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    1b3c:	f6 01       	movw	r30, r12
    1b3e:	ea 5a       	subi	r30, 0xAA	; 170
    1b40:	ff 4f       	sbci	r31, 0xFF	; 255
    1b42:	40 81       	ld	r20, Z
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	60 e0       	ldi	r22, 0x00	; 0
    1b48:	70 e0       	ldi	r23, 0x00	; 0
	rv = rv << 8 | ptr[2];
    1b4a:	76 2f       	mov	r23, r22
    1b4c:	65 2f       	mov	r22, r21
    1b4e:	54 2f       	mov	r21, r20
    1b50:	44 27       	eor	r20, r20
    1b52:	f6 01       	movw	r30, r12
    1b54:	eb 5a       	subi	r30, 0xAB	; 171
    1b56:	ff 4f       	sbci	r31, 0xFF	; 255
    1b58:	80 81       	ld	r24, Z
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	a0 e0       	ldi	r26, 0x00	; 0
    1b5e:	b0 e0       	ldi	r27, 0x00	; 0
    1b60:	48 2b       	or	r20, r24
    1b62:	59 2b       	or	r21, r25
    1b64:	6a 2b       	or	r22, r26
    1b66:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    1b68:	76 2f       	mov	r23, r22
    1b6a:	65 2f       	mov	r22, r21
    1b6c:	54 2f       	mov	r21, r20
    1b6e:	44 27       	eor	r20, r20
    1b70:	f6 01       	movw	r30, r12
    1b72:	ec 5a       	subi	r30, 0xAC	; 172
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 81       	ld	r24, Z
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a0 e0       	ldi	r26, 0x00	; 0
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	48 2b       	or	r20, r24
    1b80:	59 2b       	or	r21, r25
    1b82:	6a 2b       	or	r22, r26
    1b84:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    1b86:	ee 24       	eor	r14, r14
    1b88:	f4 2e       	mov	r15, r20
    1b8a:	05 2f       	mov	r16, r21
    1b8c:	16 2f       	mov	r17, r22
    1b8e:	f6 01       	movw	r30, r12
    1b90:	ed 5a       	subi	r30, 0xAD	; 173
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 81       	ld	r24, Z
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	a0 e0       	ldi	r26, 0x00	; 0
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e8 2a       	or	r14, r24
    1b9e:	f9 2a       	or	r15, r25
    1ba0:	0a 2b       	or	r16, r26
    1ba2:	1b 2b       	or	r17, r27
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;
    1ba4:	d6 01       	movw	r26, r12
    1ba6:	57 96       	adiw	r26, 0x17	; 23
    1ba8:	ed 92       	st	X+, r14
    1baa:	fd 92       	st	X+, r15
    1bac:	0d 93       	st	X+, r16
    1bae:	1c 93       	st	X, r17
    1bb0:	5a 97       	sbiw	r26, 0x1a	; 26

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
    1bb2:	df 96       	adiw	r26, 0x3f	; 63
    1bb4:	4c 90       	ld	r4, X
    1bb6:	df 97       	sbiw	r26, 0x3f	; 63
    1bb8:	12 96       	adiw	r26, 0x02	; 2
    1bba:	4c 92       	st	X, r4
    1bbc:	12 97       	sbiw	r26, 0x02	; 2
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    1bbe:	84 2d       	mov	r24, r4
    1bc0:	81 50       	subi	r24, 0x01	; 1
    1bc2:	82 30       	cpi	r24, 0x02	; 2
    1bc4:	08 f0       	brcs	.+2      	; 0x1bc8 <find_volume+0x2fe>
    1bc6:	09 cf       	rjmp	.-494    	; 0x19da <find_volume+0x110>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
    1bc8:	dc 96       	adiw	r26, 0x3c	; 60
    1bca:	8c 91       	ld	r24, X
    1bcc:	dc 97       	sbiw	r26, 0x3c	; 60
    1bce:	e8 2f       	mov	r30, r24
    1bd0:	f0 e0       	ldi	r31, 0x00	; 0
    1bd2:	fe 8b       	std	Y+22, r31	; 0x16
    1bd4:	ed 8b       	std	Y+21, r30	; 0x15
    1bd6:	1a 96       	adiw	r26, 0x0a	; 10
    1bd8:	fc 93       	st	X, r31
    1bda:	ee 93       	st	-X, r30
    1bdc:	19 97       	sbiw	r26, 0x09	; 9
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    1bde:	30 97       	sbiw	r30, 0x00	; 0
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <find_volume+0x31a>
    1be2:	fb ce       	rjmp	.-522    	; 0x19da <find_volume+0x110>
    1be4:	cf 01       	movw	r24, r30
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	8e 23       	and	r24, r30
    1bea:	9f 23       	and	r25, r31
    1bec:	00 97       	sbiw	r24, 0x00	; 0
    1bee:	09 f0       	breq	.+2      	; 0x1bf2 <find_volume+0x328>
    1bf0:	f4 ce       	rjmp	.-536    	; 0x19da <find_volume+0x110>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    1bf2:	f6 01       	movw	r30, r12
    1bf4:	ef 5b       	subi	r30, 0xBF	; 191
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    1bf8:	90 81       	ld	r25, Z
    1bfa:	80 e0       	ldi	r24, 0x00	; 0
    1bfc:	f6 01       	movw	r30, r12
    1bfe:	e0 5c       	subi	r30, 0xC0	; 192
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	20 80       	ld	r2, Z
    1c04:	33 24       	eor	r3, r3
    1c06:	28 2a       	or	r2, r24
    1c08:	39 2a       	or	r3, r25
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    1c0a:	18 96       	adiw	r26, 0x08	; 8
    1c0c:	3c 92       	st	X, r3
    1c0e:	2e 92       	st	-X, r2
    1c10:	17 97       	sbiw	r26, 0x07	; 7
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    1c12:	c1 01       	movw	r24, r2
    1c14:	8f 70       	andi	r24, 0x0F	; 15
    1c16:	90 70       	andi	r25, 0x00	; 0
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <find_volume+0x354>
    1c1c:	de ce       	rjmp	.-580    	; 0x19da <find_volume+0x110>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    1c1e:	f6 01       	movw	r30, r12
    1c20:	ed 5b       	subi	r30, 0xBD	; 189
    1c22:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    1c24:	30 81       	ld	r19, Z
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	f6 01       	movw	r30, r12
    1c2a:	ee 5b       	subi	r30, 0xBE	; 190
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	80 81       	ld	r24, Z
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	82 2b       	or	r24, r18
    1c34:	93 2b       	or	r25, r19
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
    1c36:	9c 01       	movw	r18, r24
    1c38:	40 e0       	ldi	r20, 0x00	; 0
    1c3a:	50 e0       	ldi	r21, 0x00	; 0
    1c3c:	29 8b       	std	Y+17, r18	; 0x11
    1c3e:	3a 8b       	std	Y+18, r19	; 0x12
    1c40:	4b 8b       	std	Y+19, r20	; 0x13
    1c42:	5c 8b       	std	Y+20, r21	; 0x14
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    1c44:	21 15       	cp	r18, r1
    1c46:	31 05       	cpc	r19, r1
    1c48:	41 05       	cpc	r20, r1
    1c4a:	51 05       	cpc	r21, r1
    1c4c:	09 f0       	breq	.+2      	; 0x1c50 <find_volume+0x386>
    1c4e:	40 c0       	rjmp	.+128    	; 0x1cd0 <find_volume+0x406>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    1c50:	f6 01       	movw	r30, r12
    1c52:	ee 5a       	subi	r30, 0xAE	; 174
    1c54:	ff 4f       	sbci	r31, 0xFF	; 255
    1c56:	80 81       	ld	r24, Z
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e0       	ldi	r26, 0x00	; 0
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    1c5e:	44 27       	eor	r20, r20
    1c60:	58 2f       	mov	r21, r24
    1c62:	69 2f       	mov	r22, r25
    1c64:	7a 2f       	mov	r23, r26
    1c66:	f6 01       	movw	r30, r12
    1c68:	ef 5a       	subi	r30, 0xAF	; 175
    1c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6c:	80 81       	ld	r24, Z
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	a0 e0       	ldi	r26, 0x00	; 0
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	48 2b       	or	r20, r24
    1c76:	59 2b       	or	r21, r25
    1c78:	6a 2b       	or	r22, r26
    1c7a:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    1c7c:	76 2f       	mov	r23, r22
    1c7e:	65 2f       	mov	r22, r21
    1c80:	54 2f       	mov	r21, r20
    1c82:	44 27       	eor	r20, r20
    1c84:	f6 01       	movw	r30, r12
    1c86:	e0 5b       	subi	r30, 0xB0	; 176
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 81       	ld	r24, Z
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a0 e0       	ldi	r26, 0x00	; 0
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	48 2b       	or	r20, r24
    1c94:	59 2b       	or	r21, r25
    1c96:	6a 2b       	or	r22, r26
    1c98:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    1c9a:	b6 2f       	mov	r27, r22
    1c9c:	a5 2f       	mov	r26, r21
    1c9e:	94 2f       	mov	r25, r20
    1ca0:	88 27       	eor	r24, r24
    1ca2:	89 8b       	std	Y+17, r24	; 0x11
    1ca4:	9a 8b       	std	Y+18, r25	; 0x12
    1ca6:	ab 8b       	std	Y+19, r26	; 0x13
    1ca8:	bc 8b       	std	Y+20, r27	; 0x14
    1caa:	f6 01       	movw	r30, r12
    1cac:	e1 5b       	subi	r30, 0xB1	; 177
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	80 81       	ld	r24, Z
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	a0 e0       	ldi	r26, 0x00	; 0
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	29 89       	ldd	r18, Y+17	; 0x11
    1cba:	3a 89       	ldd	r19, Y+18	; 0x12
    1cbc:	4b 89       	ldd	r20, Y+19	; 0x13
    1cbe:	5c 89       	ldd	r21, Y+20	; 0x14
    1cc0:	28 2b       	or	r18, r24
    1cc2:	39 2b       	or	r19, r25
    1cc4:	4a 2b       	or	r20, r26
    1cc6:	5b 2b       	or	r21, r27
    1cc8:	29 8b       	std	Y+17, r18	; 0x11
    1cca:	3a 8b       	std	Y+18, r19	; 0x12
    1ccc:	4b 8b       	std	Y+19, r20	; 0x13
    1cce:	5c 8b       	std	Y+20, r21	; 0x14
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1cd0:	d6 01       	movw	r26, r12
    1cd2:	de 96       	adiw	r26, 0x3e	; 62
    1cd4:	9c 91       	ld	r25, X
    1cd6:	de 97       	sbiw	r26, 0x3e	; 62
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	dd 96       	adiw	r26, 0x3d	; 61
    1cdc:	6c 90       	ld	r6, X
    1cde:	dd 97       	sbiw	r26, 0x3d	; 61
    1ce0:	77 24       	eor	r7, r7
    1ce2:	68 2a       	or	r6, r24
    1ce4:	79 2a       	or	r7, r25

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
    1ce6:	61 14       	cp	r6, r1
    1ce8:	71 04       	cpc	r7, r1
    1cea:	09 f4       	brne	.+2      	; 0x1cee <find_volume+0x424>
    1cec:	76 ce       	rjmp	.-788    	; 0x19da <find_volume+0x110>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
    1cee:	24 2d       	mov	r18, r4
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e0       	ldi	r20, 0x00	; 0
    1cf4:	50 e0       	ldi	r21, 0x00	; 0
    1cf6:	c8 01       	movw	r24, r16
    1cf8:	b7 01       	movw	r22, r14
    1cfa:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__mulsi3>
    1cfe:	6b 8f       	std	Y+27, r22	; 0x1b
    1d00:	7c 8f       	std	Y+28, r23	; 0x1c
    1d02:	8d 8f       	std	Y+29, r24	; 0x1d
    1d04:	9e 8f       	std	Y+30, r25	; 0x1e

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    1d06:	93 01       	movw	r18, r6
    1d08:	40 e0       	ldi	r20, 0x00	; 0
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	2f 8b       	std	Y+23, r18	; 0x17
    1d0e:	38 8f       	std	Y+24, r19	; 0x18
    1d10:	49 8f       	std	Y+25, r20	; 0x19
    1d12:	5a 8f       	std	Y+26, r21	; 0x1a
    1d14:	c1 01       	movw	r24, r2
    1d16:	92 95       	swap	r25
    1d18:	82 95       	swap	r24
    1d1a:	8f 70       	andi	r24, 0x0F	; 15
    1d1c:	89 27       	eor	r24, r25
    1d1e:	9f 70       	andi	r25, 0x0F	; 15
    1d20:	89 27       	eor	r24, r25
    1d22:	2c 01       	movw	r4, r24
    1d24:	66 24       	eor	r6, r6
    1d26:	77 24       	eor	r7, r7
    1d28:	42 0e       	add	r4, r18
    1d2a:	53 1e       	adc	r5, r19
    1d2c:	64 1e       	adc	r6, r20
    1d2e:	75 1e       	adc	r7, r21
    1d30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d34:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1d36:	be 8d       	ldd	r27, Y+30	; 0x1e
    1d38:	48 0e       	add	r4, r24
    1d3a:	59 1e       	adc	r5, r25
    1d3c:	6a 1e       	adc	r6, r26
    1d3e:	7b 1e       	adc	r7, r27
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1d40:	29 89       	ldd	r18, Y+17	; 0x11
    1d42:	3a 89       	ldd	r19, Y+18	; 0x12
    1d44:	4b 89       	ldd	r20, Y+19	; 0x13
    1d46:	5c 89       	ldd	r21, Y+20	; 0x14
    1d48:	24 15       	cp	r18, r4
    1d4a:	35 05       	cpc	r19, r5
    1d4c:	46 05       	cpc	r20, r6
    1d4e:	57 05       	cpc	r21, r7
    1d50:	08 f4       	brcc	.+2      	; 0x1d54 <find_volume+0x48a>
    1d52:	43 ce       	rjmp	.-890    	; 0x19da <find_volume+0x110>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    1d54:	ca 01       	movw	r24, r20
    1d56:	b9 01       	movw	r22, r18
    1d58:	64 19       	sub	r22, r4
    1d5a:	75 09       	sbc	r23, r5
    1d5c:	86 09       	sbc	r24, r6
    1d5e:	97 09       	sbc	r25, r7
    1d60:	ad 89       	ldd	r26, Y+21	; 0x15
    1d62:	be 89       	ldd	r27, Y+22	; 0x16
    1d64:	9d 01       	movw	r18, r26
    1d66:	40 e0       	ldi	r20, 0x00	; 0
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <__udivmodsi4>
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
    1d6e:	21 15       	cp	r18, r1
    1d70:	31 05       	cpc	r19, r1
    1d72:	41 05       	cpc	r20, r1
    1d74:	51 05       	cpc	r21, r1
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <find_volume+0x4b0>
    1d78:	30 ce       	rjmp	.-928    	; 0x19da <find_volume+0x110>
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    1d7a:	26 3f       	cpi	r18, 0xF6	; 246
    1d7c:	bf ef       	ldi	r27, 0xFF	; 255
    1d7e:	3b 07       	cpc	r19, r27
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	4b 07       	cpc	r20, r27
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	5b 07       	cpc	r21, r27
    1d88:	08 f0       	brcs	.+2      	; 0x1d8c <find_volume+0x4c2>
    1d8a:	c3 c0       	rjmp	.+390    	; 0x1f12 <find_volume+0x648>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    1d8c:	26 3f       	cpi	r18, 0xF6	; 246
    1d8e:	ef e0       	ldi	r30, 0x0F	; 15
    1d90:	3e 07       	cpc	r19, r30
    1d92:	e0 e0       	ldi	r30, 0x00	; 0
    1d94:	4e 07       	cpc	r20, r30
    1d96:	e0 e0       	ldi	r30, 0x00	; 0
    1d98:	5e 07       	cpc	r21, r30
    1d9a:	08 f0       	brcs	.+2      	; 0x1d9e <find_volume+0x4d4>
    1d9c:	90 c0       	rjmp	.+288    	; 0x1ebe <find_volume+0x5f4>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    1d9e:	da 01       	movw	r26, r20
    1da0:	c9 01       	movw	r24, r18
    1da2:	02 96       	adiw	r24, 0x02	; 2
    1da4:	a1 1d       	adc	r26, r1
    1da6:	b1 1d       	adc	r27, r1
    1da8:	89 8b       	std	Y+17, r24	; 0x11
    1daa:	9a 8b       	std	Y+18, r25	; 0x12
    1dac:	ab 8b       	std	Y+19, r26	; 0x13
    1dae:	bc 8b       	std	Y+20, r27	; 0x14
    1db0:	f6 01       	movw	r30, r12
    1db2:	83 8b       	std	Z+19, r24	; 0x13
    1db4:	94 8b       	std	Z+20, r25	; 0x14
    1db6:	a5 8b       	std	Z+21, r26	; 0x15
    1db8:	b6 8b       	std	Z+22, r27	; 0x16
		fs->volbase = bsect;								/* Volume start sector */
    1dba:	83 8e       	std	Z+27, r8	; 0x1b
    1dbc:	94 8e       	std	Z+28, r9	; 0x1c
    1dbe:	a5 8e       	std	Z+29, r10	; 0x1d
    1dc0:	b6 8e       	std	Z+30, r11	; 0x1e
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1dc2:	4f 89       	ldd	r20, Y+23	; 0x17
    1dc4:	58 8d       	ldd	r21, Y+24	; 0x18
    1dc6:	69 8d       	ldd	r22, Y+25	; 0x19
    1dc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dca:	48 0d       	add	r20, r8
    1dcc:	59 1d       	adc	r21, r9
    1dce:	6a 1d       	adc	r22, r10
    1dd0:	7b 1d       	adc	r23, r11
    1dd2:	47 8f       	std	Z+31, r20	; 0x1f
    1dd4:	50 a3       	lds	r21, 0x50
    1dd6:	61 a3       	lds	r22, 0x51
    1dd8:	72 a3       	lds	r23, 0x52
		fs->database = bsect + sysect;						/* Data start sector */
    1dda:	d3 01       	movw	r26, r6
    1ddc:	c2 01       	movw	r24, r4
    1dde:	88 0d       	add	r24, r8
    1de0:	99 1d       	adc	r25, r9
    1de2:	aa 1d       	adc	r26, r10
    1de4:	bb 1d       	adc	r27, r11
    1de6:	87 a3       	lds	r24, 0x57
    1de8:	90 a7       	lds	r25, 0x70
    1dea:	a1 a7       	lds	r26, 0x71
    1dec:	b2 a7       	lds	r27, 0x72
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    1dee:	21 e0       	ldi	r18, 0x01	; 1
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
    1df0:	21 14       	cp	r2, r1
    1df2:	31 04       	cpc	r3, r1
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <find_volume+0x52e>
    1df6:	f1 cd       	rjmp	.-1054   	; 0x19da <find_volume+0x110>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    1df8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dfc:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1dfe:	be 8d       	ldd	r27, Y+30	; 0x1e
    1e00:	84 0f       	add	r24, r20
    1e02:	95 1f       	adc	r25, r21
    1e04:	a6 1f       	adc	r26, r22
    1e06:	b7 1f       	adc	r27, r23
    1e08:	f6 01       	movw	r30, r12
    1e0a:	83 a3       	lds	r24, 0x53
    1e0c:	94 a3       	lds	r25, 0x54
    1e0e:	a5 a3       	lds	r26, 0x55
    1e10:	b6 a3       	lds	r27, 0x56
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    1e12:	49 89       	ldd	r20, Y+17	; 0x11
    1e14:	5a 89       	ldd	r21, Y+18	; 0x12
    1e16:	6b 89       	ldd	r22, Y+19	; 0x13
    1e18:	7c 89       	ldd	r23, Y+20	; 0x14
    1e1a:	44 0f       	add	r20, r20
    1e1c:	55 1f       	adc	r21, r21
    1e1e:	66 1f       	adc	r22, r22
    1e20:	77 1f       	adc	r23, r23
    1e22:	22 30       	cpi	r18, 0x02	; 2
    1e24:	a9 f0       	breq	.+42     	; 0x1e50 <find_volume+0x586>
    1e26:	89 89       	ldd	r24, Y+17	; 0x11
    1e28:	9a 89       	ldd	r25, Y+18	; 0x12
    1e2a:	ab 89       	ldd	r26, Y+19	; 0x13
    1e2c:	bc 89       	ldd	r27, Y+20	; 0x14
    1e2e:	48 0f       	add	r20, r24
    1e30:	59 1f       	adc	r21, r25
    1e32:	6a 1f       	adc	r22, r26
    1e34:	7b 1f       	adc	r23, r27
    1e36:	76 95       	lsr	r23
    1e38:	67 95       	ror	r22
    1e3a:	57 95       	ror	r21
    1e3c:	47 95       	ror	r20
    1e3e:	81 70       	andi	r24, 0x01	; 1
    1e40:	90 70       	andi	r25, 0x00	; 0
    1e42:	a0 70       	andi	r26, 0x00	; 0
    1e44:	b0 70       	andi	r27, 0x00	; 0
    1e46:	48 0f       	add	r20, r24
    1e48:	59 1f       	adc	r21, r25
    1e4a:	6a 1f       	adc	r22, r26
    1e4c:	7b 1f       	adc	r23, r27
    1e4e:	21 e0       	ldi	r18, 0x01	; 1
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    1e50:	41 50       	subi	r20, 0x01	; 1
    1e52:	5e 4f       	sbci	r21, 0xFE	; 254
    1e54:	6f 4f       	sbci	r22, 0xFF	; 255
    1e56:	7f 4f       	sbci	r23, 0xFF	; 255
    1e58:	89 e0       	ldi	r24, 0x09	; 9
    1e5a:	76 95       	lsr	r23
    1e5c:	67 95       	ror	r22
    1e5e:	57 95       	ror	r21
    1e60:	47 95       	ror	r20
    1e62:	8a 95       	dec	r24
    1e64:	d1 f7       	brne	.-12     	; 0x1e5a <find_volume+0x590>
    1e66:	e4 16       	cp	r14, r20
    1e68:	f5 06       	cpc	r15, r21
    1e6a:	06 07       	cpc	r16, r22
    1e6c:	17 07       	cpc	r17, r23
    1e6e:	08 f4       	brcc	.+2      	; 0x1e72 <find_volume+0x5a8>
    1e70:	b4 cd       	rjmp	.-1176   	; 0x19da <find_volume+0x110>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    1e72:	8f ef       	ldi	r24, 0xFF	; 255
    1e74:	9f ef       	ldi	r25, 0xFF	; 255
    1e76:	dc 01       	movw	r26, r24
    1e78:	f6 01       	movw	r30, r12
    1e7a:	87 87       	std	Z+15, r24	; 0x0f
    1e7c:	90 8b       	std	Z+16, r25	; 0x10
    1e7e:	a1 8b       	std	Z+17, r26	; 0x11
    1e80:	b2 8b       	std	Z+18, r27	; 0x12
    1e82:	83 87       	std	Z+11, r24	; 0x0b
    1e84:	94 87       	std	Z+12, r25	; 0x0c
    1e86:	a5 87       	std	Z+13, r26	; 0x0d
    1e88:	b6 87       	std	Z+14, r27	; 0x0e
		fs->fsi_flag = 0x80;
    1e8a:	80 e8       	ldi	r24, 0x80	; 128
    1e8c:	84 83       	std	Z+4, r24	; 0x04
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
    1e8e:	23 30       	cpi	r18, 0x03	; 3
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <find_volume+0x5ca>
    1e92:	c2 c0       	rjmp	.+388    	; 0x2018 <find_volume+0x74e>
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;	/* FAT sub-type */
    1e94:	d6 01       	movw	r26, r12
    1e96:	2c 93       	st	X, r18
	fs->id = ++Fsid;	/* File system mount ID */
    1e98:	80 91 3b 01 	lds	r24, 0x013B
    1e9c:	90 91 3c 01 	lds	r25, 0x013C
    1ea0:	01 96       	adiw	r24, 0x01	; 1
    1ea2:	90 93 3c 01 	sts	0x013C, r25
    1ea6:	80 93 3b 01 	sts	0x013B, r24
    1eaa:	16 96       	adiw	r26, 0x06	; 6
    1eac:	9c 93       	st	X, r25
    1eae:	8e 93       	st	-X, r24
    1eb0:	15 97       	sbiw	r26, 0x05	; 5
	fs->cdir = 0;		/* Initialize current directory */
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
    1eb2:	80 e0       	ldi	r24, 0x00	; 0
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	53 cd       	rjmp	.-1370   	; 0x195e <find_volume+0x94>
		 /*while(1){
		 	// I LIKE PIE
            SPDR = 0xAC;
            while(!(SPSR && (1<<SPIF)));
        }*/
		return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	50 cd       	rjmp	.-1376   	; 0x195e <find_volume+0x94>
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    1ebe:	da 01       	movw	r26, r20
    1ec0:	c9 01       	movw	r24, r18
    1ec2:	02 96       	adiw	r24, 0x02	; 2
    1ec4:	a1 1d       	adc	r26, r1
    1ec6:	b1 1d       	adc	r27, r1
    1ec8:	89 8b       	std	Y+17, r24	; 0x11
    1eca:	9a 8b       	std	Y+18, r25	; 0x12
    1ecc:	ab 8b       	std	Y+19, r26	; 0x13
    1ece:	bc 8b       	std	Y+20, r27	; 0x14
    1ed0:	f6 01       	movw	r30, r12
    1ed2:	83 8b       	std	Z+19, r24	; 0x13
    1ed4:	94 8b       	std	Z+20, r25	; 0x14
    1ed6:	a5 8b       	std	Z+21, r26	; 0x15
    1ed8:	b6 8b       	std	Z+22, r27	; 0x16
		fs->volbase = bsect;								/* Volume start sector */
    1eda:	83 8e       	std	Z+27, r8	; 0x1b
    1edc:	94 8e       	std	Z+28, r9	; 0x1c
    1ede:	a5 8e       	std	Z+29, r10	; 0x1d
    1ee0:	b6 8e       	std	Z+30, r11	; 0x1e
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1ee2:	4f 89       	ldd	r20, Y+23	; 0x17
    1ee4:	58 8d       	ldd	r21, Y+24	; 0x18
    1ee6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ee8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eea:	48 0d       	add	r20, r8
    1eec:	59 1d       	adc	r21, r9
    1eee:	6a 1d       	adc	r22, r10
    1ef0:	7b 1d       	adc	r23, r11
    1ef2:	47 8f       	std	Z+31, r20	; 0x1f
    1ef4:	50 a3       	lds	r21, 0x50
    1ef6:	61 a3       	lds	r22, 0x51
    1ef8:	72 a3       	lds	r23, 0x52
		fs->database = bsect + sysect;						/* Data start sector */
    1efa:	d3 01       	movw	r26, r6
    1efc:	c2 01       	movw	r24, r4
    1efe:	88 0d       	add	r24, r8
    1f00:	99 1d       	adc	r25, r9
    1f02:	aa 1d       	adc	r26, r10
    1f04:	bb 1d       	adc	r27, r11
    1f06:	87 a3       	lds	r24, 0x57
    1f08:	90 a7       	lds	r25, 0x70
    1f0a:	a1 a7       	lds	r26, 0x71
    1f0c:	b2 a7       	lds	r27, 0x72
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    1f0e:	22 e0       	ldi	r18, 0x02	; 2
    1f10:	6f cf       	rjmp	.-290    	; 0x1df0 <find_volume+0x526>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    1f12:	da 01       	movw	r26, r20
    1f14:	c9 01       	movw	r24, r18
    1f16:	02 96       	adiw	r24, 0x02	; 2
    1f18:	a1 1d       	adc	r26, r1
    1f1a:	b1 1d       	adc	r27, r1
    1f1c:	89 8b       	std	Y+17, r24	; 0x11
    1f1e:	9a 8b       	std	Y+18, r25	; 0x12
    1f20:	ab 8b       	std	Y+19, r26	; 0x13
    1f22:	bc 8b       	std	Y+20, r27	; 0x14
    1f24:	f6 01       	movw	r30, r12
    1f26:	83 8b       	std	Z+19, r24	; 0x13
    1f28:	94 8b       	std	Z+20, r25	; 0x14
    1f2a:	a5 8b       	std	Z+21, r26	; 0x15
    1f2c:	b6 8b       	std	Z+22, r27	; 0x16
		fs->volbase = bsect;								/* Volume start sector */
    1f2e:	83 8e       	std	Z+27, r8	; 0x1b
    1f30:	94 8e       	std	Z+28, r9	; 0x1c
    1f32:	a5 8e       	std	Z+29, r10	; 0x1d
    1f34:	b6 8e       	std	Z+30, r11	; 0x1e
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1f36:	8f 89       	ldd	r24, Y+23	; 0x17
    1f38:	98 8d       	ldd	r25, Y+24	; 0x18
    1f3a:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f3c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f3e:	88 0d       	add	r24, r8
    1f40:	99 1d       	adc	r25, r9
    1f42:	aa 1d       	adc	r26, r10
    1f44:	bb 1d       	adc	r27, r11
    1f46:	87 8f       	std	Z+31, r24	; 0x1f
    1f48:	90 a3       	lds	r25, 0x50
    1f4a:	a1 a3       	lds	r26, 0x51
    1f4c:	b2 a3       	lds	r27, 0x52
		fs->database = bsect + sysect;						/* Data start sector */
    1f4e:	d3 01       	movw	r26, r6
    1f50:	c2 01       	movw	r24, r4
    1f52:	88 0d       	add	r24, r8
    1f54:	99 1d       	adc	r25, r9
    1f56:	aa 1d       	adc	r26, r10
    1f58:	bb 1d       	adc	r27, r11
    1f5a:	87 a3       	lds	r24, 0x57
    1f5c:	90 a7       	lds	r25, 0x70
    1f5e:	a1 a7       	lds	r26, 0x71
    1f60:	b2 a7       	lds	r27, 0x72
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    1f62:	e6 5a       	subi	r30, 0xA6	; 166
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    1f66:	30 81       	ld	r19, Z
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	f6 01       	movw	r30, r12
    1f6c:	e7 5a       	subi	r30, 0xA7	; 167
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 81       	ld	r24, Z
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	82 2b       	or	r24, r18
    1f76:	93 2b       	or	r25, r19
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
		fs->volbase = bsect;								/* Volume start sector */
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
		fs->database = bsect + sysect;						/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	09 f0       	breq	.+2      	; 0x1f7e <find_volume+0x6b4>
    1f7c:	2e cd       	rjmp	.-1444   	; 0x19da <find_volume+0x110>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    1f7e:	21 14       	cp	r2, r1
    1f80:	31 04       	cpc	r3, r1
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <find_volume+0x6bc>
    1f84:	2a cd       	rjmp	.-1452   	; 0x19da <find_volume+0x110>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    1f86:	f6 01       	movw	r30, r12
    1f88:	e2 5a       	subi	r30, 0xA2	; 162
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	a0 e0       	ldi	r26, 0x00	; 0
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    1f94:	44 27       	eor	r20, r20
    1f96:	58 2f       	mov	r21, r24
    1f98:	69 2f       	mov	r22, r25
    1f9a:	7a 2f       	mov	r23, r26
    1f9c:	f6 01       	movw	r30, r12
    1f9e:	e3 5a       	subi	r30, 0xA3	; 163
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	a0 e0       	ldi	r26, 0x00	; 0
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	48 2b       	or	r20, r24
    1fac:	59 2b       	or	r21, r25
    1fae:	6a 2b       	or	r22, r26
    1fb0:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    1fb2:	76 2f       	mov	r23, r22
    1fb4:	65 2f       	mov	r22, r21
    1fb6:	54 2f       	mov	r21, r20
    1fb8:	44 27       	eor	r20, r20
    1fba:	f6 01       	movw	r30, r12
    1fbc:	e4 5a       	subi	r30, 0xA4	; 164
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 e0       	ldi	r26, 0x00	; 0
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	48 2b       	or	r20, r24
    1fca:	59 2b       	or	r21, r25
    1fcc:	6a 2b       	or	r22, r26
    1fce:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    1fd0:	76 2f       	mov	r23, r22
    1fd2:	65 2f       	mov	r22, r21
    1fd4:	54 2f       	mov	r21, r20
    1fd6:	44 27       	eor	r20, r20
    1fd8:	f6 01       	movw	r30, r12
    1fda:	e5 5a       	subi	r30, 0xA5	; 165
    1fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fde:	80 81       	ld	r24, Z
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	a0 e0       	ldi	r26, 0x00	; 0
    1fe4:	b0 e0       	ldi	r27, 0x00	; 0
    1fe6:	48 2b       	or	r20, r24
    1fe8:	59 2b       	or	r21, r25
    1fea:	6a 2b       	or	r22, r26
    1fec:	7b 2b       	or	r23, r27
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
		fs->database = bsect + sysect;						/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    1fee:	d6 01       	movw	r26, r12
    1ff0:	93 96       	adiw	r26, 0x23	; 35
    1ff2:	4d 93       	st	X+, r20
    1ff4:	5d 93       	st	X+, r21
    1ff6:	6d 93       	st	X+, r22
    1ff8:	7c 93       	st	X, r23
    1ffa:	96 97       	sbiw	r26, 0x26	; 38
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
    1ffc:	49 89       	ldd	r20, Y+17	; 0x11
    1ffe:	5a 89       	ldd	r21, Y+18	; 0x12
    2000:	6b 89       	ldd	r22, Y+19	; 0x13
    2002:	7c 89       	ldd	r23, Y+20	; 0x14
    2004:	44 0f       	add	r20, r20
    2006:	55 1f       	adc	r21, r21
    2008:	66 1f       	adc	r22, r22
    200a:	77 1f       	adc	r23, r23
    200c:	44 0f       	add	r20, r20
    200e:	55 1f       	adc	r21, r21
    2010:	66 1f       	adc	r22, r22
    2012:	77 1f       	adc	r23, r23
    2014:	23 e0       	ldi	r18, 0x03	; 3
    2016:	1c cf       	rjmp	.-456    	; 0x1e50 <find_volume+0x586>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    2018:	e0 5a       	subi	r30, 0xA0	; 160
    201a:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    201c:	50 81       	ld	r21, Z
    201e:	40 e0       	ldi	r20, 0x00	; 0
    2020:	f6 01       	movw	r30, r12
    2022:	e1 5a       	subi	r30, 0xA1	; 161
    2024:	ff 4f       	sbci	r31, 0xFF	; 255
    2026:	80 81       	ld	r24, Z
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	84 2b       	or	r24, r20
    202c:	95 2b       	or	r25, r21
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
		fs->fsi_flag = 0x80;
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    202e:	81 30       	cpi	r24, 0x01	; 1
    2030:	91 05       	cpc	r25, r1
    2032:	09 f0       	breq	.+2      	; 0x2036 <find_volume+0x76c>
    2034:	2f cf       	rjmp	.-418    	; 0x1e94 <find_volume+0x5ca>
			&& move_window(fs, bsect + 1) == FR_OK)
    2036:	b5 01       	movw	r22, r10
    2038:	a4 01       	movw	r20, r8
    203a:	4f 5f       	subi	r20, 0xFF	; 255
    203c:	5f 4f       	sbci	r21, 0xFF	; 255
    203e:	6f 4f       	sbci	r22, 0xFF	; 255
    2040:	7f 4f       	sbci	r23, 0xFF	; 255
    2042:	c6 01       	movw	r24, r12
    2044:	2f 8f       	std	Y+31, r18	; 0x1f
    2046:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
    204a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	09 f0       	breq	.+2      	; 0x2052 <find_volume+0x788>
    2050:	21 cf       	rjmp	.-446    	; 0x1e94 <find_volume+0x5ca>
		{
			fs->fsi_flag = 0;
    2052:	d6 01       	movw	r26, r12
    2054:	14 96       	adiw	r26, 0x04	; 4
    2056:	1c 92       	st	X, r1
    2058:	14 97       	sbiw	r26, 0x04	; 4
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    205a:	f6 01       	movw	r30, r12
    205c:	e2 5d       	subi	r30, 0xD2	; 210
    205e:	fd 4f       	sbci	r31, 0xFD	; 253
	rv = rv << 8 | ptr[0];
    2060:	50 81       	ld	r21, Z
    2062:	40 e0       	ldi	r20, 0x00	; 0
    2064:	f6 01       	movw	r30, r12
    2066:	e3 5d       	subi	r30, 0xD3	; 211
    2068:	fd 4f       	sbci	r31, 0xFD	; 253
    206a:	80 81       	ld	r24, Z
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	84 2b       	or	r24, r20
    2070:	95 2b       	or	r25, r21
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    2072:	ba ea       	ldi	r27, 0xAA	; 170
    2074:	85 35       	cpi	r24, 0x55	; 85
    2076:	9b 07       	cpc	r25, r27
    2078:	09 f0       	breq	.+2      	; 0x207c <find_volume+0x7b2>
    207a:	0c cf       	rjmp	.-488    	; 0x1e94 <find_volume+0x5ca>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    207c:	f6 01       	movw	r30, r12
    207e:	82 a9       	sts	0x42, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	a0 e0       	ldi	r26, 0x00	; 0
    2084:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    2086:	ba 2f       	mov	r27, r26
    2088:	a9 2f       	mov	r26, r25
    208a:	98 2f       	mov	r25, r24
    208c:	88 27       	eor	r24, r24
    208e:	41 a9       	sts	0x41, r20
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	60 e0       	ldi	r22, 0x00	; 0
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	84 2b       	or	r24, r20
    2098:	95 2b       	or	r25, r21
    209a:	a6 2b       	or	r26, r22
    209c:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    209e:	ba 2f       	mov	r27, r26
    20a0:	a9 2f       	mov	r26, r25
    20a2:	98 2f       	mov	r25, r24
    20a4:	88 27       	eor	r24, r24
    20a6:	40 a9       	sts	0x40, r20
    20a8:	50 e0       	ldi	r21, 0x00	; 0
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	70 e0       	ldi	r23, 0x00	; 0
    20ae:	84 2b       	or	r24, r20
    20b0:	95 2b       	or	r25, r21
    20b2:	a6 2b       	or	r26, r22
    20b4:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    20b6:	ba 2f       	mov	r27, r26
    20b8:	a9 2f       	mov	r26, r25
    20ba:	98 2f       	mov	r25, r24
    20bc:	88 27       	eor	r24, r24
    20be:	47 a5       	lds	r20, 0x67
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	84 2b       	or	r24, r20
    20c8:	95 2b       	or	r25, r21
    20ca:	a6 2b       	or	r26, r22
    20cc:	b7 2b       	or	r27, r23
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    20ce:	82 35       	cpi	r24, 0x52	; 82
    20d0:	f2 e5       	ldi	r31, 0x52	; 82
    20d2:	9f 07       	cpc	r25, r31
    20d4:	f1 e6       	ldi	r31, 0x61	; 97
    20d6:	af 07       	cpc	r26, r31
    20d8:	f1 e4       	ldi	r31, 0x41	; 65
    20da:	bf 07       	cpc	r27, r31
    20dc:	09 f0       	breq	.+2      	; 0x20e0 <find_volume+0x816>
    20de:	da ce       	rjmp	.-588    	; 0x1e94 <find_volume+0x5ca>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    20e0:	f6 01       	movw	r30, r12
    20e2:	ea 5e       	subi	r30, 0xEA	; 234
    20e4:	fd 4f       	sbci	r31, 0xFD	; 253
    20e6:	80 81       	ld	r24, Z
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	a0 e0       	ldi	r26, 0x00	; 0
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    20ee:	ba 2f       	mov	r27, r26
    20f0:	a9 2f       	mov	r26, r25
    20f2:	98 2f       	mov	r25, r24
    20f4:	88 27       	eor	r24, r24
    20f6:	f6 01       	movw	r30, r12
    20f8:	eb 5e       	subi	r30, 0xEB	; 235
    20fa:	fd 4f       	sbci	r31, 0xFD	; 253
    20fc:	40 81       	ld	r20, Z
    20fe:	50 e0       	ldi	r21, 0x00	; 0
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	70 e0       	ldi	r23, 0x00	; 0
    2104:	84 2b       	or	r24, r20
    2106:	95 2b       	or	r25, r21
    2108:	a6 2b       	or	r26, r22
    210a:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    210c:	ba 2f       	mov	r27, r26
    210e:	a9 2f       	mov	r26, r25
    2110:	98 2f       	mov	r25, r24
    2112:	88 27       	eor	r24, r24
    2114:	f6 01       	movw	r30, r12
    2116:	ec 5e       	subi	r30, 0xEC	; 236
    2118:	fd 4f       	sbci	r31, 0xFD	; 253
    211a:	40 81       	ld	r20, Z
    211c:	50 e0       	ldi	r21, 0x00	; 0
    211e:	60 e0       	ldi	r22, 0x00	; 0
    2120:	70 e0       	ldi	r23, 0x00	; 0
    2122:	84 2b       	or	r24, r20
    2124:	95 2b       	or	r25, r21
    2126:	a6 2b       	or	r26, r22
    2128:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    212a:	ba 2f       	mov	r27, r26
    212c:	a9 2f       	mov	r26, r25
    212e:	98 2f       	mov	r25, r24
    2130:	88 27       	eor	r24, r24
    2132:	f6 01       	movw	r30, r12
    2134:	ed 5e       	subi	r30, 0xED	; 237
    2136:	fd 4f       	sbci	r31, 0xFD	; 253
    2138:	40 81       	ld	r20, Z
    213a:	50 e0       	ldi	r21, 0x00	; 0
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	70 e0       	ldi	r23, 0x00	; 0
    2140:	84 2b       	or	r24, r20
    2142:	95 2b       	or	r25, r21
    2144:	a6 2b       	or	r26, r22
    2146:	b7 2b       	or	r27, r23
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    2148:	82 37       	cpi	r24, 0x72	; 114
    214a:	32 e7       	ldi	r19, 0x72	; 114
    214c:	93 07       	cpc	r25, r19
    214e:	31 e4       	ldi	r19, 0x41	; 65
    2150:	a3 07       	cpc	r26, r19
    2152:	31 e6       	ldi	r19, 0x61	; 97
    2154:	b3 07       	cpc	r27, r19
    2156:	09 f0       	breq	.+2      	; 0x215a <find_volume+0x890>
    2158:	9d ce       	rjmp	.-710    	; 0x1e94 <find_volume+0x5ca>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    215a:	f6 01       	movw	r30, r12
    215c:	e6 5e       	subi	r30, 0xE6	; 230
    215e:	fd 4f       	sbci	r31, 0xFD	; 253
    2160:	80 81       	ld	r24, Z
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	a0 e0       	ldi	r26, 0x00	; 0
    2166:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    2168:	ba 2f       	mov	r27, r26
    216a:	a9 2f       	mov	r26, r25
    216c:	98 2f       	mov	r25, r24
    216e:	88 27       	eor	r24, r24
    2170:	f6 01       	movw	r30, r12
    2172:	e7 5e       	subi	r30, 0xE7	; 231
    2174:	fd 4f       	sbci	r31, 0xFD	; 253
    2176:	40 81       	ld	r20, Z
    2178:	50 e0       	ldi	r21, 0x00	; 0
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	70 e0       	ldi	r23, 0x00	; 0
    217e:	84 2b       	or	r24, r20
    2180:	95 2b       	or	r25, r21
    2182:	a6 2b       	or	r26, r22
    2184:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    2186:	ba 2f       	mov	r27, r26
    2188:	a9 2f       	mov	r26, r25
    218a:	98 2f       	mov	r25, r24
    218c:	88 27       	eor	r24, r24
    218e:	f6 01       	movw	r30, r12
    2190:	e8 5e       	subi	r30, 0xE8	; 232
    2192:	fd 4f       	sbci	r31, 0xFD	; 253
    2194:	40 81       	ld	r20, Z
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	60 e0       	ldi	r22, 0x00	; 0
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	84 2b       	or	r24, r20
    219e:	95 2b       	or	r25, r21
    21a0:	a6 2b       	or	r26, r22
    21a2:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    21a4:	ba 2f       	mov	r27, r26
    21a6:	a9 2f       	mov	r26, r25
    21a8:	98 2f       	mov	r25, r24
    21aa:	88 27       	eor	r24, r24
    21ac:	f6 01       	movw	r30, r12
    21ae:	e9 5e       	subi	r30, 0xE9	; 233
    21b0:	fd 4f       	sbci	r31, 0xFD	; 253
    21b2:	40 81       	ld	r20, Z
    21b4:	50 e0       	ldi	r21, 0x00	; 0
    21b6:	60 e0       	ldi	r22, 0x00	; 0
    21b8:	70 e0       	ldi	r23, 0x00	; 0
    21ba:	84 2b       	or	r24, r20
    21bc:	95 2b       	or	r25, r21
    21be:	a6 2b       	or	r26, r22
    21c0:	b7 2b       	or	r27, r23
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    21c2:	f6 01       	movw	r30, r12
    21c4:	87 87       	std	Z+15, r24	; 0x0f
    21c6:	90 8b       	std	Z+16, r25	; 0x10
    21c8:	a1 8b       	std	Z+17, r26	; 0x11
    21ca:	b2 8b       	std	Z+18, r27	; 0x12
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    21cc:	e2 5e       	subi	r30, 0xE2	; 226
    21ce:	fd 4f       	sbci	r31, 0xFD	; 253
    21d0:	80 81       	ld	r24, Z
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	a0 e0       	ldi	r26, 0x00	; 0
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    21d8:	ba 2f       	mov	r27, r26
    21da:	a9 2f       	mov	r26, r25
    21dc:	98 2f       	mov	r25, r24
    21de:	88 27       	eor	r24, r24
    21e0:	f6 01       	movw	r30, r12
    21e2:	e3 5e       	subi	r30, 0xE3	; 227
    21e4:	fd 4f       	sbci	r31, 0xFD	; 253
    21e6:	40 81       	ld	r20, Z
    21e8:	50 e0       	ldi	r21, 0x00	; 0
    21ea:	60 e0       	ldi	r22, 0x00	; 0
    21ec:	70 e0       	ldi	r23, 0x00	; 0
    21ee:	84 2b       	or	r24, r20
    21f0:	95 2b       	or	r25, r21
    21f2:	a6 2b       	or	r26, r22
    21f4:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    21f6:	ba 2f       	mov	r27, r26
    21f8:	a9 2f       	mov	r26, r25
    21fa:	98 2f       	mov	r25, r24
    21fc:	88 27       	eor	r24, r24
    21fe:	f6 01       	movw	r30, r12
    2200:	e4 5e       	subi	r30, 0xE4	; 228
    2202:	fd 4f       	sbci	r31, 0xFD	; 253
    2204:	40 81       	ld	r20, Z
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	60 e0       	ldi	r22, 0x00	; 0
    220a:	70 e0       	ldi	r23, 0x00	; 0
    220c:	84 2b       	or	r24, r20
    220e:	95 2b       	or	r25, r21
    2210:	a6 2b       	or	r26, r22
    2212:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    2214:	ba 2f       	mov	r27, r26
    2216:	a9 2f       	mov	r26, r25
    2218:	98 2f       	mov	r25, r24
    221a:	88 27       	eor	r24, r24
    221c:	f6 01       	movw	r30, r12
    221e:	e5 5e       	subi	r30, 0xE5	; 229
    2220:	fd 4f       	sbci	r31, 0xFD	; 253
    2222:	40 81       	ld	r20, Z
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	84 2b       	or	r24, r20
    222c:	95 2b       	or	r25, r21
    222e:	a6 2b       	or	r26, r22
    2230:	b7 2b       	or	r27, r23
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    2232:	f6 01       	movw	r30, r12
    2234:	83 87       	std	Z+11, r24	; 0x0b
    2236:	94 87       	std	Z+12, r25	; 0x0c
    2238:	a5 87       	std	Z+13, r26	; 0x0d
    223a:	b6 87       	std	Z+14, r27	; 0x0e
    223c:	2b ce       	rjmp	.-938    	; 0x1e94 <find_volume+0x5ca>

0000223e <get_fat.isra.8>:
/*-----------------------------------------------------------------------*/
/* FAT access - Read value of a FAT entry                                */
/*-----------------------------------------------------------------------*/

static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
    223e:	bf 92       	push	r11
    2240:	cf 92       	push	r12
    2242:	df 92       	push	r13
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	ec 01       	movw	r28, r24
    2252:	6a 01       	movw	r12, r20
    2254:	7b 01       	movw	r14, r22
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
	uint8_t num = 0x00;
	
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    2256:	42 30       	cpi	r20, 0x02	; 2
    2258:	51 05       	cpc	r21, r1
    225a:	61 05       	cpc	r22, r1
    225c:	71 05       	cpc	r23, r1
    225e:	88 f0       	brcs	.+34     	; 0x2282 <get_fat.isra.8+0x44>
    2260:	8b 89       	ldd	r24, Y+19	; 0x13
    2262:	9c 89       	ldd	r25, Y+20	; 0x14
    2264:	ad 89       	ldd	r26, Y+21	; 0x15
    2266:	be 89       	ldd	r27, Y+22	; 0x16
    2268:	48 17       	cp	r20, r24
    226a:	59 07       	cpc	r21, r25
    226c:	6a 07       	cpc	r22, r26
    226e:	7b 07       	cpc	r23, r27
    2270:	40 f4       	brcc	.+16     	; 0x2282 <get_fat.isra.8+0x44>
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
		
		switch (fs->fs_type) {
    2272:	88 81       	ld	r24, Y
    2274:	82 30       	cpi	r24, 0x02	; 2
    2276:	09 f4       	brne	.+2      	; 0x227a <get_fat.isra.8+0x3c>
    2278:	77 c0       	rjmp	.+238    	; 0x2368 <get_fat.isra.8+0x12a>
    227a:	83 30       	cpi	r24, 0x03	; 3
    227c:	79 f1       	breq	.+94     	; 0x22dc <get_fat.isra.8+0x9e>
    227e:	81 30       	cpi	r24, 0x01	; 1
    2280:	81 f0       	breq	.+32     	; 0x22a2 <get_fat.isra.8+0x64>
				}
			}
			/* go next */
#endif
		default:
			val = 1;	/* Internal error */
    2282:	01 e0       	ldi	r16, 0x01	; 1
    2284:	10 e0       	ldi	r17, 0x00	; 0
    2286:	20 e0       	ldi	r18, 0x00	; 0
    2288:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return val;
}
    228a:	b8 01       	movw	r22, r16
    228c:	c9 01       	movw	r24, r18
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    2296:	ff 90       	pop	r15
    2298:	ef 90       	pop	r14
    229a:	df 90       	pop	r13
    229c:	cf 90       	pop	r12
    229e:	bf 90       	pop	r11
    22a0:	08 95       	ret
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
		
		switch (fs->fs_type) {
		case FS_FAT12 :
			
			bc = (UINT)clst; bc += bc / 2;
    22a2:	8a 01       	movw	r16, r20
    22a4:	16 95       	lsr	r17
    22a6:	07 95       	ror	r16
    22a8:	04 0f       	add	r16, r20
    22aa:	15 1f       	adc	r17, r21
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK){
    22ac:	a8 01       	movw	r20, r16
    22ae:	45 2f       	mov	r20, r21
    22b0:	55 27       	eor	r21, r21
    22b2:	46 95       	lsr	r20
    22b4:	60 e0       	ldi	r22, 0x00	; 0
    22b6:	70 e0       	ldi	r23, 0x00	; 0
    22b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ba:	98 a1       	lds	r25, 0x48
    22bc:	a9 a1       	lds	r26, 0x49
    22be:	ba a1       	lds	r27, 0x4a
    22c0:	48 0f       	add	r20, r24
    22c2:	59 1f       	adc	r21, r25
    22c4:	6a 1f       	adc	r22, r26
    22c6:	7b 1f       	adc	r23, r27
    22c8:	ce 01       	movw	r24, r28
    22ca:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
    22ce:	00 97       	sbiw	r24, 0x00	; 0
    22d0:	09 f4       	brne	.+2      	; 0x22d4 <get_fat.isra.8+0x96>
    22d2:	6b c0       	rjmp	.+214    	; 0x23aa <get_fat.isra.8+0x16c>
	
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    22d4:	0f ef       	ldi	r16, 0xFF	; 255
    22d6:	1f ef       	ldi	r17, 0xFF	; 255
    22d8:	98 01       	movw	r18, r16
    22da:	d7 cf       	rjmp	.-82     	; 0x228a <get_fat.isra.8+0x4c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
			break;

		case FS_FAT32 :

			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    22dc:	e7 e0       	ldi	r30, 0x07	; 7
    22de:	76 95       	lsr	r23
    22e0:	67 95       	ror	r22
    22e2:	57 95       	ror	r21
    22e4:	47 95       	ror	r20
    22e6:	ea 95       	dec	r30
    22e8:	d1 f7       	brne	.-12     	; 0x22de <get_fat.isra.8+0xa0>
    22ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ec:	98 a1       	lds	r25, 0x48
    22ee:	a9 a1       	lds	r26, 0x49
    22f0:	ba a1       	lds	r27, 0x4a
    22f2:	48 0f       	add	r20, r24
    22f4:	59 1f       	adc	r21, r25
    22f6:	6a 1f       	adc	r22, r26
    22f8:	7b 1f       	adc	r23, r27
    22fa:	ce 01       	movw	r24, r28
    22fc:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
    2300:	00 97       	sbiw	r24, 0x00	; 0
    2302:	41 f7       	brne	.-48     	; 0x22d4 <get_fat.isra.8+0x96>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
    2304:	f6 01       	movw	r30, r12
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	ee 0f       	add	r30, r30
    230c:	ff 1f       	adc	r31, r31
    230e:	f1 70       	andi	r31, 0x01	; 1
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    2310:	ec 0f       	add	r30, r28
    2312:	fd 1f       	adc	r31, r29
    2314:	02 a9       	sts	0x42, r16
    2316:	10 e0       	ldi	r17, 0x00	; 0
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
	rv = rv << 8 | ptr[2];
    231c:	32 2f       	mov	r19, r18
    231e:	21 2f       	mov	r18, r17
    2320:	10 2f       	mov	r17, r16
    2322:	00 27       	eor	r16, r16
    2324:	81 a9       	sts	0x41, r24
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	a0 e0       	ldi	r26, 0x00	; 0
    232a:	b0 e0       	ldi	r27, 0x00	; 0
    232c:	08 2b       	or	r16, r24
    232e:	19 2b       	or	r17, r25
    2330:	2a 2b       	or	r18, r26
    2332:	3b 2b       	or	r19, r27
	rv = rv << 8 | ptr[1];
    2334:	32 2f       	mov	r19, r18
    2336:	21 2f       	mov	r18, r17
    2338:	10 2f       	mov	r17, r16
    233a:	00 27       	eor	r16, r16
    233c:	80 a9       	sts	0x40, r24
    233e:	90 e0       	ldi	r25, 0x00	; 0
    2340:	a0 e0       	ldi	r26, 0x00	; 0
    2342:	b0 e0       	ldi	r27, 0x00	; 0
    2344:	08 2b       	or	r16, r24
    2346:	19 2b       	or	r17, r25
    2348:	2a 2b       	or	r18, r26
    234a:	3b 2b       	or	r19, r27
	rv = rv << 8 | ptr[0];
    234c:	32 2f       	mov	r19, r18
    234e:	21 2f       	mov	r18, r17
    2350:	10 2f       	mov	r17, r16
    2352:	00 27       	eor	r16, r16
    2354:	87 a5       	lds	r24, 0x67
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e0       	ldi	r26, 0x00	; 0
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	08 2b       	or	r16, r24
    235e:	19 2b       	or	r17, r25
    2360:	2a 2b       	or	r18, r26
    2362:	3b 2b       	or	r19, r27
			break;

		case FS_FAT32 :

			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
    2364:	3f 70       	andi	r19, 0x0F	; 15
    2366:	91 cf       	rjmp	.-222    	; 0x228a <get_fat.isra.8+0x4c>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
			break;

		case FS_FAT16 :
			// do get here
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK){
    2368:	45 2f       	mov	r20, r21
    236a:	56 2f       	mov	r21, r22
    236c:	67 2f       	mov	r22, r23
    236e:	77 27       	eor	r23, r23
    2370:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2372:	98 a1       	lds	r25, 0x48
    2374:	a9 a1       	lds	r26, 0x49
    2376:	ba a1       	lds	r27, 0x4a
    2378:	48 0f       	add	r20, r24
    237a:	59 1f       	adc	r21, r25
    237c:	6a 1f       	adc	r22, r26
    237e:	7b 1f       	adc	r23, r27
    2380:	ce 01       	movw	r24, r28
    2382:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	09 f0       	breq	.+2      	; 0x238c <get_fat.isra.8+0x14e>
    238a:	a4 cf       	rjmp	.-184    	; 0x22d4 <get_fat.isra.8+0x96>

			}
			
			// don't get here so it breaks
			 
			val = ld_word(fs->win + clst * 2 % SS(fs));
    238c:	f6 01       	movw	r30, r12
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31
    2392:	f1 70       	andi	r31, 0x01	; 1
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    2394:	ec 0f       	add	r30, r28
    2396:	fd 1f       	adc	r31, r29
	rv = rv << 8 | ptr[0];
    2398:	90 a9       	sts	0x40, r25
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	07 a5       	lds	r16, 0x67
    239e:	10 e0       	ldi	r17, 0x00	; 0
    23a0:	08 2b       	or	r16, r24
    23a2:	19 2b       	or	r17, r25

			}
			
			// don't get here so it breaks
			 
			val = ld_word(fs->win + clst * 2 % SS(fs));
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	70 cf       	rjmp	.-288    	; 0x228a <get_fat.isra.8+0x4c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK){
				 
				 break;
			}
			
			wc = fs->win[bc++ % SS(fs)];
    23aa:	f8 01       	movw	r30, r16
    23ac:	f1 70       	andi	r31, 0x01	; 1
    23ae:	ec 0f       	add	r30, r28
    23b0:	fd 1f       	adc	r31, r29
    23b2:	b7 a4       	lds	r27, 0xa7
    23b4:	0f 5f       	subi	r16, 0xFF	; 255
    23b6:	1f 4f       	sbci	r17, 0xFF	; 255
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    23b8:	a8 01       	movw	r20, r16
    23ba:	45 2f       	mov	r20, r21
    23bc:	55 27       	eor	r21, r21
    23be:	46 95       	lsr	r20
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	70 e0       	ldi	r23, 0x00	; 0
    23c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23c6:	98 a1       	lds	r25, 0x48
    23c8:	a9 a1       	lds	r26, 0x49
    23ca:	ba a1       	lds	r27, 0x4a
    23cc:	48 0f       	add	r20, r24
    23ce:	59 1f       	adc	r21, r25
    23d0:	6a 1f       	adc	r22, r26
    23d2:	7b 1f       	adc	r23, r27
    23d4:	ce 01       	movw	r24, r28
    23d6:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	09 f0       	breq	.+2      	; 0x23e0 <get_fat.isra.8+0x1a2>
    23de:	7a cf       	rjmp	.-268    	; 0x22d4 <get_fat.isra.8+0x96>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK){
				 
				 break;
			}
			
			wc = fs->win[bc++ % SS(fs)];
    23e0:	2b 2d       	mov	r18, r11
    23e2:	30 e0       	ldi	r19, 0x00	; 0
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc |= fs->win[bc % SS(fs)] << 8;
    23e4:	f8 01       	movw	r30, r16
    23e6:	f1 70       	andi	r31, 0x01	; 1
    23e8:	ec 0f       	add	r30, r28
    23ea:	fd 1f       	adc	r31, r29
    23ec:	97 a5       	lds	r25, 0x67
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	28 2b       	or	r18, r24
    23f2:	39 2b       	or	r19, r25
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	c8 22       	and	r12, r24
    23f8:	dd 24       	eor	r13, r13
    23fa:	c1 14       	cp	r12, r1
    23fc:	d1 04       	cpc	r13, r1
    23fe:	51 f0       	breq	.+20     	; 0x2414 <get_fat.isra.8+0x1d6>
    2400:	32 95       	swap	r19
    2402:	22 95       	swap	r18
    2404:	2f 70       	andi	r18, 0x0F	; 15
    2406:	23 27       	eor	r18, r19
    2408:	3f 70       	andi	r19, 0x0F	; 15
    240a:	23 27       	eor	r18, r19
    240c:	89 01       	movw	r16, r18
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	3b cf       	rjmp	.-394    	; 0x228a <get_fat.isra.8+0x4c>
    2414:	89 01       	movw	r16, r18
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	1f 70       	andi	r17, 0x0F	; 15
    241c:	20 70       	andi	r18, 0x00	; 0
    241e:	30 70       	andi	r19, 0x00	; 0
    2420:	34 cf       	rjmp	.-408    	; 0x228a <get_fat.isra.8+0x4c>

00002422 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
    2422:	8f 92       	push	r8
    2424:	9f 92       	push	r9
    2426:	af 92       	push	r10
    2428:	bf 92       	push	r11
    242a:	cf 92       	push	r12
    242c:	df 92       	push	r13
    242e:	ef 92       	push	r14
    2430:	ff 92       	push	r15
    2432:	0f 93       	push	r16
    2434:	1f 93       	push	r17
    2436:	cf 93       	push	r28
    2438:	df 93       	push	r29
    243a:	ec 01       	movw	r28, r24
    243c:	6a 01       	movw	r12, r20
    243e:	7b 01       	movw	r14, r22
    2440:	48 01       	movw	r8, r16
    2442:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    2444:	42 30       	cpi	r20, 0x02	; 2
    2446:	51 05       	cpc	r21, r1
    2448:	61 05       	cpc	r22, r1
    244a:	71 05       	cpc	r23, r1
    244c:	48 f0       	brcs	.+18     	; 0x2460 <put_fat+0x3e>
    244e:	8b 89       	ldd	r24, Y+19	; 0x13
    2450:	9c 89       	ldd	r25, Y+20	; 0x14
    2452:	ad 89       	ldd	r26, Y+21	; 0x15
    2454:	be 89       	ldd	r27, Y+22	; 0x16
    2456:	48 17       	cp	r20, r24
    2458:	59 07       	cpc	r21, r25
    245a:	6a 07       	cpc	r22, r26
    245c:	7b 07       	cpc	r23, r27
    245e:	78 f0       	brcs	.+30     	; 0x247e <put_fat+0x5c>
	DWORD val		/* New value to be set to the entry */
)
{
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
    2460:	82 e0       	ldi	r24, 0x02	; 2
    2462:	90 e0       	ldi	r25, 0x00	; 0
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	ff 90       	pop	r15
    246e:	ef 90       	pop	r14
    2470:	df 90       	pop	r13
    2472:	cf 90       	pop	r12
    2474:	bf 90       	pop	r11
    2476:	af 90       	pop	r10
    2478:	9f 90       	pop	r9
    247a:	8f 90       	pop	r8
    247c:	08 95       	ret
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
		switch (fs->fs_type) {
    247e:	88 81       	ld	r24, Y
    2480:	82 30       	cpi	r24, 0x02	; 2
    2482:	09 f4       	brne	.+2      	; 0x2486 <put_fat+0x64>
    2484:	93 c0       	rjmp	.+294    	; 0x25ac <put_fat+0x18a>
    2486:	83 30       	cpi	r24, 0x03	; 3
    2488:	09 f4       	brne	.+2      	; 0x248c <put_fat+0x6a>
    248a:	59 c0       	rjmp	.+178    	; 0x253e <put_fat+0x11c>
    248c:	81 30       	cpi	r24, 0x01	; 1
    248e:	41 f7       	brne	.-48     	; 0x2460 <put_fat+0x3e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
    2490:	8a 01       	movw	r16, r20
    2492:	16 95       	lsr	r17
    2494:	07 95       	ror	r16
    2496:	0c 0d       	add	r16, r12
    2498:	1d 1d       	adc	r17, r13
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    249a:	a8 01       	movw	r20, r16
    249c:	45 2f       	mov	r20, r21
    249e:	55 27       	eor	r21, r21
    24a0:	46 95       	lsr	r20
    24a2:	60 e0       	ldi	r22, 0x00	; 0
    24a4:	70 e0       	ldi	r23, 0x00	; 0
    24a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24a8:	98 a1       	lds	r25, 0x48
    24aa:	a9 a1       	lds	r26, 0x49
    24ac:	ba a1       	lds	r27, 0x4a
    24ae:	48 0f       	add	r20, r24
    24b0:	59 1f       	adc	r21, r25
    24b2:	6a 1f       	adc	r22, r26
    24b4:	7b 1f       	adc	r23, r27
    24b6:	ce 01       	movw	r24, r28
    24b8:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
			if (res != FR_OK) break;
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	91 f6       	brne	.-92     	; 0x2464 <put_fat+0x42>
			p = fs->win + bc++ % SS(fs);
    24c0:	f8 01       	movw	r30, r16
    24c2:	f1 70       	andi	r31, 0x01	; 1
    24c4:	0f 5f       	subi	r16, 0xFF	; 255
    24c6:	1f 4f       	sbci	r17, 0xFF	; 255
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	c8 22       	and	r12, r24
    24cc:	dd 24       	eor	r13, r13
    24ce:	c1 14       	cp	r12, r1
    24d0:	d1 04       	cpc	r13, r1
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <put_fat+0xb4>
    24d4:	88 c0       	rjmp	.+272    	; 0x25e6 <put_fat+0x1c4>
    24d6:	ec 0f       	add	r30, r28
    24d8:	fd 1f       	adc	r31, r29
    24da:	97 a5       	lds	r25, 0x67
    24dc:	9f 70       	andi	r25, 0x0F	; 15
    24de:	88 2d       	mov	r24, r8
    24e0:	82 95       	swap	r24
    24e2:	80 7f       	andi	r24, 0xF0	; 240
    24e4:	89 2b       	or	r24, r25
    24e6:	87 a7       	lds	r24, 0x77
			fs->wflag = 1;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	8b 83       	std	Y+3, r24	; 0x03
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    24ec:	a8 01       	movw	r20, r16
    24ee:	45 2f       	mov	r20, r21
    24f0:	55 27       	eor	r21, r21
    24f2:	46 95       	lsr	r20
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	70 e0       	ldi	r23, 0x00	; 0
    24f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24fa:	98 a1       	lds	r25, 0x48
    24fc:	a9 a1       	lds	r26, 0x49
    24fe:	ba a1       	lds	r27, 0x4a
    2500:	48 0f       	add	r20, r24
    2502:	59 1f       	adc	r21, r25
    2504:	6a 1f       	adc	r22, r26
    2506:	7b 1f       	adc	r23, r27
    2508:	ce 01       	movw	r24, r28
    250a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
			if (res != FR_OK) break;
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	09 f0       	breq	.+2      	; 0x2514 <put_fat+0xf2>
    2512:	a8 cf       	rjmp	.-176    	; 0x2464 <put_fat+0x42>
			p = fs->win + bc % SS(fs);
    2514:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    2516:	c1 14       	cp	r12, r1
    2518:	d1 04       	cpc	r13, r1
    251a:	09 f4       	brne	.+2      	; 0x251e <put_fat+0xfc>
    251c:	68 c0       	rjmp	.+208    	; 0x25ee <put_fat+0x1cc>
    251e:	b5 01       	movw	r22, r10
    2520:	a4 01       	movw	r20, r8
    2522:	24 e0       	ldi	r18, 0x04	; 4
    2524:	76 95       	lsr	r23
    2526:	67 95       	ror	r22
    2528:	57 95       	ror	r21
    252a:	47 95       	ror	r20
    252c:	2a 95       	dec	r18
    252e:	d1 f7       	brne	.-12     	; 0x2524 <put_fat+0x102>
    2530:	fe 01       	movw	r30, r28
    2532:	e0 0f       	add	r30, r16
    2534:	f1 1f       	adc	r31, r17
    2536:	47 a7       	lds	r20, 0x77
			fs->wflag = 1;
    2538:	21 e0       	ldi	r18, 0x01	; 1
    253a:	2b 83       	std	Y+3, r18	; 0x03
    253c:	93 cf       	rjmp	.-218    	; 0x2464 <put_fat+0x42>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    253e:	b7 e0       	ldi	r27, 0x07	; 7
    2540:	76 95       	lsr	r23
    2542:	67 95       	ror	r22
    2544:	57 95       	ror	r21
    2546:	47 95       	ror	r20
    2548:	ba 95       	dec	r27
    254a:	d1 f7       	brne	.-12     	; 0x2540 <put_fat+0x11e>
    254c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    254e:	98 a1       	lds	r25, 0x48
    2550:	a9 a1       	lds	r26, 0x49
    2552:	ba a1       	lds	r27, 0x4a
    2554:	48 0f       	add	r20, r24
    2556:	59 1f       	adc	r21, r25
    2558:	6a 1f       	adc	r22, r26
    255a:	7b 1f       	adc	r23, r27
    255c:	ce 01       	movw	r24, r28
    255e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
			if (res != FR_OK) break;
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	09 f0       	breq	.+2      	; 0x2568 <put_fat+0x146>
    2566:	7e cf       	rjmp	.-260    	; 0x2464 <put_fat+0x42>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    2568:	f6 01       	movw	r30, r12
    256a:	ee 0f       	add	r30, r30
    256c:	ff 1f       	adc	r31, r31
    256e:	ee 0f       	add	r30, r30
    2570:	ff 1f       	adc	r31, r31
    2572:	f1 70       	andi	r31, 0x01	; 1
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    2574:	ec 0f       	add	r30, r28
    2576:	fd 1f       	adc	r31, r29
    2578:	42 a9       	sts	0x42, r20
    257a:	50 e0       	ldi	r21, 0x00	; 0
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	70 e0       	ldi	r23, 0x00	; 0
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
    2580:	34 2f       	mov	r19, r20
    2582:	22 27       	eor	r18, r18
    2584:	11 27       	eor	r17, r17
    2586:	00 27       	eor	r16, r16
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    2588:	00 70       	andi	r16, 0x00	; 0
    258a:	10 70       	andi	r17, 0x00	; 0
    258c:	20 70       	andi	r18, 0x00	; 0
    258e:	30 7f       	andi	r19, 0xF0	; 240
    2590:	b5 01       	movw	r22, r10
    2592:	a4 01       	movw	r20, r8
    2594:	7f 70       	andi	r23, 0x0F	; 15
    2596:	04 2b       	or	r16, r20
    2598:	15 2b       	or	r17, r21
    259a:	26 2b       	or	r18, r22
    259c:	37 2b       	or	r19, r23
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    259e:	07 a7       	lds	r16, 0x77
	*ptr++ = (BYTE)val; val >>= 8;
    25a0:	10 ab       	sts	0x50, r17
	*ptr++ = (BYTE)val; val >>= 8;
    25a2:	21 ab       	sts	0x51, r18
	*ptr++ = (BYTE)val;
    25a4:	32 ab       	sts	0x52, r19
			if (res != FR_OK) break;
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
			fs->wflag = 1;
    25a6:	21 e0       	ldi	r18, 0x01	; 1
    25a8:	2b 83       	std	Y+3, r18	; 0x03
    25aa:	5c cf       	rjmp	.-328    	; 0x2464 <put_fat+0x42>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
			fs->wflag = 1;
			break;

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    25ac:	45 2f       	mov	r20, r21
    25ae:	56 2f       	mov	r21, r22
    25b0:	67 2f       	mov	r22, r23
    25b2:	77 27       	eor	r23, r23
    25b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b6:	98 a1       	lds	r25, 0x48
    25b8:	a9 a1       	lds	r26, 0x49
    25ba:	ba a1       	lds	r27, 0x4a
    25bc:	48 0f       	add	r20, r24
    25be:	59 1f       	adc	r21, r25
    25c0:	6a 1f       	adc	r22, r26
    25c2:	7b 1f       	adc	r23, r27
    25c4:	ce 01       	movw	r24, r28
    25c6:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
			if (res != FR_OK) break;
    25ca:	00 97       	sbiw	r24, 0x00	; 0
    25cc:	09 f0       	breq	.+2      	; 0x25d0 <put_fat+0x1ae>
    25ce:	4a cf       	rjmp	.-364    	; 0x2464 <put_fat+0x42>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
    25d0:	f6 01       	movw	r30, r12
    25d2:	ee 0f       	add	r30, r30
    25d4:	ff 1f       	adc	r31, r31
    25d6:	f1 70       	andi	r31, 0x01	; 1

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    25d8:	ec 0f       	add	r30, r28
    25da:	fd 1f       	adc	r31, r29
    25dc:	87 a6       	lds	r24, 0xb7
	*ptr++ = (BYTE)val;
    25de:	90 aa       	sts	0x90, r25

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
			fs->wflag = 1;
    25e0:	21 e0       	ldi	r18, 0x01	; 1
    25e2:	2b 83       	std	Y+3, r18	; 0x03
    25e4:	3f cf       	rjmp	.-386    	; 0x2464 <put_fat+0x42>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = fs->win + bc++ % SS(fs);
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    25e6:	88 2d       	mov	r24, r8
    25e8:	ec 0f       	add	r30, r28
    25ea:	fd 1f       	adc	r31, r29
    25ec:	7c cf       	rjmp	.-264    	; 0x24e6 <put_fat+0xc4>
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = fs->win + bc % SS(fs);
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    25ee:	fe 01       	movw	r30, r28
    25f0:	e0 0f       	add	r30, r16
    25f2:	f1 1f       	adc	r31, r17
    25f4:	47 a5       	lds	r20, 0x67
    25f6:	40 7f       	andi	r20, 0xF0	; 240
    25f8:	29 2d       	mov	r18, r9
    25fa:	2f 70       	andi	r18, 0x0F	; 15
    25fc:	42 2b       	or	r20, r18
    25fe:	9b cf       	rjmp	.-202    	; 0x2536 <put_fat+0x114>

00002600 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
    2600:	2f 92       	push	r2
    2602:	3f 92       	push	r3
    2604:	4f 92       	push	r4
    2606:	5f 92       	push	r5
    2608:	6f 92       	push	r6
    260a:	7f 92       	push	r7
    260c:	8f 92       	push	r8
    260e:	9f 92       	push	r9
    2610:	af 92       	push	r10
    2612:	bf 92       	push	r11
    2614:	cf 92       	push	r12
    2616:	df 92       	push	r13
    2618:	ef 92       	push	r14
    261a:	ff 92       	push	r15
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	ec 01       	movw	r28, r24
    2626:	1a 01       	movw	r2, r20
    2628:	2b 01       	movw	r4, r22
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
    262a:	68 80       	ld	r6, Y
    262c:	79 80       	ldd	r7, Y+1	; 0x01
	uint8_t num = 0x00;
	
	if (clst == 0) {	/* Create a new chain */
    262e:	41 15       	cp	r20, r1
    2630:	51 05       	cpc	r21, r1
    2632:	61 05       	cpc	r22, r1
    2634:	71 05       	cpc	r23, r1
    2636:	09 f0       	breq	.+2      	; 0x263a <create_chain+0x3a>
    2638:	b6 c0       	rjmp	.+364    	; 0x27a6 <create_chain+0x1a6>
		scl = fs->last_clst;				/* Get suggested cluster to start at */
    263a:	f3 01       	movw	r30, r6
    263c:	83 84       	ldd	r8, Z+11	; 0x0b
    263e:	94 84       	ldd	r9, Z+12	; 0x0c
    2640:	a5 84       	ldd	r10, Z+13	; 0x0d
    2642:	b6 84       	ldd	r11, Z+14	; 0x0e
		
		if (scl == 0 || scl >= fs->n_fatent) {
    2644:	81 14       	cp	r8, r1
    2646:	91 04       	cpc	r9, r1
    2648:	a1 04       	cpc	r10, r1
    264a:	b1 04       	cpc	r11, r1
    264c:	09 f0       	breq	.+2      	; 0x2650 <create_chain+0x50>
    264e:	49 c0       	rjmp	.+146    	; 0x26e2 <create_chain+0xe2>
    2650:	83 89       	ldd	r24, Z+19	; 0x13
    2652:	94 89       	ldd	r25, Z+20	; 0x14
    2654:	a5 89       	ldd	r26, Z+21	; 0x15
    2656:	b6 89       	ldd	r27, Z+22	; 0x16
			scl = 1; // true - scl is 1
    2658:	11 e0       	ldi	r17, 0x01	; 1
    265a:	81 2e       	mov	r8, r17
    265c:	91 2c       	mov	r9, r1
    265e:	a1 2c       	mov	r10, r1
    2660:	b1 2c       	mov	r11, r1
    2662:	75 01       	movw	r14, r10
    2664:	64 01       	movw	r12, r8
	{	/* At the FAT12/16/32 */
		
		ncl = scl;	/* Start cluster */

		for (;;) {
			ncl++;	// ncl is 2	this is where the long time stuff happens					/* Next cluster */
    2666:	08 94       	sec
    2668:	c1 1c       	adc	r12, r1
    266a:	d1 1c       	adc	r13, r1
    266c:	e1 1c       	adc	r14, r1
    266e:	f1 1c       	adc	r15, r1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    2670:	c8 16       	cp	r12, r24
    2672:	d9 06       	cpc	r13, r25
    2674:	ea 06       	cpc	r14, r26
    2676:	fb 06       	cpc	r15, r27
    2678:	60 f0       	brcs	.+24     	; 0x2692 <create_chain+0x92>
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
    267a:	f2 e0       	ldi	r31, 0x02	; 2
    267c:	8f 16       	cp	r8, r31
    267e:	91 04       	cpc	r9, r1
    2680:	a1 04       	cpc	r10, r1
    2682:	b1 04       	cpc	r11, r1
    2684:	08 f4       	brcc	.+2      	; 0x2688 <create_chain+0x88>
    2686:	8b c0       	rjmp	.+278    	; 0x279e <create_chain+0x19e>
		ncl = scl;	/* Start cluster */

		for (;;) {
			ncl++;	// ncl is 2	this is where the long time stuff happens					/* Next cluster */
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
    2688:	72 e0       	ldi	r23, 0x02	; 2
    268a:	c7 2e       	mov	r12, r23
    268c:	d1 2c       	mov	r13, r1
    268e:	e1 2c       	mov	r14, r1
    2690:	f1 2c       	mov	r15, r1
			 // does this loop happen more than once? - YES, it happens twice, once with ncl == 2 and once with ncl == 3
			if(ncl > 3){
				
			}
		
			cs = get_fat(obj, ncl);			/* Get the cluster status */ /*are there iterations where cs gets a bad return value? - no */
    2692:	88 81       	ld	r24, Y
    2694:	99 81       	ldd	r25, Y+1	; 0x01
    2696:	b7 01       	movw	r22, r14
    2698:	a6 01       	movw	r20, r12
    269a:	0e 94 1f 11 	call	0x223e	; 0x223e <get_fat.isra.8>
    269e:	8b 01       	movw	r16, r22
    26a0:	9c 01       	movw	r18, r24
		
			
			if (cs == 0){
    26a2:	61 15       	cp	r22, r1
    26a4:	71 05       	cpc	r23, r1
    26a6:	81 05       	cpc	r24, r1
    26a8:	91 05       	cpc	r25, r1
    26aa:	61 f1       	breq	.+88     	; 0x2704 <create_chain+0x104>
				// no we dont'
				
				 break;		
			}		/* Found a free cluster */

			if (cs == 1 || cs == 0xFFFFFFFF){
    26ac:	61 30       	cpi	r22, 0x01	; 1
    26ae:	71 05       	cpc	r23, r1
    26b0:	81 05       	cpc	r24, r1
    26b2:	91 05       	cpc	r25, r1
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <create_chain+0xb8>
    26b6:	5e c0       	rjmp	.+188    	; 0x2774 <create_chain+0x174>
    26b8:	0f 3f       	cpi	r16, 0xFF	; 255
    26ba:	8f ef       	ldi	r24, 0xFF	; 255
    26bc:	18 07       	cpc	r17, r24
    26be:	8f ef       	ldi	r24, 0xFF	; 255
    26c0:	28 07       	cpc	r18, r24
    26c2:	8f ef       	ldi	r24, 0xFF	; 255
    26c4:	38 07       	cpc	r19, r24
    26c6:	09 f4       	brne	.+2      	; 0x26ca <create_chain+0xca>
    26c8:	55 c0       	rjmp	.+170    	; 0x2774 <create_chain+0x174>

			 // we get here
			 return cs;	/* An error occurred */
			}
			if (ncl == scl){
    26ca:	c8 14       	cp	r12, r8
    26cc:	d9 04       	cpc	r13, r9
    26ce:	ea 04       	cpc	r14, r10
    26d0:	fb 04       	cpc	r15, r11
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <create_chain+0xd6>
    26d4:	64 c0       	rjmp	.+200    	; 0x279e <create_chain+0x19e>
    26d6:	f3 01       	movw	r30, r6
    26d8:	83 89       	ldd	r24, Z+19	; 0x13
    26da:	94 89       	ldd	r25, Z+20	; 0x14
    26dc:	a5 89       	ldd	r26, Z+21	; 0x15
    26de:	b6 89       	ldd	r27, Z+22	; 0x16
    26e0:	c2 cf       	rjmp	.-124    	; 0x2666 <create_chain+0x66>
	uint8_t num = 0x00;
	
	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Get suggested cluster to start at */
		
		if (scl == 0 || scl >= fs->n_fatent) {
    26e2:	f3 01       	movw	r30, r6
    26e4:	83 89       	ldd	r24, Z+19	; 0x13
    26e6:	94 89       	ldd	r25, Z+20	; 0x14
    26e8:	a5 89       	ldd	r26, Z+21	; 0x15
    26ea:	b6 89       	ldd	r27, Z+22	; 0x16
    26ec:	88 16       	cp	r8, r24
    26ee:	99 06       	cpc	r9, r25
    26f0:	aa 06       	cpc	r10, r26
    26f2:	bb 06       	cpc	r11, r27
    26f4:	08 f4       	brcc	.+2      	; 0x26f8 <create_chain+0xf8>
    26f6:	b5 cf       	rjmp	.-150    	; 0x2662 <create_chain+0x62>
			scl = 1; // true - scl is 1
    26f8:	e1 e0       	ldi	r30, 0x01	; 1
    26fa:	8e 2e       	mov	r8, r30
    26fc:	91 2c       	mov	r9, r1
    26fe:	a1 2c       	mov	r10, r1
    2700:	b1 2c       	mov	r11, r1
    2702:	af cf       	rjmp	.-162    	; 0x2662 <create_chain+0x62>
			}
		
			cs = get_fat(obj, ncl);			/* Get the cluster status */ /*are there iterations where cs gets a bad return value? - no */
		
			
			if (cs == 0){
    2704:	cc 2d       	mov	r28, r12
    2706:	8d 2c       	mov	r8, r13
    2708:	de 2d       	mov	r29, r14
    270a:	bf 2c       	mov	r11, r15
	}

	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
		res = FR_OK;						/* FAT does not need to be written */
	} else {
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
    270c:	c3 01       	movw	r24, r6
    270e:	a6 01       	movw	r20, r12
    2710:	b7 01       	movw	r22, r14
    2712:	0f ef       	ldi	r16, 0xFF	; 255
    2714:	1f ef       	ldi	r17, 0xFF	; 255
    2716:	98 01       	movw	r18, r16
    2718:	0e 94 11 12 	call	0x2422	; 0x2422 <put_fat>
		if (res == FR_OK && clst) {
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	09 f0       	breq	.+2      	; 0x2722 <create_chain+0x122>
    2720:	70 c0       	rjmp	.+224    	; 0x2802 <create_chain+0x202>
    2722:	21 14       	cp	r2, r1
    2724:	31 04       	cpc	r3, r1
    2726:	41 04       	cpc	r4, r1
    2728:	51 04       	cpc	r5, r1
    272a:	09 f0       	breq	.+2      	; 0x272e <create_chain+0x12e>
    272c:	60 c0       	rjmp	.+192    	; 0x27ee <create_chain+0x1ee>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
    272e:	f3 01       	movw	r30, r6
    2730:	c3 87       	std	Z+11, r28	; 0x0b
    2732:	84 86       	std	Z+12, r8	; 0x0c
    2734:	d5 87       	std	Z+13, r29	; 0x0d
    2736:	b6 86       	std	Z+14, r11	; 0x0e
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
    2738:	47 85       	ldd	r20, Z+15	; 0x0f
    273a:	50 89       	ldd	r21, Z+16	; 0x10
    273c:	61 89       	ldd	r22, Z+17	; 0x11
    273e:	72 89       	ldd	r23, Z+18	; 0x12
    2740:	83 89       	ldd	r24, Z+19	; 0x13
    2742:	94 89       	ldd	r25, Z+20	; 0x14
    2744:	a5 89       	ldd	r26, Z+21	; 0x15
    2746:	b6 89       	ldd	r27, Z+22	; 0x16
    2748:	02 97       	sbiw	r24, 0x02	; 2
    274a:	a1 09       	sbc	r26, r1
    274c:	b1 09       	sbc	r27, r1
    274e:	48 17       	cp	r20, r24
    2750:	59 07       	cpc	r21, r25
    2752:	6a 07       	cpc	r22, r26
    2754:	7b 07       	cpc	r23, r27
    2756:	40 f4       	brcc	.+16     	; 0x2768 <create_chain+0x168>
    2758:	41 50       	subi	r20, 0x01	; 1
    275a:	50 40       	sbci	r21, 0x00	; 0
    275c:	60 40       	sbci	r22, 0x00	; 0
    275e:	70 40       	sbci	r23, 0x00	; 0
    2760:	47 87       	std	Z+15, r20	; 0x0f
    2762:	50 8b       	std	Z+16, r21	; 0x10
    2764:	61 8b       	std	Z+17, r22	; 0x11
    2766:	72 8b       	std	Z+18, r23	; 0x12
		fs->fsi_flag |= 1;
    2768:	f3 01       	movw	r30, r6
    276a:	84 81       	ldd	r24, Z+4	; 0x04
    276c:	81 60       	ori	r24, 0x01	; 1
    276e:	84 83       	std	Z+4, r24	; 0x04
    2770:	97 01       	movw	r18, r14
    2772:	86 01       	movw	r16, r12
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
	}

	return ncl;		/* Return new cluster number or error status */
}
    2774:	b8 01       	movw	r22, r16
    2776:	c9 01       	movw	r24, r18
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	ff 90       	pop	r15
    2782:	ef 90       	pop	r14
    2784:	df 90       	pop	r13
    2786:	cf 90       	pop	r12
    2788:	bf 90       	pop	r11
    278a:	af 90       	pop	r10
    278c:	9f 90       	pop	r9
    278e:	8f 90       	pop	r8
    2790:	7f 90       	pop	r7
    2792:	6f 90       	pop	r6
    2794:	5f 90       	pop	r5
    2796:	4f 90       	pop	r4
    2798:	3f 90       	pop	r3
    279a:	2f 90       	pop	r2
    279c:	08 95       	ret
			 return cs;	/* An error occurred */
			}
			if (ncl == scl){
				// we don't get here 

			 return 0;		/* No free cluster */
    279e:	00 e0       	ldi	r16, 0x00	; 0
    27a0:	10 e0       	ldi	r17, 0x00	; 0
    27a2:	98 01       	movw	r18, r16
    27a4:	e7 cf       	rjmp	.-50     	; 0x2774 <create_chain+0x174>
		if (scl == 0 || scl >= fs->n_fatent) {
			scl = 1; // true - scl is 1
		}
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
    27a6:	c3 01       	movw	r24, r6
    27a8:	0e 94 1f 11 	call	0x223e	; 0x223e <get_fat.isra.8>
    27ac:	8b 01       	movw	r16, r22
    27ae:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;				/* Invalid value */
    27b0:	62 30       	cpi	r22, 0x02	; 2
    27b2:	71 05       	cpc	r23, r1
    27b4:	81 05       	cpc	r24, r1
    27b6:	91 05       	cpc	r25, r1
    27b8:	a8 f0       	brcs	.+42     	; 0x27e4 <create_chain+0x1e4>
		if (cs == 0xFFFFFFFF){
    27ba:	6f 3f       	cpi	r22, 0xFF	; 255
    27bc:	ff ef       	ldi	r31, 0xFF	; 255
    27be:	7f 07       	cpc	r23, r31
    27c0:	ff ef       	ldi	r31, 0xFF	; 255
    27c2:	8f 07       	cpc	r24, r31
    27c4:	ff ef       	ldi	r31, 0xFF	; 255
    27c6:	9f 07       	cpc	r25, r31
    27c8:	a9 f2       	breq	.-86     	; 0x2774 <create_chain+0x174>
		 return cs;	/* A disk error occurred */
		}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    27ca:	f3 01       	movw	r30, r6
    27cc:	83 89       	ldd	r24, Z+19	; 0x13
    27ce:	94 89       	ldd	r25, Z+20	; 0x14
    27d0:	a5 89       	ldd	r26, Z+21	; 0x15
    27d2:	b6 89       	ldd	r27, Z+22	; 0x16
    27d4:	08 17       	cp	r16, r24
    27d6:	19 07       	cpc	r17, r25
    27d8:	2a 07       	cpc	r18, r26
    27da:	3b 07       	cpc	r19, r27
    27dc:	58 f2       	brcs	.-106    	; 0x2774 <create_chain+0x174>
    27de:	52 01       	movw	r10, r4
    27e0:	41 01       	movw	r8, r2
    27e2:	3f cf       	rjmp	.-386    	; 0x2662 <create_chain+0x62>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
    27e4:	01 e0       	ldi	r16, 0x01	; 1
    27e6:	10 e0       	ldi	r17, 0x00	; 0
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	c3 cf       	rjmp	.-122    	; 0x2774 <create_chain+0x174>
	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
		res = FR_OK;						/* FAT does not need to be written */
	} else {
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
		if (res == FR_OK && clst) {
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
    27ee:	c3 01       	movw	r24, r6
    27f0:	b2 01       	movw	r22, r4
    27f2:	a1 01       	movw	r20, r2
    27f4:	86 01       	movw	r16, r12
    27f6:	97 01       	movw	r18, r14
    27f8:	0e 94 11 12 	call	0x2422	; 0x2422 <put_fat>
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	09 f4       	brne	.+2      	; 0x2802 <create_chain+0x202>
    2800:	96 cf       	rjmp	.-212    	; 0x272e <create_chain+0x12e>
		fs->last_clst = ncl;
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
    2802:	81 30       	cpi	r24, 0x01	; 1
    2804:	91 05       	cpc	r25, r1
    2806:	71 f7       	brne	.-36     	; 0x27e4 <create_chain+0x1e4>
    2808:	0f ef       	ldi	r16, 0xFF	; 255
    280a:	1f ef       	ldi	r17, 0xFF	; 255
    280c:	98 01       	movw	r18, r16
    280e:	b2 cf       	rjmp	.-156    	; 0x2774 <create_chain+0x174>

00002810 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    2810:	4f 92       	push	r4
    2812:	5f 92       	push	r5
    2814:	6f 92       	push	r6
    2816:	7f 92       	push	r7
    2818:	8f 92       	push	r8
    281a:	9f 92       	push	r9
    281c:	af 92       	push	r10
    281e:	bf 92       	push	r11
    2820:	cf 92       	push	r12
    2822:	df 92       	push	r13
    2824:	ef 92       	push	r14
    2826:	ff 92       	push	r15
    2828:	0f 93       	push	r16
    282a:	1f 93       	push	r17
    282c:	cf 93       	push	r28
    282e:	df 93       	push	r29
    2830:	cd b7       	in	r28, 0x3d	; 61
    2832:	de b7       	in	r29, 0x3e	; 62
    2834:	27 97       	sbiw	r28, 0x07	; 7
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	de bf       	out	0x3e, r29	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	cd bf       	out	0x3d, r28	; 61
    2840:	4c 01       	movw	r8, r24
    2842:	8b 01       	movw	r16, r22
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
    2844:	dc 01       	movw	r26, r24
    2846:	ad 90       	ld	r10, X+
    2848:	bc 90       	ld	r11, X
    284a:	11 97       	sbiw	r26, 0x01	; 1
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
    284c:	1e 96       	adiw	r26, 0x0e	; 14
    284e:	8d 91       	ld	r24, X+
    2850:	9d 91       	ld	r25, X+
    2852:	0d 90       	ld	r0, X+
    2854:	bc 91       	ld	r27, X
    2856:	a0 2d       	mov	r26, r0
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
    2858:	f4 01       	movw	r30, r8
    285a:	46 89       	ldd	r20, Z+22	; 0x16
    285c:	57 89       	ldd	r21, Z+23	; 0x17
    285e:	60 8d       	ldd	r22, Z+24	; 0x18
    2860:	71 8d       	ldd	r23, Z+25	; 0x19
    2862:	41 15       	cp	r20, r1
    2864:	51 05       	cpc	r21, r1
    2866:	61 05       	cpc	r22, r1
    2868:	71 05       	cpc	r23, r1
    286a:	c9 f4       	brne	.+50     	; 0x289e <dir_next+0x8e>
    286c:	84 e0       	ldi	r24, 0x04	; 4
    286e:	90 e0       	ldi	r25, 0x00	; 0
	}
	dp->dptr = ofs;						/* Current entry */
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */

	return FR_OK;
}
    2870:	27 96       	adiw	r28, 0x07	; 7
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	de bf       	out	0x3e, r29	; 62
    2878:	0f be       	out	0x3f, r0	; 63
    287a:	cd bf       	out	0x3d, r28	; 61
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	ff 90       	pop	r15
    2886:	ef 90       	pop	r14
    2888:	df 90       	pop	r13
    288a:	cf 90       	pop	r12
    288c:	bf 90       	pop	r11
    288e:	af 90       	pop	r10
    2890:	9f 90       	pop	r9
    2892:	8f 90       	pop	r8
    2894:	7f 90       	pop	r7
    2896:	6f 90       	pop	r6
    2898:	5f 90       	pop	r5
    289a:	4f 90       	pop	r4
    289c:	08 95       	ret
	FATFS *fs = dp->obj.fs;
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
    289e:	e0 e2       	ldi	r30, 0x20	; 32
    28a0:	ce 2e       	mov	r12, r30
    28a2:	d1 2c       	mov	r13, r1
    28a4:	e1 2c       	mov	r14, r1
    28a6:	f1 2c       	mov	r15, r1
    28a8:	c8 0e       	add	r12, r24
    28aa:	d9 1e       	adc	r13, r25
    28ac:	ea 1e       	adc	r14, r26
    28ae:	fb 1e       	adc	r15, r27
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	cf 16       	cp	r12, r31
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	df 06       	cpc	r13, r31
    28b8:	f0 e2       	ldi	r31, 0x20	; 32
    28ba:	ef 06       	cpc	r14, r31
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	ff 06       	cpc	r15, r31
    28c0:	a8 f6       	brcc	.-86     	; 0x286c <dir_next+0x5c>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    28c2:	d7 01       	movw	r26, r14
    28c4:	c6 01       	movw	r24, r12
    28c6:	91 70       	andi	r25, 0x01	; 1
    28c8:	a0 70       	andi	r26, 0x00	; 0
    28ca:	b0 70       	andi	r27, 0x00	; 0
    28cc:	00 97       	sbiw	r24, 0x00	; 0
    28ce:	a1 05       	cpc	r26, r1
    28d0:	b1 05       	cpc	r27, r1
    28d2:	09 f0       	breq	.+2      	; 0x28d6 <dir_next+0xc6>
    28d4:	89 c0       	rjmp	.+274    	; 0x29e8 <dir_next+0x1d8>
		dp->sect++;				/* Next sector */
    28d6:	4f 5f       	subi	r20, 0xFF	; 255
    28d8:	5f 4f       	sbci	r21, 0xFF	; 255
    28da:	6f 4f       	sbci	r22, 0xFF	; 255
    28dc:	7f 4f       	sbci	r23, 0xFF	; 255
    28de:	d4 01       	movw	r26, r8
    28e0:	56 96       	adiw	r26, 0x16	; 22
    28e2:	4d 93       	st	X+, r20
    28e4:	5d 93       	st	X+, r21
    28e6:	6d 93       	st	X+, r22
    28e8:	7c 93       	st	X, r23
    28ea:	59 97       	sbiw	r26, 0x19	; 25

		if (!dp->clust) {		/* Static table */
    28ec:	52 96       	adiw	r26, 0x12	; 18
    28ee:	4d 90       	ld	r4, X+
    28f0:	5d 90       	ld	r5, X+
    28f2:	6d 90       	ld	r6, X+
    28f4:	7c 90       	ld	r7, X
    28f6:	55 97       	sbiw	r26, 0x15	; 21
    28f8:	41 14       	cp	r4, r1
    28fa:	51 04       	cpc	r5, r1
    28fc:	61 04       	cpc	r6, r1
    28fe:	71 04       	cpc	r7, r1
    2900:	09 f4       	brne	.+2      	; 0x2904 <dir_next+0xf4>
    2902:	85 c0       	rjmp	.+266    	; 0x2a0e <dir_next+0x1fe>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
				dp->sect = 0; return FR_NO_FILE;
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
    2904:	f5 01       	movw	r30, r10
    2906:	81 85       	ldd	r24, Z+9	; 0x09
    2908:	92 85       	ldd	r25, Z+10	; 0x0a
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	a0 e0       	ldi	r26, 0x00	; 0
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	b7 01       	movw	r22, r14
    2912:	a6 01       	movw	r20, r12
    2914:	29 e0       	ldi	r18, 0x09	; 9
    2916:	76 95       	lsr	r23
    2918:	67 95       	ror	r22
    291a:	57 95       	ror	r21
    291c:	47 95       	ror	r20
    291e:	2a 95       	dec	r18
    2920:	d1 f7       	brne	.-12     	; 0x2916 <dir_next+0x106>
    2922:	84 23       	and	r24, r20
    2924:	95 23       	and	r25, r21
    2926:	a6 23       	and	r26, r22
    2928:	b7 23       	and	r27, r23
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	a1 05       	cpc	r26, r1
    292e:	b1 05       	cpc	r27, r1
    2930:	09 f0       	breq	.+2      	; 0x2934 <dir_next+0x124>
    2932:	5a c0       	rjmp	.+180    	; 0x29e8 <dir_next+0x1d8>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
    2934:	c5 01       	movw	r24, r10
    2936:	b3 01       	movw	r22, r6
    2938:	a2 01       	movw	r20, r4
    293a:	0e 94 1f 11 	call	0x223e	; 0x223e <get_fat.isra.8>
    293e:	2b 01       	movw	r4, r22
    2940:	3c 01       	movw	r6, r24
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
    2942:	62 30       	cpi	r22, 0x02	; 2
    2944:	71 05       	cpc	r23, r1
    2946:	81 05       	cpc	r24, r1
    2948:	91 05       	cpc	r25, r1
    294a:	08 f4       	brcc	.+2      	; 0x294e <dir_next+0x13e>
    294c:	7d c0       	rjmp	.+250    	; 0x2a48 <dir_next+0x238>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
    294e:	6f 3f       	cpi	r22, 0xFF	; 255
    2950:	2f ef       	ldi	r18, 0xFF	; 255
    2952:	72 07       	cpc	r23, r18
    2954:	2f ef       	ldi	r18, 0xFF	; 255
    2956:	82 07       	cpc	r24, r18
    2958:	2f ef       	ldi	r18, 0xFF	; 255
    295a:	92 07       	cpc	r25, r18
    295c:	09 f4       	brne	.+2      	; 0x2960 <dir_next+0x150>
    295e:	8c c0       	rjmp	.+280    	; 0x2a78 <dir_next+0x268>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
    2960:	f5 01       	movw	r30, r10
    2962:	83 89       	ldd	r24, Z+19	; 0x13
    2964:	94 89       	ldd	r25, Z+20	; 0x14
    2966:	a5 89       	ldd	r26, Z+21	; 0x15
    2968:	b6 89       	ldd	r27, Z+22	; 0x16
    296a:	48 16       	cp	r4, r24
    296c:	59 06       	cpc	r5, r25
    296e:	6a 06       	cpc	r6, r26
    2970:	7b 06       	cpc	r7, r27
    2972:	08 f0       	brcs	.+2      	; 0x2976 <dir_next+0x166>
    2974:	6c c0       	rjmp	.+216    	; 0x2a4e <dir_next+0x23e>
    2976:	a3 01       	movw	r20, r6
    2978:	92 01       	movw	r18, r4
    297a:	22 50       	subi	r18, 0x02	; 2
    297c:	30 40       	sbci	r19, 0x00	; 0
    297e:	40 40       	sbci	r20, 0x00	; 0
    2980:	50 40       	sbci	r21, 0x00	; 0
    2982:	29 83       	std	Y+1, r18	; 0x01
    2984:	3a 83       	std	Y+2, r19	; 0x02
    2986:	4b 83       	std	Y+3, r20	; 0x03
    2988:	5c 83       	std	Y+4, r21	; 0x04
#else
					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
    298a:	f4 01       	movw	r30, r8
    298c:	42 8a       	std	Z+18, r4	; 0x12
    298e:	53 8a       	std	Z+19, r5	; 0x13
    2990:	64 8a       	std	Z+20, r6	; 0x14
    2992:	75 8a       	std	Z+21, r7	; 0x15
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2994:	02 97       	sbiw	r24, 0x02	; 2
    2996:	a1 09       	sbc	r26, r1
    2998:	b1 09       	sbc	r27, r1
    299a:	29 81       	ldd	r18, Y+1	; 0x01
    299c:	3a 81       	ldd	r19, Y+2	; 0x02
    299e:	4b 81       	ldd	r20, Y+3	; 0x03
    29a0:	5c 81       	ldd	r21, Y+4	; 0x04
    29a2:	28 17       	cp	r18, r24
    29a4:	39 07       	cpc	r19, r25
    29a6:	4a 07       	cpc	r20, r26
    29a8:	5b 07       	cpc	r21, r27
    29aa:	08 f0       	brcs	.+2      	; 0x29ae <dir_next+0x19e>
    29ac:	68 c0       	rjmp	.+208    	; 0x2a7e <dir_next+0x26e>
	return clst * fs->csize + fs->database;
    29ae:	d5 01       	movw	r26, r10
    29b0:	19 96       	adiw	r26, 0x09	; 9
    29b2:	2d 91       	ld	r18, X+
    29b4:	3c 91       	ld	r19, X
    29b6:	1a 97       	sbiw	r26, 0x0a	; 10
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	50 e0       	ldi	r21, 0x00	; 0
    29bc:	69 81       	ldd	r22, Y+1	; 0x01
    29be:	7a 81       	ldd	r23, Y+2	; 0x02
    29c0:	8b 81       	ldd	r24, Y+3	; 0x03
    29c2:	9c 81       	ldd	r25, Y+4	; 0x04
    29c4:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__mulsi3>
    29c8:	dc 01       	movw	r26, r24
    29ca:	cb 01       	movw	r24, r22
    29cc:	f5 01       	movw	r30, r10
    29ce:	47 a1       	lds	r20, 0x47
    29d0:	50 a5       	lds	r21, 0x60
    29d2:	61 a5       	lds	r22, 0x61
    29d4:	72 a5       	lds	r23, 0x62
    29d6:	84 0f       	add	r24, r20
    29d8:	95 1f       	adc	r25, r21
    29da:	a6 1f       	adc	r26, r22
    29dc:	b7 1f       	adc	r27, r23
					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
				dp->sect = clust2sect(fs, clst);
    29de:	f4 01       	movw	r30, r8
    29e0:	86 8b       	std	Z+22, r24	; 0x16
    29e2:	97 8b       	std	Z+23, r25	; 0x17
    29e4:	a0 8f       	std	Z+24, r26	; 0x18
    29e6:	b1 8f       	std	Z+25, r27	; 0x19
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
    29e8:	d4 01       	movw	r26, r8
    29ea:	1e 96       	adiw	r26, 0x0e	; 14
    29ec:	cd 92       	st	X+, r12
    29ee:	dd 92       	st	X+, r13
    29f0:	ed 92       	st	X+, r14
    29f2:	fc 92       	st	X, r15
    29f4:	51 97       	sbiw	r26, 0x11	; 17
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    29f6:	c6 01       	movw	r24, r12
    29f8:	91 70       	andi	r25, 0x01	; 1
    29fa:	8f 96       	adiw	r24, 0x2f	; 47
    29fc:	8a 0d       	add	r24, r10
    29fe:	9b 1d       	adc	r25, r11
    2a00:	5b 96       	adiw	r26, 0x1b	; 27
    2a02:	9c 93       	st	X, r25
    2a04:	8e 93       	st	-X, r24
    2a06:	5a 97       	sbiw	r26, 0x1a	; 26

	return FR_OK;
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	90 e0       	ldi	r25, 0x00	; 0
    2a0c:	31 cf       	rjmp	.-414    	; 0x2870 <dir_next+0x60>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
		dp->sect++;				/* Next sector */

		if (!dp->clust) {		/* Static table */
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    2a0e:	b7 01       	movw	r22, r14
    2a10:	a6 01       	movw	r20, r12
    2a12:	35 e0       	ldi	r19, 0x05	; 5
    2a14:	76 95       	lsr	r23
    2a16:	67 95       	ror	r22
    2a18:	57 95       	ror	r21
    2a1a:	47 95       	ror	r20
    2a1c:	3a 95       	dec	r19
    2a1e:	d1 f7       	brne	.-12     	; 0x2a14 <dir_next+0x204>
    2a20:	f5 01       	movw	r30, r10
    2a22:	87 81       	ldd	r24, Z+7	; 0x07
    2a24:	90 85       	ldd	r25, Z+8	; 0x08
    2a26:	a0 e0       	ldi	r26, 0x00	; 0
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	48 17       	cp	r20, r24
    2a2c:	59 07       	cpc	r21, r25
    2a2e:	6a 07       	cpc	r22, r26
    2a30:	7b 07       	cpc	r23, r27
    2a32:	d0 f2       	brcs	.-76     	; 0x29e8 <dir_next+0x1d8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
						dp->sect = 0; return FR_NO_FILE;
    2a34:	d4 01       	movw	r26, r8
    2a36:	56 96       	adiw	r26, 0x16	; 22
    2a38:	1d 92       	st	X+, r1
    2a3a:	1d 92       	st	X+, r1
    2a3c:	1d 92       	st	X+, r1
    2a3e:	1c 92       	st	X, r1
    2a40:	59 97       	sbiw	r26, 0x19	; 25
    2a42:	84 e0       	ldi	r24, 0x04	; 4
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	14 cf       	rjmp	.-472    	; 0x2870 <dir_next+0x60>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	11 cf       	rjmp	.-478    	; 0x2870 <dir_next+0x60>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
    2a4e:	01 15       	cp	r16, r1
    2a50:	11 05       	cpc	r17, r1
    2a52:	81 f3       	breq	.-32     	; 0x2a34 <dir_next+0x224>
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    2a54:	f4 01       	movw	r30, r8
    2a56:	42 89       	ldd	r20, Z+18	; 0x12
    2a58:	53 89       	ldd	r21, Z+19	; 0x13
    2a5a:	64 89       	ldd	r22, Z+20	; 0x14
    2a5c:	75 89       	ldd	r23, Z+21	; 0x15
    2a5e:	c4 01       	movw	r24, r8
    2a60:	0e 94 00 13 	call	0x2600	; 0x2600 <create_chain>
    2a64:	2b 01       	movw	r4, r22
    2a66:	3c 01       	movw	r6, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2a68:	61 15       	cp	r22, r1
    2a6a:	71 05       	cpc	r23, r1
    2a6c:	81 05       	cpc	r24, r1
    2a6e:	91 05       	cpc	r25, r1
    2a70:	51 f4       	brne	.+20     	; 0x2a86 <dir_next+0x276>
    2a72:	87 e0       	ldi	r24, 0x07	; 7
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	fc ce       	rjmp	.-520    	; 0x2870 <dir_next+0x60>
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	f9 ce       	rjmp	.-526    	; 0x2870 <dir_next+0x60>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	dc 01       	movw	r26, r24
    2a84:	ac cf       	rjmp	.-168    	; 0x29de <dir_next+0x1ce>
					if (!stretch) {								/* If no stretch, report EOT */
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    2a86:	61 30       	cpi	r22, 0x01	; 1
    2a88:	71 05       	cpc	r23, r1
    2a8a:	81 05       	cpc	r24, r1
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	e1 f2       	breq	.-72     	; 0x2a48 <dir_next+0x238>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2a90:	6f 3f       	cpi	r22, 0xFF	; 255
    2a92:	2f ef       	ldi	r18, 0xFF	; 255
    2a94:	72 07       	cpc	r23, r18
    2a96:	2f ef       	ldi	r18, 0xFF	; 255
    2a98:	82 07       	cpc	r24, r18
    2a9a:	2f ef       	ldi	r18, 0xFF	; 255
    2a9c:	92 07       	cpc	r25, r18
    2a9e:	61 f3       	breq	.-40     	; 0x2a78 <dir_next+0x268>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
    2aa0:	c5 01       	movw	r24, r10
    2aa2:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <sync_window>
    2aa6:	00 97       	sbiw	r24, 0x00	; 0
    2aa8:	39 f7       	brne	.-50     	; 0x2a78 <dir_next+0x268>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
    2aaa:	f5 01       	movw	r30, r10
    2aac:	bf 96       	adiw	r30, 0x2f	; 47
/*-----------------------------------------------------------------------*/
/* Directory handling - Move directory table index next                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
    2aae:	c5 01       	movw	r24, r10
    2ab0:	81 5d       	subi	r24, 0xD1	; 209
    2ab2:	9d 4f       	sbci	r25, 0xFD	; 253
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    2ab4:	11 92       	st	Z+, r1
    2ab6:	e8 17       	cp	r30, r24
    2ab8:	f9 07       	cpc	r31, r25
    2aba:	e1 f7       	brne	.-8      	; 0x2ab4 <dir_next+0x2a4>
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2abc:	d3 01       	movw	r26, r6
    2abe:	c2 01       	movw	r24, r4
    2ac0:	02 97       	sbiw	r24, 0x02	; 2
    2ac2:	a1 09       	sbc	r26, r1
    2ac4:	b1 09       	sbc	r27, r1
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	9a 83       	std	Y+2, r25	; 0x02
    2aca:	ab 83       	std	Y+3, r26	; 0x03
    2acc:	bc 83       	std	Y+4, r27	; 0x04
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2ace:	f5 01       	movw	r30, r10
    2ad0:	83 89       	ldd	r24, Z+19	; 0x13
    2ad2:	94 89       	ldd	r25, Z+20	; 0x14
    2ad4:	a5 89       	ldd	r26, Z+21	; 0x15
    2ad6:	b6 89       	ldd	r27, Z+22	; 0x16
    2ad8:	02 97       	sbiw	r24, 0x02	; 2
    2ada:	a1 09       	sbc	r26, r1
    2adc:	b1 09       	sbc	r27, r1
    2ade:	29 81       	ldd	r18, Y+1	; 0x01
    2ae0:	3a 81       	ldd	r19, Y+2	; 0x02
    2ae2:	4b 81       	ldd	r20, Y+3	; 0x03
    2ae4:	5c 81       	ldd	r21, Y+4	; 0x04
    2ae6:	28 17       	cp	r18, r24
    2ae8:	39 07       	cpc	r19, r25
    2aea:	4a 07       	cpc	r20, r26
    2aec:	5b 07       	cpc	r21, r27
    2aee:	08 f0       	brcs	.+2      	; 0x2af2 <dir_next+0x2e2>
    2af0:	55 c0       	rjmp	.+170    	; 0x2b9c <dir_next+0x38c>
	return clst * fs->csize + fs->database;
    2af2:	01 85       	ldd	r16, Z+9	; 0x09
    2af4:	12 85       	ldd	r17, Z+10	; 0x0a
    2af6:	98 01       	movw	r18, r16
    2af8:	40 e0       	ldi	r20, 0x00	; 0
    2afa:	50 e0       	ldi	r21, 0x00	; 0
    2afc:	69 81       	ldd	r22, Y+1	; 0x01
    2afe:	7a 81       	ldd	r23, Y+2	; 0x02
    2b00:	8b 81       	ldd	r24, Y+3	; 0x03
    2b02:	9c 81       	ldd	r25, Y+4	; 0x04
    2b04:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__mulsi3>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	f5 01       	movw	r30, r10
    2b0e:	47 a1       	lds	r20, 0x47
    2b10:	50 a5       	lds	r21, 0x60
    2b12:	61 a5       	lds	r22, 0x61
    2b14:	72 a5       	lds	r23, 0x62
    2b16:	84 0f       	add	r24, r20
    2b18:	95 1f       	adc	r25, r21
    2b1a:	a6 1f       	adc	r26, r22
    2b1c:	b7 1f       	adc	r27, r23
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
    2b1e:	f5 01       	movw	r30, r10
    2b20:	83 a7       	lds	r24, 0x73
    2b22:	94 a7       	lds	r25, 0x74
    2b24:	a5 a7       	lds	r26, 0x75
    2b26:	b6 a7       	lds	r27, 0x76
    2b28:	40 e0       	ldi	r20, 0x00	; 0
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
						fs->wflag = 1;
    2b2c:	21 e0       	ldi	r18, 0x01	; 1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
    2b2e:	1f c0       	rjmp	.+62     	; 0x2b6e <dir_next+0x35e>
						fs->wflag = 1;
    2b30:	d5 01       	movw	r26, r10
    2b32:	13 96       	adiw	r26, 0x03	; 3
    2b34:	2c 93       	st	X, r18
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
    2b36:	c5 01       	movw	r24, r10
    2b38:	2f 83       	std	Y+7, r18	; 0x07
    2b3a:	4d 83       	std	Y+5, r20	; 0x05
    2b3c:	5e 83       	std	Y+6, r21	; 0x06
    2b3e:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <sync_window>
    2b42:	2f 81       	ldd	r18, Y+7	; 0x07
    2b44:	4d 81       	ldd	r20, Y+5	; 0x05
    2b46:	5e 81       	ldd	r21, Y+6	; 0x06
    2b48:	00 97       	sbiw	r24, 0x00	; 0
    2b4a:	09 f0       	breq	.+2      	; 0x2b4e <dir_next+0x33e>
    2b4c:	95 cf       	rjmp	.-214    	; 0x2a78 <dir_next+0x268>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
    2b4e:	4f 5f       	subi	r20, 0xFF	; 255
    2b50:	5f 4f       	sbci	r21, 0xFF	; 255
    2b52:	f5 01       	movw	r30, r10
    2b54:	83 a5       	lds	r24, 0x63
    2b56:	94 a5       	lds	r25, 0x64
    2b58:	a5 a5       	lds	r26, 0x65
    2b5a:	b6 a5       	lds	r27, 0x66
    2b5c:	01 96       	adiw	r24, 0x01	; 1
    2b5e:	a1 1d       	adc	r26, r1
    2b60:	b1 1d       	adc	r27, r1
    2b62:	83 a7       	lds	r24, 0x73
    2b64:	94 a7       	lds	r25, 0x74
    2b66:	a5 a7       	lds	r26, 0x75
    2b68:	b6 a7       	lds	r27, 0x76
    2b6a:	01 85       	ldd	r16, Z+9	; 0x09
    2b6c:	12 85       	ldd	r17, Z+10	; 0x0a
    2b6e:	40 17       	cp	r20, r16
    2b70:	51 07       	cpc	r21, r17
    2b72:	f0 f2       	brcs	.-68     	; 0x2b30 <dir_next+0x320>
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
					}
					fs->winsect -= n;							/* Restore window offset */
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	70 e0       	ldi	r23, 0x00	; 0
    2b78:	f5 01       	movw	r30, r10
    2b7a:	83 a5       	lds	r24, 0x63
    2b7c:	94 a5       	lds	r25, 0x64
    2b7e:	a5 a5       	lds	r26, 0x65
    2b80:	b6 a5       	lds	r27, 0x66
    2b82:	84 1b       	sub	r24, r20
    2b84:	95 0b       	sbc	r25, r21
    2b86:	a6 0b       	sbc	r26, r22
    2b88:	b7 0b       	sbc	r27, r23
    2b8a:	83 a7       	lds	r24, 0x73
    2b8c:	94 a7       	lds	r25, 0x74
    2b8e:	a5 a7       	lds	r26, 0x75
    2b90:	b6 a7       	lds	r27, 0x76
    2b92:	83 89       	ldd	r24, Z+19	; 0x13
    2b94:	94 89       	ldd	r25, Z+20	; 0x14
    2b96:	a5 89       	ldd	r26, Z+21	; 0x15
    2b98:	b6 89       	ldd	r27, Z+22	; 0x16
    2b9a:	f7 ce       	rjmp	.-530    	; 0x298a <dir_next+0x17a>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	f5 01       	movw	r30, r10
    2ba4:	01 85       	ldd	r16, Z+9	; 0x09
    2ba6:	12 85       	ldd	r17, Z+10	; 0x0a
    2ba8:	ba cf       	rjmp	.-140    	; 0x2b1e <dir_next+0x30e>

00002baa <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
    2baa:	6f 92       	push	r6
    2bac:	7f 92       	push	r7
    2bae:	8f 92       	push	r8
    2bb0:	9f 92       	push	r9
    2bb2:	af 92       	push	r10
    2bb4:	bf 92       	push	r11
    2bb6:	cf 92       	push	r12
    2bb8:	df 92       	push	r13
    2bba:	ef 92       	push	r14
    2bbc:	ff 92       	push	r15
    2bbe:	0f 93       	push	r16
    2bc0:	1f 93       	push	r17
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	3c 01       	movw	r6, r24
    2bc8:	6a 01       	movw	r12, r20
    2bca:	7b 01       	movw	r14, r22
	FRESULT res = FR_OK;
	DWORD nxt;
	FATFS *fs = obj->fs;
    2bcc:	fc 01       	movw	r30, r24
    2bce:	c0 81       	ld	r28, Z
    2bd0:	d1 81       	ldd	r29, Z+1	; 0x01
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    2bd2:	42 30       	cpi	r20, 0x02	; 2
    2bd4:	51 05       	cpc	r21, r1
    2bd6:	61 05       	cpc	r22, r1
    2bd8:	71 05       	cpc	r23, r1
    2bda:	48 f0       	brcs	.+18     	; 0x2bee <remove_chain+0x44>
    2bdc:	8b 89       	ldd	r24, Y+19	; 0x13
    2bde:	9c 89       	ldd	r25, Y+20	; 0x14
    2be0:	ad 89       	ldd	r26, Y+21	; 0x15
    2be2:	be 89       	ldd	r27, Y+22	; 0x16
    2be4:	48 17       	cp	r20, r24
    2be6:	59 07       	cpc	r21, r25
    2be8:	6a 07       	cpc	r22, r26
    2bea:	7b 07       	cpc	r23, r27
    2bec:	90 f0       	brcs	.+36     	; 0x2c12 <remove_chain+0x68>

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    2bee:	e2 e0       	ldi	r30, 0x02	; 2
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
			}
		}
	}
#endif
	return FR_OK;
}
    2bf2:	cf 01       	movw	r24, r30
    2bf4:	df 91       	pop	r29
    2bf6:	cf 91       	pop	r28
    2bf8:	1f 91       	pop	r17
    2bfa:	0f 91       	pop	r16
    2bfc:	ff 90       	pop	r15
    2bfe:	ef 90       	pop	r14
    2c00:	df 90       	pop	r13
    2c02:	cf 90       	pop	r12
    2c04:	bf 90       	pop	r11
    2c06:	af 90       	pop	r10
    2c08:	9f 90       	pop	r9
    2c0a:	8f 90       	pop	r8
    2c0c:	7f 90       	pop	r7
    2c0e:	6f 90       	pop	r6
    2c10:	08 95       	ret
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    2c12:	01 15       	cp	r16, r1
    2c14:	11 05       	cpc	r17, r1
    2c16:	21 05       	cpc	r18, r1
    2c18:	31 05       	cpc	r19, r1
    2c1a:	09 f0       	breq	.+2      	; 0x2c1e <remove_chain+0x74>
    2c1c:	50 c0       	rjmp	.+160    	; 0x2cbe <remove_chain+0x114>
    2c1e:	ce 01       	movw	r24, r28
		if (res != FR_OK) return res;
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
    2c20:	b7 01       	movw	r22, r14
    2c22:	a6 01       	movw	r20, r12
    2c24:	0e 94 1f 11 	call	0x223e	; 0x223e <get_fat.isra.8>
    2c28:	4b 01       	movw	r8, r22
    2c2a:	5c 01       	movw	r10, r24
		if (nxt == 0) break;				/* Empty cluster? */
    2c2c:	61 15       	cp	r22, r1
    2c2e:	71 05       	cpc	r23, r1
    2c30:	81 05       	cpc	r24, r1
    2c32:	91 05       	cpc	r25, r1
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <remove_chain+0x8e>
    2c36:	53 c0       	rjmp	.+166    	; 0x2cde <remove_chain+0x134>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    2c38:	61 30       	cpi	r22, 0x01	; 1
    2c3a:	71 05       	cpc	r23, r1
    2c3c:	81 05       	cpc	r24, r1
    2c3e:	91 05       	cpc	r25, r1
    2c40:	b1 f2       	breq	.-84     	; 0x2bee <remove_chain+0x44>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    2c42:	8f ef       	ldi	r24, 0xFF	; 255
    2c44:	88 16       	cp	r8, r24
    2c46:	8f ef       	ldi	r24, 0xFF	; 255
    2c48:	98 06       	cpc	r9, r24
    2c4a:	8f ef       	ldi	r24, 0xFF	; 255
    2c4c:	a8 06       	cpc	r10, r24
    2c4e:	8f ef       	ldi	r24, 0xFF	; 255
    2c50:	b8 06       	cpc	r11, r24
    2c52:	09 f4       	brne	.+2      	; 0x2c56 <remove_chain+0xac>
    2c54:	47 c0       	rjmp	.+142    	; 0x2ce4 <remove_chain+0x13a>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    2c56:	ce 01       	movw	r24, r28
    2c58:	b7 01       	movw	r22, r14
    2c5a:	a6 01       	movw	r20, r12
    2c5c:	00 e0       	ldi	r16, 0x00	; 0
    2c5e:	10 e0       	ldi	r17, 0x00	; 0
    2c60:	98 01       	movw	r18, r16
    2c62:	0e 94 11 12 	call	0x2422	; 0x2422 <put_fat>
    2c66:	fc 01       	movw	r30, r24
			if (res != FR_OK) return res;
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	19 f6       	brne	.-122    	; 0x2bf2 <remove_chain+0x48>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    2c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c6e:	98 89       	ldd	r25, Y+16	; 0x10
    2c70:	a9 89       	ldd	r26, Y+17	; 0x11
    2c72:	ba 89       	ldd	r27, Y+18	; 0x12
    2c74:	0b 89       	ldd	r16, Y+19	; 0x13
    2c76:	1c 89       	ldd	r17, Y+20	; 0x14
    2c78:	2d 89       	ldd	r18, Y+21	; 0x15
    2c7a:	3e 89       	ldd	r19, Y+22	; 0x16
    2c7c:	b9 01       	movw	r22, r18
    2c7e:	a8 01       	movw	r20, r16
    2c80:	42 50       	subi	r20, 0x02	; 2
    2c82:	50 40       	sbci	r21, 0x00	; 0
    2c84:	60 40       	sbci	r22, 0x00	; 0
    2c86:	70 40       	sbci	r23, 0x00	; 0
    2c88:	84 17       	cp	r24, r20
    2c8a:	95 07       	cpc	r25, r21
    2c8c:	a6 07       	cpc	r26, r22
    2c8e:	b7 07       	cpc	r27, r23
    2c90:	50 f4       	brcc	.+20     	; 0x2ca6 <remove_chain+0xfc>
			fs->free_clst++;
    2c92:	01 96       	adiw	r24, 0x01	; 1
    2c94:	a1 1d       	adc	r26, r1
    2c96:	b1 1d       	adc	r27, r1
    2c98:	8f 87       	std	Y+15, r24	; 0x0f
    2c9a:	98 8b       	std	Y+16, r25	; 0x10
    2c9c:	a9 8b       	std	Y+17, r26	; 0x11
    2c9e:	ba 8b       	std	Y+18, r27	; 0x12
			fs->fsi_flag |= 1;
    2ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ca2:	81 60       	ori	r24, 0x01	; 1
    2ca4:	8c 83       	std	Y+4, r24	; 0x04
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    2ca6:	80 16       	cp	r8, r16
    2ca8:	91 06       	cpc	r9, r17
    2caa:	a2 06       	cpc	r10, r18
    2cac:	b3 06       	cpc	r11, r19
    2cae:	08 f0       	brcs	.+2      	; 0x2cb2 <remove_chain+0x108>
    2cb0:	a0 cf       	rjmp	.-192    	; 0x2bf2 <remove_chain+0x48>
    2cb2:	f3 01       	movw	r30, r6
    2cb4:	80 81       	ld	r24, Z
    2cb6:	91 81       	ldd	r25, Z+1	; 0x01
    2cb8:	75 01       	movw	r14, r10
    2cba:	64 01       	movw	r12, r8
    2cbc:	b1 cf       	rjmp	.-158    	; 0x2c20 <remove_chain+0x76>

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
		res = put_fat(fs, pclst, 0xFFFFFFFF);
    2cbe:	ce 01       	movw	r24, r28
    2cc0:	b9 01       	movw	r22, r18
    2cc2:	a8 01       	movw	r20, r16
    2cc4:	0f ef       	ldi	r16, 0xFF	; 255
    2cc6:	1f ef       	ldi	r17, 0xFF	; 255
    2cc8:	98 01       	movw	r18, r16
    2cca:	0e 94 11 12 	call	0x2422	; 0x2422 <put_fat>
    2cce:	fc 01       	movw	r30, r24
		if (res != FR_OK) return res;
    2cd0:	00 97       	sbiw	r24, 0x00	; 0
    2cd2:	09 f0       	breq	.+2      	; 0x2cd6 <remove_chain+0x12c>
    2cd4:	8e cf       	rjmp	.-228    	; 0x2bf2 <remove_chain+0x48>
    2cd6:	f3 01       	movw	r30, r6
    2cd8:	80 81       	ld	r24, Z
    2cda:	91 81       	ldd	r25, Z+1	; 0x01
    2cdc:	a1 cf       	rjmp	.-190    	; 0x2c20 <remove_chain+0x76>
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
    2cde:	e0 e0       	ldi	r30, 0x00	; 0
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	87 cf       	rjmp	.-242    	; 0x2bf2 <remove_chain+0x48>
	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    2ce4:	e1 e0       	ldi	r30, 0x01	; 1
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	84 cf       	rjmp	.-248    	; 0x2bf2 <remove_chain+0x48>

00002cea <dir_read.constprop.10>:
/*-----------------------------------------------------------------------*/
/* Read an object from the directory                                     */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_read (
    2cea:	0f 93       	push	r16
    2cec:	1f 93       	push	r17
    2cee:	cf 93       	push	r28
    2cf0:	df 93       	push	r29
    2cf2:	ec 01       	movw	r28, r24
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
	FATFS *fs = dp->obj.fs;
    2cf4:	08 81       	ld	r16, Y
    2cf6:	19 81       	ldd	r17, Y+1	; 0x01
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
    2cf8:	84 e0       	ldi	r24, 0x04	; 4
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	1d c0       	rjmp	.+58     	; 0x2d38 <dir_read.constprop.10+0x4e>
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
		res = move_window(fs, dp->sect);
    2cfe:	c8 01       	movw	r24, r16
    2d00:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
		if (res != FR_OK) break;
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	51 f5       	brne	.+84     	; 0x2d5c <dir_read.constprop.10+0x72>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
    2d08:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2d0a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2d0c:	30 81       	ld	r19, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
    2d0e:	33 23       	and	r19, r19
    2d10:	19 f1       	breq	.+70     	; 0x2d58 <dir_read.constprop.10+0x6e>
				}
			}
		} else
#endif
		{	/* At the FAT12/16/32 */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    2d12:	23 85       	ldd	r18, Z+11	; 0x0b
    2d14:	2f 73       	andi	r18, 0x3F	; 63
    2d16:	2c 83       	std	Y+4, r18	; 0x04
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
    2d18:	35 3e       	cpi	r19, 0xE5	; 229
    2d1a:	39 f0       	breq	.+14     	; 0x2d2a <dir_read.constprop.10+0x40>
    2d1c:	3e 32       	cpi	r19, 0x2E	; 46
    2d1e:	29 f0       	breq	.+10     	; 0x2d2a <dir_read.constprop.10+0x40>
    2d20:	2f 30       	cpi	r18, 0x0F	; 15
    2d22:	19 f0       	breq	.+6      	; 0x2d2a <dir_read.constprop.10+0x40>
    2d24:	2f 71       	andi	r18, 0x1F	; 31
    2d26:	28 30       	cpi	r18, 0x08	; 8
    2d28:	91 f4       	brne	.+36     	; 0x2d4e <dir_read.constprop.10+0x64>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	70 e0       	ldi	r23, 0x00	; 0
    2d30:	0e 94 08 14 	call	0x2810	; 0x2810 <dir_next>
		if (res != FR_OK) break;
    2d34:	00 97       	sbiw	r24, 0x00	; 0
    2d36:	91 f4       	brne	.+36     	; 0x2d5c <dir_read.constprop.10+0x72>
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
    2d38:	4e 89       	ldd	r20, Y+22	; 0x16
    2d3a:	5f 89       	ldd	r21, Y+23	; 0x17
    2d3c:	68 8d       	ldd	r22, Y+24	; 0x18
    2d3e:	79 8d       	ldd	r23, Y+25	; 0x19
    2d40:	41 15       	cp	r20, r1
    2d42:	51 05       	cpc	r21, r1
    2d44:	61 05       	cpc	r22, r1
    2d46:	71 05       	cpc	r23, r1
    2d48:	d1 f6       	brne	.-76     	; 0x2cfe <dir_read.constprop.10+0x14>
		}
		res = dir_next(dp, 0);		/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	39 f4       	brne	.+14     	; 0x2d5c <dir_read.constprop.10+0x72>
	return res;
}
    2d4e:	df 91       	pop	r29
    2d50:	cf 91       	pop	r28
    2d52:	1f 91       	pop	r17
    2d54:	0f 91       	pop	r16
    2d56:	08 95       	ret

	while (dp->sect) {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		c = dp->dir[DIR_Name];	/* Test for the entry type */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
    2d58:	84 e0       	ldi	r24, 0x04	; 4
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
		}
		res = dir_next(dp, 0);		/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    2d5c:	1e 8a       	std	Y+22, r1	; 0x16
    2d5e:	1f 8a       	std	Y+23, r1	; 0x17
    2d60:	18 8e       	std	Y+24, r1	; 0x18
    2d62:	19 8e       	std	Y+25, r1	; 0x19
	return res;
}
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	08 95       	ret

00002d6e <dir_sdi.constprop.11>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
    2d6e:	af 92       	push	r10
    2d70:	bf 92       	push	r11
    2d72:	cf 92       	push	r12
    2d74:	df 92       	push	r13
    2d76:	ef 92       	push	r14
    2d78:	ff 92       	push	r15
    2d7a:	0f 93       	push	r16
    2d7c:	1f 93       	push	r17
    2d7e:	cf 93       	push	r28
    2d80:	df 93       	push	r29
    2d82:	ec 01       	movw	r28, r24
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
    2d84:	a8 80       	ld	r10, Y
    2d86:	b9 80       	ldd	r11, Y+1	; 0x01


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
    2d88:	1e 86       	std	Y+14, r1	; 0x0e
    2d8a:	1f 86       	std	Y+15, r1	; 0x0f
    2d8c:	18 8a       	std	Y+16, r1	; 0x10
    2d8e:	19 8a       	std	Y+17, r1	; 0x11
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
    2d90:	ce 80       	ldd	r12, Y+6	; 0x06
    2d92:	df 80       	ldd	r13, Y+7	; 0x07
    2d94:	e8 84       	ldd	r14, Y+8	; 0x08
    2d96:	f9 84       	ldd	r15, Y+9	; 0x09
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
    2d98:	c1 14       	cp	r12, r1
    2d9a:	d1 04       	cpc	r13, r1
    2d9c:	e1 04       	cpc	r14, r1
    2d9e:	f1 04       	cpc	r15, r1
    2da0:	71 f4       	brne	.+28     	; 0x2dbe <dir_sdi.constprop.11+0x50>
    2da2:	f5 01       	movw	r30, r10
    2da4:	80 81       	ld	r24, Z
    2da6:	83 30       	cpi	r24, 0x03	; 3
    2da8:	b8 f0       	brcs	.+46     	; 0x2dd8 <dir_sdi.constprop.11+0x6a>
		clst = fs->dirbase;
    2daa:	83 a1       	lds	r24, 0x43
    2dac:	94 a1       	lds	r25, 0x44
    2dae:	a5 a1       	lds	r26, 0x45
    2db0:	b6 a1       	lds	r27, 0x46
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    2db2:	00 97       	sbiw	r24, 0x00	; 0
    2db4:	a1 05       	cpc	r26, r1
    2db6:	b1 05       	cpc	r27, r1
    2db8:	79 f0       	breq	.+30     	; 0x2dd8 <dir_sdi.constprop.11+0x6a>
    2dba:	6c 01       	movw	r12, r24
    2dbc:	7d 01       	movw	r14, r26
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
    2dbe:	f5 01       	movw	r30, r10
    2dc0:	01 85       	ldd	r16, Z+9	; 0x09
    2dc2:	12 85       	ldd	r17, Z+10	; 0x0a
    2dc4:	20 e0       	ldi	r18, 0x00	; 0
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
		while (ofs >= csz) {				/* Follow cluster chain */
    2dc8:	01 15       	cp	r16, r1
    2dca:	11 05       	cpc	r17, r1
    2dcc:	21 05       	cpc	r18, r1
    2dce:	31 05       	cpc	r19, r1
    2dd0:	09 f0       	breq	.+2      	; 0x2dd4 <dir_sdi.constprop.11+0x66>
    2dd2:	4f c0       	rjmp	.+158    	; 0x2e72 <dir_sdi.constprop.11+0x104>
    2dd4:	c5 01       	movw	r24, r10
    2dd6:	24 c0       	rjmp	.+72     	; 0x2e20 <dir_sdi.constprop.11+0xb2>
		clst = fs->dirbase;
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
    2dd8:	f5 01       	movw	r30, r10
    2dda:	87 81       	ldd	r24, Z+7	; 0x07
    2ddc:	90 85       	ldd	r25, Z+8	; 0x08
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	81 f5       	brne	.+96     	; 0x2e42 <dir_sdi.constprop.11+0xd4>
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
	}
	dp->clust = clst;					/* Current cluster# */
	if (!dp->sect) return FR_INT_ERR;
    2de2:	82 e0       	ldi	r24, 0x02	; 2
    2de4:	90 e0       	ldi	r25, 0x00	; 0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */

	return FR_OK;
}
    2de6:	df 91       	pop	r29
    2de8:	cf 91       	pop	r28
    2dea:	1f 91       	pop	r17
    2dec:	0f 91       	pop	r16
    2dee:	ff 90       	pop	r15
    2df0:	ef 90       	pop	r14
    2df2:	df 90       	pop	r13
    2df4:	cf 90       	pop	r12
    2df6:	bf 90       	pop	r11
    2df8:	af 90       	pop	r10
    2dfa:	08 95       	ret
	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	c8 16       	cp	r12, r24
    2e00:	d1 04       	cpc	r13, r1
    2e02:	e1 04       	cpc	r14, r1
    2e04:	f1 04       	cpc	r15, r1
    2e06:	68 f3       	brcs	.-38     	; 0x2de2 <dir_sdi.constprop.11+0x74>
    2e08:	f5 01       	movw	r30, r10
    2e0a:	83 89       	ldd	r24, Z+19	; 0x13
    2e0c:	94 89       	ldd	r25, Z+20	; 0x14
    2e0e:	a5 89       	ldd	r26, Z+21	; 0x15
    2e10:	b6 89       	ldd	r27, Z+22	; 0x16
    2e12:	c8 16       	cp	r12, r24
    2e14:	d9 06       	cpc	r13, r25
    2e16:	ea 06       	cpc	r14, r26
    2e18:	fb 06       	cpc	r15, r27
    2e1a:	18 f7       	brcc	.-58     	; 0x2de2 <dir_sdi.constprop.11+0x74>
    2e1c:	88 81       	ld	r24, Y
    2e1e:	99 81       	ldd	r25, Y+1	; 0x01
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
    2e20:	b7 01       	movw	r22, r14
    2e22:	a6 01       	movw	r20, r12
    2e24:	0e 94 1f 11 	call	0x223e	; 0x223e <get_fat.isra.8>
    2e28:	6b 01       	movw	r12, r22
    2e2a:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2e2c:	6f 3f       	cpi	r22, 0xFF	; 255
    2e2e:	ff ef       	ldi	r31, 0xFF	; 255
    2e30:	7f 07       	cpc	r23, r31
    2e32:	ff ef       	ldi	r31, 0xFF	; 255
    2e34:	8f 07       	cpc	r24, r31
    2e36:	ff ef       	ldi	r31, 0xFF	; 255
    2e38:	9f 07       	cpc	r25, r31
    2e3a:	01 f7       	brne	.-64     	; 0x2dfc <dir_sdi.constprop.11+0x8e>
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	d2 cf       	rjmp	.-92     	; 0x2de6 <dir_sdi.constprop.11+0x78>
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;
    2e42:	83 a1       	lds	r24, 0x43
    2e44:	94 a1       	lds	r25, 0x44
    2e46:	a5 a1       	lds	r26, 0x45
    2e48:	b6 a1       	lds	r27, 0x46
    2e4a:	8e 8b       	std	Y+22, r24	; 0x16
    2e4c:	9f 8b       	std	Y+23, r25	; 0x17
    2e4e:	a8 8f       	std	Y+24, r26	; 0x18
    2e50:	b9 8f       	std	Y+25, r27	; 0x19
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
	}
	dp->clust = clst;					/* Current cluster# */
    2e52:	ca 8a       	std	Y+18, r12	; 0x12
    2e54:	db 8a       	std	Y+19, r13	; 0x13
    2e56:	ec 8a       	std	Y+20, r14	; 0x14
    2e58:	fd 8a       	std	Y+21, r15	; 0x15
	if (!dp->sect) return FR_INT_ERR;
    2e5a:	00 97       	sbiw	r24, 0x00	; 0
    2e5c:	a1 05       	cpc	r26, r1
    2e5e:	b1 05       	cpc	r27, r1
    2e60:	09 f4       	brne	.+2      	; 0x2e64 <dir_sdi.constprop.11+0xf6>
    2e62:	bf cf       	rjmp	.-130    	; 0x2de2 <dir_sdi.constprop.11+0x74>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
    2e64:	c5 01       	movw	r24, r10
    2e66:	8f 96       	adiw	r24, 0x2f	; 47
    2e68:	9b 8f       	std	Y+27, r25	; 0x1b
    2e6a:	8a 8f       	std	Y+26, r24	; 0x1a

	return FR_OK;
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	ba cf       	rjmp	.-140    	; 0x2de6 <dir_sdi.constprop.11+0x78>
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2e72:	b7 01       	movw	r22, r14
    2e74:	a6 01       	movw	r20, r12
    2e76:	42 50       	subi	r20, 0x02	; 2
    2e78:	50 40       	sbci	r21, 0x00	; 0
    2e7a:	60 40       	sbci	r22, 0x00	; 0
    2e7c:	70 40       	sbci	r23, 0x00	; 0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2e7e:	f5 01       	movw	r30, r10
    2e80:	83 89       	ldd	r24, Z+19	; 0x13
    2e82:	94 89       	ldd	r25, Z+20	; 0x14
    2e84:	a5 89       	ldd	r26, Z+21	; 0x15
    2e86:	b6 89       	ldd	r27, Z+22	; 0x16
    2e88:	02 97       	sbiw	r24, 0x02	; 2
    2e8a:	a1 09       	sbc	r26, r1
    2e8c:	b1 09       	sbc	r27, r1
    2e8e:	48 17       	cp	r20, r24
    2e90:	59 07       	cpc	r21, r25
    2e92:	6a 07       	cpc	r22, r26
    2e94:	7b 07       	cpc	r23, r27
    2e96:	b0 f4       	brcc	.+44     	; 0x2ec4 <dir_sdi.constprop.11+0x156>
	return clst * fs->csize + fs->database;
    2e98:	cb 01       	movw	r24, r22
    2e9a:	ba 01       	movw	r22, r20
    2e9c:	a9 01       	movw	r20, r18
    2e9e:	98 01       	movw	r18, r16
    2ea0:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__mulsi3>
    2ea4:	dc 01       	movw	r26, r24
    2ea6:	cb 01       	movw	r24, r22
    2ea8:	f5 01       	movw	r30, r10
    2eaa:	47 a1       	lds	r20, 0x47
    2eac:	50 a5       	lds	r21, 0x60
    2eae:	61 a5       	lds	r22, 0x61
    2eb0:	72 a5       	lds	r23, 0x62
    2eb2:	84 0f       	add	r24, r20
    2eb4:	95 1f       	adc	r25, r21
    2eb6:	a6 1f       	adc	r26, r22
    2eb8:	b7 1f       	adc	r27, r23
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
    2eba:	8e 8b       	std	Y+22, r24	; 0x16
    2ebc:	9f 8b       	std	Y+23, r25	; 0x17
    2ebe:	a8 8f       	std	Y+24, r26	; 0x18
    2ec0:	b9 8f       	std	Y+25, r27	; 0x19
    2ec2:	c7 cf       	rjmp	.-114    	; 0x2e52 <dir_sdi.constprop.11+0xe4>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	dc 01       	movw	r26, r24
    2eca:	f7 cf       	rjmp	.-18     	; 0x2eba <dir_sdi.constprop.11+0x14c>

00002ecc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
    2ecc:	ef 92       	push	r14
    2ece:	ff 92       	push	r15
    2ed0:	0f 93       	push	r16
    2ed2:	1f 93       	push	r17
    2ed4:	cf 93       	push	r28
    2ed6:	df 93       	push	r29
    2ed8:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    2eda:	dc 01       	movw	r26, r24
    2edc:	ed 90       	ld	r14, X+
    2ede:	fc 90       	ld	r15, X
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;


	res = dir_sdi(dp, 0);
    2ee0:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <dir_sdi.constprop.11>
    2ee4:	ec 01       	movw	r28, r24
	if (res == FR_OK) {
    2ee6:	00 97       	sbiw	r24, 0x00	; 0
    2ee8:	b1 f0       	breq	.+44     	; 0x2f16 <dir_register+0x4a>
			}
			res = dir_next(dp, 1);
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    2eea:	c4 30       	cpi	r28, 0x04	; 4
    2eec:	d1 05       	cpc	r29, r1
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <dir_register+0x26>
    2ef0:	52 c0       	rjmp	.+164    	; 0x2f96 <dir_register+0xca>
			fs->wflag = 1;
		}
	}

	return res;
}
    2ef2:	ce 01       	movw	r24, r28
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	1f 91       	pop	r17
    2efa:	0f 91       	pop	r16
    2efc:	ff 90       	pop	r15
    2efe:	ef 90       	pop	r14
    2f00:	08 95       	ret
			res = move_window(fs, dp->sect);
			if (res != FR_OK) break;
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
    2f02:	88 23       	and	r24, r24
    2f04:	d9 f0       	breq	.+54     	; 0x2f3c <dir_register+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);
    2f06:	c8 01       	movw	r24, r16
    2f08:	61 e0       	ldi	r22, 0x01	; 1
    2f0a:	70 e0       	ldi	r23, 0x00	; 0
    2f0c:	0e 94 08 14 	call	0x2810	; 0x2810 <dir_next>
    2f10:	ec 01       	movw	r28, r24
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	51 f7       	brne	.-44     	; 0x2eea <dir_register+0x1e>

	res = dir_sdi(dp, 0);
	if (res == FR_OK) {
		n = 0;
		do {
			res = move_window(fs, dp->sect);
    2f16:	f8 01       	movw	r30, r16
    2f18:	46 89       	ldd	r20, Z+22	; 0x16
    2f1a:	57 89       	ldd	r21, Z+23	; 0x17
    2f1c:	60 8d       	ldd	r22, Z+24	; 0x18
    2f1e:	71 8d       	ldd	r23, Z+25	; 0x19
    2f20:	c7 01       	movw	r24, r14
    2f22:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
    2f26:	ec 01       	movw	r28, r24
			if (res != FR_OK) break;
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	f9 f6       	brne	.-66     	; 0x2eea <dir_register+0x1e>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
    2f2c:	d8 01       	movw	r26, r16
    2f2e:	5a 96       	adiw	r26, 0x1a	; 26
    2f30:	ed 91       	ld	r30, X+
    2f32:	fc 91       	ld	r31, X
    2f34:	5b 97       	sbiw	r26, 0x1b	; 27
    2f36:	80 81       	ld	r24, Z
    2f38:	85 3e       	cpi	r24, 0xE5	; 229
    2f3a:	19 f7       	brne	.-58     	; 0x2f02 <dir_register+0x36>

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
    2f3c:	f8 01       	movw	r30, r16
    2f3e:	46 89       	ldd	r20, Z+22	; 0x16
    2f40:	57 89       	ldd	r21, Z+23	; 0x17
    2f42:	60 8d       	ldd	r22, Z+24	; 0x18
    2f44:	71 8d       	ldd	r23, Z+25	; 0x19
    2f46:	c7 01       	movw	r24, r14
    2f48:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
    2f4c:	ec 01       	movw	r28, r24
		if (res == FR_OK) {
    2f4e:	00 97       	sbiw	r24, 0x00	; 0
    2f50:	81 f6       	brne	.-96     	; 0x2ef2 <dir_register+0x26>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
    2f52:	d8 01       	movw	r26, r16
    2f54:	5a 96       	adiw	r26, 0x1a	; 26
    2f56:	ed 91       	ld	r30, X+
    2f58:	fc 91       	ld	r31, X
    2f5a:	5b 97       	sbiw	r26, 0x1b	; 27
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
    2f5c:	cf 01       	movw	r24, r30
    2f5e:	80 96       	adiw	r24, 0x20	; 32
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    2f60:	11 92       	st	Z+, r1
    2f62:	e8 17       	cp	r30, r24
    2f64:	f9 07       	cpc	r31, r25
    2f66:	e1 f7       	brne	.-8      	; 0x2f60 <dir_register+0x94>
	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    2f68:	b8 01       	movw	r22, r16
    2f6a:	64 5e       	subi	r22, 0xE4	; 228
    2f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6e:	f8 01       	movw	r30, r16
    2f70:	82 8d       	ldd	r24, Z+26	; 0x1a
    2f72:	93 8d       	ldd	r25, Z+27	; 0x1b
    2f74:	4b e0       	ldi	r20, 0x0B	; 11
    2f76:	50 e0       	ldi	r21, 0x00	; 0
    2f78:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
    2f7c:	81 e0       	ldi	r24, 0x01	; 1
    2f7e:	d7 01       	movw	r26, r14
    2f80:	13 96       	adiw	r26, 0x03	; 3
    2f82:	8c 93       	st	X, r24
    2f84:	13 97       	sbiw	r26, 0x03	; 3
		}
	}

	return res;
}
    2f86:	ce 01       	movw	r24, r28
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
    2f90:	ff 90       	pop	r15
    2f92:	ef 90       	pop	r14
    2f94:	08 95       	ret
			}
			res = dir_next(dp, 1);
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    2f96:	c7 e0       	ldi	r28, 0x07	; 7
    2f98:	d0 e0       	ldi	r29, 0x00	; 0
			fs->wflag = 1;
		}
	}

	return res;
}
    2f9a:	ce 01       	movw	r24, r28
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	1f 91       	pop	r17
    2fa2:	0f 91       	pop	r16
    2fa4:	ff 90       	pop	r15
    2fa6:	ef 90       	pop	r14
    2fa8:	08 95       	ret

00002faa <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
    2faa:	2f 92       	push	r2
    2fac:	3f 92       	push	r3
    2fae:	4f 92       	push	r4
    2fb0:	5f 92       	push	r5
    2fb2:	6f 92       	push	r6
    2fb4:	7f 92       	push	r7
    2fb6:	8f 92       	push	r8
    2fb8:	9f 92       	push	r9
    2fba:	af 92       	push	r10
    2fbc:	bf 92       	push	r11
    2fbe:	cf 92       	push	r12
    2fc0:	df 92       	push	r13
    2fc2:	ef 92       	push	r14
    2fc4:	ff 92       	push	r15
    2fc6:	0f 93       	push	r16
    2fc8:	1f 93       	push	r17
    2fca:	cf 93       	push	r28
    2fcc:	df 93       	push	r29
    2fce:	00 d0       	rcall	.+0      	; 0x2fd0 <follow_path+0x26>
    2fd0:	00 d0       	rcall	.+0      	; 0x2fd2 <follow_path+0x28>
    2fd2:	cd b7       	in	r28, 0x3d	; 61
    2fd4:	de b7       	in	r29, 0x3e	; 62
    2fd6:	7c 01       	movw	r14, r24
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
	FATFS *fs = obj->fs;
    2fd8:	dc 01       	movw	r26, r24
    2fda:	4d 90       	ld	r4, X+
    2fdc:	5c 90       	ld	r5, X
    2fde:	11 97       	sbiw	r26, 0x01	; 1
    2fe0:	cb 01       	movw	r24, r22
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from the current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    2fe2:	fc 01       	movw	r30, r24
    2fe4:	20 81       	ld	r18, Z
    2fe6:	01 96       	adiw	r24, 0x01	; 1
    2fe8:	2f 32       	cpi	r18, 0x2F	; 47
    2fea:	d9 f3       	breq	.-10     	; 0x2fe2 <follow_path+0x38>
    2fec:	2c 35       	cpi	r18, 0x5C	; 92
    2fee:	c9 f3       	breq	.-14     	; 0x2fe2 <follow_path+0x38>
    2ff0:	6f 01       	movw	r12, r30
		obj->sclust = 0;					/* Start from the root directory */
    2ff2:	f7 01       	movw	r30, r14
    2ff4:	16 82       	std	Z+6, r1	; 0x06
    2ff6:	17 82       	std	Z+7, r1	; 0x07
    2ff8:	10 86       	std	Z+8, r1	; 0x08
    2ffa:	11 86       	std	Z+9, r1	; 0x09
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    2ffc:	d6 01       	movw	r26, r12
    2ffe:	8c 91       	ld	r24, X
    3000:	80 32       	cpi	r24, 0x20	; 32
    3002:	08 f4       	brcc	.+2      	; 0x3006 <follow_path+0x5c>
    3004:	16 c1       	rjmp	.+556    	; 0x3232 <follow_path+0x288>
    3006:	8c e1       	ldi	r24, 0x1C	; 28
    3008:	88 2e       	mov	r8, r24
    300a:	91 2c       	mov	r9, r1
    300c:	8e 0c       	add	r8, r14
    300e:	9f 1c       	adc	r9, r15
    3010:	c7 01       	movw	r24, r14
    3012:	87 96       	adiw	r24, 0x27	; 39
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    3014:	10 e2       	ldi	r17, 0x20	; 32
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    3016:	05 e0       	ldi	r16, 0x05	; 5
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    3018:	2d e1       	ldi	r18, 0x1D	; 29
    301a:	62 2e       	mov	r6, r18
    301c:	71 2c       	mov	r7, r1
    301e:	6e 0c       	add	r6, r14
    3020:	7f 1c       	adc	r7, r15
    3022:	56 01       	movw	r10, r12
    3024:	9c 83       	std	Y+4, r25	; 0x04
    3026:	8b 83       	std	Y+3, r24	; 0x03
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    3028:	f4 01       	movw	r30, r8
    302a:	8b 81       	ldd	r24, Y+3	; 0x03
    302c:	9c 81       	ldd	r25, Y+4	; 0x04

	do *d++ = (BYTE)val; while (--cnt);
    302e:	11 93       	st	Z+, r17
    3030:	e8 17       	cp	r30, r24
    3032:	f9 07       	cpc	r31, r25
    3034:	e1 f7       	brne	.-8      	; 0x302e <follow_path+0x84>
    3036:	9c 83       	std	Y+4, r25	; 0x04
    3038:	8b 83       	std	Y+3, r24	; 0x03
    303a:	60 e0       	ldi	r22, 0x00	; 0
    303c:	70 e0       	ldi	r23, 0x00	; 0
    303e:	40 e0       	ldi	r20, 0x00	; 0
    3040:	50 e0       	ldi	r21, 0x00	; 0
    3042:	a8 e0       	ldi	r26, 0x08	; 8
    3044:	b0 e0       	ldi	r27, 0x00	; 0
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    3046:	f5 01       	movw	r30, r10
    3048:	e4 0f       	add	r30, r20
    304a:	f5 1f       	adc	r31, r21
    304c:	20 81       	ld	r18, Z
    304e:	6a 01       	movw	r12, r20
    3050:	08 94       	sec
    3052:	c1 1c       	adc	r12, r1
    3054:	d1 1c       	adc	r13, r1
		if (c <= ' ') break; 			/* Break if end of the path name */
    3056:	21 32       	cpi	r18, 0x21	; 33
    3058:	08 f4       	brcc	.+2      	; 0x305c <follow_path+0xb2>
    305a:	e8 c0       	rjmp	.+464    	; 0x322c <follow_path+0x282>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
    305c:	2f 32       	cpi	r18, 0x2F	; 47
    305e:	09 f4       	brne	.+2      	; 0x3062 <follow_path+0xb8>
    3060:	6d c0       	rjmp	.+218    	; 0x313c <follow_path+0x192>
    3062:	2c 35       	cpi	r18, 0x5C	; 92
    3064:	09 f4       	brne	.+2      	; 0x3068 <follow_path+0xbe>
    3066:	6a c0       	rjmp	.+212    	; 0x313c <follow_path+0x192>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
    3068:	2e 32       	cpi	r18, 0x2E	; 46
    306a:	49 f1       	breq	.+82     	; 0x30be <follow_path+0x114>
    306c:	6a 17       	cp	r22, r26
    306e:	7b 07       	cpc	r23, r27
    3070:	30 f5       	brcc	.+76     	; 0x30be <follow_path+0x114>
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
    3072:	82 2f       	mov	r24, r18
    3074:	81 58       	subi	r24, 0x81	; 129
    3076:	8f 31       	cpi	r24, 0x1F	; 31
    3078:	08 f4       	brcc	.+2      	; 0x307c <follow_path+0xd2>
    307a:	40 c0       	rjmp	.+128    	; 0x30fc <follow_path+0x152>
    307c:	8f 55       	subi	r24, 0x5F	; 95
    307e:	8d 31       	cpi	r24, 0x1D	; 29
    3080:	e8 f1       	brcs	.+122    	; 0x30fc <follow_path+0x152>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    3082:	42 2f       	mov	r20, r18
    3084:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
    3086:	42 32       	cpi	r20, 0x22	; 34
    3088:	51 05       	cpc	r21, r1
    308a:	f1 f0       	breq	.+60     	; 0x30c8 <follow_path+0x11e>
    308c:	eb e1       	ldi	r30, 0x1B	; 27
    308e:	f1 e0       	ldi	r31, 0x01	; 1
    3090:	06 c0       	rjmp	.+12     	; 0x309e <follow_path+0xf4>
    3092:	99 27       	eor	r25, r25
    3094:	87 fd       	sbrc	r24, 7
    3096:	90 95       	com	r25
    3098:	48 17       	cp	r20, r24
    309a:	59 07       	cpc	r21, r25
    309c:	a9 f0       	breq	.+42     	; 0x30c8 <follow_path+0x11e>
    309e:	81 91       	ld	r24, Z+
    30a0:	88 23       	and	r24, r24
    30a2:	b9 f7       	brne	.-18     	; 0x3092 <follow_path+0xe8>
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
    30a4:	82 2f       	mov	r24, r18
    30a6:	81 56       	subi	r24, 0x61	; 97
    30a8:	8a 31       	cpi	r24, 0x1A	; 26
    30aa:	08 f4       	brcc	.+2      	; 0x30ae <follow_path+0x104>
    30ac:	20 52       	subi	r18, 0x20	; 32
			sfn[i++] = c;
    30ae:	f7 01       	movw	r30, r14
    30b0:	e6 0f       	add	r30, r22
    30b2:	f7 1f       	adc	r31, r23
    30b4:	24 8f       	std	Z+28, r18	; 0x1c
    30b6:	6f 5f       	subi	r22, 0xFF	; 255
    30b8:	7f 4f       	sbci	r23, 0xFF	; 255
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    30ba:	a6 01       	movw	r20, r12
    30bc:	c4 cf       	rjmp	.-120    	; 0x3046 <follow_path+0x9c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
    30be:	ab 30       	cpi	r26, 0x0B	; 11
    30c0:	b1 05       	cpc	r27, r1
    30c2:	11 f0       	breq	.+4      	; 0x30c8 <follow_path+0x11e>
    30c4:	2e 32       	cpi	r18, 0x2E	; 46
    30c6:	a1 f1       	breq	.+104    	; 0x3130 <follow_path+0x186>
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    30c8:	46 e0       	ldi	r20, 0x06	; 6
    30ca:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}

	return res;
}
    30cc:	ca 01       	movw	r24, r20
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	df 91       	pop	r29
    30d8:	cf 91       	pop	r28
    30da:	1f 91       	pop	r17
    30dc:	0f 91       	pop	r16
    30de:	ff 90       	pop	r15
    30e0:	ef 90       	pop	r14
    30e2:	df 90       	pop	r13
    30e4:	cf 90       	pop	r12
    30e6:	bf 90       	pop	r11
    30e8:	af 90       	pop	r10
    30ea:	9f 90       	pop	r9
    30ec:	8f 90       	pop	r8
    30ee:	7f 90       	pop	r7
    30f0:	6f 90       	pop	r6
    30f2:	5f 90       	pop	r5
    30f4:	4f 90       	pop	r4
    30f6:	3f 90       	pop	r3
    30f8:	2f 90       	pop	r2
    30fa:	08 95       	ret
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    30fc:	f5 01       	movw	r30, r10
    30fe:	ec 0d       	add	r30, r12
    3100:	fd 1d       	adc	r31, r13
    3102:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
    3104:	83 2f       	mov	r24, r19
    3106:	80 54       	subi	r24, 0x40	; 64
    3108:	8f 33       	cpi	r24, 0x3F	; 63
    310a:	18 f0       	brcs	.+6      	; 0x3112 <follow_path+0x168>
    310c:	80 54       	subi	r24, 0x40	; 64
    310e:	8d 37       	cpi	r24, 0x7D	; 125
    3110:	d8 f6       	brcc	.-74     	; 0x30c8 <follow_path+0x11e>
    3112:	cd 01       	movw	r24, r26
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	68 17       	cp	r22, r24
    3118:	79 07       	cpc	r23, r25
    311a:	b0 f6       	brcc	.-84     	; 0x30c8 <follow_path+0x11e>
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    311c:	4e 5f       	subi	r20, 0xFE	; 254
    311e:	5f 4f       	sbci	r21, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
    3120:	f7 01       	movw	r30, r14
    3122:	e6 0f       	add	r30, r22
    3124:	f7 1f       	adc	r31, r23
    3126:	24 8f       	std	Z+28, r18	; 0x1c
			sfn[i++] = d;
    3128:	35 8f       	std	Z+29, r19	; 0x1d
    312a:	6e 5f       	subi	r22, 0xFE	; 254
    312c:	7f 4f       	sbci	r23, 0xFF	; 255
    312e:	8b cf       	rjmp	.-234    	; 0x3046 <follow_path+0x9c>
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    3130:	a6 01       	movw	r20, r12
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
			i = 8; ni = 11;				/* Goto extension */
    3132:	68 e0       	ldi	r22, 0x08	; 8
    3134:	70 e0       	ldi	r23, 0x00	; 0
    3136:	ab e0       	ldi	r26, 0x0B	; 11
    3138:	b0 e0       	ldi	r27, 0x00	; 0
    313a:	85 cf       	rjmp	.-246    	; 0x3046 <follow_path+0x9c>
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    313c:	f5 01       	movw	r30, r10
    313e:	ec 0d       	add	r30, r12
    3140:	fd 1d       	adc	r31, r13
    3142:	4b 81       	ldd	r20, Y+3	; 0x03
    3144:	5c 81       	ldd	r21, Y+4	; 0x04
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    3146:	5f 01       	movw	r10, r30
    3148:	81 91       	ld	r24, Z+
    314a:	8f 32       	cpi	r24, 0x2F	; 47
    314c:	e1 f3       	breq	.-8      	; 0x3146 <follow_path+0x19c>
    314e:	8c 35       	cpi	r24, 0x5C	; 92
    3150:	d1 f3       	breq	.-12     	; 0x3146 <follow_path+0x19c>
    3152:	5c 83       	std	Y+4, r21	; 0x04
    3154:	4b 83       	std	Y+3, r20	; 0x03
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    3156:	61 15       	cp	r22, r1
    3158:	71 05       	cpc	r23, r1
    315a:	09 f4       	brne	.+2      	; 0x315e <follow_path+0x1b4>
    315c:	b5 cf       	rjmp	.-150    	; 0x30c8 <follow_path+0x11e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    315e:	d7 01       	movw	r26, r14
    3160:	5c 96       	adiw	r26, 0x1c	; 28
    3162:	8c 91       	ld	r24, X
    3164:	5c 97       	sbiw	r26, 0x1c	; 28
    3166:	85 3e       	cpi	r24, 0xE5	; 229
    3168:	09 f4       	brne	.+2      	; 0x316c <follow_path+0x1c2>
    316a:	bb c0       	rjmp	.+374    	; 0x32e2 <follow_path+0x338>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    316c:	21 32       	cpi	r18, 0x21	; 33
    316e:	08 f4       	brcc	.+2      	; 0x3172 <follow_path+0x1c8>
    3170:	68 c0       	rjmp	.+208    	; 0x3242 <follow_path+0x298>
    3172:	80 e0       	ldi	r24, 0x00	; 0
    3174:	f7 01       	movw	r30, r14
    3176:	87 a3       	lds	r24, 0x57
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    3178:	c0 80       	ld	r12, Z
    317a:	d1 80       	ldd	r13, Z+1	; 0x01
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    317c:	c7 01       	movw	r24, r14
    317e:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <dir_sdi.constprop.11>
    3182:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    3184:	00 97       	sbiw	r24, 0x00	; 0
    3186:	09 f0       	breq	.+2      	; 0x318a <follow_path+0x1e0>
    3188:	46 c0       	rjmp	.+140    	; 0x3216 <follow_path+0x26c>
    318a:	8b 81       	ldd	r24, Y+3	; 0x03
    318c:	9c 81       	ldd	r25, Y+4	; 0x04
    318e:	fc 82       	std	Y+4, r15	; 0x04
    3190:	eb 82       	std	Y+3, r14	; 0x03
    3192:	7c 01       	movw	r14, r24
	/* At the FAT12/16/32 */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
    3194:	ab 81       	ldd	r26, Y+3	; 0x03
    3196:	bc 81       	ldd	r27, Y+4	; 0x04
    3198:	56 96       	adiw	r26, 0x16	; 22
    319a:	4d 91       	ld	r20, X+
    319c:	5d 91       	ld	r21, X+
    319e:	6d 91       	ld	r22, X+
    31a0:	7c 91       	ld	r23, X
    31a2:	59 97       	sbiw	r26, 0x19	; 25
    31a4:	c6 01       	movw	r24, r12
    31a6:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
    31aa:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    31ac:	00 97       	sbiw	r24, 0x00	; 0
    31ae:	89 f5       	brne	.+98     	; 0x3212 <follow_path+0x268>
		c = dp->dir[DIR_Name];
    31b0:	ab 81       	ldd	r26, Y+3	; 0x03
    31b2:	bc 81       	ldd	r27, Y+4	; 0x04
    31b4:	5a 96       	adiw	r26, 0x1a	; 26
    31b6:	ed 91       	ld	r30, X+
    31b8:	fc 91       	ld	r31, X
    31ba:	5b 97       	sbiw	r26, 0x1b	; 27
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    31bc:	80 81       	ld	r24, Z
    31be:	88 23       	and	r24, r24
    31c0:	09 f4       	brne	.+2      	; 0x31c4 <follow_path+0x21a>
    31c2:	41 c0       	rjmp	.+130    	; 0x3246 <follow_path+0x29c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    31c4:	93 85       	ldd	r25, Z+11	; 0x0b
    31c6:	9f 73       	andi	r25, 0x3F	; 63
    31c8:	14 96       	adiw	r26, 0x04	; 4
    31ca:	9c 93       	st	X, r25
    31cc:	14 97       	sbiw	r26, 0x04	; 4
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    31ce:	83 85       	ldd	r24, Z+11	; 0x0b
    31d0:	83 fd       	sbrc	r24, 3
    31d2:	16 c0       	rjmp	.+44     	; 0x3200 <follow_path+0x256>
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    31d4:	df 01       	movw	r26, r30
    31d6:	2d 91       	ld	r18, X+
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	f4 01       	movw	r30, r8
    31dc:	80 81       	ld	r24, Z
    31de:	28 1b       	sub	r18, r24
    31e0:	31 09       	sbc	r19, r1
    31e2:	f3 01       	movw	r30, r6
	} while (--cnt && r == 0);
    31e4:	21 15       	cp	r18, r1
    31e6:	31 05       	cpc	r19, r1
    31e8:	59 f4       	brne	.+22     	; 0x3200 <follow_path+0x256>
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    31ea:	2d 91       	ld	r18, X+
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	81 91       	ld	r24, Z+
    31f0:	28 1b       	sub	r18, r24
    31f2:	31 09       	sbc	r19, r1
	} while (--cnt && r == 0);
    31f4:	ee 15       	cp	r30, r14
    31f6:	ff 05       	cpc	r31, r15
    31f8:	a9 f7       	brne	.-22     	; 0x31e4 <follow_path+0x23a>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    31fa:	21 15       	cp	r18, r1
    31fc:	31 05       	cpc	r19, r1
    31fe:	51 f1       	breq	.+84     	; 0x3254 <follow_path+0x2aa>
#endif
		res = dir_next(dp, 0);	/* Next entry */
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	9c 81       	ldd	r25, Y+4	; 0x04
    3204:	60 e0       	ldi	r22, 0x00	; 0
    3206:	70 e0       	ldi	r23, 0x00	; 0
    3208:	0e 94 08 14 	call	0x2810	; 0x2810 <dir_next>
    320c:	ac 01       	movw	r20, r24
	} while (res == FR_OK);
    320e:	00 97       	sbiw	r24, 0x00	; 0
    3210:	09 f2       	breq	.-126    	; 0x3194 <follow_path+0x1ea>
    3212:	eb 80       	ldd	r14, Y+3	; 0x03
    3214:	fc 80       	ldd	r15, Y+4	; 0x04
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    3216:	f7 01       	movw	r30, r14
    3218:	87 a1       	lds	r24, 0x47
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    321a:	44 30       	cpi	r20, 0x04	; 4
    321c:	51 05       	cpc	r21, r1
    321e:	09 f0       	breq	.+2      	; 0x3222 <follow_path+0x278>
    3220:	55 cf       	rjmp	.-342    	; 0x30cc <follow_path+0x122>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    3222:	82 fd       	sbrc	r24, 2
    3224:	62 c0       	rjmp	.+196    	; 0x32ea <follow_path+0x340>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    3226:	45 e0       	ldi	r20, 0x05	; 5
    3228:	50 e0       	ldi	r21, 0x00	; 0
    322a:	50 cf       	rjmp	.-352    	; 0x30cc <follow_path+0x122>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
    322c:	ac 0c       	add	r10, r12
    322e:	bd 1c       	adc	r11, r13
    3230:	92 cf       	rjmp	.-220    	; 0x3156 <follow_path+0x1ac>
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
		dp->fn[NSFLAG] = NS_NONAME;
    3232:	80 e8       	ldi	r24, 0x80	; 128
    3234:	f7 01       	movw	r30, r14
    3236:	87 a3       	lds	r24, 0x57
		res = dir_sdi(dp, 0);
    3238:	c7 01       	movw	r24, r14
    323a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <dir_sdi.constprop.11>
    323e:	ac 01       	movw	r20, r24
    3240:	45 cf       	rjmp	.-374    	; 0x30cc <follow_path+0x122>
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    3242:	84 e0       	ldi	r24, 0x04	; 4
    3244:	97 cf       	rjmp	.-210    	; 0x3174 <follow_path+0x1ca>
    3246:	eb 80       	ldd	r14, Y+3	; 0x03
    3248:	fc 80       	ldd	r15, Y+4	; 0x04
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    324a:	d7 01       	movw	r26, r14
    324c:	97 96       	adiw	r26, 0x27	; 39
    324e:	8c 91       	ld	r24, X
    3250:	97 97       	sbiw	r26, 0x27	; 39
    3252:	e7 cf       	rjmp	.-50     	; 0x3222 <follow_path+0x278>
    3254:	97 01       	movw	r18, r14
    3256:	eb 80       	ldd	r14, Y+3	; 0x03
    3258:	fc 80       	ldd	r15, Y+4	; 0x04
    325a:	3c 83       	std	Y+4, r19	; 0x04
    325c:	2b 83       	std	Y+3, r18	; 0x03
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    325e:	f7 01       	movw	r30, r14
    3260:	87 a1       	lds	r24, 0x47
    3262:	82 fd       	sbrc	r24, 2
    3264:	33 cf       	rjmp	.-410    	; 0x30cc <follow_path+0x122>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    3266:	94 ff       	sbrs	r25, 4
    3268:	de cf       	rjmp	.-68     	; 0x3226 <follow_path+0x27c>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    326a:	d7 01       	movw	r26, r14
    326c:	1e 96       	adiw	r26, 0x0e	; 14
    326e:	2d 91       	ld	r18, X+
    3270:	3c 91       	ld	r19, X
    3272:	1f 97       	sbiw	r26, 0x0f	; 15
    3274:	31 70       	andi	r19, 0x01	; 1
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3276:	24 0d       	add	r18, r4
    3278:	35 1d       	adc	r19, r5
    327a:	f9 01       	movw	r30, r18
    327c:	e6 5b       	subi	r30, 0xB6	; 182
    327e:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    3280:	30 80       	ld	r3, Z
    3282:	22 24       	eor	r2, r2
    3284:	f9 01       	movw	r30, r18
    3286:	e7 5b       	subi	r30, 0xB7	; 183
    3288:	ff 4f       	sbci	r31, 0xFF	; 255
    328a:	80 81       	ld	r24, Z
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	82 29       	or	r24, r2
    3290:	93 29       	or	r25, r3
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    3292:	ac 01       	movw	r20, r24
    3294:	60 e0       	ldi	r22, 0x00	; 0
    3296:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    3298:	f2 01       	movw	r30, r4
    329a:	80 81       	ld	r24, Z
    329c:	83 30       	cpi	r24, 0x03	; 3
    329e:	41 f0       	breq	.+16     	; 0x32b0 <follow_path+0x306>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    32a0:	d7 01       	movw	r26, r14
    32a2:	16 96       	adiw	r26, 0x06	; 6
    32a4:	4d 93       	st	X+, r20
    32a6:	5d 93       	st	X+, r21
    32a8:	6d 93       	st	X+, r22
    32aa:	7c 93       	st	X, r23
    32ac:	19 97       	sbiw	r26, 0x09	; 9
			}
		}
    32ae:	bc ce       	rjmp	.-648    	; 0x3028 <follow_path+0x7e>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    32b0:	f9 01       	movw	r30, r18
    32b2:	ec 5b       	subi	r30, 0xBC	; 188
    32b4:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    32b6:	80 81       	ld	r24, Z
    32b8:	8a 83       	std	Y+2, r24	; 0x02
    32ba:	19 82       	std	Y+1, r1	; 0x01
    32bc:	f9 01       	movw	r30, r18
    32be:	ed 5b       	subi	r30, 0xBD	; 189
    32c0:	ff 4f       	sbci	r31, 0xFF	; 255
    32c2:	80 81       	ld	r24, Z
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	29 81       	ldd	r18, Y+1	; 0x01
    32c8:	3a 81       	ldd	r19, Y+2	; 0x02
    32ca:	82 2b       	or	r24, r18
    32cc:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    32ce:	a0 e0       	ldi	r26, 0x00	; 0
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	dc 01       	movw	r26, r24
    32d4:	99 27       	eor	r25, r25
    32d6:	88 27       	eor	r24, r24
    32d8:	48 2b       	or	r20, r24
    32da:	59 2b       	or	r21, r25
    32dc:	6a 2b       	or	r22, r26
    32de:	7b 2b       	or	r23, r27
    32e0:	df cf       	rjmp	.-66     	; 0x32a0 <follow_path+0x2f6>
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    32e2:	5c 96       	adiw	r26, 0x1c	; 28
    32e4:	0c 93       	st	X, r16
    32e6:	5c 97       	sbiw	r26, 0x1c	; 28
    32e8:	41 cf       	rjmp	.-382    	; 0x316c <follow_path+0x1c2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    32ea:	44 e0       	ldi	r20, 0x04	; 4
    32ec:	50 e0       	ldi	r21, 0x00	; 0
    32ee:	ee ce       	rjmp	.-548    	; 0x30cc <follow_path+0x122>

000032f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    32f0:	cf 93       	push	r28
    32f2:	df 93       	push	r29
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	27 97       	sbiw	r28, 0x07	; 7
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	9c 83       	std	Y+4, r25	; 0x04
    3306:	8b 83       	std	Y+3, r24	; 0x03
    3308:	7e 83       	std	Y+6, r23	; 0x06
    330a:	6d 83       	std	Y+5, r22	; 0x05
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    330c:	7a 83       	std	Y+2, r23	; 0x02
    330e:	69 83       	std	Y+1, r22	; 0x01


	vol = get_ldnumber(&rp);
    3310:	ce 01       	movw	r24, r28
    3312:	01 96       	adiw	r24, 0x01	; 1
    3314:	4f 83       	std	Y+7, r20	; 0x07
    3316:	0e 94 6f 09 	call	0x12de	; 0x12de <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    331a:	4f 81       	ldd	r20, Y+7	; 0x07
    331c:	97 fd       	sbrc	r25, 7
    331e:	23 c0       	rjmp	.+70     	; 0x3366 <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
    3320:	88 0f       	add	r24, r24
    3322:	99 1f       	adc	r25, r25
    3324:	fc 01       	movw	r30, r24
    3326:	e7 5c       	subi	r30, 0xC7	; 199
    3328:	fe 4f       	sbci	r31, 0xFE	; 254
    332a:	01 90       	ld	r0, Z+
    332c:	f0 81       	ld	r31, Z
    332e:	e0 2d       	mov	r30, r0

	//if(!cfs){ // cfs is 0
		
	//}
	if (cfs) {
    3330:	30 97       	sbiw	r30, 0x00	; 0
    3332:	09 f0       	breq	.+2      	; 0x3336 <f_mount+0x46>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    3334:	10 82       	st	Z, r1
	}

	if (fs) {
    3336:	eb 81       	ldd	r30, Y+3	; 0x03
    3338:	fc 81       	ldd	r31, Y+4	; 0x04
    333a:	30 97       	sbiw	r30, 0x00	; 0
    333c:	b9 f0       	breq	.+46     	; 0x336c <f_mount+0x7c>
		fs->fs_type = 0;				/* Clear new fs object */
    333e:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    3340:	87 5c       	subi	r24, 0xC7	; 199
    3342:	9e 4f       	sbci	r25, 0xFE	; 254
    3344:	dc 01       	movw	r26, r24
    3346:	11 96       	adiw	r26, 0x01	; 1
    3348:	fc 93       	st	X, r31
    334a:	ee 93       	st	-X, r30

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    334c:	41 30       	cpi	r20, 0x01	; 1
    334e:	b1 f0       	breq	.+44     	; 0x337c <f_mount+0x8c>
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
	// this function is okay - fs exists
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    3354:	27 96       	adiw	r28, 0x07	; 7
    3356:	0f b6       	in	r0, 0x3f	; 63
    3358:	f8 94       	cli
    335a:	de bf       	out	0x3e, r29	; 62
    335c:	0f be       	out	0x3f, r0	; 63
    335e:	cd bf       	out	0x3d, r28	; 61
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	08 95       	ret
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    3366:	8b e0       	ldi	r24, 0x0B	; 11
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	f4 cf       	rjmp	.-24     	; 0x3354 <f_mount+0x64>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    336c:	87 5c       	subi	r24, 0xC7	; 199
    336e:	9e 4f       	sbci	r25, 0xFE	; 254
    3370:	fc 01       	movw	r30, r24
    3372:	11 82       	std	Z+1, r1	; 0x01
    3374:	10 82       	st	Z, r1

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    3376:	80 e0       	ldi	r24, 0x00	; 0
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	ec cf       	rjmp	.-40     	; 0x3354 <f_mount+0x64>
	// this function is okay - fs exists
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
    337c:	ce 01       	movw	r24, r28
    337e:	05 96       	adiw	r24, 0x05	; 5
    3380:	be 01       	movw	r22, r28
    3382:	6d 5f       	subi	r22, 0xFD	; 253
    3384:	7f 4f       	sbci	r23, 0xFF	; 255
    3386:	40 e0       	ldi	r20, 0x00	; 0
    3388:	0e 94 65 0c 	call	0x18ca	; 0x18ca <find_volume>
	LEAVE_FF(fs, res);
    338c:	e3 cf       	rjmp	.-58     	; 0x3354 <f_mount+0x64>

0000338e <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    338e:	2f 92       	push	r2
    3390:	3f 92       	push	r3
    3392:	4f 92       	push	r4
    3394:	5f 92       	push	r5
    3396:	6f 92       	push	r6
    3398:	7f 92       	push	r7
    339a:	8f 92       	push	r8
    339c:	9f 92       	push	r9
    339e:	af 92       	push	r10
    33a0:	bf 92       	push	r11
    33a2:	cf 92       	push	r12
    33a4:	df 92       	push	r13
    33a6:	ef 92       	push	r14
    33a8:	ff 92       	push	r15
    33aa:	0f 93       	push	r16
    33ac:	1f 93       	push	r17
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
    33b6:	e0 97       	sbiw	r28, 0x30	; 48
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	f8 94       	cli
    33bc:	de bf       	out	0x3e, r29	; 62
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	7c 01       	movw	r14, r24
    33c4:	7c a7       	lds	r23, 0x7c
    33c6:	6b a7       	lds	r22, 0x7b
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    33c8:	00 97       	sbiw	r24, 0x00	; 0
    33ca:	59 f1       	breq	.+86     	; 0x3422 <f_open+0x94>

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
    33cc:	8f e3       	ldi	r24, 0x3F	; 63
    33ce:	b8 2e       	mov	r11, r24
    33d0:	b4 22       	and	r11, r20
	res = find_volume(&path, &fs, mode);
    33d2:	ce 01       	movw	r24, r28
    33d4:	8b 96       	adiw	r24, 0x2b	; 43
    33d6:	be 01       	movw	r22, r28
    33d8:	6f 5f       	subi	r22, 0xFF	; 255
    33da:	7f 4f       	sbci	r23, 0xFF	; 255
    33dc:	4b 2d       	mov	r20, r11
    33de:	0e 94 65 0c 	call	0x18ca	; 0x18ca <find_volume>
    33e2:	6c 01       	movw	r12, r24
	if (res == FR_OK) {
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	09 f1       	breq	.+66     	; 0x342a <f_open+0x9c>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    33e8:	f7 01       	movw	r30, r14
    33ea:	11 82       	std	Z+1, r1	; 0x01
    33ec:	10 82       	st	Z, r1

	LEAVE_FF(fs, res);
}
    33ee:	c6 01       	movw	r24, r12
    33f0:	e0 96       	adiw	r28, 0x30	; 48
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	f8 94       	cli
    33f6:	de bf       	out	0x3e, r29	; 62
    33f8:	0f be       	out	0x3f, r0	; 63
    33fa:	cd bf       	out	0x3d, r28	; 61
    33fc:	df 91       	pop	r29
    33fe:	cf 91       	pop	r28
    3400:	1f 91       	pop	r17
    3402:	0f 91       	pop	r16
    3404:	ff 90       	pop	r15
    3406:	ef 90       	pop	r14
    3408:	df 90       	pop	r13
    340a:	cf 90       	pop	r12
    340c:	bf 90       	pop	r11
    340e:	af 90       	pop	r10
    3410:	9f 90       	pop	r9
    3412:	8f 90       	pop	r8
    3414:	7f 90       	pop	r7
    3416:	6f 90       	pop	r6
    3418:	5f 90       	pop	r5
    341a:	4f 90       	pop	r4
    341c:	3f 90       	pop	r3
    341e:	2f 90       	pop	r2
    3420:	08 95       	ret
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    3422:	a9 e0       	ldi	r26, 0x09	; 9
    3424:	ca 2e       	mov	r12, r26
    3426:	d1 2c       	mov	r13, r1
    3428:	e2 cf       	rjmp	.-60     	; 0x33ee <f_open+0x60>

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
	res = find_volume(&path, &fs, mode);
	if (res == FR_OK) {
		dj.obj.fs = fs;
    342a:	89 81       	ldd	r24, Y+1	; 0x01
    342c:	9a 81       	ldd	r25, Y+2	; 0x02
    342e:	9c 83       	std	Y+4, r25	; 0x04
    3430:	8b 83       	std	Y+3, r24	; 0x03
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    3432:	6b a5       	lds	r22, 0x6b
    3434:	7c a5       	lds	r23, 0x6c
    3436:	ce 01       	movw	r24, r28
    3438:	03 96       	adiw	r24, 0x03	; 3
    343a:	0e 94 d5 17 	call	0x2faa	; 0x2faa <follow_path>
    343e:	9c 01       	movw	r18, r24
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    3440:	00 97       	sbiw	r24, 0x00	; 0
    3442:	19 f4       	brne	.+6      	; 0x344a <f_open+0xbc>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    3444:	8a a5       	lds	r24, 0x6a
    3446:	87 fd       	sbrc	r24, 7
    3448:	f5 c1       	rjmp	.+1002   	; 0x3834 <f_open+0x4a6>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    344a:	0b 2d       	mov	r16, r11
    344c:	10 e0       	ldi	r17, 0x00	; 0
    344e:	c8 01       	movw	r24, r16
    3450:	8c 71       	andi	r24, 0x1C	; 28
    3452:	90 70       	andi	r25, 0x00	; 0
    3454:	00 97       	sbiw	r24, 0x00	; 0
    3456:	09 f4       	brne	.+2      	; 0x345a <f_open+0xcc>
    3458:	84 c0       	rjmp	.+264    	; 0x3562 <f_open+0x1d4>
			if (res != FR_OK) {					/* No file, create new */
    345a:	21 15       	cp	r18, r1
    345c:	31 05       	cpc	r19, r1
    345e:	09 f4       	brne	.+2      	; 0x3462 <f_open+0xd4>
    3460:	bf c1       	rjmp	.+894    	; 0x37e0 <f_open+0x452>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    3462:	24 30       	cpi	r18, 0x04	; 4
    3464:	31 05       	cpc	r19, r1
    3466:	09 f0       	breq	.+2      	; 0x346a <f_open+0xdc>
    3468:	c2 c1       	rjmp	.+900    	; 0x37ee <f_open+0x460>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    346a:	ce 01       	movw	r24, r28
    346c:	03 96       	adiw	r24, 0x03	; 3
    346e:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <dir_register>
    3472:	9c 01       	movw	r18, r24
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    3474:	00 97       	sbiw	r24, 0x00	; 0
    3476:	09 f0       	breq	.+2      	; 0x347a <f_open+0xec>
    3478:	ba c1       	rjmp	.+884    	; 0x37ee <f_open+0x460>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    347a:	88 e0       	ldi	r24, 0x08	; 8
    347c:	b8 2a       	or	r11, r24
    347e:	0b 2d       	mov	r16, r11
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    3480:	03 ff       	sbrs	r16, 3
    3482:	db c1       	rjmp	.+950    	; 0x383a <f_open+0x4ac>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
    3484:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3486:	fe 8d       	ldd	r31, Y+30	; 0x1e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3488:	16 86       	std	Z+14, r1	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    348a:	17 86       	std	Z+15, r1	; 0x0f
	*ptr++ = (BYTE)val; val >>= 8;
    348c:	91 e2       	ldi	r25, 0x21	; 33
    348e:	90 8b       	std	Z+16, r25	; 0x10
	*ptr++ = (BYTE)val;
    3490:	88 e4       	ldi	r24, 0x48	; 72
    3492:	81 8b       	std	Z+17, r24	; 0x11
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
    3494:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3496:	fe 8d       	ldd	r31, Y+30	; 0x1e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3498:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    349a:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    349c:	90 8f       	std	Z+24, r25	; 0x18
	*ptr++ = (BYTE)val;
    349e:	81 8f       	std	Z+25, r24	; 0x19
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    34a0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    34a2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    34a4:	80 e2       	ldi	r24, 0x20	; 32
    34a6:	83 87       	std	Z+11, r24	; 0x0b
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
    34a8:	89 80       	ldd	r8, Y+1	; 0x01
    34aa:	9a 80       	ldd	r9, Y+2	; 0x02
    34ac:	ed 8d       	ldd	r30, Y+29	; 0x1d
    34ae:	fe 8d       	ldd	r31, Y+30	; 0x1e
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    34b0:	33 8d       	ldd	r19, Z+27	; 0x1b
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    34b6:	90 e0       	ldi	r25, 0x00	; 0
    34b8:	82 2b       	or	r24, r18
    34ba:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    34bc:	2c 01       	movw	r4, r24
    34be:	66 24       	eor	r6, r6
    34c0:	77 24       	eor	r7, r7
	if (fs->fs_type == FS_FAT32) {
    34c2:	d4 01       	movw	r26, r8
    34c4:	8c 91       	ld	r24, X
    34c6:	83 30       	cpi	r24, 0x03	; 3
    34c8:	09 f4       	brne	.+2      	; 0x34cc <f_open+0x13e>
    34ca:	c3 c1       	rjmp	.+902    	; 0x3852 <f_open+0x4c4>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    34cc:	12 8e       	std	Z+26, r1	; 0x1a
	*ptr++ = (BYTE)val;
    34ce:	13 8e       	std	Z+27, r1	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    34d0:	d4 01       	movw	r26, r8
    34d2:	8c 91       	ld	r24, X
    34d4:	83 30       	cpi	r24, 0x03	; 3
    34d6:	09 f4       	brne	.+2      	; 0x34da <f_open+0x14c>
    34d8:	b9 c1       	rjmp	.+882    	; 0x384c <f_open+0x4be>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
    34da:	ed 8d       	ldd	r30, Y+29	; 0x1d
    34dc:	fe 8d       	ldd	r31, Y+30	; 0x1e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    34de:	14 8e       	std	Z+28, r1	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    34e0:	15 8e       	std	Z+29, r1	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    34e2:	16 8e       	std	Z+30, r1	; 0x1e
	*ptr++ = (BYTE)val;
    34e4:	17 8e       	std	Z+31, r1	; 0x1f
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	d4 01       	movw	r26, r8
    34ea:	13 96       	adiw	r26, 0x03	; 3
    34ec:	8c 93       	st	X, r24
    34ee:	13 97       	sbiw	r26, 0x03	; 3

					if (cl) {							/* Remove the cluster chain if exist */
    34f0:	41 14       	cp	r4, r1
    34f2:	51 04       	cpc	r5, r1
    34f4:	61 04       	cpc	r6, r1
    34f6:	71 04       	cpc	r7, r1
    34f8:	09 f4       	brne	.+2      	; 0x34fc <f_open+0x16e>
    34fa:	47 c0       	rjmp	.+142    	; 0x358a <f_open+0x1fc>
						dw = fs->winsect;
    34fc:	9b 96       	adiw	r26, 0x2b	; 43
    34fe:	8d 91       	ld	r24, X+
    3500:	9d 91       	ld	r25, X+
    3502:	0d 90       	ld	r0, X+
    3504:	bc 91       	ld	r27, X
    3506:	a0 2d       	mov	r26, r0
    3508:	8d a7       	lds	r24, 0x7d
    350a:	9e a7       	lds	r25, 0x7e
    350c:	af a7       	lds	r26, 0x7f
    350e:	b8 ab       	sts	0x58, r27
						res = remove_chain(&dj.obj, cl, 0);
    3510:	ce 01       	movw	r24, r28
    3512:	03 96       	adiw	r24, 0x03	; 3
    3514:	b3 01       	movw	r22, r6
    3516:	a2 01       	movw	r20, r4
    3518:	00 e0       	ldi	r16, 0x00	; 0
    351a:	10 e0       	ldi	r17, 0x00	; 0
    351c:	98 01       	movw	r18, r16
    351e:	0e 94 d5 15 	call	0x2baa	; 0x2baa <remove_chain>
    3522:	9c 01       	movw	r18, r24
						if (res == FR_OK) {
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	09 f0       	breq	.+2      	; 0x352a <f_open+0x19c>
    3528:	62 c1       	rjmp	.+708    	; 0x37ee <f_open+0x460>
							res = move_window(fs, dw);
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	9a 81       	ldd	r25, Y+2	; 0x02
    352e:	4d a5       	lds	r20, 0x6d
    3530:	5e a5       	lds	r21, 0x6e
    3532:	6f a5       	lds	r22, 0x6f
    3534:	78 a9       	sts	0x48, r23
    3536:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
    353a:	9c 01       	movw	r18, r24
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    353c:	89 80       	ldd	r8, Y+1	; 0x01
    353e:	9a 80       	ldd	r9, Y+2	; 0x02
    3540:	d3 01       	movw	r26, r6
    3542:	c2 01       	movw	r24, r4
    3544:	01 97       	sbiw	r24, 0x01	; 1
    3546:	a1 09       	sbc	r26, r1
    3548:	b1 09       	sbc	r27, r1
    354a:	f4 01       	movw	r30, r8
    354c:	83 87       	std	Z+11, r24	; 0x0b
    354e:	94 87       	std	Z+12, r25	; 0x0c
    3550:	a5 87       	std	Z+13, r26	; 0x0d
    3552:	b6 87       	std	Z+14, r27	; 0x0e
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    3554:	21 15       	cp	r18, r1
    3556:	31 05       	cpc	r19, r1
    3558:	09 f0       	breq	.+2      	; 0x355c <f_open+0x1ce>
    355a:	49 c1       	rjmp	.+658    	; 0x37ee <f_open+0x460>
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
    355c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    355e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3560:	14 c0       	rjmp	.+40     	; 0x358a <f_open+0x1fc>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
    3562:	21 15       	cp	r18, r1
    3564:	31 05       	cpc	r19, r1
    3566:	09 f0       	breq	.+2      	; 0x356a <f_open+0x1dc>
    3568:	42 c1       	rjmp	.+644    	; 0x37ee <f_open+0x460>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
    356a:	8f 81       	ldd	r24, Y+7	; 0x07
    356c:	84 fd       	sbrc	r24, 4
    356e:	6a c1       	rjmp	.+724    	; 0x3844 <f_open+0x4b6>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
    3570:	b1 fe       	sbrs	r11, 1
    3572:	02 c0       	rjmp	.+4      	; 0x3578 <f_open+0x1ea>
    3574:	80 fd       	sbrc	r24, 0
    3576:	4a c1       	rjmp	.+660    	; 0x380c <f_open+0x47e>
    3578:	c8 01       	movw	r24, r16
    357a:	88 70       	andi	r24, 0x08	; 8
    357c:	90 70       	andi	r25, 0x00	; 0
    357e:	89 80       	ldd	r8, Y+1	; 0x01
    3580:	9a 80       	ldd	r9, Y+2	; 0x02
    3582:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3584:	fe 8d       	ldd	r31, Y+30	; 0x1e
					}
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    3586:	00 97       	sbiw	r24, 0x00	; 0
    3588:	19 f0       	breq	.+6      	; 0x3590 <f_open+0x202>
				mode |= FA_MODIFIED;
    358a:	80 e4       	ldi	r24, 0x40	; 64
    358c:	b8 2a       	or	r11, r24
    358e:	0b 2d       	mov	r16, r11
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    3590:	d4 01       	movw	r26, r8
    3592:	9b 96       	adiw	r26, 0x2b	; 43
    3594:	4d 91       	ld	r20, X+
    3596:	5d 91       	ld	r21, X+
    3598:	6d 91       	ld	r22, X+
    359a:	7c 91       	ld	r23, X
    359c:	9e 97       	sbiw	r26, 0x2e	; 46
    359e:	d7 01       	movw	r26, r14
    35a0:	5c 96       	adiw	r26, 0x1c	; 28
    35a2:	4d 93       	st	X+, r20
    35a4:	5d 93       	st	X+, r21
    35a6:	6d 93       	st	X+, r22
    35a8:	7c 93       	st	X, r23
    35aa:	5f 97       	sbiw	r26, 0x1f	; 31
			fp->dir_ptr = dj.dir;
    35ac:	91 96       	adiw	r26, 0x21	; 33
    35ae:	fc 93       	st	X, r31
    35b0:	ee 93       	st	-X, r30
    35b2:	90 97       	sbiw	r26, 0x20	; 32
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    35b4:	33 8d       	ldd	r19, Z+27	; 0x1b
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	82 2b       	or	r24, r18
    35be:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    35c0:	ac 01       	movw	r20, r24
    35c2:	60 e0       	ldi	r22, 0x00	; 0
    35c4:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    35c6:	d4 01       	movw	r26, r8
    35c8:	8c 91       	ld	r24, X
    35ca:	83 30       	cpi	r24, 0x03	; 3
    35cc:	09 f4       	brne	.+2      	; 0x35d0 <f_open+0x242>
    35ce:	22 c1       	rjmp	.+580    	; 0x3814 <f_open+0x486>
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
				fp->obj.c_ofs = dj.blk_ofs;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
    35d0:	d7 01       	movw	r26, r14
    35d2:	16 96       	adiw	r26, 0x06	; 6
    35d4:	4d 93       	st	X+, r20
    35d6:	5d 93       	st	X+, r21
    35d8:	6d 93       	st	X+, r22
    35da:	7c 93       	st	X, r23
    35dc:	19 97       	sbiw	r26, 0x09	; 9
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    35de:	87 8d       	ldd	r24, Z+31	; 0x1f
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	a0 e0       	ldi	r26, 0x00	; 0
    35e4:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    35e6:	44 27       	eor	r20, r20
    35e8:	58 2f       	mov	r21, r24
    35ea:	69 2f       	mov	r22, r25
    35ec:	7a 2f       	mov	r23, r26
    35ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    35f0:	90 e0       	ldi	r25, 0x00	; 0
    35f2:	a0 e0       	ldi	r26, 0x00	; 0
    35f4:	b0 e0       	ldi	r27, 0x00	; 0
    35f6:	48 2b       	or	r20, r24
    35f8:	59 2b       	or	r21, r25
    35fa:	6a 2b       	or	r22, r26
    35fc:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    35fe:	76 2f       	mov	r23, r22
    3600:	65 2f       	mov	r22, r21
    3602:	54 2f       	mov	r21, r20
    3604:	44 27       	eor	r20, r20
    3606:	85 8d       	ldd	r24, Z+29	; 0x1d
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	a0 e0       	ldi	r26, 0x00	; 0
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	48 2b       	or	r20, r24
    3610:	59 2b       	or	r21, r25
    3612:	6a 2b       	or	r22, r26
    3614:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    3616:	76 2f       	mov	r23, r22
    3618:	65 2f       	mov	r22, r21
    361a:	54 2f       	mov	r21, r20
    361c:	44 27       	eor	r20, r20
    361e:	84 8d       	ldd	r24, Z+28	; 0x1c
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	a0 e0       	ldi	r26, 0x00	; 0
    3624:	b0 e0       	ldi	r27, 0x00	; 0
    3626:	48 2b       	or	r20, r24
    3628:	59 2b       	or	r21, r25
    362a:	6a 2b       	or	r22, r26
    362c:	7b 2b       	or	r23, r27
				fp->obj.c_ofs = dj.blk_ofs;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    362e:	f7 01       	movw	r30, r14
    3630:	42 87       	std	Z+10, r20	; 0x0a
    3632:	53 87       	std	Z+11, r21	; 0x0b
    3634:	64 87       	std	Z+12, r22	; 0x0c
    3636:	75 87       	std	Z+13, r23	; 0x0d
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
    3638:	91 82       	std	Z+1, r9	; 0x01
    363a:	80 82       	st	Z, r8
			fp->obj.id = fs->id;
    363c:	d4 01       	movw	r26, r8
    363e:	15 96       	adiw	r26, 0x05	; 5
    3640:	8d 91       	ld	r24, X+
    3642:	9c 91       	ld	r25, X
    3644:	16 97       	sbiw	r26, 0x06	; 6
    3646:	93 83       	std	Z+3, r25	; 0x03
    3648:	82 83       	std	Z+2, r24	; 0x02
			fp->flag = mode;		/* Set file access mode */
    364a:	b6 86       	std	Z+14, r11	; 0x0e
			fp->err = 0;			/* Clear error flag */
    364c:	17 86       	std	Z+15, r1	; 0x0f
			fp->sect = 0;			/* Invalidate current data sector */
    364e:	10 8e       	std	Z+24, r1	; 0x18
    3650:	11 8e       	std	Z+25, r1	; 0x19
    3652:	12 8e       	std	Z+26, r1	; 0x1a
    3654:	13 8e       	std	Z+27, r1	; 0x1b
			fp->fptr = 0;			/* Set file pointer top of the file */
    3656:	10 8a       	std	Z+16, r1	; 0x10
    3658:	11 8a       	std	Z+17, r1	; 0x11
    365a:	12 8a       	std	Z+18, r1	; 0x12
    365c:	13 8a       	std	Z+19, r1	; 0x13
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
    365e:	32 e2       	ldi	r19, 0x22	; 34
    3660:	23 2e       	mov	r2, r19
    3662:	31 2c       	mov	r3, r1
    3664:	2e 0c       	add	r2, r14
    3666:	3f 1c       	adc	r3, r15

/*-----------------------------------------------------------------------*/
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_open (
    3668:	c7 01       	movw	r24, r14
    366a:	8e 5d       	subi	r24, 0xDE	; 222
    366c:	9d 4f       	sbci	r25, 0xFD	; 253
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    366e:	f1 01       	movw	r30, r2

	do *d++ = (BYTE)val; while (--cnt);
    3670:	11 92       	st	Z+, r1
    3672:	e8 17       	cp	r30, r24
    3674:	f9 07       	cpc	r31, r25
    3676:	e1 f7       	brne	.-8      	; 0x3670 <f_open+0x2e2>
			fp->fptr = 0;			/* Set file pointer top of the file */
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    3678:	05 ff       	sbrs	r16, 5
    367a:	b9 ce       	rjmp	.-654    	; 0x33ee <f_open+0x60>
    367c:	f7 01       	movw	r30, r14
    367e:	42 84       	ldd	r4, Z+10	; 0x0a
    3680:	53 84       	ldd	r5, Z+11	; 0x0b
    3682:	64 84       	ldd	r6, Z+12	; 0x0c
    3684:	75 84       	ldd	r7, Z+13	; 0x0d
    3686:	41 14       	cp	r4, r1
    3688:	51 04       	cpc	r5, r1
    368a:	61 04       	cpc	r6, r1
    368c:	71 04       	cpc	r7, r1
    368e:	09 f4       	brne	.+2      	; 0x3692 <f_open+0x304>
    3690:	ae ce       	rjmp	.-676    	; 0x33ee <f_open+0x60>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    3692:	d7 01       	movw	r26, r14
    3694:	40 8a       	std	Z+16, r4	; 0x10
    3696:	51 8a       	std	Z+17, r5	; 0x11
    3698:	62 8a       	std	Z+18, r6	; 0x12
    369a:	73 8a       	std	Z+19, r7	; 0x13
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    369c:	f4 01       	movw	r30, r8
    369e:	81 85       	ldd	r24, Z+9	; 0x09
    36a0:	92 85       	ldd	r25, Z+10	; 0x0a
    36a2:	4c 01       	movw	r8, r24
    36a4:	aa 24       	eor	r10, r10
    36a6:	bb 24       	eor	r11, r11
    36a8:	29 e0       	ldi	r18, 0x09	; 9
    36aa:	88 0c       	add	r8, r8
    36ac:	99 1c       	adc	r9, r9
    36ae:	aa 1c       	adc	r10, r10
    36b0:	bb 1c       	adc	r11, r11
    36b2:	2a 95       	dec	r18
    36b4:	d1 f7       	brne	.-12     	; 0x36aa <f_open+0x31c>
				clst = fp->obj.sclust;				/* Follow the cluster chain */
    36b6:	16 96       	adiw	r26, 0x06	; 6
    36b8:	4d 91       	ld	r20, X+
    36ba:	5d 91       	ld	r21, X+
    36bc:	6d 91       	ld	r22, X+
    36be:	7c 91       	ld	r23, X
    36c0:	19 97       	sbiw	r26, 0x09	; 9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    36c2:	84 14       	cp	r8, r4
    36c4:	95 04       	cpc	r9, r5
    36c6:	a6 04       	cpc	r10, r6
    36c8:	b7 04       	cpc	r11, r7
    36ca:	f8 f4       	brcc	.+62     	; 0x370a <f_open+0x37c>
					clst = get_fat(&fp->obj, clst);
    36cc:	d7 01       	movw	r26, r14
    36ce:	8d 91       	ld	r24, X+
    36d0:	9c 91       	ld	r25, X
    36d2:	0e 94 1f 11 	call	0x223e	; 0x223e <get_fat.isra.8>
    36d6:	ab 01       	movw	r20, r22
    36d8:	bc 01       	movw	r22, r24
					if (clst <= 1) res = FR_INT_ERR;
    36da:	42 30       	cpi	r20, 0x02	; 2
    36dc:	51 05       	cpc	r21, r1
    36de:	61 05       	cpc	r22, r1
    36e0:	71 05       	cpc	r23, r1
    36e2:	08 f4       	brcc	.+2      	; 0x36e6 <f_open+0x358>
    36e4:	8f c0       	rjmp	.+286    	; 0x3804 <f_open+0x476>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    36e6:	4f 3f       	cpi	r20, 0xFF	; 255
    36e8:	bf ef       	ldi	r27, 0xFF	; 255
    36ea:	5b 07       	cpc	r21, r27
    36ec:	bf ef       	ldi	r27, 0xFF	; 255
    36ee:	6b 07       	cpc	r22, r27
    36f0:	bf ef       	ldi	r27, 0xFF	; 255
    36f2:	7b 07       	cpc	r23, r27
    36f4:	09 f4       	brne	.+2      	; 0x36f8 <f_open+0x36a>
    36f6:	7d c0       	rjmp	.+250    	; 0x37f2 <f_open+0x464>

/*-----------------------------------------------------------------------*/
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_open (
    36f8:	48 18       	sub	r4, r8
    36fa:	59 08       	sbc	r5, r9
    36fc:	6a 08       	sbc	r6, r10
    36fe:	7b 08       	sbc	r7, r11
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    3700:	84 14       	cp	r8, r4
    3702:	95 04       	cpc	r9, r5
    3704:	a6 04       	cpc	r10, r6
    3706:	b7 04       	cpc	r11, r7
    3708:	08 f3       	brcs	.-62     	; 0x36cc <f_open+0x33e>
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    370a:	d7 01       	movw	r26, r14
    370c:	54 96       	adiw	r26, 0x14	; 20
    370e:	4d 93       	st	X+, r20
    3710:	5d 93       	st	X+, r21
    3712:	6d 93       	st	X+, r22
    3714:	7c 93       	st	X, r23
    3716:	57 97       	sbiw	r26, 0x17	; 23
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    3718:	d3 01       	movw	r26, r6
    371a:	c2 01       	movw	r24, r4
    371c:	91 70       	andi	r25, 0x01	; 1
    371e:	a0 70       	andi	r26, 0x00	; 0
    3720:	b0 70       	andi	r27, 0x00	; 0
    3722:	00 97       	sbiw	r24, 0x00	; 0
    3724:	a1 05       	cpc	r26, r1
    3726:	b1 05       	cpc	r27, r1
    3728:	09 f4       	brne	.+2      	; 0x372c <f_open+0x39e>
    372a:	61 ce       	rjmp	.-830    	; 0x33ee <f_open+0x60>
					if ((sc = clust2sect(fs, clst)) == 0) {
    372c:	e9 81       	ldd	r30, Y+1	; 0x01
    372e:	fa 81       	ldd	r31, Y+2	; 0x02
    3730:	fe a7       	lds	r31, 0x7e
    3732:	ed a7       	lds	r30, 0x7d
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3734:	9e ef       	ldi	r25, 0xFE	; 254
    3736:	89 2e       	mov	r8, r25
    3738:	9f ef       	ldi	r25, 0xFF	; 255
    373a:	99 2e       	mov	r9, r25
    373c:	9f ef       	ldi	r25, 0xFF	; 255
    373e:	a9 2e       	mov	r10, r25
    3740:	9f ef       	ldi	r25, 0xFF	; 255
    3742:	b9 2e       	mov	r11, r25
    3744:	84 0e       	add	r8, r20
    3746:	95 1e       	adc	r9, r21
    3748:	a6 1e       	adc	r10, r22
    374a:	b7 1e       	adc	r11, r23
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    374c:	83 89       	ldd	r24, Z+19	; 0x13
    374e:	94 89       	ldd	r25, Z+20	; 0x14
    3750:	a5 89       	ldd	r26, Z+21	; 0x15
    3752:	b6 89       	ldd	r27, Z+22	; 0x16
    3754:	02 97       	sbiw	r24, 0x02	; 2
    3756:	a1 09       	sbc	r26, r1
    3758:	b1 09       	sbc	r27, r1
    375a:	88 16       	cp	r8, r24
    375c:	99 06       	cpc	r9, r25
    375e:	aa 06       	cpc	r10, r26
    3760:	bb 06       	cpc	r11, r27
    3762:	08 f0       	brcs	.+2      	; 0x3766 <f_open+0x3d8>
    3764:	86 c0       	rjmp	.+268    	; 0x3872 <f_open+0x4e4>
	return clst * fs->csize + fs->database;
    3766:	21 85       	ldd	r18, Z+9	; 0x09
    3768:	32 85       	ldd	r19, Z+10	; 0x0a
    376a:	40 e0       	ldi	r20, 0x00	; 0
    376c:	50 e0       	ldi	r21, 0x00	; 0
    376e:	c5 01       	movw	r24, r10
    3770:	b4 01       	movw	r22, r8
    3772:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__mulsi3>
    3776:	ab 01       	movw	r20, r22
    3778:	bc 01       	movw	r22, r24
    377a:	ed a5       	lds	r30, 0x6d
    377c:	fe a5       	lds	r31, 0x6e
    377e:	87 a1       	lds	r24, 0x47
    3780:	90 a5       	lds	r25, 0x60
    3782:	a1 a5       	lds	r26, 0x61
    3784:	b2 a5       	lds	r27, 0x62
    3786:	48 0f       	add	r20, r24
    3788:	59 1f       	adc	r21, r25
    378a:	6a 1f       	adc	r22, r26
    378c:	7b 1f       	adc	r23, r27
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
    378e:	41 15       	cp	r20, r1
    3790:	51 05       	cpc	r21, r1
    3792:	61 05       	cpc	r22, r1
    3794:	71 05       	cpc	r23, r1
    3796:	09 f4       	brne	.+2      	; 0x379a <f_open+0x40c>
    3798:	6c c0       	rjmp	.+216    	; 0x3872 <f_open+0x4e4>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    379a:	93 01       	movw	r18, r6
    379c:	82 01       	movw	r16, r4
    379e:	89 e0       	ldi	r24, 0x09	; 9
    37a0:	36 95       	lsr	r19
    37a2:	27 95       	ror	r18
    37a4:	17 95       	ror	r17
    37a6:	07 95       	ror	r16
    37a8:	8a 95       	dec	r24
    37aa:	d1 f7       	brne	.-12     	; 0x37a0 <f_open+0x412>
    37ac:	04 0f       	add	r16, r20
    37ae:	15 1f       	adc	r17, r21
    37b0:	26 1f       	adc	r18, r22
    37b2:	37 1f       	adc	r19, r23
    37b4:	d7 01       	movw	r26, r14
    37b6:	58 96       	adiw	r26, 0x18	; 24
    37b8:	0d 93       	st	X+, r16
    37ba:	1d 93       	st	X+, r17
    37bc:	2d 93       	st	X+, r18
    37be:	3c 93       	st	X, r19
    37c0:	5b 97       	sbiw	r26, 0x1b	; 27
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
    37c2:	81 81       	ldd	r24, Z+1	; 0x01
    37c4:	b1 01       	movw	r22, r2
    37c6:	a9 01       	movw	r20, r18
    37c8:	98 01       	movw	r18, r16
    37ca:	01 e0       	ldi	r16, 0x01	; 1
    37cc:	10 e0       	ldi	r17, 0x00	; 0
    37ce:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <disk_read>
    37d2:	00 97       	sbiw	r24, 0x00	; 0
    37d4:	09 f4       	brne	.+2      	; 0x37d8 <f_open+0x44a>
    37d6:	0b ce       	rjmp	.-1002   	; 0x33ee <f_open+0x60>
    37d8:	11 e0       	ldi	r17, 0x01	; 1
    37da:	c1 2e       	mov	r12, r17
    37dc:	d1 2c       	mov	r13, r1
    37de:	04 ce       	rjmp	.-1016   	; 0x33e8 <f_open+0x5a>
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    37e0:	8f 81       	ldd	r24, Y+7	; 0x07
    37e2:	81 71       	andi	r24, 0x11	; 17
    37e4:	99 f4       	brne	.+38     	; 0x380c <f_open+0x47e>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    37e6:	b2 fe       	sbrs	r11, 2
    37e8:	4b ce       	rjmp	.-874    	; 0x3480 <f_open+0xf2>
    37ea:	28 e0       	ldi	r18, 0x08	; 8
    37ec:	30 e0       	ldi	r19, 0x00	; 0
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    37ee:	69 01       	movw	r12, r18
    37f0:	fb cd       	rjmp	.-1034   	; 0x33e8 <f_open+0x5a>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    37f2:	e1 e0       	ldi	r30, 0x01	; 1
    37f4:	ce 2e       	mov	r12, r30
    37f6:	d1 2c       	mov	r13, r1
				}
				fp->clust = clst;
    37f8:	f7 01       	movw	r30, r14
    37fa:	44 8b       	std	Z+20, r20	; 0x14
    37fc:	55 8b       	std	Z+21, r21	; 0x15
    37fe:	66 8b       	std	Z+22, r22	; 0x16
    3800:	77 8b       	std	Z+23, r23	; 0x17
    3802:	f2 cd       	rjmp	.-1052   	; 0x33e8 <f_open+0x5a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
    3804:	f2 e0       	ldi	r31, 0x02	; 2
    3806:	cf 2e       	mov	r12, r31
    3808:	d1 2c       	mov	r13, r1
    380a:	f6 cf       	rjmp	.-20     	; 0x37f8 <f_open+0x46a>
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
						res = FR_DENIED;
    380c:	27 e0       	ldi	r18, 0x07	; 7
    380e:	30 e0       	ldi	r19, 0x00	; 0
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    3810:	69 01       	movw	r12, r18
    3812:	ea cd       	rjmp	.-1068   	; 0x33e8 <f_open+0x5a>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    3814:	35 89       	ldd	r19, Z+21	; 0x15
    3816:	20 e0       	ldi	r18, 0x00	; 0
    3818:	84 89       	ldd	r24, Z+20	; 0x14
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	82 2b       	or	r24, r18
    381e:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    3820:	a0 e0       	ldi	r26, 0x00	; 0
    3822:	b0 e0       	ldi	r27, 0x00	; 0
    3824:	dc 01       	movw	r26, r24
    3826:	99 27       	eor	r25, r25
    3828:	88 27       	eor	r24, r24
    382a:	48 2b       	or	r20, r24
    382c:	59 2b       	or	r21, r25
    382e:	6a 2b       	or	r22, r26
    3830:	7b 2b       	or	r23, r27
    3832:	ce ce       	rjmp	.-612    	; 0x35d0 <f_open+0x242>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
				res = FR_INVALID_NAME;
    3834:	26 e0       	ldi	r18, 0x06	; 6
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	08 ce       	rjmp	.-1008   	; 0x344a <f_open+0xbc>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    383a:	89 80       	ldd	r8, Y+1	; 0x01
    383c:	9a 80       	ldd	r9, Y+2	; 0x02
    383e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3840:	fe 8d       	ldd	r31, Y+30	; 0x1e
    3842:	a6 ce       	rjmp	.-692    	; 0x3590 <f_open+0x202>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
    3844:	24 e0       	ldi	r18, 0x04	; 4
    3846:	30 e0       	ldi	r19, 0x00	; 0
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    3848:	69 01       	movw	r12, r18
    384a:	ce cd       	rjmp	.-1124   	; 0x33e8 <f_open+0x5a>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    384c:	14 8a       	std	Z+20, r1	; 0x14
	*ptr++ = (BYTE)val;
    384e:	15 8a       	std	Z+21, r1	; 0x15
    3850:	44 ce       	rjmp	.-888    	; 0x34da <f_open+0x14c>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    3852:	35 89       	ldd	r19, Z+21	; 0x15
    3854:	20 e0       	ldi	r18, 0x00	; 0
    3856:	84 89       	ldd	r24, Z+20	; 0x14
    3858:	90 e0       	ldi	r25, 0x00	; 0
    385a:	82 2b       	or	r24, r18
    385c:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    385e:	a0 e0       	ldi	r26, 0x00	; 0
    3860:	b0 e0       	ldi	r27, 0x00	; 0
    3862:	dc 01       	movw	r26, r24
    3864:	99 27       	eor	r25, r25
    3866:	88 27       	eor	r24, r24
    3868:	48 2a       	or	r4, r24
    386a:	59 2a       	or	r5, r25
    386c:	6a 2a       	or	r6, r26
    386e:	7b 2a       	or	r7, r27
    3870:	2d ce       	rjmp	.-934    	; 0x34cc <f_open+0x13e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
						res = FR_INT_ERR;
    3872:	b2 e0       	ldi	r27, 0x02	; 2
    3874:	cb 2e       	mov	r12, r27
    3876:	d1 2c       	mov	r13, r1
    3878:	b7 cd       	rjmp	.-1170   	; 0x33e8 <f_open+0x5a>

0000387a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
    387a:	2f 92       	push	r2
    387c:	3f 92       	push	r3
    387e:	4f 92       	push	r4
    3880:	5f 92       	push	r5
    3882:	6f 92       	push	r6
    3884:	7f 92       	push	r7
    3886:	8f 92       	push	r8
    3888:	9f 92       	push	r9
    388a:	af 92       	push	r10
    388c:	bf 92       	push	r11
    388e:	cf 92       	push	r12
    3890:	df 92       	push	r13
    3892:	ef 92       	push	r14
    3894:	ff 92       	push	r15
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	cd b7       	in	r28, 0x3d	; 61
    38a0:	de b7       	in	r29, 0x3e	; 62
    38a2:	2a 97       	sbiw	r28, 0x0a	; 10
    38a4:	0f b6       	in	r0, 0x3f	; 63
    38a6:	f8 94       	cli
    38a8:	de bf       	out	0x3e, r29	; 62
    38aa:	0f be       	out	0x3f, r0	; 63
    38ac:	cd bf       	out	0x3d, r28	; 61
    38ae:	5c 01       	movw	r10, r24
    38b0:	e6 2e       	mov	r14, r22
    38b2:	c7 2e       	mov	r12, r23
    38b4:	3a 01       	movw	r6, r20
    38b6:	3c 83       	std	Y+4, r19	; 0x04
    38b8:	2b 83       	std	Y+3, r18	; 0x03
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    38ba:	f9 01       	movw	r30, r18
    38bc:	11 82       	std	Z+1, r1	; 0x01
    38be:	10 82       	st	Z, r1
	res = validate(fp, &fs);
    38c0:	be 01       	movw	r22, r28
    38c2:	6f 5f       	subi	r22, 0xFF	; 255
    38c4:	7f 4f       	sbci	r23, 0xFF	; 255
    38c6:	0e 94 a5 09 	call	0x134a	; 0x134a <validate>
    38ca:	2c 01       	movw	r4, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    38cc:	00 97       	sbiw	r24, 0x00	; 0
    38ce:	61 f4       	brne	.+24     	; 0x38e8 <f_read+0x6e>
    38d0:	f5 01       	movw	r30, r10
    38d2:	47 84       	ldd	r4, Z+15	; 0x0f
    38d4:	55 24       	eor	r5, r5
    38d6:	41 14       	cp	r4, r1
    38d8:	51 04       	cpc	r5, r1
    38da:	31 f4       	brne	.+12     	; 0x38e8 <f_read+0x6e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    38dc:	86 85       	ldd	r24, Z+14	; 0x0e
    38de:	80 fd       	sbrc	r24, 0
    38e0:	1d c0       	rjmp	.+58     	; 0x391c <f_read+0xa2>
    38e2:	97 e0       	ldi	r25, 0x07	; 7
    38e4:	49 2e       	mov	r4, r25
    38e6:	51 2c       	mov	r5, r1
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
    38e8:	c2 01       	movw	r24, r4
    38ea:	2a 96       	adiw	r28, 0x0a	; 10
    38ec:	0f b6       	in	r0, 0x3f	; 63
    38ee:	f8 94       	cli
    38f0:	de bf       	out	0x3e, r29	; 62
    38f2:	0f be       	out	0x3f, r0	; 63
    38f4:	cd bf       	out	0x3d, r28	; 61
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	1f 91       	pop	r17
    38fc:	0f 91       	pop	r16
    38fe:	ff 90       	pop	r15
    3900:	ef 90       	pop	r14
    3902:	df 90       	pop	r13
    3904:	cf 90       	pop	r12
    3906:	bf 90       	pop	r11
    3908:	af 90       	pop	r10
    390a:	9f 90       	pop	r9
    390c:	8f 90       	pop	r8
    390e:	7f 90       	pop	r7
    3910:	6f 90       	pop	r6
    3912:	5f 90       	pop	r5
    3914:	4f 90       	pop	r4
    3916:	3f 90       	pop	r3
    3918:	2f 90       	pop	r2
    391a:	08 95       	ret

	*br = 0;	/* Clear read byte counter */
	res = validate(fp, &fs);
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
    391c:	00 89       	ldd	r16, Z+16	; 0x10
    391e:	11 89       	ldd	r17, Z+17	; 0x11
    3920:	22 89       	ldd	r18, Z+18	; 0x12
    3922:	33 89       	ldd	r19, Z+19	; 0x13
    3924:	82 85       	ldd	r24, Z+10	; 0x0a
    3926:	93 85       	ldd	r25, Z+11	; 0x0b
    3928:	a4 85       	ldd	r26, Z+12	; 0x0c
    392a:	b5 85       	ldd	r27, Z+13	; 0x0d
    392c:	80 1b       	sub	r24, r16
    392e:	91 0b       	sbc	r25, r17
    3930:	a2 0b       	sbc	r26, r18
    3932:	b3 0b       	sbc	r27, r19
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    3934:	a3 01       	movw	r20, r6
    3936:	60 e0       	ldi	r22, 0x00	; 0
    3938:	70 e0       	ldi	r23, 0x00	; 0
    393a:	84 17       	cp	r24, r20
    393c:	95 07       	cpc	r25, r21
    393e:	a6 07       	cpc	r26, r22
    3940:	b7 07       	cpc	r27, r23
    3942:	08 f4       	brcc	.+2      	; 0x3946 <f_read+0xcc>
    3944:	3c 01       	movw	r6, r24

	for ( ;  btr;								/* Repeat until all data read */
    3946:	61 14       	cp	r6, r1
    3948:	71 04       	cpc	r7, r1
    394a:	71 f2       	breq	.-100    	; 0x38e8 <f_read+0x6e>
    394c:	ed 82       	std	Y+5, r14	; 0x05
    394e:	ce 82       	std	Y+6, r12	; 0x06
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    3950:	c5 01       	movw	r24, r10
    3952:	82 96       	adiw	r24, 0x22	; 34
    3954:	98 87       	std	Y+8, r25	; 0x08
    3956:	8f 83       	std	Y+7, r24	; 0x07
    3958:	5a 86       	std	Y+10, r5	; 0x0a
    395a:	49 86       	std	Y+9, r4	; 0x09
    395c:	45 01       	movw	r8, r10
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    395e:	d9 01       	movw	r26, r18
    3960:	c8 01       	movw	r24, r16
    3962:	91 70       	andi	r25, 0x01	; 1
    3964:	a0 70       	andi	r26, 0x00	; 0
    3966:	b0 70       	andi	r27, 0x00	; 0
    3968:	00 97       	sbiw	r24, 0x00	; 0
    396a:	a1 05       	cpc	r26, r1
    396c:	b1 05       	cpc	r27, r1
    396e:	09 f0       	breq	.+2      	; 0x3972 <f_read+0xf8>
    3970:	60 c0       	rjmp	.+192    	; 0x3a32 <f_read+0x1b8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    3972:	29 80       	ldd	r2, Y+1	; 0x01
    3974:	3a 80       	ldd	r3, Y+2	; 0x02
    3976:	d9 01       	movw	r26, r18
    3978:	c8 01       	movw	r24, r16
    397a:	49 e0       	ldi	r20, 0x09	; 9
    397c:	b6 95       	lsr	r27
    397e:	a7 95       	ror	r26
    3980:	97 95       	ror	r25
    3982:	87 95       	ror	r24
    3984:	4a 95       	dec	r20
    3986:	d1 f7       	brne	.-12     	; 0x397c <f_read+0x102>
    3988:	f1 01       	movw	r30, r2
    398a:	a1 84       	ldd	r10, Z+9	; 0x09
    398c:	b2 84       	ldd	r11, Z+10	; 0x0a
    398e:	08 94       	sec
    3990:	a1 08       	sbc	r10, r1
    3992:	b1 08       	sbc	r11, r1
    3994:	a8 22       	and	r10, r24
    3996:	b9 22       	and	r11, r25
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    3998:	f4 01       	movw	r30, r8

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
			if (csect == 0) {					/* On the cluster boundary? */
    399a:	a1 14       	cp	r10, r1
    399c:	b1 04       	cpc	r11, r1
    399e:	09 f4       	brne	.+2      	; 0x39a2 <f_read+0x128>
    39a0:	81 c0       	rjmp	.+258    	; 0x3aa4 <f_read+0x22a>
    39a2:	84 89       	ldd	r24, Z+20	; 0x14
    39a4:	95 89       	ldd	r25, Z+21	; 0x15
    39a6:	a6 89       	ldd	r26, Z+22	; 0x16
    39a8:	b7 89       	ldd	r27, Z+23	; 0x17
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    39aa:	1e ef       	ldi	r17, 0xFE	; 254
    39ac:	c1 2e       	mov	r12, r17
    39ae:	1f ef       	ldi	r17, 0xFF	; 255
    39b0:	d1 2e       	mov	r13, r17
    39b2:	1f ef       	ldi	r17, 0xFF	; 255
    39b4:	e1 2e       	mov	r14, r17
    39b6:	1f ef       	ldi	r17, 0xFF	; 255
    39b8:	f1 2e       	mov	r15, r17
    39ba:	c8 0e       	add	r12, r24
    39bc:	d9 1e       	adc	r13, r25
    39be:	ea 1e       	adc	r14, r26
    39c0:	fb 1e       	adc	r15, r27
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    39c2:	f1 01       	movw	r30, r2
    39c4:	83 89       	ldd	r24, Z+19	; 0x13
    39c6:	94 89       	ldd	r25, Z+20	; 0x14
    39c8:	a5 89       	ldd	r26, Z+21	; 0x15
    39ca:	b6 89       	ldd	r27, Z+22	; 0x16
    39cc:	02 97       	sbiw	r24, 0x02	; 2
    39ce:	a1 09       	sbc	r26, r1
    39d0:	b1 09       	sbc	r27, r1
    39d2:	c8 16       	cp	r12, r24
    39d4:	d9 06       	cpc	r13, r25
    39d6:	ea 06       	cpc	r14, r26
    39d8:	fb 06       	cpc	r15, r27
    39da:	08 f4       	brcc	.+2      	; 0x39de <f_read+0x164>
    39dc:	84 c0       	rjmp	.+264    	; 0x3ae6 <f_read+0x26c>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
    39de:	82 e0       	ldi	r24, 0x02	; 2
    39e0:	f4 01       	movw	r30, r8
    39e2:	87 87       	std	Z+15, r24	; 0x0f
    39e4:	a2 e0       	ldi	r26, 0x02	; 2
    39e6:	4a 2e       	mov	r4, r26
    39e8:	51 2c       	mov	r5, r1
    39ea:	7e cf       	rjmp	.-260    	; 0x38e8 <f_read+0x6e>
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
				continue;
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
    39ec:	f4 01       	movw	r30, r8
    39ee:	00 8d       	ldd	r16, Z+24	; 0x18
    39f0:	11 8d       	ldd	r17, Z+25	; 0x19
    39f2:	22 8d       	ldd	r18, Z+26	; 0x1a
    39f4:	33 8d       	ldd	r19, Z+27	; 0x1b
    39f6:	0c 15       	cp	r16, r12
    39f8:	1d 05       	cpc	r17, r13
    39fa:	2e 05       	cpc	r18, r14
    39fc:	3f 05       	cpc	r19, r15
    39fe:	81 f0       	breq	.+32     	; 0x3a20 <f_read+0x1a6>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
    3a00:	86 85       	ldd	r24, Z+14	; 0x0e
    3a02:	87 fd       	sbrc	r24, 7
    3a04:	c8 c0       	rjmp	.+400    	; 0x3b96 <f_read+0x31c>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= ~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    3a06:	f1 01       	movw	r30, r2
    3a08:	81 81       	ldd	r24, Z+1	; 0x01
    3a0a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a0c:	78 85       	ldd	r23, Y+8	; 0x08
    3a0e:	a7 01       	movw	r20, r14
    3a10:	96 01       	movw	r18, r12
    3a12:	01 e0       	ldi	r16, 0x01	; 1
    3a14:	10 e0       	ldi	r17, 0x00	; 0
    3a16:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <disk_read>
    3a1a:	00 97       	sbiw	r24, 0x00	; 0
    3a1c:	09 f0       	breq	.+2      	; 0x3a20 <f_read+0x1a6>
    3a1e:	a9 c0       	rjmp	.+338    	; 0x3b72 <f_read+0x2f8>
			}
#endif
			fp->sect = sect;
    3a20:	f4 01       	movw	r30, r8
    3a22:	c0 8e       	std	Z+24, r12	; 0x18
    3a24:	d1 8e       	std	Z+25, r13	; 0x19
    3a26:	e2 8e       	std	Z+26, r14	; 0x1a
    3a28:	f3 8e       	std	Z+27, r15	; 0x1b
    3a2a:	00 89       	ldd	r16, Z+16	; 0x10
    3a2c:	11 89       	ldd	r17, Z+17	; 0x11
    3a2e:	22 89       	ldd	r18, Z+18	; 0x12
    3a30:	33 89       	ldd	r19, Z+19	; 0x13
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
    3a32:	b8 01       	movw	r22, r16
    3a34:	71 70       	andi	r23, 0x01	; 1
    3a36:	e1 2c       	mov	r14, r1
    3a38:	22 e0       	ldi	r18, 0x02	; 2
    3a3a:	f2 2e       	mov	r15, r18
    3a3c:	e6 1a       	sub	r14, r22
    3a3e:	f7 0a       	sbc	r15, r23
    3a40:	6e 14       	cp	r6, r14
    3a42:	7f 04       	cpc	r7, r15
    3a44:	08 f4       	brcc	.+2      	; 0x3a48 <f_read+0x1ce>
    3a46:	73 01       	movw	r14, r6
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    3a48:	6e 5d       	subi	r22, 0xDE	; 222
    3a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    3a4c:	68 0d       	add	r22, r8
    3a4e:	79 1d       	adc	r23, r9
    3a50:	8d 81       	ldd	r24, Y+5	; 0x05
    3a52:	9e 81       	ldd	r25, Y+6	; 0x06
    3a54:	a7 01       	movw	r20, r14
    3a56:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <mem_cpy>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    3a5a:	2d 81       	ldd	r18, Y+5	; 0x05
    3a5c:	3e 81       	ldd	r19, Y+6	; 0x06
    3a5e:	2e 0d       	add	r18, r14
    3a60:	3f 1d       	adc	r19, r15
    3a62:	3e 83       	std	Y+6, r19	; 0x06
    3a64:	2d 83       	std	Y+5, r18	; 0x05
    3a66:	87 01       	movw	r16, r14
    3a68:	20 e0       	ldi	r18, 0x00	; 0
    3a6a:	30 e0       	ldi	r19, 0x00	; 0
    3a6c:	f4 01       	movw	r30, r8
    3a6e:	80 89       	ldd	r24, Z+16	; 0x10
    3a70:	91 89       	ldd	r25, Z+17	; 0x11
    3a72:	a2 89       	ldd	r26, Z+18	; 0x12
    3a74:	b3 89       	ldd	r27, Z+19	; 0x13
    3a76:	08 0f       	add	r16, r24
    3a78:	19 1f       	adc	r17, r25
    3a7a:	2a 1f       	adc	r18, r26
    3a7c:	3b 1f       	adc	r19, r27
    3a7e:	00 8b       	std	Z+16, r16	; 0x10
    3a80:	11 8b       	std	Z+17, r17	; 0x11
    3a82:	22 8b       	std	Z+18, r18	; 0x12
    3a84:	33 8b       	std	Z+19, r19	; 0x13
    3a86:	eb 81       	ldd	r30, Y+3	; 0x03
    3a88:	fc 81       	ldd	r31, Y+4	; 0x04
    3a8a:	80 81       	ld	r24, Z
    3a8c:	91 81       	ldd	r25, Z+1	; 0x01
    3a8e:	8e 0d       	add	r24, r14
    3a90:	9f 1d       	adc	r25, r15
    3a92:	91 83       	std	Z+1, r25	; 0x01
    3a94:	80 83       	st	Z, r24
    3a96:	6e 18       	sub	r6, r14
    3a98:	7f 08       	sbc	r7, r15
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    3a9a:	09 f0       	breq	.+2      	; 0x3a9e <f_read+0x224>
    3a9c:	60 cf       	rjmp	.-320    	; 0x395e <f_read+0xe4>
    3a9e:	49 84       	ldd	r4, Y+9	; 0x09
    3aa0:	5a 84       	ldd	r5, Y+10	; 0x0a
    3aa2:	22 cf       	rjmp	.-444    	; 0x38e8 <f_read+0x6e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
    3aa4:	01 15       	cp	r16, r1
    3aa6:	11 05       	cpc	r17, r1
    3aa8:	21 05       	cpc	r18, r1
    3aaa:	31 05       	cpc	r19, r1
    3aac:	09 f0       	breq	.+2      	; 0x3ab0 <f_read+0x236>
    3aae:	68 c0       	rjmp	.+208    	; 0x3b80 <f_read+0x306>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    3ab0:	86 81       	ldd	r24, Z+6	; 0x06
    3ab2:	97 81       	ldd	r25, Z+7	; 0x07
    3ab4:	a0 85       	ldd	r26, Z+8	; 0x08
    3ab6:	b1 85       	ldd	r27, Z+9	; 0x09
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    3ab8:	82 30       	cpi	r24, 0x02	; 2
    3aba:	91 05       	cpc	r25, r1
    3abc:	a1 05       	cpc	r26, r1
    3abe:	b1 05       	cpc	r27, r1
    3ac0:	08 f4       	brcc	.+2      	; 0x3ac4 <f_read+0x24a>
    3ac2:	8d cf       	rjmp	.-230    	; 0x39de <f_read+0x164>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    3ac4:	8f 3f       	cpi	r24, 0xFF	; 255
    3ac6:	ff ef       	ldi	r31, 0xFF	; 255
    3ac8:	9f 07       	cpc	r25, r31
    3aca:	ff ef       	ldi	r31, 0xFF	; 255
    3acc:	af 07       	cpc	r26, r31
    3ace:	ff ef       	ldi	r31, 0xFF	; 255
    3ad0:	bf 07       	cpc	r27, r31
    3ad2:	09 f4       	brne	.+2      	; 0x3ad6 <f_read+0x25c>
    3ad4:	4e c0       	rjmp	.+156    	; 0x3b72 <f_read+0x2f8>
				fp->clust = clst;				/* Update current cluster */
    3ad6:	f4 01       	movw	r30, r8
    3ad8:	84 8b       	std	Z+20, r24	; 0x14
    3ada:	95 8b       	std	Z+21, r25	; 0x15
    3adc:	a6 8b       	std	Z+22, r26	; 0x16
    3ade:	b7 8b       	std	Z+23, r27	; 0x17
    3ae0:	29 80       	ldd	r2, Y+1	; 0x01
    3ae2:	3a 80       	ldd	r3, Y+2	; 0x02
    3ae4:	62 cf       	rjmp	.-316    	; 0x39aa <f_read+0x130>
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
	return clst * fs->csize + fs->database;
    3ae6:	01 85       	ldd	r16, Z+9	; 0x09
    3ae8:	12 85       	ldd	r17, Z+10	; 0x0a
    3aea:	98 01       	movw	r18, r16
    3aec:	40 e0       	ldi	r20, 0x00	; 0
    3aee:	50 e0       	ldi	r21, 0x00	; 0
    3af0:	c7 01       	movw	r24, r14
    3af2:	b6 01       	movw	r22, r12
    3af4:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__mulsi3>
    3af8:	ab 01       	movw	r20, r22
    3afa:	bc 01       	movw	r22, r24
    3afc:	f1 01       	movw	r30, r2
    3afe:	87 a1       	lds	r24, 0x47
    3b00:	90 a5       	lds	r25, 0x60
    3b02:	a1 a5       	lds	r26, 0x61
    3b04:	b2 a5       	lds	r27, 0x62
    3b06:	48 0f       	add	r20, r24
    3b08:	59 1f       	adc	r21, r25
    3b0a:	6a 1f       	adc	r22, r26
    3b0c:	7b 1f       	adc	r23, r27
				if (clst < 2) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
    3b0e:	41 15       	cp	r20, r1
    3b10:	51 05       	cpc	r21, r1
    3b12:	61 05       	cpc	r22, r1
    3b14:	71 05       	cpc	r23, r1
    3b16:	09 f4       	brne	.+2      	; 0x3b1a <f_read+0x2a0>
    3b18:	62 cf       	rjmp	.-316    	; 0x39de <f_read+0x164>
			sect += csect;
    3b1a:	65 01       	movw	r12, r10
    3b1c:	ee 24       	eor	r14, r14
    3b1e:	ff 24       	eor	r15, r15
    3b20:	c4 0e       	add	r12, r20
    3b22:	d5 1e       	adc	r13, r21
    3b24:	e6 1e       	adc	r14, r22
    3b26:	f7 1e       	adc	r15, r23
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    3b28:	23 01       	movw	r4, r6
    3b2a:	45 2c       	mov	r4, r5
    3b2c:	55 24       	eor	r5, r5
    3b2e:	46 94       	lsr	r4
			if (cc) {							/* Read maximum contiguous sectors directly */
    3b30:	41 14       	cp	r4, r1
    3b32:	51 04       	cpc	r5, r1
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <f_read+0x2be>
    3b36:	5a cf       	rjmp	.-332    	; 0x39ec <f_read+0x172>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    3b38:	c5 01       	movw	r24, r10
    3b3a:	84 0d       	add	r24, r4
    3b3c:	95 1d       	adc	r25, r5
    3b3e:	08 17       	cp	r16, r24
    3b40:	19 07       	cpc	r17, r25
    3b42:	18 f4       	brcc	.+6      	; 0x3b4a <f_read+0x2d0>
					cc = fs->csize - csect;
    3b44:	28 01       	movw	r4, r16
    3b46:	4a 18       	sub	r4, r10
    3b48:	5b 08       	sbc	r5, r11
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    3b4a:	f1 01       	movw	r30, r2
    3b4c:	81 81       	ldd	r24, Z+1	; 0x01
    3b4e:	6d 81       	ldd	r22, Y+5	; 0x05
    3b50:	7e 81       	ldd	r23, Y+6	; 0x06
    3b52:	a7 01       	movw	r20, r14
    3b54:	96 01       	movw	r18, r12
    3b56:	82 01       	movw	r16, r4
    3b58:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <disk_read>
    3b5c:	00 97       	sbiw	r24, 0x00	; 0
    3b5e:	49 f4       	brne	.+18     	; 0x3b72 <f_read+0x2f8>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
    3b60:	f4 01       	movw	r30, r8
    3b62:	86 85       	ldd	r24, Z+14	; 0x0e
    3b64:	87 fd       	sbrc	r24, 7
    3b66:	2a c0       	rjmp	.+84     	; 0x3bbc <f_read+0x342>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    3b68:	72 01       	movw	r14, r4
    3b6a:	fe 2c       	mov	r15, r14
    3b6c:	ee 24       	eor	r14, r14
    3b6e:	ff 0c       	add	r15, r15
				continue;
    3b70:	74 cf       	rjmp	.-280    	; 0x3a5a <f_read+0x1e0>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= ~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    3b72:	81 e0       	ldi	r24, 0x01	; 1
    3b74:	f4 01       	movw	r30, r8
    3b76:	87 87       	std	Z+15, r24	; 0x0f
    3b78:	31 e0       	ldi	r19, 0x01	; 1
    3b7a:	43 2e       	mov	r4, r19
    3b7c:	51 2c       	mov	r5, r1
    3b7e:	b4 ce       	rjmp	.-664    	; 0x38e8 <f_read+0x6e>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    3b80:	44 89       	ldd	r20, Z+20	; 0x14
    3b82:	55 89       	ldd	r21, Z+21	; 0x15
    3b84:	66 89       	ldd	r22, Z+22	; 0x16
    3b86:	77 89       	ldd	r23, Z+23	; 0x17
    3b88:	80 81       	ld	r24, Z
    3b8a:	91 81       	ldd	r25, Z+1	; 0x01
    3b8c:	0e 94 1f 11 	call	0x223e	; 0x223e <get_fat.isra.8>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	91 cf       	rjmp	.-222    	; 0x3ab8 <f_read+0x23e>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    3b96:	f1 01       	movw	r30, r2
    3b98:	81 81       	ldd	r24, Z+1	; 0x01
    3b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b9c:	78 85       	ldd	r23, Y+8	; 0x08
    3b9e:	a9 01       	movw	r20, r18
    3ba0:	98 01       	movw	r18, r16
    3ba2:	01 e0       	ldi	r16, 0x01	; 1
    3ba4:	10 e0       	ldi	r17, 0x00	; 0
    3ba6:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <disk_write>
    3baa:	00 97       	sbiw	r24, 0x00	; 0
    3bac:	11 f7       	brne	.-60     	; 0x3b72 <f_read+0x2f8>
					fp->flag &= ~FA_DIRTY;
    3bae:	f4 01       	movw	r30, r8
    3bb0:	86 85       	ldd	r24, Z+14	; 0x0e
    3bb2:	8f 77       	andi	r24, 0x7F	; 127
    3bb4:	86 87       	std	Z+14, r24	; 0x0e
    3bb6:	29 80       	ldd	r2, Y+1	; 0x01
    3bb8:	3a 80       	ldd	r3, Y+2	; 0x02
    3bba:	25 cf       	rjmp	.-438    	; 0x3a06 <f_read+0x18c>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
    3bbc:	40 8d       	ldd	r20, Z+24	; 0x18
    3bbe:	51 8d       	ldd	r21, Z+25	; 0x19
    3bc0:	62 8d       	ldd	r22, Z+26	; 0x1a
    3bc2:	73 8d       	ldd	r23, Z+27	; 0x1b
    3bc4:	4c 19       	sub	r20, r12
    3bc6:	5d 09       	sbc	r21, r13
    3bc8:	6e 09       	sbc	r22, r14
    3bca:	7f 09       	sbc	r23, r15
    3bcc:	c2 01       	movw	r24, r4
    3bce:	a0 e0       	ldi	r26, 0x00	; 0
    3bd0:	b0 e0       	ldi	r27, 0x00	; 0
    3bd2:	48 17       	cp	r20, r24
    3bd4:	59 07       	cpc	r21, r25
    3bd6:	6a 07       	cpc	r22, r26
    3bd8:	7b 07       	cpc	r23, r27
    3bda:	30 f6       	brcc	.-116    	; 0x3b68 <f_read+0x2ee>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
    3bdc:	ca 01       	movw	r24, r20
    3bde:	98 2f       	mov	r25, r24
    3be0:	88 27       	eor	r24, r24
    3be2:	99 0f       	add	r25, r25
    3be4:	2d 81       	ldd	r18, Y+5	; 0x05
    3be6:	3e 81       	ldd	r19, Y+6	; 0x06
    3be8:	82 0f       	add	r24, r18
    3bea:	93 1f       	adc	r25, r19
    3bec:	6f 81       	ldd	r22, Y+7	; 0x07
    3bee:	78 85       	ldd	r23, Y+8	; 0x08
    3bf0:	40 e0       	ldi	r20, 0x00	; 0
    3bf2:	52 e0       	ldi	r21, 0x02	; 2
    3bf4:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <mem_cpy>
    3bf8:	b7 cf       	rjmp	.-146    	; 0x3b68 <f_read+0x2ee>

00003bfa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    3bfa:	2f 92       	push	r2
    3bfc:	3f 92       	push	r3
    3bfe:	4f 92       	push	r4
    3c00:	5f 92       	push	r5
    3c02:	6f 92       	push	r6
    3c04:	7f 92       	push	r7
    3c06:	8f 92       	push	r8
    3c08:	9f 92       	push	r9
    3c0a:	af 92       	push	r10
    3c0c:	bf 92       	push	r11
    3c0e:	cf 92       	push	r12
    3c10:	df 92       	push	r13
    3c12:	ef 92       	push	r14
    3c14:	ff 92       	push	r15
    3c16:	0f 93       	push	r16
    3c18:	1f 93       	push	r17
    3c1a:	cf 93       	push	r28
    3c1c:	df 93       	push	r29
    3c1e:	cd b7       	in	r28, 0x3d	; 61
    3c20:	de b7       	in	r29, 0x3e	; 62
    3c22:	2c 97       	sbiw	r28, 0x0c	; 12
    3c24:	0f b6       	in	r0, 0x3f	; 63
    3c26:	f8 94       	cli
    3c28:	de bf       	out	0x3e, r29	; 62
    3c2a:	0f be       	out	0x3f, r0	; 63
    3c2c:	cd bf       	out	0x3d, r28	; 61
    3c2e:	7c 01       	movw	r14, r24
    3c30:	06 2f       	mov	r16, r22
    3c32:	87 2e       	mov	r8, r23
    3c34:	3a 01       	movw	r6, r20
    3c36:	3c 83       	std	Y+4, r19	; 0x04
    3c38:	2b 83       	std	Y+3, r18	; 0x03
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
	uint8_t num = 0x00;
	

	*bw = 0;	/* Clear write byte counter */
    3c3a:	d9 01       	movw	r26, r18
    3c3c:	1d 92       	st	X+, r1
    3c3e:	1c 92       	st	X, r1
	res = validate(fp, &fs);
    3c40:	be 01       	movw	r22, r28
    3c42:	6f 5f       	subi	r22, 0xFF	; 255
    3c44:	7f 4f       	sbci	r23, 0xFF	; 255
    3c46:	0e 94 a5 09 	call	0x134a	; 0x134a <validate>
    3c4a:	1c 01       	movw	r2, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) {
    3c4c:	00 97       	sbiw	r24, 0x00	; 0
    3c4e:	61 f4       	brne	.+24     	; 0x3c68 <f_write+0x6e>
    3c50:	f7 01       	movw	r30, r14
    3c52:	27 84       	ldd	r2, Z+15	; 0x0f
    3c54:	33 24       	eor	r3, r3
    3c56:	21 14       	cp	r2, r1
    3c58:	31 04       	cpc	r3, r1
    3c5a:	31 f4       	brne	.+12     	; 0x3c68 <f_write+0x6e>
		LEAVE_FF(fs, res);
	}	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    3c5c:	26 85       	ldd	r18, Z+14	; 0x0e
    3c5e:	21 fd       	sbrc	r18, 1
    3c60:	1d c0       	rjmp	.+58     	; 0x3c9c <f_write+0xa2>
    3c62:	57 e0       	ldi	r21, 0x07	; 7
    3c64:	25 2e       	mov	r2, r21
    3c66:	31 2c       	mov	r3, r1
	}

	fp->flag |= FA_MODIFIED;						/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    3c68:	c1 01       	movw	r24, r2
    3c6a:	2c 96       	adiw	r28, 0x0c	; 12
    3c6c:	0f b6       	in	r0, 0x3f	; 63
    3c6e:	f8 94       	cli
    3c70:	de bf       	out	0x3e, r29	; 62
    3c72:	0f be       	out	0x3f, r0	; 63
    3c74:	cd bf       	out	0x3d, r28	; 61
    3c76:	df 91       	pop	r29
    3c78:	cf 91       	pop	r28
    3c7a:	1f 91       	pop	r17
    3c7c:	0f 91       	pop	r16
    3c7e:	ff 90       	pop	r15
    3c80:	ef 90       	pop	r14
    3c82:	df 90       	pop	r13
    3c84:	cf 90       	pop	r12
    3c86:	bf 90       	pop	r11
    3c88:	af 90       	pop	r10
    3c8a:	9f 90       	pop	r9
    3c8c:	8f 90       	pop	r8
    3c8e:	7f 90       	pop	r7
    3c90:	6f 90       	pop	r6
    3c92:	5f 90       	pop	r5
    3c94:	4f 90       	pop	r4
    3c96:	3f 90       	pop	r3
    3c98:	2f 90       	pop	r2
    3c9a:	08 95       	ret
		LEAVE_FF(fs, res);
	}	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    3c9c:	40 89       	ldd	r20, Z+16	; 0x10
    3c9e:	51 89       	ldd	r21, Z+17	; 0x11
    3ca0:	62 89       	ldd	r22, Z+18	; 0x12
    3ca2:	73 89       	ldd	r23, Z+19	; 0x13
    3ca4:	c3 01       	movw	r24, r6
    3ca6:	a0 e0       	ldi	r26, 0x00	; 0
    3ca8:	b0 e0       	ldi	r27, 0x00	; 0
    3caa:	84 0f       	add	r24, r20
    3cac:	95 1f       	adc	r25, r21
    3cae:	a6 1f       	adc	r26, r22
    3cb0:	b7 1f       	adc	r27, r23
    3cb2:	84 17       	cp	r24, r20
    3cb4:	95 07       	cpc	r25, r21
    3cb6:	a6 07       	cpc	r26, r22
    3cb8:	b7 07       	cpc	r27, r23
    3cba:	18 f4       	brcc	.+6      	; 0x3cc2 <f_write+0xc8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    3cbc:	3a 01       	movw	r6, r20
    3cbe:	60 94       	com	r6
    3cc0:	70 94       	com	r7
	}


	// how many times is this loop running? - answer: it doesn't make it all the way thru
	for ( ;  btw;							/* Repeat until all data written */
    3cc2:	61 14       	cp	r6, r1
    3cc4:	71 04       	cpc	r7, r1
    3cc6:	09 f4       	brne	.+2      	; 0x3cca <f_write+0xd0>
    3cc8:	00 c1       	rjmp	.+512    	; 0x3eca <f_write+0x2d0>
    3cca:	0d 83       	std	Y+5, r16	; 0x05
    3ccc:	8e 82       	std	Y+6, r8	; 0x06
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
    3cce:	97 01       	movw	r18, r14
    3cd0:	2e 5d       	subi	r18, 0xDE	; 222
    3cd2:	3f 4f       	sbci	r19, 0xFF	; 255
    3cd4:	3a 87       	std	Y+10, r19	; 0x0a
    3cd6:	29 87       	std	Y+9, r18	; 0x09
    3cd8:	3c 86       	std	Y+12, r3	; 0x0c
    3cda:	2b 86       	std	Y+11, r2	; 0x0b
    3cdc:	23 01       	movw	r4, r6

	// how many times is this loop running? - answer: it doesn't make it all the way thru
	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		
		if (fp->fptr % SS(fs) == 0) {
    3cde:	db 01       	movw	r26, r22
    3ce0:	ca 01       	movw	r24, r20
    3ce2:	91 70       	andi	r25, 0x01	; 1
    3ce4:	a0 70       	andi	r26, 0x00	; 0
    3ce6:	b0 70       	andi	r27, 0x00	; 0
    3ce8:	00 97       	sbiw	r24, 0x00	; 0
    3cea:	a1 05       	cpc	r26, r1
    3cec:	b1 05       	cpc	r27, r1
    3cee:	09 f0       	breq	.+2      	; 0x3cf2 <f_write+0xf8>
    3cf0:	91 c0       	rjmp	.+290    	; 0x3e14 <f_write+0x21a>
					/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    3cf2:	29 80       	ldd	r2, Y+1	; 0x01
    3cf4:	3a 80       	ldd	r3, Y+2	; 0x02
    3cf6:	db 01       	movw	r26, r22
    3cf8:	ca 01       	movw	r24, r20
    3cfa:	09 e0       	ldi	r16, 0x09	; 9
    3cfc:	b6 95       	lsr	r27
    3cfe:	a7 95       	ror	r26
    3d00:	97 95       	ror	r25
    3d02:	87 95       	ror	r24
    3d04:	0a 95       	dec	r16
    3d06:	d1 f7       	brne	.-12     	; 0x3cfc <f_write+0x102>
    3d08:	f1 01       	movw	r30, r2
    3d0a:	c1 84       	ldd	r12, Z+9	; 0x09
    3d0c:	d2 84       	ldd	r13, Z+10	; 0x0a
    3d0e:	08 94       	sec
    3d10:	c1 08       	sbc	r12, r1
    3d12:	d1 08       	sbc	r13, r1
    3d14:	c8 22       	and	r12, r24
    3d16:	d9 22       	and	r13, r25
			if (csect == 0) {				/* On the cluster boundary? */ 
    3d18:	c1 14       	cp	r12, r1
    3d1a:	d1 04       	cpc	r13, r1
    3d1c:	99 f5       	brne	.+102    	; 0x3d84 <f_write+0x18a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    3d1e:	41 15       	cp	r20, r1
    3d20:	51 05       	cpc	r21, r1
    3d22:	61 05       	cpc	r22, r1
    3d24:	71 05       	cpc	r23, r1
    3d26:	09 f0       	breq	.+2      	; 0x3d2a <f_write+0x130>
    3d28:	3c c1       	rjmp	.+632    	; 0x3fa2 <f_write+0x3a8>
					clst = fp->obj.sclust;	/* Follow from the origin */
    3d2a:	f7 01       	movw	r30, r14
    3d2c:	86 81       	ldd	r24, Z+6	; 0x06
    3d2e:	97 81       	ldd	r25, Z+7	; 0x07
    3d30:	a0 85       	ldd	r26, Z+8	; 0x08
    3d32:	b1 85       	ldd	r27, Z+9	; 0x09
					if (clst == 0) {		/* If no cluster is allocated, */
    3d34:	00 97       	sbiw	r24, 0x00	; 0
    3d36:	a1 05       	cpc	r26, r1
    3d38:	b1 05       	cpc	r27, r1
    3d3a:	09 f4       	brne	.+2      	; 0x3d3e <f_write+0x144>
    3d3c:	5f c1       	rjmp	.+702    	; 0x3ffc <f_write+0x402>
						
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    3d3e:	81 30       	cpi	r24, 0x01	; 1
    3d40:	91 05       	cpc	r25, r1
    3d42:	a1 05       	cpc	r26, r1
    3d44:	b1 05       	cpc	r27, r1
    3d46:	e9 f1       	breq	.+122    	; 0x3dc2 <f_write+0x1c8>
				if (clst == 0xFFFFFFFF) {
    3d48:	8f 3f       	cpi	r24, 0xFF	; 255
    3d4a:	ef ef       	ldi	r30, 0xFF	; 255
    3d4c:	9e 07       	cpc	r25, r30
    3d4e:	ef ef       	ldi	r30, 0xFF	; 255
    3d50:	ae 07       	cpc	r26, r30
    3d52:	ef ef       	ldi	r30, 0xFF	; 255
    3d54:	be 07       	cpc	r27, r30
    3d56:	09 f4       	brne	.+2      	; 0x3d5a <f_write+0x160>
    3d58:	68 c1       	rjmp	.+720    	; 0x402a <f_write+0x430>
					// get here
					ABORT(fs, FR_DISK_ERR);
				}
				fp->clust = clst;			/* Update current cluster */
    3d5a:	f7 01       	movw	r30, r14
    3d5c:	84 8b       	std	Z+20, r24	; 0x14
    3d5e:	95 8b       	std	Z+21, r25	; 0x15
    3d60:	a6 8b       	std	Z+22, r26	; 0x16
    3d62:	b7 8b       	std	Z+23, r27	; 0x17
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    3d64:	46 81       	ldd	r20, Z+6	; 0x06
    3d66:	57 81       	ldd	r21, Z+7	; 0x07
    3d68:	60 85       	ldd	r22, Z+8	; 0x08
    3d6a:	71 85       	ldd	r23, Z+9	; 0x09
    3d6c:	41 15       	cp	r20, r1
    3d6e:	51 05       	cpc	r21, r1
    3d70:	61 05       	cpc	r22, r1
    3d72:	71 05       	cpc	r23, r1
    3d74:	29 f4       	brne	.+10     	; 0x3d80 <f_write+0x186>
    3d76:	f7 01       	movw	r30, r14
    3d78:	86 83       	std	Z+6, r24	; 0x06
    3d7a:	97 83       	std	Z+7, r25	; 0x07
    3d7c:	a0 87       	std	Z+8, r26	; 0x08
    3d7e:	b1 87       	std	Z+9, r27	; 0x09
    3d80:	29 80       	ldd	r2, Y+1	; 0x01
    3d82:	3a 80       	ldd	r3, Y+2	; 0x02
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
    3d84:	d7 01       	movw	r26, r14
    3d86:	1e 96       	adiw	r26, 0x0e	; 14
    3d88:	8c 91       	ld	r24, X
    3d8a:	1e 97       	sbiw	r26, 0x0e	; 14
    3d8c:	87 fd       	sbrc	r24, 7
    3d8e:	1f c1       	rjmp	.+574    	; 0x3fce <f_write+0x3d4>
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3d90:	d7 01       	movw	r26, r14
    3d92:	54 96       	adiw	r26, 0x14	; 20
    3d94:	0d 91       	ld	r16, X+
    3d96:	1d 91       	ld	r17, X+
    3d98:	2d 91       	ld	r18, X+
    3d9a:	3c 91       	ld	r19, X
    3d9c:	57 97       	sbiw	r26, 0x17	; 23
    3d9e:	02 50       	subi	r16, 0x02	; 2
    3da0:	10 40       	sbci	r17, 0x00	; 0
    3da2:	20 40       	sbci	r18, 0x00	; 0
    3da4:	30 40       	sbci	r19, 0x00	; 0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    3da6:	f1 01       	movw	r30, r2
    3da8:	83 89       	ldd	r24, Z+19	; 0x13
    3daa:	94 89       	ldd	r25, Z+20	; 0x14
    3dac:	a5 89       	ldd	r26, Z+21	; 0x15
    3dae:	b6 89       	ldd	r27, Z+22	; 0x16
    3db0:	02 97       	sbiw	r24, 0x02	; 2
    3db2:	a1 09       	sbc	r26, r1
    3db4:	b1 09       	sbc	r27, r1
    3db6:	08 17       	cp	r16, r24
    3db8:	19 07       	cpc	r17, r25
    3dba:	2a 07       	cpc	r18, r26
    3dbc:	3b 07       	cpc	r19, r27
    3dbe:	08 f4       	brcc	.+2      	; 0x3dc2 <f_write+0x1c8>
    3dc0:	88 c0       	rjmp	.+272    	; 0x3ed2 <f_write+0x2d8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= ~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
    3dc2:	82 e0       	ldi	r24, 0x02	; 2
    3dc4:	d7 01       	movw	r26, r14
    3dc6:	1f 96       	adiw	r26, 0x0f	; 15
    3dc8:	8c 93       	st	X, r24
    3dca:	1f 97       	sbiw	r26, 0x0f	; 15
    3dcc:	12 e0       	ldi	r17, 0x02	; 2
    3dce:	21 2e       	mov	r2, r17
    3dd0:	31 2c       	mov	r3, r1
    3dd2:	4a cf       	rjmp	.-364    	; 0x3c68 <f_write+0x6e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
    3dd4:	f7 01       	movw	r30, r14
    3dd6:	80 8d       	ldd	r24, Z+24	; 0x18
    3dd8:	91 8d       	ldd	r25, Z+25	; 0x19
    3dda:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3ddc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3dde:	88 15       	cp	r24, r8
    3de0:	99 05       	cpc	r25, r9
    3de2:	aa 05       	cpc	r26, r10
    3de4:	bb 05       	cpc	r27, r11
    3de6:	09 f4       	brne	.+2      	; 0x3dea <f_write+0x1f0>
    3de8:	cf c0       	rjmp	.+414    	; 0x3f88 <f_write+0x38e>
				fp->fptr < fp->obj.objsize &&
    3dea:	40 89       	ldd	r20, Z+16	; 0x10
    3dec:	51 89       	ldd	r21, Z+17	; 0x11
    3dee:	62 89       	ldd	r22, Z+18	; 0x12
    3df0:	73 89       	ldd	r23, Z+19	; 0x13
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
    3df2:	82 85       	ldd	r24, Z+10	; 0x0a
    3df4:	93 85       	ldd	r25, Z+11	; 0x0b
    3df6:	a4 85       	ldd	r26, Z+12	; 0x0c
    3df8:	b5 85       	ldd	r27, Z+13	; 0x0d
    3dfa:	48 17       	cp	r20, r24
    3dfc:	59 07       	cpc	r21, r25
    3dfe:	6a 07       	cpc	r22, r26
    3e00:	7b 07       	cpc	r23, r27
    3e02:	08 f4       	brcc	.+2      	; 0x3e06 <f_write+0x20c>
    3e04:	04 c1       	rjmp	.+520    	; 0x400e <f_write+0x414>
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
    3e06:	d7 01       	movw	r26, r14
    3e08:	58 96       	adiw	r26, 0x18	; 24
    3e0a:	8d 92       	st	X+, r8
    3e0c:	9d 92       	st	X+, r9
    3e0e:	ad 92       	st	X+, r10
    3e10:	bc 92       	st	X, r11
    3e12:	5b 97       	sbiw	r26, 0x1b	; 27
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
    3e14:	ca 01       	movw	r24, r20
    3e16:	91 70       	andi	r25, 0x01	; 1
    3e18:	00 e0       	ldi	r16, 0x00	; 0
    3e1a:	12 e0       	ldi	r17, 0x02	; 2
    3e1c:	08 1b       	sub	r16, r24
    3e1e:	19 0b       	sbc	r17, r25
    3e20:	40 16       	cp	r4, r16
    3e22:	51 06       	cpc	r5, r17
    3e24:	08 f4       	brcc	.+2      	; 0x3e28 <f_write+0x22e>
    3e26:	82 01       	movw	r16, r4
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    3e28:	82 96       	adiw	r24, 0x22	; 34
    3e2a:	8e 0d       	add	r24, r14
    3e2c:	9f 1d       	adc	r25, r15
    3e2e:	6d 81       	ldd	r22, Y+5	; 0x05
    3e30:	7e 81       	ldd	r23, Y+6	; 0x06
    3e32:	a8 01       	movw	r20, r16
    3e34:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <mem_cpy>
		fp->flag |= FA_DIRTY;
    3e38:	f7 01       	movw	r30, r14
    3e3a:	86 85       	ldd	r24, Z+14	; 0x0e
    3e3c:	80 68       	ori	r24, 0x80	; 128
    3e3e:	86 87       	std	Z+14, r24	; 0x0e
	}


	// how many times is this loop running? - answer: it doesn't make it all the way thru
	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
    3e40:	2d 81       	ldd	r18, Y+5	; 0x05
    3e42:	3e 81       	ldd	r19, Y+6	; 0x06
    3e44:	20 0f       	add	r18, r16
    3e46:	31 1f       	adc	r19, r17
    3e48:	3e 83       	std	Y+6, r19	; 0x06
    3e4a:	2d 83       	std	Y+5, r18	; 0x05
    3e4c:	a8 01       	movw	r20, r16
    3e4e:	60 e0       	ldi	r22, 0x00	; 0
    3e50:	70 e0       	ldi	r23, 0x00	; 0
    3e52:	f7 01       	movw	r30, r14
    3e54:	80 89       	ldd	r24, Z+16	; 0x10
    3e56:	91 89       	ldd	r25, Z+17	; 0x11
    3e58:	a2 89       	ldd	r26, Z+18	; 0x12
    3e5a:	b3 89       	ldd	r27, Z+19	; 0x13
    3e5c:	48 0f       	add	r20, r24
    3e5e:	59 1f       	adc	r21, r25
    3e60:	6a 1f       	adc	r22, r26
    3e62:	7b 1f       	adc	r23, r27
    3e64:	40 8b       	std	Z+16, r20	; 0x10
    3e66:	51 8b       	std	Z+17, r21	; 0x11
    3e68:	62 8b       	std	Z+18, r22	; 0x12
    3e6a:	73 8b       	std	Z+19, r23	; 0x13
    3e6c:	82 85       	ldd	r24, Z+10	; 0x0a
    3e6e:	93 85       	ldd	r25, Z+11	; 0x0b
    3e70:	a4 85       	ldd	r26, Z+12	; 0x0c
    3e72:	b5 85       	ldd	r27, Z+13	; 0x0d
    3e74:	f4 2f       	mov	r31, r20
    3e76:	e5 2f       	mov	r30, r21
    3e78:	36 2f       	mov	r19, r22
    3e7a:	27 2f       	mov	r18, r23
    3e7c:	48 17       	cp	r20, r24
    3e7e:	59 07       	cpc	r21, r25
    3e80:	6a 07       	cpc	r22, r26
    3e82:	7b 07       	cpc	r23, r27
    3e84:	20 f4       	brcc	.+8      	; 0x3e8e <f_write+0x294>
    3e86:	f8 2f       	mov	r31, r24
    3e88:	e9 2f       	mov	r30, r25
    3e8a:	3a 2f       	mov	r19, r26
    3e8c:	2b 2f       	mov	r18, r27
    3e8e:	d7 01       	movw	r26, r14
    3e90:	1a 96       	adiw	r26, 0x0a	; 10
    3e92:	fc 93       	st	X, r31
    3e94:	1a 97       	sbiw	r26, 0x0a	; 10
    3e96:	1b 96       	adiw	r26, 0x0b	; 11
    3e98:	ec 93       	st	X, r30
    3e9a:	1b 97       	sbiw	r26, 0x0b	; 11
    3e9c:	1c 96       	adiw	r26, 0x0c	; 12
    3e9e:	3c 93       	st	X, r19
    3ea0:	1c 97       	sbiw	r26, 0x0c	; 12
    3ea2:	1d 96       	adiw	r26, 0x0d	; 13
    3ea4:	2c 93       	st	X, r18
    3ea6:	1d 97       	sbiw	r26, 0x0d	; 13
    3ea8:	eb 81       	ldd	r30, Y+3	; 0x03
    3eaa:	fc 81       	ldd	r31, Y+4	; 0x04
    3eac:	80 81       	ld	r24, Z
    3eae:	91 81       	ldd	r25, Z+1	; 0x01
    3eb0:	80 0f       	add	r24, r16
    3eb2:	91 1f       	adc	r25, r17
    3eb4:	91 83       	std	Z+1, r25	; 0x01
    3eb6:	80 83       	st	Z, r24
    3eb8:	40 1a       	sub	r4, r16
    3eba:	51 0a       	sbc	r5, r17
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}


	// how many times is this loop running? - answer: it doesn't make it all the way thru
	for ( ;  btw;							/* Repeat until all data written */
    3ebc:	09 f0       	breq	.+2      	; 0x3ec0 <f_write+0x2c6>
    3ebe:	0f cf       	rjmp	.-482    	; 0x3cde <f_write+0xe4>
    3ec0:	2b 84       	ldd	r2, Y+11	; 0x0b
    3ec2:	3c 84       	ldd	r3, Y+12	; 0x0c
    3ec4:	1e 96       	adiw	r26, 0x0e	; 14
    3ec6:	2c 91       	ld	r18, X
    3ec8:	1e 97       	sbiw	r26, 0x0e	; 14
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;						/* Set file change flag */
    3eca:	20 64       	ori	r18, 0x40	; 64
    3ecc:	f7 01       	movw	r30, r14
    3ece:	26 87       	std	Z+14, r18	; 0x0e

	LEAVE_FF(fs, FR_OK);
    3ed0:	cb ce       	rjmp	.-618    	; 0x3c68 <f_write+0x6e>
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
	return clst * fs->csize + fs->database;
    3ed2:	41 85       	ldd	r20, Z+9	; 0x09
    3ed4:	52 85       	ldd	r21, Z+10	; 0x0a
    3ed6:	58 87       	std	Y+8, r21	; 0x08
    3ed8:	4f 83       	std	Y+7, r20	; 0x07
    3eda:	ba 01       	movw	r22, r20
    3edc:	80 e0       	ldi	r24, 0x00	; 0
    3ede:	90 e0       	ldi	r25, 0x00	; 0
    3ee0:	a9 01       	movw	r20, r18
    3ee2:	98 01       	movw	r18, r16
    3ee4:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__mulsi3>
    3ee8:	ab 01       	movw	r20, r22
    3eea:	bc 01       	movw	r22, r24
    3eec:	f1 01       	movw	r30, r2
    3eee:	87 a1       	lds	r24, 0x47
    3ef0:	90 a5       	lds	r25, 0x60
    3ef2:	a1 a5       	lds	r26, 0x61
    3ef4:	b2 a5       	lds	r27, 0x62
    3ef6:	48 0f       	add	r20, r24
    3ef8:	59 1f       	adc	r21, r25
    3efa:	6a 1f       	adc	r22, r26
    3efc:	7b 1f       	adc	r23, r27
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= ~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
    3efe:	41 15       	cp	r20, r1
    3f00:	51 05       	cpc	r21, r1
    3f02:	61 05       	cpc	r22, r1
    3f04:	71 05       	cpc	r23, r1
    3f06:	09 f4       	brne	.+2      	; 0x3f0a <f_write+0x310>
    3f08:	5c cf       	rjmp	.-328    	; 0x3dc2 <f_write+0x1c8>
			sect += csect;
    3f0a:	46 01       	movw	r8, r12
    3f0c:	aa 24       	eor	r10, r10
    3f0e:	bb 24       	eor	r11, r11
    3f10:	84 0e       	add	r8, r20
    3f12:	95 1e       	adc	r9, r21
    3f14:	a6 1e       	adc	r10, r22
    3f16:	b7 1e       	adc	r11, r23
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    3f18:	32 01       	movw	r6, r4
    3f1a:	67 2c       	mov	r6, r7
    3f1c:	77 24       	eor	r7, r7
    3f1e:	66 94       	lsr	r6
			if (cc) {						/* Write maximum contiguous sectors directly */
    3f20:	61 14       	cp	r6, r1
    3f22:	71 04       	cpc	r7, r1
    3f24:	09 f4       	brne	.+2      	; 0x3f28 <f_write+0x32e>
    3f26:	56 cf       	rjmp	.-340    	; 0x3dd4 <f_write+0x1da>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    3f28:	c6 01       	movw	r24, r12
    3f2a:	86 0d       	add	r24, r6
    3f2c:	97 1d       	adc	r25, r7
    3f2e:	ef 81       	ldd	r30, Y+7	; 0x07
    3f30:	f8 85       	ldd	r31, Y+8	; 0x08
    3f32:	e8 17       	cp	r30, r24
    3f34:	f9 07       	cpc	r31, r25
    3f36:	18 f4       	brcc	.+6      	; 0x3f3e <f_write+0x344>
					cc = fs->csize - csect;
    3f38:	3f 01       	movw	r6, r30
    3f3a:	6c 18       	sub	r6, r12
    3f3c:	7d 08       	sbc	r7, r13
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    3f3e:	d1 01       	movw	r26, r2
    3f40:	11 96       	adiw	r26, 0x01	; 1
    3f42:	8c 91       	ld	r24, X
    3f44:	6d 81       	ldd	r22, Y+5	; 0x05
    3f46:	7e 81       	ldd	r23, Y+6	; 0x06
    3f48:	a5 01       	movw	r20, r10
    3f4a:	94 01       	movw	r18, r8
    3f4c:	83 01       	movw	r16, r6
    3f4e:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <disk_write>
    3f52:	00 97       	sbiw	r24, 0x00	; 0
    3f54:	f9 f4       	brne	.+62     	; 0x3f94 <f_write+0x39a>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    3f56:	d7 01       	movw	r26, r14
    3f58:	58 96       	adiw	r26, 0x18	; 24
    3f5a:	4d 91       	ld	r20, X+
    3f5c:	5d 91       	ld	r21, X+
    3f5e:	6d 91       	ld	r22, X+
    3f60:	7c 91       	ld	r23, X
    3f62:	5b 97       	sbiw	r26, 0x1b	; 27
    3f64:	48 19       	sub	r20, r8
    3f66:	59 09       	sbc	r21, r9
    3f68:	6a 09       	sbc	r22, r10
    3f6a:	7b 09       	sbc	r23, r11
    3f6c:	c3 01       	movw	r24, r6
    3f6e:	a0 e0       	ldi	r26, 0x00	; 0
    3f70:	b0 e0       	ldi	r27, 0x00	; 0
    3f72:	48 17       	cp	r20, r24
    3f74:	59 07       	cpc	r21, r25
    3f76:	6a 07       	cpc	r22, r26
    3f78:	7b 07       	cpc	r23, r27
    3f7a:	08 f4       	brcc	.+2      	; 0x3f7e <f_write+0x384>
    3f7c:	5f c0       	rjmp	.+190    	; 0x403c <f_write+0x442>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= ~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    3f7e:	83 01       	movw	r16, r6
    3f80:	10 2f       	mov	r17, r16
    3f82:	00 27       	eor	r16, r16
    3f84:	11 0f       	add	r17, r17
				continue;
    3f86:	5c cf       	rjmp	.-328    	; 0x3e40 <f_write+0x246>
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
    3f88:	f7 01       	movw	r30, r14
    3f8a:	40 89       	ldd	r20, Z+16	; 0x10
    3f8c:	51 89       	ldd	r21, Z+17	; 0x11
    3f8e:	62 89       	ldd	r22, Z+18	; 0x12
    3f90:	73 89       	ldd	r23, Z+19	; 0x13
    3f92:	39 cf       	rjmp	.-398    	; 0x3e06 <f_write+0x20c>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
					cc = fs->csize - csect;
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	f7 01       	movw	r30, r14
    3f98:	87 87       	std	Z+15, r24	; 0x0f
    3f9a:	a1 e0       	ldi	r26, 0x01	; 1
    3f9c:	2a 2e       	mov	r2, r26
    3f9e:	31 2c       	mov	r3, r1
    3fa0:	63 ce       	rjmp	.-826    	; 0x3c68 <f_write+0x6e>
					} else
#endif
					{
						// do we call create_chain from two different locations? - we don't call it here
						
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    3fa2:	d7 01       	movw	r26, r14
    3fa4:	54 96       	adiw	r26, 0x14	; 20
    3fa6:	4d 91       	ld	r20, X+
    3fa8:	5d 91       	ld	r21, X+
    3faa:	6d 91       	ld	r22, X+
    3fac:	7c 91       	ld	r23, X
    3fae:	57 97       	sbiw	r26, 0x17	; 23
    3fb0:	c7 01       	movw	r24, r14
    3fb2:	0e 94 00 13 	call	0x2600	; 0x2600 <create_chain>
    3fb6:	dc 01       	movw	r26, r24
    3fb8:	cb 01       	movw	r24, r22
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    3fba:	00 97       	sbiw	r24, 0x00	; 0
    3fbc:	a1 05       	cpc	r26, r1
    3fbe:	b1 05       	cpc	r27, r1
    3fc0:	09 f0       	breq	.+2      	; 0x3fc4 <f_write+0x3ca>
    3fc2:	bd ce       	rjmp	.-646    	; 0x3d3e <f_write+0x144>
    3fc4:	2b 84       	ldd	r2, Y+11	; 0x0b
    3fc6:	3c 84       	ldd	r3, Y+12	; 0x0c
    3fc8:	f7 01       	movw	r30, r14
    3fca:	26 85       	ldd	r18, Z+14	; 0x0e
    3fcc:	7e cf       	rjmp	.-260    	; 0x3eca <f_write+0x2d0>
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    3fce:	58 96       	adiw	r26, 0x18	; 24
    3fd0:	2d 91       	ld	r18, X+
    3fd2:	3d 91       	ld	r19, X+
    3fd4:	4d 91       	ld	r20, X+
    3fd6:	5c 91       	ld	r21, X
    3fd8:	5b 97       	sbiw	r26, 0x1b	; 27
    3fda:	f1 01       	movw	r30, r2
    3fdc:	81 81       	ldd	r24, Z+1	; 0x01
    3fde:	69 85       	ldd	r22, Y+9	; 0x09
    3fe0:	7a 85       	ldd	r23, Y+10	; 0x0a
    3fe2:	01 e0       	ldi	r16, 0x01	; 1
    3fe4:	10 e0       	ldi	r17, 0x00	; 0
    3fe6:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <disk_write>
    3fea:	00 97       	sbiw	r24, 0x00	; 0
    3fec:	f1 f4       	brne	.+60     	; 0x402a <f_write+0x430>
				fp->flag &= ~FA_DIRTY;
    3fee:	f7 01       	movw	r30, r14
    3ff0:	86 85       	ldd	r24, Z+14	; 0x0e
    3ff2:	8f 77       	andi	r24, 0x7F	; 127
    3ff4:	86 87       	std	Z+14, r24	; 0x0e
    3ff6:	29 80       	ldd	r2, Y+1	; 0x01
    3ff8:	3a 80       	ldd	r3, Y+2	; 0x02
    3ffa:	ca ce       	rjmp	.-620    	; 0x3d90 <f_write+0x196>
			if (csect == 0) {				/* On the cluster boundary? */ 
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						// we for sure get here
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    3ffc:	c7 01       	movw	r24, r14
    3ffe:	40 e0       	ldi	r20, 0x00	; 0
    4000:	50 e0       	ldi	r21, 0x00	; 0
    4002:	ba 01       	movw	r22, r20
    4004:	0e 94 00 13 	call	0x2600	; 0x2600 <create_chain>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	d6 cf       	rjmp	.-84     	; 0x3fba <f_write+0x3c0>
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
    400e:	d1 01       	movw	r26, r2
    4010:	11 96       	adiw	r26, 0x01	; 1
    4012:	8c 91       	ld	r24, X
    4014:	69 85       	ldd	r22, Y+9	; 0x09
    4016:	7a 85       	ldd	r23, Y+10	; 0x0a
    4018:	a5 01       	movw	r20, r10
    401a:	94 01       	movw	r18, r8
    401c:	01 e0       	ldi	r16, 0x01	; 1
    401e:	10 e0       	ldi	r17, 0x00	; 0
    4020:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <disk_read>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
    4024:	00 97       	sbiw	r24, 0x00	; 0
    4026:	09 f4       	brne	.+2      	; 0x402a <f_write+0x430>
    4028:	af cf       	rjmp	.-162    	; 0x3f88 <f_write+0x38e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
    402a:	81 e0       	ldi	r24, 0x01	; 1
    402c:	d7 01       	movw	r26, r14
    402e:	1f 96       	adiw	r26, 0x0f	; 15
    4030:	8c 93       	st	X, r24
    4032:	1f 97       	sbiw	r26, 0x0f	; 15
    4034:	61 e0       	ldi	r22, 0x01	; 1
    4036:	26 2e       	mov	r2, r22
    4038:	31 2c       	mov	r3, r1
    403a:	16 ce       	rjmp	.-980    	; 0x3c68 <f_write+0x6e>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
    403c:	ba 01       	movw	r22, r20
    403e:	76 2f       	mov	r23, r22
    4040:	66 27       	eor	r22, r22
    4042:	77 0f       	add	r23, r23
    4044:	ed 81       	ldd	r30, Y+5	; 0x05
    4046:	fe 81       	ldd	r31, Y+6	; 0x06
    4048:	6e 0f       	add	r22, r30
    404a:	7f 1f       	adc	r23, r31
    404c:	89 85       	ldd	r24, Y+9	; 0x09
    404e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4050:	40 e0       	ldi	r20, 0x00	; 0
    4052:	52 e0       	ldi	r21, 0x02	; 2
    4054:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <mem_cpy>
					fp->flag &= ~FA_DIRTY;
    4058:	d7 01       	movw	r26, r14
    405a:	1e 96       	adiw	r26, 0x0e	; 14
    405c:	8c 91       	ld	r24, X
    405e:	1e 97       	sbiw	r26, 0x0e	; 14
    4060:	8f 77       	andi	r24, 0x7F	; 127
    4062:	1e 96       	adiw	r26, 0x0e	; 14
    4064:	8c 93       	st	X, r24
    4066:	1e 97       	sbiw	r26, 0x0e	; 14
    4068:	8a cf       	rjmp	.-236    	; 0x3f7e <f_write+0x384>

0000406a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
    406a:	ef 92       	push	r14
    406c:	ff 92       	push	r15
    406e:	0f 93       	push	r16
    4070:	1f 93       	push	r17
    4072:	cf 93       	push	r28
    4074:	df 93       	push	r29
    4076:	00 d0       	rcall	.+0      	; 0x4078 <putc_bfd+0xe>
    4078:	cd b7       	in	r28, 0x3d	; 61
    407a:	de b7       	in	r29, 0x3e	; 62
    407c:	8c 01       	movw	r16, r24

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
    407e:	fc 01       	movw	r30, r24
    4080:	e2 80       	ldd	r14, Z+2	; 0x02
    4082:	f3 80       	ldd	r15, Z+3	; 0x03
	if (i < 0) return;
    4084:	f7 fc       	sbrc	r15, 7
    4086:	12 c0       	rjmp	.+36     	; 0x40ac <putc_bfd+0x42>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
    4088:	ee 0d       	add	r30, r14
    408a:	ff 1d       	adc	r31, r15
    408c:	66 83       	std	Z+6, r22	; 0x06
    408e:	08 94       	sec
    4090:	e1 1c       	adc	r14, r1
    4092:	f1 1c       	adc	r15, r1
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
    4094:	fd e3       	ldi	r31, 0x3D	; 61
    4096:	ef 16       	cp	r14, r31
    4098:	f1 04       	cpc	r15, r1
    409a:	8c f4       	brge	.+34     	; 0x40be <putc_bfd+0x54>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
    409c:	f8 01       	movw	r30, r16
    409e:	f3 82       	std	Z+3, r15	; 0x03
    40a0:	e2 82       	std	Z+2, r14	; 0x02
	pb->nchr++;
    40a2:	84 81       	ldd	r24, Z+4	; 0x04
    40a4:	95 81       	ldd	r25, Z+5	; 0x05
    40a6:	01 96       	adiw	r24, 0x01	; 1
    40a8:	95 83       	std	Z+5, r25	; 0x05
    40aa:	84 83       	std	Z+4, r24	; 0x04
}
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	df 91       	pop	r29
    40b2:	cf 91       	pop	r28
    40b4:	1f 91       	pop	r17
    40b6:	0f 91       	pop	r16
    40b8:	ff 90       	pop	r15
    40ba:	ef 90       	pop	r14
    40bc:	08 95       	ret
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
    40be:	bc 01       	movw	r22, r24
    40c0:	6a 5f       	subi	r22, 0xFA	; 250
    40c2:	7f 4f       	sbci	r23, 0xFF	; 255
    40c4:	fc 01       	movw	r30, r24
    40c6:	80 81       	ld	r24, Z
    40c8:	91 81       	ldd	r25, Z+1	; 0x01
    40ca:	a7 01       	movw	r20, r14
    40cc:	9e 01       	movw	r18, r28
    40ce:	2f 5f       	subi	r18, 0xFF	; 255
    40d0:	3f 4f       	sbci	r19, 0xFF	; 255
    40d2:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
    40d6:	89 81       	ldd	r24, Y+1	; 0x01
    40d8:	9a 81       	ldd	r25, Y+2	; 0x02
    40da:	e8 16       	cp	r14, r24
    40dc:	f9 06       	cpc	r15, r25
    40de:	21 f0       	breq	.+8      	; 0x40e8 <putc_bfd+0x7e>
    40e0:	ee 24       	eor	r14, r14
    40e2:	ea 94       	dec	r14
    40e4:	fe 2c       	mov	r15, r14
    40e6:	da cf       	rjmp	.-76     	; 0x409c <putc_bfd+0x32>
    40e8:	ee 24       	eor	r14, r14
    40ea:	ff 24       	eor	r15, r15
    40ec:	d7 cf       	rjmp	.-82     	; 0x409c <putc_bfd+0x32>

000040ee <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
    40ee:	0f 93       	push	r16
    40f0:	1f 93       	push	r17
    40f2:	cf 93       	push	r28
    40f4:	df 93       	push	r29
    40f6:	00 d0       	rcall	.+0      	; 0x40f8 <putc_flush+0xa>
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
    40fc:	8c 01       	movw	r16, r24
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
    40fe:	fc 01       	movw	r30, r24
    4100:	42 81       	ldd	r20, Z+2	; 0x02
    4102:	53 81       	ldd	r21, Z+3	; 0x03
    4104:	57 fd       	sbrc	r21, 7
    4106:	1d c0       	rjmp	.+58     	; 0x4142 <putc_flush+0x54>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
    4108:	bc 01       	movw	r22, r24
    410a:	6a 5f       	subi	r22, 0xFA	; 250
    410c:	7f 4f       	sbci	r23, 0xFF	; 255
    410e:	80 81       	ld	r24, Z
    4110:	91 81       	ldd	r25, Z+1	; 0x01
    4112:	9e 01       	movw	r18, r28
    4114:	2f 5f       	subi	r18, 0xFF	; 255
    4116:	3f 4f       	sbci	r19, 0xFF	; 255
    4118:	0e 94 fd 1d 	call	0x3bfa	; 0x3bfa <f_write>
    411c:	00 97       	sbiw	r24, 0x00	; 0
    411e:	89 f4       	brne	.+34     	; 0x4142 <putc_flush+0x54>
		&& (UINT)pb->idx == nw) return pb->nchr;
    4120:	f8 01       	movw	r30, r16
    4122:	22 81       	ldd	r18, Z+2	; 0x02
    4124:	33 81       	ldd	r19, Z+3	; 0x03
    4126:	89 81       	ldd	r24, Y+1	; 0x01
    4128:	9a 81       	ldd	r25, Y+2	; 0x02
    412a:	28 17       	cp	r18, r24
    412c:	39 07       	cpc	r19, r25
    412e:	49 f4       	brne	.+18     	; 0x4142 <putc_flush+0x54>
    4130:	84 81       	ldd	r24, Z+4	; 0x04
    4132:	95 81       	ldd	r25, Z+5	; 0x05
	return EOF;
}
    4134:	0f 90       	pop	r0
    4136:	0f 90       	pop	r0
    4138:	df 91       	pop	r29
    413a:	cf 91       	pop	r28
    413c:	1f 91       	pop	r17
    413e:	0f 91       	pop	r16
    4140:	08 95       	ret
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
		&& (UINT)pb->idx == nw) return pb->nchr;
	return EOF;
    4142:	8f ef       	ldi	r24, 0xFF	; 255
    4144:	9f ef       	ldi	r25, 0xFF	; 255
}
    4146:	0f 90       	pop	r0
    4148:	0f 90       	pop	r0
    414a:	df 91       	pop	r29
    414c:	cf 91       	pop	r28
    414e:	1f 91       	pop	r17
    4150:	0f 91       	pop	r16
    4152:	08 95       	ret

00004154 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    4154:	ef 92       	push	r14
    4156:	ff 92       	push	r15
    4158:	0f 93       	push	r16
    415a:	1f 93       	push	r17
    415c:	cf 93       	push	r28
    415e:	df 93       	push	r29
    4160:	00 d0       	rcall	.+0      	; 0x4162 <f_sync+0xe>
    4162:	cd b7       	in	r28, 0x3d	; 61
    4164:	de b7       	in	r29, 0x3e	; 62
    4166:	7c 01       	movw	r14, r24
	DWORD tm;
	BYTE *dir;
	DEF_NAMBUF


	res = validate(fp, &fs);	/* Check validity of the object */
    4168:	be 01       	movw	r22, r28
    416a:	6f 5f       	subi	r22, 0xFF	; 255
    416c:	7f 4f       	sbci	r23, 0xFF	; 255
    416e:	0e 94 a5 09 	call	0x134a	; 0x134a <validate>
	if (res == FR_OK) {
    4172:	00 97       	sbiw	r24, 0x00	; 0
    4174:	09 f0       	breq	.+2      	; 0x4178 <f_sync+0x24>
    4176:	55 c0       	rjmp	.+170    	; 0x4222 <f_sync+0xce>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    4178:	d7 01       	movw	r26, r14
    417a:	1e 96       	adiw	r26, 0x0e	; 14
    417c:	2c 91       	ld	r18, X
    417e:	1e 97       	sbiw	r26, 0x0e	; 14
    4180:	26 ff       	sbrs	r18, 6
    4182:	4f c0       	rjmp	.+158    	; 0x4222 <f_sync+0xce>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
    4184:	27 fd       	sbrc	r18, 7
    4186:	56 c0       	rjmp	.+172    	; 0x4234 <f_sync+0xe0>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    4188:	d7 01       	movw	r26, r14
    418a:	5c 96       	adiw	r26, 0x1c	; 28
    418c:	4d 91       	ld	r20, X+
    418e:	5d 91       	ld	r21, X+
    4190:	6d 91       	ld	r22, X+
    4192:	7c 91       	ld	r23, X
    4194:	5f 97       	sbiw	r26, 0x1f	; 31
    4196:	89 81       	ldd	r24, Y+1	; 0x01
    4198:	9a 81       	ldd	r25, Y+2	; 0x02
    419a:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
				if (res == FR_OK) {
    419e:	00 97       	sbiw	r24, 0x00	; 0
    41a0:	09 f0       	breq	.+2      	; 0x41a4 <f_sync+0x50>
    41a2:	3f c0       	rjmp	.+126    	; 0x4222 <f_sync+0xce>
					dir = fp->dir_ptr;
    41a4:	d7 01       	movw	r26, r14
    41a6:	90 96       	adiw	r26, 0x20	; 32
    41a8:	ed 91       	ld	r30, X+
    41aa:	fc 91       	ld	r31, X
    41ac:	91 97       	sbiw	r26, 0x21	; 33
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
    41ae:	83 85       	ldd	r24, Z+11	; 0x0b
    41b0:	80 62       	ori	r24, 0x20	; 32
    41b2:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
    41b4:	8d 91       	ld	r24, X+
    41b6:	9c 91       	ld	r25, X
    41b8:	11 97       	sbiw	r26, 0x01	; 1
    41ba:	16 96       	adiw	r26, 0x06	; 6
    41bc:	4d 91       	ld	r20, X+
    41be:	5d 91       	ld	r21, X+
    41c0:	6d 91       	ld	r22, X+
    41c2:	7c 91       	ld	r23, X
    41c4:	19 97       	sbiw	r26, 0x09	; 9

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    41c6:	42 8f       	std	Z+26, r20	; 0x1a
	*ptr++ = (BYTE)val;
    41c8:	53 8f       	std	Z+27, r21	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    41ca:	dc 01       	movw	r26, r24
    41cc:	8c 91       	ld	r24, X
    41ce:	83 30       	cpi	r24, 0x03	; 3
    41d0:	09 f4       	brne	.+2      	; 0x41d4 <f_sync+0x80>
    41d2:	4a c0       	rjmp	.+148    	; 0x4268 <f_sync+0x114>
				res = move_window(fs, fp->dir_sect);
				if (res == FR_OK) {
					dir = fp->dir_ptr;
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    41d4:	d7 01       	movw	r26, r14
    41d6:	1a 96       	adiw	r26, 0x0a	; 10
    41d8:	3c 91       	ld	r19, X
    41da:	1a 97       	sbiw	r26, 0x0a	; 10
    41dc:	1b 96       	adiw	r26, 0x0b	; 11
    41de:	2c 91       	ld	r18, X
    41e0:	1b 97       	sbiw	r26, 0x0b	; 11
    41e2:	1c 96       	adiw	r26, 0x0c	; 12
    41e4:	9c 91       	ld	r25, X
    41e6:	1c 97       	sbiw	r26, 0x0c	; 12
    41e8:	1d 96       	adiw	r26, 0x0d	; 13
    41ea:	8c 91       	ld	r24, X
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    41ec:	34 8f       	std	Z+28, r19	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    41ee:	25 8f       	std	Z+29, r18	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    41f0:	96 8f       	std	Z+30, r25	; 0x1e
	*ptr++ = (BYTE)val;
    41f2:	87 8f       	std	Z+31, r24	; 0x1f
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    41f4:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    41f6:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    41f8:	81 e2       	ldi	r24, 0x21	; 33
    41fa:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    41fc:	88 e4       	ldi	r24, 0x48	; 72
    41fe:	81 8f       	std	Z+25, r24	; 0x19

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    4200:	12 8a       	std	Z+18, r1	; 0x12
	*ptr++ = (BYTE)val;
    4202:	13 8a       	std	Z+19, r1	; 0x13
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
    4204:	89 81       	ldd	r24, Y+1	; 0x01
    4206:	9a 81       	ldd	r25, Y+2	; 0x02
    4208:	21 e0       	ldi	r18, 0x01	; 1
    420a:	fc 01       	movw	r30, r24
    420c:	23 83       	std	Z+3, r18	; 0x03
					res = sync_fs(fs);					/* Restore it to the directory */
    420e:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <sync_fs>
					fp->flag &= ~FA_MODIFIED;
    4212:	d7 01       	movw	r26, r14
    4214:	1e 96       	adiw	r26, 0x0e	; 14
    4216:	2c 91       	ld	r18, X
    4218:	1e 97       	sbiw	r26, 0x0e	; 14
    421a:	2f 7b       	andi	r18, 0xBF	; 191
    421c:	1e 96       	adiw	r26, 0x0e	; 14
    421e:	2c 93       	st	X, r18
    4220:	1e 97       	sbiw	r26, 0x0e	; 14
			}
		}
	}

	LEAVE_FF(fs, res);
}
    4222:	0f 90       	pop	r0
    4224:	0f 90       	pop	r0
    4226:	df 91       	pop	r29
    4228:	cf 91       	pop	r28
    422a:	1f 91       	pop	r17
    422c:	0f 91       	pop	r16
    422e:	ff 90       	pop	r15
    4230:	ef 90       	pop	r14
    4232:	08 95       	ret
	res = validate(fp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    4234:	e9 81       	ldd	r30, Y+1	; 0x01
    4236:	fa 81       	ldd	r31, Y+2	; 0x02
    4238:	b7 01       	movw	r22, r14
    423a:	6e 5d       	subi	r22, 0xDE	; 222
    423c:	7f 4f       	sbci	r23, 0xFF	; 255
    423e:	58 96       	adiw	r26, 0x18	; 24
    4240:	2d 91       	ld	r18, X+
    4242:	3d 91       	ld	r19, X+
    4244:	4d 91       	ld	r20, X+
    4246:	5c 91       	ld	r21, X
    4248:	5b 97       	sbiw	r26, 0x1b	; 27
    424a:	81 81       	ldd	r24, Z+1	; 0x01
    424c:	01 e0       	ldi	r16, 0x01	; 1
    424e:	10 e0       	ldi	r17, 0x00	; 0
    4250:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <disk_write>
    4254:	00 97       	sbiw	r24, 0x00	; 0
    4256:	29 f4       	brne	.+10     	; 0x4262 <f_sync+0x10e>
				fp->flag &= ~FA_DIRTY;
    4258:	f7 01       	movw	r30, r14
    425a:	86 85       	ldd	r24, Z+14	; 0x0e
    425c:	8f 77       	andi	r24, 0x7F	; 127
    425e:	86 87       	std	Z+14, r24	; 0x0e
    4260:	93 cf       	rjmp	.-218    	; 0x4188 <f_sync+0x34>
	res = validate(fp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	dd cf       	rjmp	.-70     	; 0x4222 <f_sync+0xce>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    4268:	ab 01       	movw	r20, r22
    426a:	66 27       	eor	r22, r22
    426c:	77 27       	eor	r23, r23

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    426e:	44 8b       	std	Z+20, r20	; 0x14
	*ptr++ = (BYTE)val;
    4270:	55 8b       	std	Z+21, r21	; 0x15
    4272:	b0 cf       	rjmp	.-160    	; 0x41d4 <f_sync+0x80>

00004274 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    4274:	0f 93       	push	r16
    4276:	1f 93       	push	r17
    4278:	cf 93       	push	r28
    427a:	df 93       	push	r29
    427c:	00 d0       	rcall	.+0      	; 0x427e <f_close+0xa>
    427e:	cd b7       	in	r28, 0x3d	; 61
    4280:	de b7       	in	r29, 0x3e	; 62
    4282:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    4284:	0e 94 aa 20 	call	0x4154	; 0x4154 <f_sync>
	if (res == FR_OK)
    4288:	00 97       	sbiw	r24, 0x00	; 0
    428a:	39 f0       	breq	.+14     	; 0x429a <f_close+0x26>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    428c:	0f 90       	pop	r0
    428e:	0f 90       	pop	r0
    4290:	df 91       	pop	r29
    4292:	cf 91       	pop	r28
    4294:	1f 91       	pop	r17
    4296:	0f 91       	pop	r16
    4298:	08 95       	ret
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(fp, &fs);	/* Lock volume */
    429a:	c8 01       	movw	r24, r16
    429c:	be 01       	movw	r22, r28
    429e:	6f 5f       	subi	r22, 0xFF	; 255
    42a0:	7f 4f       	sbci	r23, 0xFF	; 255
    42a2:	0e 94 a5 09 	call	0x134a	; 0x134a <validate>
		if (res == FR_OK) {
    42a6:	00 97       	sbiw	r24, 0x00	; 0
    42a8:	89 f7       	brne	.-30     	; 0x428c <f_close+0x18>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
    42aa:	f8 01       	movw	r30, r16
    42ac:	11 82       	std	Z+1, r1	; 0x01
    42ae:	10 82       	st	Z, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    42b0:	0f 90       	pop	r0
    42b2:	0f 90       	pop	r0
    42b4:	df 91       	pop	r29
    42b6:	cf 91       	pop	r28
    42b8:	1f 91       	pop	r17
    42ba:	0f 91       	pop	r16
    42bc:	08 95       	ret

000042be <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
    42be:	4f 92       	push	r4
    42c0:	5f 92       	push	r5
    42c2:	6f 92       	push	r6
    42c4:	7f 92       	push	r7
    42c6:	8f 92       	push	r8
    42c8:	9f 92       	push	r9
    42ca:	af 92       	push	r10
    42cc:	bf 92       	push	r11
    42ce:	cf 92       	push	r12
    42d0:	df 92       	push	r13
    42d2:	ef 92       	push	r14
    42d4:	ff 92       	push	r15
    42d6:	0f 93       	push	r16
    42d8:	1f 93       	push	r17
    42da:	cf 93       	push	r28
    42dc:	df 93       	push	r29
    42de:	cd b7       	in	r28, 0x3d	; 61
    42e0:	de b7       	in	r29, 0x3e	; 62
    42e2:	2a 97       	sbiw	r28, 0x0a	; 10
    42e4:	0f b6       	in	r0, 0x3f	; 63
    42e6:	f8 94       	cli
    42e8:	de bf       	out	0x3e, r29	; 62
    42ea:	0f be       	out	0x3f, r0	; 63
    42ec:	cd bf       	out	0x3d, r28	; 61
    42ee:	5c 01       	movw	r10, r24
    42f0:	2a 01       	movw	r4, r20
    42f2:	3b 01       	movw	r6, r22
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(fp, &fs);		/* Check validity of the object */
    42f4:	be 01       	movw	r22, r28
    42f6:	6f 5f       	subi	r22, 0xFF	; 255
    42f8:	7f 4f       	sbci	r23, 0xFF	; 255
    42fa:	0e 94 a5 09 	call	0x134a	; 0x134a <validate>
    42fe:	4c 01       	movw	r8, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    4300:	00 97       	sbiw	r24, 0x00	; 0
    4302:	09 f0       	breq	.+2      	; 0x4306 <f_lseek+0x48>
    4304:	2c c1       	rjmp	.+600    	; 0x455e <f_lseek+0x2a0>
    4306:	d5 01       	movw	r26, r10
    4308:	1f 96       	adiw	r26, 0x0f	; 15
    430a:	8c 90       	ld	r8, X
    430c:	1f 97       	sbiw	r26, 0x0f	; 15
    430e:	99 24       	eor	r9, r9
    4310:	81 14       	cp	r8, r1
    4312:	91 04       	cpc	r9, r1
    4314:	09 f0       	breq	.+2      	; 0x4318 <f_lseek+0x5a>
    4316:	23 c1       	rjmp	.+582    	; 0x455e <f_lseek+0x2a0>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
    4318:	1a 96       	adiw	r26, 0x0a	; 10
    431a:	8d 91       	ld	r24, X+
    431c:	9d 91       	ld	r25, X+
    431e:	0d 90       	ld	r0, X+
    4320:	bc 91       	ld	r27, X
    4322:	a0 2d       	mov	r26, r0
    4324:	84 15       	cp	r24, r4
    4326:	95 05       	cpc	r25, r5
    4328:	a6 05       	cpc	r26, r6
    432a:	b7 05       	cpc	r27, r7
    432c:	30 f4       	brcc	.+12     	; 0x433a <f_lseek+0x7c>
    432e:	f5 01       	movw	r30, r10
    4330:	26 85       	ldd	r18, Z+14	; 0x0e
    4332:	21 fd       	sbrc	r18, 1
    4334:	02 c0       	rjmp	.+4      	; 0x433a <f_lseek+0x7c>
    4336:	2c 01       	movw	r4, r24
    4338:	3d 01       	movw	r6, r26
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
    433a:	f5 01       	movw	r30, r10
    433c:	80 89       	ldd	r24, Z+16	; 0x10
    433e:	91 89       	ldd	r25, Z+17	; 0x11
    4340:	a2 89       	ldd	r26, Z+18	; 0x12
    4342:	b3 89       	ldd	r27, Z+19	; 0x13
		fp->fptr = nsect = 0;
    4344:	10 8a       	std	Z+16, r1	; 0x10
    4346:	11 8a       	std	Z+17, r1	; 0x11
    4348:	12 8a       	std	Z+18, r1	; 0x12
    434a:	13 8a       	std	Z+19, r1	; 0x13
		if (ofs) {
    434c:	41 14       	cp	r4, r1
    434e:	51 04       	cpc	r5, r1
    4350:	61 04       	cpc	r6, r1
    4352:	71 04       	cpc	r7, r1
    4354:	09 f4       	brne	.+2      	; 0x4358 <f_lseek+0x9a>
    4356:	03 c1       	rjmp	.+518    	; 0x455e <f_lseek+0x2a0>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
    4358:	e9 81       	ldd	r30, Y+1	; 0x01
    435a:	fa 81       	ldd	r31, Y+2	; 0x02
    435c:	c1 84       	ldd	r12, Z+9	; 0x09
    435e:	d2 84       	ldd	r13, Z+10	; 0x0a
    4360:	ee 24       	eor	r14, r14
    4362:	ff 24       	eor	r15, r15
    4364:	09 e0       	ldi	r16, 0x09	; 9
    4366:	cc 0c       	add	r12, r12
    4368:	dd 1c       	adc	r13, r13
    436a:	ee 1c       	adc	r14, r14
    436c:	ff 1c       	adc	r15, r15
    436e:	0a 95       	dec	r16
    4370:	d1 f7       	brne	.-12     	; 0x4366 <f_lseek+0xa8>
			if (ifptr > 0 &&
    4372:	00 97       	sbiw	r24, 0x00	; 0
    4374:	a1 05       	cpc	r26, r1
    4376:	b1 05       	cpc	r27, r1
    4378:	51 f1       	breq	.+84     	; 0x43ce <f_lseek+0x110>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    437a:	9c 01       	movw	r18, r24
    437c:	ad 01       	movw	r20, r26
    437e:	21 50       	subi	r18, 0x01	; 1
    4380:	30 40       	sbci	r19, 0x00	; 0
    4382:	40 40       	sbci	r20, 0x00	; 0
    4384:	50 40       	sbci	r21, 0x00	; 0
    4386:	2f 83       	std	Y+7, r18	; 0x07
    4388:	38 87       	std	Y+8, r19	; 0x08
    438a:	49 87       	std	Y+9, r20	; 0x09
    438c:	5a 87       	std	Y+10, r21	; 0x0a
    438e:	c3 01       	movw	r24, r6
    4390:	b2 01       	movw	r22, r4
    4392:	61 50       	subi	r22, 0x01	; 1
    4394:	70 40       	sbci	r23, 0x00	; 0
    4396:	80 40       	sbci	r24, 0x00	; 0
    4398:	90 40       	sbci	r25, 0x00	; 0
    439a:	a7 01       	movw	r20, r14
    439c:	96 01       	movw	r18, r12
    439e:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <__udivmodsi4>
    43a2:	2b 83       	std	Y+3, r18	; 0x03
    43a4:	3c 83       	std	Y+4, r19	; 0x04
    43a6:	4d 83       	std	Y+5, r20	; 0x05
    43a8:	5e 83       	std	Y+6, r21	; 0x06
    43aa:	6f 81       	ldd	r22, Y+7	; 0x07
    43ac:	78 85       	ldd	r23, Y+8	; 0x08
    43ae:	89 85       	ldd	r24, Y+9	; 0x09
    43b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43b2:	a7 01       	movw	r20, r14
    43b4:	96 01       	movw	r18, r12
    43b6:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <__udivmodsi4>
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    43ba:	8b 81       	ldd	r24, Y+3	; 0x03
    43bc:	9c 81       	ldd	r25, Y+4	; 0x04
    43be:	ad 81       	ldd	r26, Y+5	; 0x05
    43c0:	be 81       	ldd	r27, Y+6	; 0x06
    43c2:	82 17       	cp	r24, r18
    43c4:	93 07       	cpc	r25, r19
    43c6:	a4 07       	cpc	r26, r20
    43c8:	b5 07       	cpc	r27, r21
    43ca:	08 f0       	brcs	.+2      	; 0x43ce <f_lseek+0x110>
    43cc:	e7 c0       	rjmp	.+462    	; 0x459c <f_lseek+0x2de>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(QWORD)(bcs - 1);	/* start from the current cluster */
				ofs -= fp->fptr;
				clst = fp->clust;
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
    43ce:	f5 01       	movw	r30, r10
    43d0:	46 81       	ldd	r20, Z+6	; 0x06
    43d2:	57 81       	ldd	r21, Z+7	; 0x07
    43d4:	60 85       	ldd	r22, Z+8	; 0x08
    43d6:	71 85       	ldd	r23, Z+9	; 0x09
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    43d8:	41 15       	cp	r20, r1
    43da:	51 05       	cpc	r21, r1
    43dc:	61 05       	cpc	r22, r1
    43de:	71 05       	cpc	r23, r1
    43e0:	09 f4       	brne	.+2      	; 0x43e4 <f_lseek+0x126>
    43e2:	01 c1       	rjmp	.+514    	; 0x45e6 <f_lseek+0x328>
    43e4:	1b 82       	std	Y+3, r1	; 0x03
    43e6:	1c 82       	std	Y+4, r1	; 0x04
    43e8:	1d 82       	std	Y+5, r1	; 0x05
    43ea:	1e 82       	std	Y+6, r1	; 0x06
					if (clst == 1) ABORT(fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					fp->obj.sclust = clst;
				}
#endif
				fp->clust = clst;
    43ec:	f5 01       	movw	r30, r10
    43ee:	44 8b       	std	Z+20, r20	; 0x14
    43f0:	55 8b       	std	Z+21, r21	; 0x15
    43f2:	66 8b       	std	Z+22, r22	; 0x16
    43f4:	77 8b       	std	Z+23, r23	; 0x17
			}
			if (clst != 0) {
    43f6:	41 15       	cp	r20, r1
    43f8:	51 05       	cpc	r21, r1
    43fa:	61 05       	cpc	r22, r1
    43fc:	71 05       	cpc	r23, r1
    43fe:	09 f4       	brne	.+2      	; 0x4402 <f_lseek+0x144>
    4400:	5c c0       	rjmp	.+184    	; 0x44ba <f_lseek+0x1fc>
				while (ofs > bcs) {						/* Cluster following loop */
    4402:	c4 14       	cp	r12, r4
    4404:	d5 04       	cpc	r13, r5
    4406:	e6 04       	cpc	r14, r6
    4408:	f7 04       	cpc	r15, r7
    440a:	08 f0       	brcs	.+2      	; 0x440e <f_lseek+0x150>
    440c:	4a c1       	rjmp	.+660    	; 0x46a2 <f_lseek+0x3e4>
    440e:	8b 81       	ldd	r24, Y+3	; 0x03
    4410:	9c 81       	ldd	r25, Y+4	; 0x04
    4412:	ad 81       	ldd	r26, Y+5	; 0x05
    4414:	be 81       	ldd	r27, Y+6	; 0x06
    4416:	3d c0       	rjmp	.+122    	; 0x4492 <f_lseek+0x1d4>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
    4418:	c5 01       	movw	r24, r10
    441a:	0e 94 00 13 	call	0x2600	; 0x2600 <create_chain>
    441e:	ab 01       	movw	r20, r22
    4420:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* Clip file size in case of disk full */
    4422:	41 15       	cp	r20, r1
    4424:	51 05       	cpc	r21, r1
    4426:	61 05       	cpc	r22, r1
    4428:	71 05       	cpc	r23, r1
    442a:	09 f4       	brne	.+2      	; 0x442e <f_lseek+0x170>
    442c:	9f c1       	rjmp	.+830    	; 0x476c <f_lseek+0x4ae>
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    442e:	4f 3f       	cpi	r20, 0xFF	; 255
    4430:	ff ef       	ldi	r31, 0xFF	; 255
    4432:	5f 07       	cpc	r21, r31
    4434:	ff ef       	ldi	r31, 0xFF	; 255
    4436:	6f 07       	cpc	r22, r31
    4438:	ff ef       	ldi	r31, 0xFF	; 255
    443a:	7f 07       	cpc	r23, r31
    443c:	09 f4       	brne	.+2      	; 0x4440 <f_lseek+0x182>
    443e:	8d c1       	rjmp	.+794    	; 0x475a <f_lseek+0x49c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    4440:	42 30       	cpi	r20, 0x02	; 2
    4442:	51 05       	cpc	r21, r1
    4444:	61 05       	cpc	r22, r1
    4446:	71 05       	cpc	r23, r1
    4448:	08 f4       	brcc	.+2      	; 0x444c <f_lseek+0x18e>
    444a:	10 c1       	rjmp	.+544    	; 0x466c <f_lseek+0x3ae>
    444c:	e9 81       	ldd	r30, Y+1	; 0x01
    444e:	fa 81       	ldd	r31, Y+2	; 0x02
    4450:	83 89       	ldd	r24, Z+19	; 0x13
    4452:	94 89       	ldd	r25, Z+20	; 0x14
    4454:	a5 89       	ldd	r26, Z+21	; 0x15
    4456:	b6 89       	ldd	r27, Z+22	; 0x16
    4458:	48 17       	cp	r20, r24
    445a:	59 07       	cpc	r21, r25
    445c:	6a 07       	cpc	r22, r26
    445e:	7b 07       	cpc	r23, r27
    4460:	08 f0       	brcs	.+2      	; 0x4464 <f_lseek+0x1a6>
    4462:	04 c1       	rjmp	.+520    	; 0x466c <f_lseek+0x3ae>
#if _FS_MINIMIZE <= 2
/*-----------------------------------------------------------------------*/
/* Seek File R/W Pointer                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_lseek (
    4464:	4c 18       	sub	r4, r12
    4466:	5d 08       	sbc	r5, r13
    4468:	6e 08       	sbc	r6, r14
    446a:	7f 08       	sbc	r7, r15
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
    446c:	d5 01       	movw	r26, r10
    446e:	54 96       	adiw	r26, 0x14	; 20
    4470:	4d 93       	st	X+, r20
    4472:	5d 93       	st	X+, r21
    4474:	6d 93       	st	X+, r22
    4476:	7c 93       	st	X, r23
    4478:	57 97       	sbiw	r26, 0x17	; 23
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    447a:	c4 14       	cp	r12, r4
    447c:	d5 04       	cpc	r13, r5
    447e:	e6 04       	cpc	r14, r6
    4480:	f7 04       	cpc	r15, r7
    4482:	08 f0       	brcs	.+2      	; 0x4486 <f_lseek+0x1c8>
    4484:	03 c1       	rjmp	.+518    	; 0x468c <f_lseek+0x3ce>
    4486:	50 96       	adiw	r26, 0x10	; 16
    4488:	8d 91       	ld	r24, X+
    448a:	9d 91       	ld	r25, X+
    448c:	0d 90       	ld	r0, X+
    448e:	bc 91       	ld	r27, X
    4490:	a0 2d       	mov	r26, r0
					ofs -= bcs; fp->fptr += bcs;
    4492:	8c 0d       	add	r24, r12
    4494:	9d 1d       	adc	r25, r13
    4496:	ae 1d       	adc	r26, r14
    4498:	bf 1d       	adc	r27, r15
    449a:	f5 01       	movw	r30, r10
    449c:	80 8b       	std	Z+16, r24	; 0x10
    449e:	91 8b       	std	Z+17, r25	; 0x11
    44a0:	a2 8b       	std	Z+18, r26	; 0x12
    44a2:	b3 8b       	std	Z+19, r27	; 0x13
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    44a4:	86 85       	ldd	r24, Z+14	; 0x0e
    44a6:	81 fd       	sbrc	r24, 1
    44a8:	b7 cf       	rjmp	.-146    	; 0x4418 <f_lseek+0x15a>
							ofs = 0; break;
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
    44aa:	f5 01       	movw	r30, r10
    44ac:	80 81       	ld	r24, Z
    44ae:	91 81       	ldd	r25, Z+1	; 0x01
    44b0:	0e 94 1f 11 	call	0x223e	; 0x223e <get_fat.isra.8>
    44b4:	ab 01       	movw	r20, r22
    44b6:	bc 01       	movw	r22, r24
    44b8:	ba cf       	rjmp	.-140    	; 0x442e <f_lseek+0x170>
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    44ba:	44 24       	eor	r4, r4
    44bc:	55 24       	eor	r5, r5
    44be:	32 01       	movw	r6, r4
					if (!nsect) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
    44c0:	f5 01       	movw	r30, r10
    44c2:	82 85       	ldd	r24, Z+10	; 0x0a
    44c4:	93 85       	ldd	r25, Z+11	; 0x0b
    44c6:	a4 85       	ldd	r26, Z+12	; 0x0c
    44c8:	b5 85       	ldd	r27, Z+13	; 0x0d
    44ca:	2b 81       	ldd	r18, Y+3	; 0x03
    44cc:	3c 81       	ldd	r19, Y+4	; 0x04
    44ce:	4d 81       	ldd	r20, Y+5	; 0x05
    44d0:	5e 81       	ldd	r21, Y+6	; 0x06
    44d2:	82 17       	cp	r24, r18
    44d4:	93 07       	cpc	r25, r19
    44d6:	a4 07       	cpc	r26, r20
    44d8:	b5 07       	cpc	r27, r21
    44da:	08 f0       	brcs	.+2      	; 0x44de <f_lseek+0x220>
    44dc:	56 c1       	rjmp	.+684    	; 0x478a <f_lseek+0x4cc>
			fp->obj.objsize = fp->fptr;
    44de:	8b 81       	ldd	r24, Y+3	; 0x03
    44e0:	9c 81       	ldd	r25, Y+4	; 0x04
    44e2:	ad 81       	ldd	r26, Y+5	; 0x05
    44e4:	be 81       	ldd	r27, Y+6	; 0x06
    44e6:	f5 01       	movw	r30, r10
    44e8:	82 87       	std	Z+10, r24	; 0x0a
    44ea:	93 87       	std	Z+11, r25	; 0x0b
    44ec:	a4 87       	std	Z+12, r26	; 0x0c
    44ee:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA_MODIFIED;
    44f0:	86 85       	ldd	r24, Z+14	; 0x0e
    44f2:	80 64       	ori	r24, 0x40	; 64
    44f4:	86 87       	std	Z+14, r24	; 0x0e
    44f6:	8b 81       	ldd	r24, Y+3	; 0x03
    44f8:	9c 81       	ldd	r25, Y+4	; 0x04
    44fa:	ad 81       	ldd	r26, Y+5	; 0x05
    44fc:	be 81       	ldd	r27, Y+6	; 0x06
    44fe:	91 70       	andi	r25, 0x01	; 1
    4500:	a0 70       	andi	r26, 0x00	; 0
    4502:	b0 70       	andi	r27, 0x00	; 0
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
    4504:	00 97       	sbiw	r24, 0x00	; 0
    4506:	a1 05       	cpc	r26, r1
    4508:	b1 05       	cpc	r27, r1
    450a:	49 f1       	breq	.+82     	; 0x455e <f_lseek+0x2a0>
    450c:	d5 01       	movw	r26, r10
    450e:	58 96       	adiw	r26, 0x18	; 24
    4510:	0d 91       	ld	r16, X+
    4512:	1d 91       	ld	r17, X+
    4514:	2d 91       	ld	r18, X+
    4516:	3c 91       	ld	r19, X
    4518:	5b 97       	sbiw	r26, 0x1b	; 27
    451a:	40 16       	cp	r4, r16
    451c:	51 06       	cpc	r5, r17
    451e:	62 06       	cpc	r6, r18
    4520:	73 06       	cpc	r7, r19
    4522:	e9 f0       	breq	.+58     	; 0x455e <f_lseek+0x2a0>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
    4524:	1e 96       	adiw	r26, 0x0e	; 14
    4526:	8c 91       	ld	r24, X
    4528:	1e 97       	sbiw	r26, 0x0e	; 14
    452a:	87 fd       	sbrc	r24, 7
    452c:	84 c0       	rjmp	.+264    	; 0x4636 <f_lseek+0x378>
    452e:	52 e2       	ldi	r21, 0x22	; 34
    4530:	c5 2e       	mov	r12, r21
    4532:	d1 2c       	mov	r13, r1
    4534:	ca 0c       	add	r12, r10
    4536:	db 1c       	adc	r13, r11
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= ~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    4538:	e9 81       	ldd	r30, Y+1	; 0x01
    453a:	fa 81       	ldd	r31, Y+2	; 0x02
    453c:	81 81       	ldd	r24, Z+1	; 0x01
    453e:	b6 01       	movw	r22, r12
    4540:	a3 01       	movw	r20, r6
    4542:	92 01       	movw	r18, r4
    4544:	01 e0       	ldi	r16, 0x01	; 1
    4546:	10 e0       	ldi	r17, 0x00	; 0
    4548:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <disk_read>
    454c:	00 97       	sbiw	r24, 0x00	; 0
    454e:	f9 f4       	brne	.+62     	; 0x458e <f_lseek+0x2d0>
#endif
			fp->sect = nsect;
    4550:	d5 01       	movw	r26, r10
    4552:	58 96       	adiw	r26, 0x18	; 24
    4554:	4d 92       	st	X+, r4
    4556:	5d 92       	st	X+, r5
    4558:	6d 92       	st	X+, r6
    455a:	7c 92       	st	X, r7
    455c:	5b 97       	sbiw	r26, 0x1b	; 27
		}
	}

	LEAVE_FF(fs, res);
}
    455e:	c4 01       	movw	r24, r8
    4560:	2a 96       	adiw	r28, 0x0a	; 10
    4562:	0f b6       	in	r0, 0x3f	; 63
    4564:	f8 94       	cli
    4566:	de bf       	out	0x3e, r29	; 62
    4568:	0f be       	out	0x3f, r0	; 63
    456a:	cd bf       	out	0x3d, r28	; 61
    456c:	df 91       	pop	r29
    456e:	cf 91       	pop	r28
    4570:	1f 91       	pop	r17
    4572:	0f 91       	pop	r16
    4574:	ff 90       	pop	r15
    4576:	ef 90       	pop	r14
    4578:	df 90       	pop	r13
    457a:	cf 90       	pop	r12
    457c:	bf 90       	pop	r11
    457e:	af 90       	pop	r10
    4580:	9f 90       	pop	r9
    4582:	8f 90       	pop	r8
    4584:	7f 90       	pop	r7
    4586:	6f 90       	pop	r6
    4588:	5f 90       	pop	r5
    458a:	4f 90       	pop	r4
    458c:	08 95       	ret
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= ~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	f5 01       	movw	r30, r10
    4592:	87 87       	std	Z+15, r24	; 0x0f
    4594:	91 e0       	ldi	r25, 0x01	; 1
    4596:	89 2e       	mov	r8, r25
    4598:	91 2c       	mov	r9, r1
    459a:	e1 cf       	rjmp	.-62     	; 0x455e <f_lseek+0x2a0>
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(QWORD)(bcs - 1);	/* start from the current cluster */
    459c:	22 27       	eor	r18, r18
    459e:	33 27       	eor	r19, r19
    45a0:	a9 01       	movw	r20, r18
    45a2:	2c 19       	sub	r18, r12
    45a4:	3d 09       	sbc	r19, r13
    45a6:	4e 09       	sbc	r20, r14
    45a8:	5f 09       	sbc	r21, r15
    45aa:	8f 81       	ldd	r24, Y+7	; 0x07
    45ac:	98 85       	ldd	r25, Y+8	; 0x08
    45ae:	a9 85       	ldd	r26, Y+9	; 0x09
    45b0:	ba 85       	ldd	r27, Y+10	; 0x0a
    45b2:	28 23       	and	r18, r24
    45b4:	39 23       	and	r19, r25
    45b6:	4a 23       	and	r20, r26
    45b8:	5b 23       	and	r21, r27
    45ba:	2b 83       	std	Y+3, r18	; 0x03
    45bc:	3c 83       	std	Y+4, r19	; 0x04
    45be:	4d 83       	std	Y+5, r20	; 0x05
    45c0:	5e 83       	std	Y+6, r21	; 0x06
    45c2:	d5 01       	movw	r26, r10
    45c4:	50 96       	adiw	r26, 0x10	; 16
    45c6:	2d 93       	st	X+, r18
    45c8:	3d 93       	st	X+, r19
    45ca:	4d 93       	st	X+, r20
    45cc:	5c 93       	st	X, r21
    45ce:	53 97       	sbiw	r26, 0x13	; 19
				ofs -= fp->fptr;
    45d0:	42 1a       	sub	r4, r18
    45d2:	53 0a       	sbc	r5, r19
    45d4:	64 0a       	sbc	r6, r20
    45d6:	75 0a       	sbc	r7, r21
				clst = fp->clust;
    45d8:	54 96       	adiw	r26, 0x14	; 20
    45da:	4d 91       	ld	r20, X+
    45dc:	5d 91       	ld	r21, X+
    45de:	6d 91       	ld	r22, X+
    45e0:	7c 91       	ld	r23, X
    45e2:	57 97       	sbiw	r26, 0x17	; 23
    45e4:	08 cf       	rjmp	.-496    	; 0x43f6 <f_lseek+0x138>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
					clst = create_chain(&fp->obj, 0);
    45e6:	c5 01       	movw	r24, r10
    45e8:	40 e0       	ldi	r20, 0x00	; 0
    45ea:	50 e0       	ldi	r21, 0x00	; 0
    45ec:	ba 01       	movw	r22, r20
    45ee:	0e 94 00 13 	call	0x2600	; 0x2600 <create_chain>
    45f2:	ab 01       	movw	r20, r22
    45f4:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fs, FR_INT_ERR);
    45f6:	41 30       	cpi	r20, 0x01	; 1
    45f8:	51 05       	cpc	r21, r1
    45fa:	61 05       	cpc	r22, r1
    45fc:	71 05       	cpc	r23, r1
    45fe:	e9 f1       	breq	.+122    	; 0x467a <f_lseek+0x3bc>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    4600:	4f 3f       	cpi	r20, 0xFF	; 255
    4602:	bf ef       	ldi	r27, 0xFF	; 255
    4604:	5b 07       	cpc	r21, r27
    4606:	bf ef       	ldi	r27, 0xFF	; 255
    4608:	6b 07       	cpc	r22, r27
    460a:	bf ef       	ldi	r27, 0xFF	; 255
    460c:	7b 07       	cpc	r23, r27
    460e:	09 f4       	brne	.+2      	; 0x4612 <f_lseek+0x354>
    4610:	be cf       	rjmp	.-132    	; 0x458e <f_lseek+0x2d0>
					fp->obj.sclust = clst;
    4612:	d5 01       	movw	r26, r10
    4614:	16 96       	adiw	r26, 0x06	; 6
    4616:	4d 93       	st	X+, r20
    4618:	5d 93       	st	X+, r21
    461a:	6d 93       	st	X+, r22
    461c:	7c 93       	st	X, r23
    461e:	19 97       	sbiw	r26, 0x09	; 9
    4620:	50 96       	adiw	r26, 0x10	; 16
    4622:	8d 91       	ld	r24, X+
    4624:	9d 91       	ld	r25, X+
    4626:	0d 90       	ld	r0, X+
    4628:	bc 91       	ld	r27, X
    462a:	a0 2d       	mov	r26, r0
    462c:	8b 83       	std	Y+3, r24	; 0x03
    462e:	9c 83       	std	Y+4, r25	; 0x04
    4630:	ad 83       	std	Y+5, r26	; 0x05
    4632:	be 83       	std	Y+6, r27	; 0x06
    4634:	db ce       	rjmp	.-586    	; 0x43ec <f_lseek+0x12e>
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    4636:	e9 81       	ldd	r30, Y+1	; 0x01
    4638:	fa 81       	ldd	r31, Y+2	; 0x02
    463a:	42 e2       	ldi	r20, 0x22	; 34
    463c:	c4 2e       	mov	r12, r20
    463e:	d1 2c       	mov	r13, r1
    4640:	ca 0c       	add	r12, r10
    4642:	db 1c       	adc	r13, r11
    4644:	81 81       	ldd	r24, Z+1	; 0x01
    4646:	b6 01       	movw	r22, r12
    4648:	a9 01       	movw	r20, r18
    464a:	98 01       	movw	r18, r16
    464c:	01 e0       	ldi	r16, 0x01	; 1
    464e:	10 e0       	ldi	r17, 0x00	; 0
    4650:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <disk_write>
    4654:	00 97       	sbiw	r24, 0x00	; 0
    4656:	09 f0       	breq	.+2      	; 0x465a <f_lseek+0x39c>
    4658:	9a cf       	rjmp	.-204    	; 0x458e <f_lseek+0x2d0>
				fp->flag &= ~FA_DIRTY;
    465a:	d5 01       	movw	r26, r10
    465c:	1e 96       	adiw	r26, 0x0e	; 14
    465e:	8c 91       	ld	r24, X
    4660:	1e 97       	sbiw	r26, 0x0e	; 14
    4662:	8f 77       	andi	r24, 0x7F	; 127
    4664:	1e 96       	adiw	r26, 0x0e	; 14
    4666:	8c 93       	st	X, r24
    4668:	1e 97       	sbiw	r26, 0x0e	; 14
    466a:	66 cf       	rjmp	.-308    	; 0x4538 <f_lseek+0x27a>
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    466c:	82 e0       	ldi	r24, 0x02	; 2
    466e:	f5 01       	movw	r30, r10
    4670:	87 87       	std	Z+15, r24	; 0x0f
    4672:	b2 e0       	ldi	r27, 0x02	; 2
    4674:	8b 2e       	mov	r8, r27
    4676:	91 2c       	mov	r9, r1
    4678:	72 cf       	rjmp	.-284    	; 0x455e <f_lseek+0x2a0>
					fp->clust = clst;
				}
				fp->fptr += ofs;
				if (ofs % SS(fs)) {
					nsect = clust2sect(fs, clst);	/* Current sector */
					if (!nsect) ABORT(fs, FR_INT_ERR);
    467a:	82 e0       	ldi	r24, 0x02	; 2
    467c:	d5 01       	movw	r26, r10
    467e:	1f 96       	adiw	r26, 0x0f	; 15
    4680:	8c 93       	st	X, r24
    4682:	1f 97       	sbiw	r26, 0x0f	; 15
    4684:	f2 e0       	ldi	r31, 0x02	; 2
    4686:	8f 2e       	mov	r8, r31
    4688:	91 2c       	mov	r9, r1
    468a:	69 cf       	rjmp	.-302    	; 0x455e <f_lseek+0x2a0>
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    468c:	d5 01       	movw	r26, r10
    468e:	50 96       	adiw	r26, 0x10	; 16
    4690:	8d 91       	ld	r24, X+
    4692:	9d 91       	ld	r25, X+
    4694:	0d 90       	ld	r0, X+
    4696:	bc 91       	ld	r27, X
    4698:	a0 2d       	mov	r26, r0
    469a:	8b 83       	std	Y+3, r24	; 0x03
    469c:	9c 83       	std	Y+4, r25	; 0x04
    469e:	ad 83       	std	Y+5, r26	; 0x05
    46a0:	be 83       	std	Y+6, r27	; 0x06
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
				}
				fp->fptr += ofs;
    46a2:	8b 81       	ldd	r24, Y+3	; 0x03
    46a4:	9c 81       	ldd	r25, Y+4	; 0x04
    46a6:	ad 81       	ldd	r26, Y+5	; 0x05
    46a8:	be 81       	ldd	r27, Y+6	; 0x06
    46aa:	84 0d       	add	r24, r4
    46ac:	95 1d       	adc	r25, r5
    46ae:	a6 1d       	adc	r26, r6
    46b0:	b7 1d       	adc	r27, r7
    46b2:	8b 83       	std	Y+3, r24	; 0x03
    46b4:	9c 83       	std	Y+4, r25	; 0x04
    46b6:	ad 83       	std	Y+5, r26	; 0x05
    46b8:	be 83       	std	Y+6, r27	; 0x06
    46ba:	f5 01       	movw	r30, r10
    46bc:	80 8b       	std	Z+16, r24	; 0x10
    46be:	91 8b       	std	Z+17, r25	; 0x11
    46c0:	a2 8b       	std	Z+18, r26	; 0x12
    46c2:	b3 8b       	std	Z+19, r27	; 0x13
				if (ofs % SS(fs)) {
    46c4:	d3 01       	movw	r26, r6
    46c6:	c2 01       	movw	r24, r4
    46c8:	91 70       	andi	r25, 0x01	; 1
    46ca:	a0 70       	andi	r26, 0x00	; 0
    46cc:	b0 70       	andi	r27, 0x00	; 0
    46ce:	00 97       	sbiw	r24, 0x00	; 0
    46d0:	a1 05       	cpc	r26, r1
    46d2:	b1 05       	cpc	r27, r1
    46d4:	09 f4       	brne	.+2      	; 0x46d8 <f_lseek+0x41a>
    46d6:	f1 ce       	rjmp	.-542    	; 0x44ba <f_lseek+0x1fc>
					nsect = clust2sect(fs, clst);	/* Current sector */
    46d8:	09 81       	ldd	r16, Y+1	; 0x01
    46da:	1a 81       	ldd	r17, Y+2	; 0x02
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    46dc:	ae ef       	ldi	r26, 0xFE	; 254
    46de:	ca 2e       	mov	r12, r26
    46e0:	af ef       	ldi	r26, 0xFF	; 255
    46e2:	da 2e       	mov	r13, r26
    46e4:	af ef       	ldi	r26, 0xFF	; 255
    46e6:	ea 2e       	mov	r14, r26
    46e8:	af ef       	ldi	r26, 0xFF	; 255
    46ea:	fa 2e       	mov	r15, r26
    46ec:	c4 0e       	add	r12, r20
    46ee:	d5 1e       	adc	r13, r21
    46f0:	e6 1e       	adc	r14, r22
    46f2:	f7 1e       	adc	r15, r23
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    46f4:	f8 01       	movw	r30, r16
    46f6:	83 89       	ldd	r24, Z+19	; 0x13
    46f8:	94 89       	ldd	r25, Z+20	; 0x14
    46fa:	a5 89       	ldd	r26, Z+21	; 0x15
    46fc:	b6 89       	ldd	r27, Z+22	; 0x16
    46fe:	02 97       	sbiw	r24, 0x02	; 2
    4700:	a1 09       	sbc	r26, r1
    4702:	b1 09       	sbc	r27, r1
    4704:	c8 16       	cp	r12, r24
    4706:	d9 06       	cpc	r13, r25
    4708:	ea 06       	cpc	r14, r26
    470a:	fb 06       	cpc	r15, r27
    470c:	08 f0       	brcs	.+2      	; 0x4710 <f_lseek+0x452>
    470e:	b5 cf       	rjmp	.-150    	; 0x467a <f_lseek+0x3bc>
	return clst * fs->csize + fs->database;
    4710:	21 85       	ldd	r18, Z+9	; 0x09
    4712:	32 85       	ldd	r19, Z+10	; 0x0a
    4714:	40 e0       	ldi	r20, 0x00	; 0
    4716:	50 e0       	ldi	r21, 0x00	; 0
    4718:	c7 01       	movw	r24, r14
    471a:	b6 01       	movw	r22, r12
    471c:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__mulsi3>
    4720:	ab 01       	movw	r20, r22
    4722:	bc 01       	movw	r22, r24
    4724:	f8 01       	movw	r30, r16
    4726:	87 a1       	lds	r24, 0x47
    4728:	90 a5       	lds	r25, 0x60
    472a:	a1 a5       	lds	r26, 0x61
    472c:	b2 a5       	lds	r27, 0x62
    472e:	48 0f       	add	r20, r24
    4730:	59 1f       	adc	r21, r25
    4732:	6a 1f       	adc	r22, r26
    4734:	7b 1f       	adc	r23, r27
					fp->clust = clst;
				}
				fp->fptr += ofs;
				if (ofs % SS(fs)) {
					nsect = clust2sect(fs, clst);	/* Current sector */
					if (!nsect) ABORT(fs, FR_INT_ERR);
    4736:	41 15       	cp	r20, r1
    4738:	51 05       	cpc	r21, r1
    473a:	61 05       	cpc	r22, r1
    473c:	71 05       	cpc	r23, r1
    473e:	09 f4       	brne	.+2      	; 0x4742 <f_lseek+0x484>
    4740:	9c cf       	rjmp	.-200    	; 0x467a <f_lseek+0x3bc>
					nsect += (DWORD)(ofs / SS(fs));
    4742:	e9 e0       	ldi	r30, 0x09	; 9
    4744:	76 94       	lsr	r7
    4746:	67 94       	ror	r6
    4748:	57 94       	ror	r5
    474a:	47 94       	ror	r4
    474c:	ea 95       	dec	r30
    474e:	d1 f7       	brne	.-12     	; 0x4744 <f_lseek+0x486>
    4750:	44 0e       	add	r4, r20
    4752:	55 1e       	adc	r5, r21
    4754:	66 1e       	adc	r6, r22
    4756:	77 1e       	adc	r7, r23
    4758:	b3 ce       	rjmp	.-666    	; 0x44c0 <f_lseek+0x202>
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	d5 01       	movw	r26, r10
    475e:	1f 96       	adiw	r26, 0x0f	; 15
    4760:	8c 93       	st	X, r24
    4762:	1f 97       	sbiw	r26, 0x0f	; 15
    4764:	11 e0       	ldi	r17, 0x01	; 1
    4766:	81 2e       	mov	r8, r17
    4768:	91 2c       	mov	r9, r1
    476a:	f9 ce       	rjmp	.-526    	; 0x455e <f_lseek+0x2a0>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
						if (clst == 0) {				/* Clip file size in case of disk full */
    476c:	d5 01       	movw	r26, r10
    476e:	50 96       	adiw	r26, 0x10	; 16
    4770:	2d 91       	ld	r18, X+
    4772:	3d 91       	ld	r19, X+
    4774:	4d 91       	ld	r20, X+
    4776:	5c 91       	ld	r21, X
    4778:	53 97       	sbiw	r26, 0x13	; 19
    477a:	2b 83       	std	Y+3, r18	; 0x03
    477c:	3c 83       	std	Y+4, r19	; 0x04
    477e:	4d 83       	std	Y+5, r20	; 0x05
    4780:	5e 83       	std	Y+6, r21	; 0x06
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    4782:	44 24       	eor	r4, r4
    4784:	55 24       	eor	r5, r5
    4786:	32 01       	movw	r6, r4
    4788:	9b ce       	rjmp	.-714    	; 0x44c0 <f_lseek+0x202>
					if (!nsect) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
    478a:	da 01       	movw	r26, r20
    478c:	c9 01       	movw	r24, r18
    478e:	91 70       	andi	r25, 0x01	; 1
    4790:	a0 70       	andi	r26, 0x00	; 0
    4792:	b0 70       	andi	r27, 0x00	; 0
    4794:	b7 ce       	rjmp	.-658    	; 0x4504 <f_lseek+0x246>

00004796 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    4796:	0f 93       	push	r16
    4798:	1f 93       	push	r17
    479a:	cf 93       	push	r28
    479c:	df 93       	push	r29
    479e:	00 d0       	rcall	.+0      	; 0x47a0 <f_opendir+0xa>
    47a0:	00 d0       	rcall	.+0      	; 0x47a2 <f_opendir+0xc>
    47a2:	cd b7       	in	r28, 0x3d	; 61
    47a4:	de b7       	in	r29, 0x3e	; 62
    47a6:	8c 01       	movw	r16, r24
    47a8:	7c 83       	std	Y+4, r23	; 0x04
    47aa:	6b 83       	std	Y+3, r22	; 0x03
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    47ac:	00 97       	sbiw	r24, 0x00	; 0
    47ae:	b9 f0       	breq	.+46     	; 0x47de <f_opendir+0x48>

	/* Get logical drive number */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
    47b0:	ce 01       	movw	r24, r28
    47b2:	03 96       	adiw	r24, 0x03	; 3
    47b4:	be 01       	movw	r22, r28
    47b6:	6f 5f       	subi	r22, 0xFF	; 255
    47b8:	7f 4f       	sbci	r23, 0xFF	; 255
    47ba:	40 e0       	ldi	r20, 0x00	; 0
    47bc:	0e 94 65 0c 	call	0x18ca	; 0x18ca <find_volume>
	if (res == FR_OK) {
    47c0:	00 97       	sbiw	r24, 0x00	; 0
    47c2:	81 f0       	breq	.+32     	; 0x47e4 <f_opendir+0x4e>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
    47c4:	d8 01       	movw	r26, r16
    47c6:	11 96       	adiw	r26, 0x01	; 1
    47c8:	1c 92       	st	X, r1
    47ca:	1e 92       	st	-X, r1

	LEAVE_FF(fs, res);
}
    47cc:	0f 90       	pop	r0
    47ce:	0f 90       	pop	r0
    47d0:	0f 90       	pop	r0
    47d2:	0f 90       	pop	r0
    47d4:	df 91       	pop	r29
    47d6:	cf 91       	pop	r28
    47d8:	1f 91       	pop	r17
    47da:	0f 91       	pop	r16
    47dc:	08 95       	ret
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    47de:	89 e0       	ldi	r24, 0x09	; 9
    47e0:	90 e0       	ldi	r25, 0x00	; 0
    47e2:	f4 cf       	rjmp	.-24     	; 0x47cc <f_opendir+0x36>

	/* Get logical drive number */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
	if (res == FR_OK) {
		obj->fs = fs;
    47e4:	89 81       	ldd	r24, Y+1	; 0x01
    47e6:	9a 81       	ldd	r25, Y+2	; 0x02
    47e8:	d8 01       	movw	r26, r16
    47ea:	8d 93       	st	X+, r24
    47ec:	9c 93       	st	X, r25
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
    47ee:	6b 81       	ldd	r22, Y+3	; 0x03
    47f0:	7c 81       	ldd	r23, Y+4	; 0x04
    47f2:	c8 01       	movw	r24, r16
    47f4:	0e 94 d5 17 	call	0x2faa	; 0x2faa <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    47f8:	00 97       	sbiw	r24, 0x00	; 0
    47fa:	49 f5       	brne	.+82     	; 0x484e <f_opendir+0xb8>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
    47fc:	f8 01       	movw	r30, r16
    47fe:	87 a1       	lds	r24, 0x47
    4800:	87 fd       	sbrc	r24, 7
    4802:	2f c0       	rjmp	.+94     	; 0x4862 <f_opendir+0xcc>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
    4804:	84 81       	ldd	r24, Z+4	; 0x04
    4806:	84 ff       	sbrs	r24, 4
    4808:	29 c0       	rjmp	.+82     	; 0x485c <f_opendir+0xc6>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
    480a:	02 8c       	ldd	r0, Z+26	; 0x1a
    480c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    480e:	e0 2d       	mov	r30, r0
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4810:	33 8d       	ldd	r19, Z+27	; 0x1b
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	82 8d       	ldd	r24, Z+26	; 0x1a
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	82 2b       	or	r24, r18
    481a:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    481c:	ac 01       	movw	r20, r24
    481e:	60 e0       	ldi	r22, 0x00	; 0
    4820:	70 e0       	ldi	r23, 0x00	; 0
	}

	va_end(arp);

	return putc_flush(&pb);
}
    4822:	29 81       	ldd	r18, Y+1	; 0x01
    4824:	3a 81       	ldd	r19, Y+2	; 0x02
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
    4826:	d9 01       	movw	r26, r18
    4828:	8c 91       	ld	r24, X
    482a:	83 30       	cpi	r24, 0x03	; 3
    482c:	e9 f0       	breq	.+58     	; 0x4868 <f_opendir+0xd2>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
    482e:	f8 01       	movw	r30, r16
    4830:	46 83       	std	Z+6, r20	; 0x06
    4832:	57 83       	std	Z+7, r21	; 0x07
    4834:	60 87       	std	Z+8, r22	; 0x08
    4836:	71 87       	std	Z+9, r23	; 0x09
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				obj->id = fs->id;
    4838:	d9 01       	movw	r26, r18
    483a:	15 96       	adiw	r26, 0x05	; 5
    483c:	8d 91       	ld	r24, X+
    483e:	9c 91       	ld	r25, X
    4840:	16 97       	sbiw	r26, 0x06	; 6
    4842:	f8 01       	movw	r30, r16
    4844:	93 83       	std	Z+3, r25	; 0x03
    4846:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dp, 0);			/* Rewind directory */
    4848:	c8 01       	movw	r24, r16
    484a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <dir_sdi.constprop.11>
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    484e:	84 30       	cpi	r24, 0x04	; 4
    4850:	91 05       	cpc	r25, r1
    4852:	21 f0       	breq	.+8      	; 0x485c <f_opendir+0xc6>
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
    4854:	00 97       	sbiw	r24, 0x00	; 0
    4856:	09 f4       	brne	.+2      	; 0x485a <f_opendir+0xc4>
    4858:	b9 cf       	rjmp	.-142    	; 0x47cc <f_opendir+0x36>
    485a:	b4 cf       	rjmp	.-152    	; 0x47c4 <f_opendir+0x2e>
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
    485c:	85 e0       	ldi	r24, 0x05	; 5
    485e:	90 e0       	ldi	r25, 0x00	; 0
    4860:	b1 cf       	rjmp	.-158    	; 0x47c4 <f_opendir+0x2e>
    4862:	29 81       	ldd	r18, Y+1	; 0x01
    4864:	3a 81       	ldd	r19, Y+2	; 0x02
    4866:	e8 cf       	rjmp	.-48     	; 0x4838 <f_opendir+0xa2>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4868:	b5 89       	ldd	r27, Z+21	; 0x15
    486a:	a0 e0       	ldi	r26, 0x00	; 0
    486c:	84 89       	ldd	r24, Z+20	; 0x14
    486e:	90 e0       	ldi	r25, 0x00	; 0
    4870:	8a 2b       	or	r24, r26
    4872:	9b 2b       	or	r25, r27
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    4874:	a0 e0       	ldi	r26, 0x00	; 0
    4876:	b0 e0       	ldi	r27, 0x00	; 0
    4878:	dc 01       	movw	r26, r24
    487a:	99 27       	eor	r25, r25
    487c:	88 27       	eor	r24, r24
    487e:	48 2b       	or	r20, r24
    4880:	59 2b       	or	r21, r25
    4882:	6a 2b       	or	r22, r26
    4884:	7b 2b       	or	r23, r27
    4886:	d3 cf       	rjmp	.-90     	; 0x482e <f_opendir+0x98>

00004888 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    4888:	0f 93       	push	r16
    488a:	1f 93       	push	r17
    488c:	cf 93       	push	r28
    488e:	df 93       	push	r29
    4890:	00 d0       	rcall	.+0      	; 0x4892 <f_closedir+0xa>
    4892:	cd b7       	in	r28, 0x3d	; 61
    4894:	de b7       	in	r29, 0x3e	; 62
    4896:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;


	res = validate(dp, &fs);
    4898:	be 01       	movw	r22, r28
    489a:	6f 5f       	subi	r22, 0xFF	; 255
    489c:	7f 4f       	sbci	r23, 0xFF	; 255
    489e:	0e 94 a5 09 	call	0x134a	; 0x134a <validate>
	if (res == FR_OK) {
    48a2:	00 97       	sbiw	r24, 0x00	; 0
    48a4:	19 f4       	brne	.+6      	; 0x48ac <f_closedir+0x24>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
    48a6:	f8 01       	movw	r30, r16
    48a8:	11 82       	std	Z+1, r1	; 0x01
    48aa:	10 82       	st	Z, r1
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
    48ac:	0f 90       	pop	r0
    48ae:	0f 90       	pop	r0
    48b0:	df 91       	pop	r29
    48b2:	cf 91       	pop	r28
    48b4:	1f 91       	pop	r17
    48b6:	0f 91       	pop	r16
    48b8:	08 95       	ret

000048ba <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    48ba:	cf 92       	push	r12
    48bc:	df 92       	push	r13
    48be:	ef 92       	push	r14
    48c0:	ff 92       	push	r15
    48c2:	0f 93       	push	r16
    48c4:	1f 93       	push	r17
    48c6:	cf 93       	push	r28
    48c8:	df 93       	push	r29
    48ca:	00 d0       	rcall	.+0      	; 0x48cc <f_readdir+0x12>
    48cc:	cd b7       	in	r28, 0x3d	; 61
    48ce:	de b7       	in	r29, 0x3e	; 62
    48d0:	8c 01       	movw	r16, r24
    48d2:	6b 01       	movw	r12, r22
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(dp, &fs);	/* Check validity of the object */
    48d4:	be 01       	movw	r22, r28
    48d6:	6f 5f       	subi	r22, 0xFF	; 255
    48d8:	7f 4f       	sbci	r23, 0xFF	; 255
    48da:	0e 94 a5 09 	call	0x134a	; 0x134a <validate>
    48de:	7c 01       	movw	r14, r24
	if (res == FR_OK) {
    48e0:	00 97       	sbiw	r24, 0x00	; 0
    48e2:	61 f4       	brne	.+24     	; 0x48fc <f_readdir+0x42>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    48e4:	c8 01       	movw	r24, r16
	DEF_NAMBUF


	res = validate(dp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (!fno) {
    48e6:	c1 14       	cp	r12, r1
    48e8:	d1 04       	cpc	r13, r1
    48ea:	79 f1       	breq	.+94     	; 0x494a <f_readdir+0x90>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
    48ec:	0e 94 75 16 	call	0x2cea	; 0x2cea <dir_read.constprop.10>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
    48f0:	84 30       	cpi	r24, 0x04	; 4
    48f2:	91 05       	cpc	r25, r1
    48f4:	79 f0       	breq	.+30     	; 0x4914 <f_readdir+0x5a>
			if (res == FR_OK) {				/* A valid entry is found */
    48f6:	00 97       	sbiw	r24, 0x00	; 0
    48f8:	69 f0       	breq	.+26     	; 0x4914 <f_readdir+0x5a>
    48fa:	7c 01       	movw	r14, r24
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
    48fc:	c7 01       	movw	r24, r14
    48fe:	0f 90       	pop	r0
    4900:	0f 90       	pop	r0
    4902:	df 91       	pop	r29
    4904:	cf 91       	pop	r28
    4906:	1f 91       	pop	r17
    4908:	0f 91       	pop	r16
    490a:	ff 90       	pop	r15
    490c:	ef 90       	pop	r14
    490e:	df 90       	pop	r13
    4910:	cf 90       	pop	r12
    4912:	08 95       	ret
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
    4914:	f6 01       	movw	r30, r12
    4916:	11 86       	std	Z+9, r1	; 0x09
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
    4918:	f8 01       	movw	r30, r16
    491a:	86 89       	ldd	r24, Z+22	; 0x16
    491c:	97 89       	ldd	r25, Z+23	; 0x17
    491e:	a0 8d       	ldd	r26, Z+24	; 0x18
    4920:	b1 8d       	ldd	r27, Z+25	; 0x19
    4922:	00 97       	sbiw	r24, 0x00	; 0
    4924:	a1 05       	cpc	r26, r1
    4926:	b1 05       	cpc	r27, r1
    4928:	51 f4       	brne	.+20     	; 0x493e <f_readdir+0x84>
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
    492a:	c8 01       	movw	r24, r16
    492c:	60 e0       	ldi	r22, 0x00	; 0
    492e:	70 e0       	ldi	r23, 0x00	; 0
    4930:	0e 94 08 14 	call	0x2810	; 0x2810 <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    4934:	84 30       	cpi	r24, 0x04	; 4
    4936:	91 05       	cpc	r25, r1
    4938:	09 f3       	breq	.-62     	; 0x48fc <f_readdir+0x42>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
    493a:	7c 01       	movw	r14, r24
    493c:	df cf       	rjmp	.-66     	; 0x48fc <f_readdir+0x42>
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
    493e:	c8 01       	movw	r24, r16
    4940:	4a 96       	adiw	r24, 0x1a	; 26
    4942:	b6 01       	movw	r22, r12
    4944:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <get_fileinfo.isra.3.part.4>
    4948:	f0 cf       	rjmp	.-32     	; 0x492a <f_readdir+0x70>


	res = validate(dp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    494a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <dir_sdi.constprop.11>
    494e:	7c 01       	movw	r14, r24
    4950:	d5 cf       	rjmp	.-86     	; 0x48fc <f_readdir+0x42>

00004952 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    4952:	ef 92       	push	r14
    4954:	ff 92       	push	r15
    4956:	0f 93       	push	r16
    4958:	1f 93       	push	r17
    495a:	cf 93       	push	r28
    495c:	df 93       	push	r29
    495e:	cd b7       	in	r28, 0x3d	; 61
    4960:	de b7       	in	r29, 0x3e	; 62
    4962:	aa 97       	sbiw	r28, 0x2a	; 42
    4964:	0f b6       	in	r0, 0x3f	; 63
    4966:	f8 94       	cli
    4968:	de bf       	out	0x3e, r29	; 62
    496a:	0f be       	out	0x3f, r0	; 63
    496c:	cd bf       	out	0x3d, r28	; 61
    496e:	9a a7       	lds	r25, 0x7a
    4970:	89 a7       	lds	r24, 0x79
    4972:	7b 01       	movw	r14, r22
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive number */
	res = find_volume(&path, &dj.obj.fs, 0);
    4974:	ce 01       	movw	r24, r28
    4976:	89 96       	adiw	r24, 0x29	; 41
    4978:	be 01       	movw	r22, r28
    497a:	6f 5f       	subi	r22, 0xFF	; 255
    497c:	7f 4f       	sbci	r23, 0xFF	; 255
    497e:	40 e0       	ldi	r20, 0x00	; 0
    4980:	0e 94 65 0c 	call	0x18ca	; 0x18ca <find_volume>
    4984:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    4986:	00 97       	sbiw	r24, 0x00	; 0
    4988:	71 f0       	breq	.+28     	; 0x49a6 <f_stat+0x54>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
    498a:	c8 01       	movw	r24, r16
    498c:	aa 96       	adiw	r28, 0x2a	; 42
    498e:	0f b6       	in	r0, 0x3f	; 63
    4990:	f8 94       	cli
    4992:	de bf       	out	0x3e, r29	; 62
    4994:	0f be       	out	0x3f, r0	; 63
    4996:	cd bf       	out	0x3d, r28	; 61
    4998:	df 91       	pop	r29
    499a:	cf 91       	pop	r28
    499c:	1f 91       	pop	r17
    499e:	0f 91       	pop	r16
    49a0:	ff 90       	pop	r15
    49a2:	ef 90       	pop	r14
    49a4:	08 95       	ret

	/* Get logical drive number */
	res = find_volume(&path, &dj.obj.fs, 0);
	if (res == FR_OK) {
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    49a6:	69 a5       	lds	r22, 0x69
    49a8:	7a a5       	lds	r23, 0x6a
    49aa:	ce 01       	movw	r24, r28
    49ac:	01 96       	adiw	r24, 0x01	; 1
    49ae:	0e 94 d5 17 	call	0x2faa	; 0x2faa <follow_path>
    49b2:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follow completed */
    49b4:	00 97       	sbiw	r24, 0x00	; 0
    49b6:	49 f7       	brne	.-46     	; 0x498a <f_stat+0x38>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
    49b8:	88 a5       	lds	r24, 0x68
    49ba:	87 fd       	sbrc	r24, 7
    49bc:	13 c0       	rjmp	.+38     	; 0x49e4 <f_stat+0x92>
				res = FR_INVALID_NAME;
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
    49be:	e1 14       	cp	r14, r1
    49c0:	f1 04       	cpc	r15, r1
    49c2:	19 f3       	breq	.-58     	; 0x498a <f_stat+0x38>
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
    49c4:	f7 01       	movw	r30, r14
    49c6:	11 86       	std	Z+9, r1	; 0x09
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
    49c8:	8f 89       	ldd	r24, Y+23	; 0x17
    49ca:	98 8d       	ldd	r25, Y+24	; 0x18
    49cc:	a9 8d       	ldd	r26, Y+25	; 0x19
    49ce:	ba 8d       	ldd	r27, Y+26	; 0x1a
    49d0:	00 97       	sbiw	r24, 0x00	; 0
    49d2:	a1 05       	cpc	r26, r1
    49d4:	b1 05       	cpc	r27, r1
    49d6:	c9 f2       	breq	.-78     	; 0x498a <f_stat+0x38>
    49d8:	ce 01       	movw	r24, r28
    49da:	4b 96       	adiw	r24, 0x1b	; 27
    49dc:	b7 01       	movw	r22, r14
    49de:	0e 94 ec 09 	call	0x13d8	; 0x13d8 <get_fileinfo.isra.3.part.4>
    49e2:	d3 cf       	rjmp	.-90     	; 0x498a <f_stat+0x38>
	if (res == FR_OK) {
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
		if (res == FR_OK) {				/* Follow completed */
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
				res = FR_INVALID_NAME;
    49e4:	06 e0       	ldi	r16, 0x06	; 6
    49e6:	10 e0       	ldi	r17, 0x00	; 0
    49e8:	d0 cf       	rjmp	.-96     	; 0x498a <f_stat+0x38>

000049ea <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
    49ea:	2f 92       	push	r2
    49ec:	3f 92       	push	r3
    49ee:	4f 92       	push	r4
    49f0:	5f 92       	push	r5
    49f2:	6f 92       	push	r6
    49f4:	7f 92       	push	r7
    49f6:	8f 92       	push	r8
    49f8:	9f 92       	push	r9
    49fa:	af 92       	push	r10
    49fc:	bf 92       	push	r11
    49fe:	cf 92       	push	r12
    4a00:	df 92       	push	r13
    4a02:	ef 92       	push	r14
    4a04:	ff 92       	push	r15
    4a06:	0f 93       	push	r16
    4a08:	1f 93       	push	r17
    4a0a:	cf 93       	push	r28
    4a0c:	df 93       	push	r29
    4a0e:	cd b7       	in	r28, 0x3d	; 61
    4a10:	de b7       	in	r29, 0x3e	; 62
    4a12:	28 97       	sbiw	r28, 0x08	; 8
    4a14:	0f b6       	in	r0, 0x3f	; 63
    4a16:	f8 94       	cli
    4a18:	de bf       	out	0x3e, r29	; 62
    4a1a:	0f be       	out	0x3f, r0	; 63
    4a1c:	cd bf       	out	0x3d, r28	; 61
    4a1e:	9c 83       	std	Y+4, r25	; 0x04
    4a20:	8b 83       	std	Y+3, r24	; 0x03
    4a22:	7e 83       	std	Y+6, r23	; 0x06
    4a24:	6d 83       	std	Y+5, r22	; 0x05
    4a26:	8a 01       	movw	r16, r20
	BYTE *p;
	_FDID obj;


	/* Get logical drive number */
	res = find_volume(&path, &fs, 0);
    4a28:	ce 01       	movw	r24, r28
    4a2a:	03 96       	adiw	r24, 0x03	; 3
    4a2c:	be 01       	movw	r22, r28
    4a2e:	6f 5f       	subi	r22, 0xFF	; 255
    4a30:	7f 4f       	sbci	r23, 0xFF	; 255
    4a32:	40 e0       	ldi	r20, 0x00	; 0
    4a34:	0e 94 65 0c 	call	0x18ca	; 0x18ca <find_volume>
    4a38:	4c 01       	movw	r8, r24
	if (res == FR_OK) {
    4a3a:	00 97       	sbiw	r24, 0x00	; 0
    4a3c:	09 f0       	breq	.+2      	; 0x4a40 <f_getfree+0x56>
    4a3e:	b8 c0       	rjmp	.+368    	; 0x4bb0 <f_getfree+0x1c6>
		*fatfs = fs;				/* Return ptr to the fs object */
    4a40:	a9 80       	ldd	r10, Y+1	; 0x01
    4a42:	ba 80       	ldd	r11, Y+2	; 0x02
    4a44:	d8 01       	movw	r26, r16
    4a46:	ad 92       	st	X+, r10
    4a48:	bc 92       	st	X, r11
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
    4a4a:	f5 01       	movw	r30, r10
    4a4c:	87 85       	ldd	r24, Z+15	; 0x0f
    4a4e:	90 89       	ldd	r25, Z+16	; 0x10
    4a50:	a1 89       	ldd	r26, Z+17	; 0x11
    4a52:	b2 89       	ldd	r27, Z+18	; 0x12
    4a54:	c3 88       	ldd	r12, Z+19	; 0x13
    4a56:	d4 88       	ldd	r13, Z+20	; 0x14
    4a58:	e5 88       	ldd	r14, Z+21	; 0x15
    4a5a:	f6 88       	ldd	r15, Z+22	; 0x16
    4a5c:	b7 01       	movw	r22, r14
    4a5e:	a6 01       	movw	r20, r12
    4a60:	42 50       	subi	r20, 0x02	; 2
    4a62:	50 40       	sbci	r21, 0x00	; 0
    4a64:	60 40       	sbci	r22, 0x00	; 0
    4a66:	70 40       	sbci	r23, 0x00	; 0
    4a68:	48 17       	cp	r20, r24
    4a6a:	59 07       	cpc	r21, r25
    4a6c:	6a 07       	cpc	r22, r26
    4a6e:	7b 07       	cpc	r23, r27
    4a70:	08 f0       	brcs	.+2      	; 0x4a74 <f_getfree+0x8a>
    4a72:	b8 c0       	rjmp	.+368    	; 0x4be4 <f_getfree+0x1fa>
			*nclst = fs->free_clst;
		} else {
			/* Get number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
    4a74:	80 81       	ld	r24, Z
    4a76:	81 30       	cpi	r24, 0x01	; 1
    4a78:	09 f4       	brne	.+2      	; 0x4a7c <f_getfree+0x92>
    4a7a:	bb c0       	rjmp	.+374    	; 0x4bf2 <f_getfree+0x208>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
    4a7c:	47 8d       	ldd	r20, Z+31	; 0x1f
    4a7e:	50 a1       	lds	r21, 0x40
    4a80:	61 a1       	lds	r22, 0x41
    4a82:	72 a1       	lds	r23, 0x42
					i = 0; p = 0;
    4a84:	e0 e0       	ldi	r30, 0x00	; 0
    4a86:	f0 e0       	ldi	r31, 0x00	; 0
    4a88:	20 e0       	ldi	r18, 0x00	; 0
    4a8a:	30 e0       	ldi	r19, 0x00	; 0
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
			*nclst = fs->free_clst;
		} else {
			/* Get number of free clusters */
			nfree = 0;
    4a8c:	44 24       	eor	r4, r4
    4a8e:	55 24       	eor	r5, r5
    4a90:	32 01       	movw	r6, r4
    4a92:	98 86       	std	Y+8, r9	; 0x08
    4a94:	8f 82       	std	Y+7, r8	; 0x07
    4a96:	85 01       	movw	r16, r10
    4a98:	4a 01       	movw	r8, r20
    4a9a:	5b 01       	movw	r10, r22
    4a9c:	45 c0       	rjmp	.+138    	; 0x4b28 <f_getfree+0x13e>
							res = move_window(fs, sect++);
							if (res != FR_OK) break;
							p = fs->win;
							i = SS(fs);
						}
						if (fs->fs_type == FS_FAT16) {
    4a9e:	d8 01       	movw	r26, r16
    4aa0:	8c 91       	ld	r24, X
    4aa2:	82 30       	cpi	r24, 0x02	; 2
    4aa4:	09 f4       	brne	.+2      	; 0x4aa8 <f_getfree+0xbe>
    4aa6:	5c c0       	rjmp	.+184    	; 0x4b60 <f_getfree+0x176>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    4aa8:	83 81       	ldd	r24, Z+3	; 0x03
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	a0 e0       	ldi	r26, 0x00	; 0
    4aae:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    4ab0:	44 27       	eor	r20, r20
    4ab2:	58 2f       	mov	r21, r24
    4ab4:	69 2f       	mov	r22, r25
    4ab6:	7a 2f       	mov	r23, r26
    4ab8:	82 81       	ldd	r24, Z+2	; 0x02
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	a0 e0       	ldi	r26, 0x00	; 0
    4abe:	b0 e0       	ldi	r27, 0x00	; 0
    4ac0:	48 2b       	or	r20, r24
    4ac2:	59 2b       	or	r21, r25
    4ac4:	6a 2b       	or	r22, r26
    4ac6:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    4ac8:	76 2f       	mov	r23, r22
    4aca:	65 2f       	mov	r22, r21
    4acc:	54 2f       	mov	r21, r20
    4ace:	44 27       	eor	r20, r20
    4ad0:	81 81       	ldd	r24, Z+1	; 0x01
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	a0 e0       	ldi	r26, 0x00	; 0
    4ad6:	b0 e0       	ldi	r27, 0x00	; 0
    4ad8:	48 2b       	or	r20, r24
    4ada:	59 2b       	or	r21, r25
    4adc:	6a 2b       	or	r22, r26
    4ade:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    4ae0:	76 2f       	mov	r23, r22
    4ae2:	65 2f       	mov	r22, r21
    4ae4:	54 2f       	mov	r21, r20
    4ae6:	44 27       	eor	r20, r20
    4ae8:	80 81       	ld	r24, Z
    4aea:	90 e0       	ldi	r25, 0x00	; 0
    4aec:	a0 e0       	ldi	r26, 0x00	; 0
    4aee:	b0 e0       	ldi	r27, 0x00	; 0
    4af0:	48 2b       	or	r20, r24
    4af2:	59 2b       	or	r21, r25
    4af4:	6a 2b       	or	r22, r26
    4af6:	7b 2b       	or	r23, r27
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(p) == 0) nfree++;
							p += 2; i -= 2;
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
    4af8:	7f 70       	andi	r23, 0x0F	; 15
    4afa:	41 15       	cp	r20, r1
    4afc:	51 05       	cpc	r21, r1
    4afe:	61 05       	cpc	r22, r1
    4b00:	71 05       	cpc	r23, r1
    4b02:	29 f4       	brne	.+10     	; 0x4b0e <f_getfree+0x124>
    4b04:	08 94       	sec
    4b06:	41 1c       	adc	r4, r1
    4b08:	51 1c       	adc	r5, r1
    4b0a:	61 1c       	adc	r6, r1
    4b0c:	71 1c       	adc	r7, r1
							p += 4; i -= 4;
    4b0e:	34 96       	adiw	r30, 0x04	; 4
    4b10:	24 50       	subi	r18, 0x04	; 4
    4b12:	30 40       	sbci	r19, 0x00	; 0
						}
					} while (--clst);
    4b14:	08 94       	sec
    4b16:	c1 08       	sbc	r12, r1
    4b18:	d1 08       	sbc	r13, r1
    4b1a:	e1 08       	sbc	r14, r1
    4b1c:	f1 08       	sbc	r15, r1
    4b1e:	c1 14       	cp	r12, r1
    4b20:	d1 04       	cpc	r13, r1
    4b22:	e1 04       	cpc	r14, r1
    4b24:	f1 04       	cpc	r15, r1
    4b26:	69 f1       	breq	.+90     	; 0x4b82 <f_getfree+0x198>
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
					i = 0; p = 0;
					do {
						if (i == 0) {
    4b28:	21 15       	cp	r18, r1
    4b2a:	31 05       	cpc	r19, r1
    4b2c:	09 f0       	breq	.+2      	; 0x4b30 <f_getfree+0x146>
    4b2e:	b7 cf       	rjmp	.-146    	; 0x4a9e <f_getfree+0xb4>
							res = move_window(fs, sect++);
    4b30:	c8 01       	movw	r24, r16
    4b32:	b5 01       	movw	r22, r10
    4b34:	a4 01       	movw	r20, r8
    4b36:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
							if (res != FR_OK) break;
    4b3a:	00 97       	sbiw	r24, 0x00	; 0
    4b3c:	09 f0       	breq	.+2      	; 0x4b40 <f_getfree+0x156>
    4b3e:	95 c0       	rjmp	.+298    	; 0x4c6a <f_getfree+0x280>
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
					i = 0; p = 0;
					do {
						if (i == 0) {
							res = move_window(fs, sect++);
    4b40:	08 94       	sec
    4b42:	81 1c       	adc	r8, r1
    4b44:	91 1c       	adc	r9, r1
    4b46:	a1 1c       	adc	r10, r1
    4b48:	b1 1c       	adc	r11, r1
							if (res != FR_OK) break;
							p = fs->win;
    4b4a:	09 81       	ldd	r16, Y+1	; 0x01
    4b4c:	1a 81       	ldd	r17, Y+2	; 0x02
    4b4e:	f8 01       	movw	r30, r16
    4b50:	bf 96       	adiw	r30, 0x2f	; 47
							i = SS(fs);
    4b52:	20 e0       	ldi	r18, 0x00	; 0
    4b54:	32 e0       	ldi	r19, 0x02	; 2
						}
						if (fs->fs_type == FS_FAT16) {
    4b56:	d8 01       	movw	r26, r16
    4b58:	8c 91       	ld	r24, X
    4b5a:	82 30       	cpi	r24, 0x02	; 2
    4b5c:	09 f0       	breq	.+2      	; 0x4b60 <f_getfree+0x176>
    4b5e:	a4 cf       	rjmp	.-184    	; 0x4aa8 <f_getfree+0xbe>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4b60:	31 80       	ldd	r3, Z+1	; 0x01
    4b62:	22 24       	eor	r2, r2
    4b64:	80 81       	ld	r24, Z
    4b66:	90 e0       	ldi	r25, 0x00	; 0
    4b68:	82 29       	or	r24, r2
    4b6a:	93 29       	or	r25, r3
							if (res != FR_OK) break;
							p = fs->win;
							i = SS(fs);
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(p) == 0) nfree++;
    4b6c:	00 97       	sbiw	r24, 0x00	; 0
    4b6e:	29 f4       	brne	.+10     	; 0x4b7a <f_getfree+0x190>
    4b70:	08 94       	sec
    4b72:	41 1c       	adc	r4, r1
    4b74:	51 1c       	adc	r5, r1
    4b76:	61 1c       	adc	r6, r1
    4b78:	71 1c       	adc	r7, r1
							p += 2; i -= 2;
    4b7a:	32 96       	adiw	r30, 0x02	; 2
    4b7c:	22 50       	subi	r18, 0x02	; 2
    4b7e:	30 40       	sbci	r19, 0x00	; 0
    4b80:	c9 cf       	rjmp	.-110    	; 0x4b14 <f_getfree+0x12a>
    4b82:	8f 80       	ldd	r8, Y+7	; 0x07
    4b84:	98 84       	ldd	r9, Y+8	; 0x08
    4b86:	58 01       	movw	r10, r16
							p += 4; i -= 4;
						}
					} while (--clst);
				}
			}
			*nclst = nfree;			/* Return the free clusters */
    4b88:	ed 81       	ldd	r30, Y+5	; 0x05
    4b8a:	fe 81       	ldd	r31, Y+6	; 0x06
    4b8c:	40 82       	st	Z, r4
    4b8e:	51 82       	std	Z+1, r5	; 0x01
    4b90:	62 82       	std	Z+2, r6	; 0x02
    4b92:	73 82       	std	Z+3, r7	; 0x03
			fs->free_clst = nfree;	/* Now free_clst is valid */
    4b94:	d5 01       	movw	r26, r10
    4b96:	1f 96       	adiw	r26, 0x0f	; 15
    4b98:	4d 92       	st	X+, r4
    4b9a:	5d 92       	st	X+, r5
    4b9c:	6d 92       	st	X+, r6
    4b9e:	7c 92       	st	X, r7
    4ba0:	52 97       	sbiw	r26, 0x12	; 18
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
    4ba2:	14 96       	adiw	r26, 0x04	; 4
    4ba4:	8c 91       	ld	r24, X
    4ba6:	14 97       	sbiw	r26, 0x04	; 4
    4ba8:	81 60       	ori	r24, 0x01	; 1
    4baa:	14 96       	adiw	r26, 0x04	; 4
    4bac:	8c 93       	st	X, r24
    4bae:	14 97       	sbiw	r26, 0x04	; 4
		}
	}

	LEAVE_FF(fs, res);
}
    4bb0:	c4 01       	movw	r24, r8
    4bb2:	28 96       	adiw	r28, 0x08	; 8
    4bb4:	0f b6       	in	r0, 0x3f	; 63
    4bb6:	f8 94       	cli
    4bb8:	de bf       	out	0x3e, r29	; 62
    4bba:	0f be       	out	0x3f, r0	; 63
    4bbc:	cd bf       	out	0x3d, r28	; 61
    4bbe:	df 91       	pop	r29
    4bc0:	cf 91       	pop	r28
    4bc2:	1f 91       	pop	r17
    4bc4:	0f 91       	pop	r16
    4bc6:	ff 90       	pop	r15
    4bc8:	ef 90       	pop	r14
    4bca:	df 90       	pop	r13
    4bcc:	cf 90       	pop	r12
    4bce:	bf 90       	pop	r11
    4bd0:	af 90       	pop	r10
    4bd2:	9f 90       	pop	r9
    4bd4:	8f 90       	pop	r8
    4bd6:	7f 90       	pop	r7
    4bd8:	6f 90       	pop	r6
    4bda:	5f 90       	pop	r5
    4bdc:	4f 90       	pop	r4
    4bde:	3f 90       	pop	r3
    4be0:	2f 90       	pop	r2
    4be2:	08 95       	ret
	res = find_volume(&path, &fs, 0);
	if (res == FR_OK) {
		*fatfs = fs;				/* Return ptr to the fs object */
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
			*nclst = fs->free_clst;
    4be4:	ed 81       	ldd	r30, Y+5	; 0x05
    4be6:	fe 81       	ldd	r31, Y+6	; 0x06
    4be8:	80 83       	st	Z, r24
    4bea:	91 83       	std	Z+1, r25	; 0x01
    4bec:	a2 83       	std	Z+2, r26	; 0x02
    4bee:	b3 83       	std	Z+3, r27	; 0x03
    4bf0:	df cf       	rjmp	.-66     	; 0x4bb0 <f_getfree+0x1c6>
		} else {
			/* Get number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
    4bf2:	22 e0       	ldi	r18, 0x02	; 2
    4bf4:	c2 2e       	mov	r12, r18
    4bf6:	d1 2c       	mov	r13, r1
    4bf8:	e1 2c       	mov	r14, r1
    4bfa:	f1 2c       	mov	r15, r1
    4bfc:	44 24       	eor	r4, r4
    4bfe:	55 24       	eor	r5, r5
    4c00:	32 01       	movw	r6, r4
    4c02:	1e c0       	rjmp	.+60     	; 0x4c40 <f_getfree+0x256>
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
					if (stat == 1) { res = FR_INT_ERR; break; }
    4c04:	81 30       	cpi	r24, 0x01	; 1
    4c06:	91 05       	cpc	r25, r1
    4c08:	a1 05       	cpc	r26, r1
    4c0a:	b1 05       	cpc	r27, r1
    4c0c:	91 f1       	breq	.+100    	; 0x4c72 <f_getfree+0x288>
					if (stat == 0) nfree++;
    4c0e:	00 97       	sbiw	r24, 0x00	; 0
    4c10:	a1 05       	cpc	r26, r1
    4c12:	b1 05       	cpc	r27, r1
    4c14:	29 f4       	brne	.+10     	; 0x4c20 <f_getfree+0x236>
    4c16:	08 94       	sec
    4c18:	41 1c       	adc	r4, r1
    4c1a:	51 1c       	adc	r5, r1
    4c1c:	61 1c       	adc	r6, r1
    4c1e:	71 1c       	adc	r7, r1
				} while (++clst < fs->n_fatent);
    4c20:	08 94       	sec
    4c22:	c1 1c       	adc	r12, r1
    4c24:	d1 1c       	adc	r13, r1
    4c26:	e1 1c       	adc	r14, r1
    4c28:	f1 1c       	adc	r15, r1
    4c2a:	e9 81       	ldd	r30, Y+1	; 0x01
    4c2c:	fa 81       	ldd	r31, Y+2	; 0x02
    4c2e:	83 89       	ldd	r24, Z+19	; 0x13
    4c30:	94 89       	ldd	r25, Z+20	; 0x14
    4c32:	a5 89       	ldd	r26, Z+21	; 0x15
    4c34:	b6 89       	ldd	r27, Z+22	; 0x16
    4c36:	c8 16       	cp	r12, r24
    4c38:	d9 06       	cpc	r13, r25
    4c3a:	ea 06       	cpc	r14, r26
    4c3c:	fb 06       	cpc	r15, r27
    4c3e:	f8 f4       	brcc	.+62     	; 0x4c7e <f_getfree+0x294>
			/* Get number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
    4c40:	c5 01       	movw	r24, r10
    4c42:	b7 01       	movw	r22, r14
    4c44:	a6 01       	movw	r20, r12
    4c46:	0e 94 1f 11 	call	0x223e	; 0x223e <get_fat.isra.8>
    4c4a:	dc 01       	movw	r26, r24
    4c4c:	cb 01       	movw	r24, r22
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    4c4e:	8f 3f       	cpi	r24, 0xFF	; 255
    4c50:	ef ef       	ldi	r30, 0xFF	; 255
    4c52:	9e 07       	cpc	r25, r30
    4c54:	ef ef       	ldi	r30, 0xFF	; 255
    4c56:	ae 07       	cpc	r26, r30
    4c58:	ef ef       	ldi	r30, 0xFF	; 255
    4c5a:	be 07       	cpc	r27, r30
    4c5c:	99 f6       	brne	.-90     	; 0x4c04 <f_getfree+0x21a>
    4c5e:	a9 80       	ldd	r10, Y+1	; 0x01
    4c60:	ba 80       	ldd	r11, Y+2	; 0x02
    4c62:	91 e0       	ldi	r25, 0x01	; 1
    4c64:	89 2e       	mov	r8, r25
    4c66:	91 2c       	mov	r9, r1
    4c68:	8f cf       	rjmp	.-226    	; 0x4b88 <f_getfree+0x19e>
					clst = fs->n_fatent; sect = fs->fatbase;
					i = 0; p = 0;
					do {
						if (i == 0) {
							res = move_window(fs, sect++);
							if (res != FR_OK) break;
    4c6a:	a9 80       	ldd	r10, Y+1	; 0x01
    4c6c:	ba 80       	ldd	r11, Y+2	; 0x02
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
					i = 0; p = 0;
					do {
						if (i == 0) {
							res = move_window(fs, sect++);
    4c6e:	4c 01       	movw	r8, r24
    4c70:	8b cf       	rjmp	.-234    	; 0x4b88 <f_getfree+0x19e>
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
					if (stat == 1) { res = FR_INT_ERR; break; }
    4c72:	a9 80       	ldd	r10, Y+1	; 0x01
    4c74:	ba 80       	ldd	r11, Y+2	; 0x02
    4c76:	82 e0       	ldi	r24, 0x02	; 2
    4c78:	88 2e       	mov	r8, r24
    4c7a:	91 2c       	mov	r9, r1
    4c7c:	85 cf       	rjmp	.-246    	; 0x4b88 <f_getfree+0x19e>
					if (stat == 0) nfree++;
				} while (++clst < fs->n_fatent);
    4c7e:	5f 01       	movw	r10, r30
    4c80:	83 cf       	rjmp	.-250    	; 0x4b88 <f_getfree+0x19e>

00004c82 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
    4c82:	cf 92       	push	r12
    4c84:	df 92       	push	r13
    4c86:	ef 92       	push	r14
    4c88:	ff 92       	push	r15
    4c8a:	0f 93       	push	r16
    4c8c:	1f 93       	push	r17
    4c8e:	cf 93       	push	r28
    4c90:	df 93       	push	r29
    4c92:	00 d0       	rcall	.+0      	; 0x4c94 <f_truncate+0x12>
    4c94:	cd b7       	in	r28, 0x3d	; 61
    4c96:	de b7       	in	r29, 0x3e	; 62
    4c98:	6c 01       	movw	r12, r24
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(fp, &fs);	/* Check validity of the object */
    4c9a:	be 01       	movw	r22, r28
    4c9c:	6f 5f       	subi	r22, 0xFF	; 255
    4c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca0:	0e 94 a5 09 	call	0x134a	; 0x134a <validate>
    4ca4:	7c 01       	movw	r14, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    4ca6:	00 97       	sbiw	r24, 0x00	; 0
    4ca8:	81 f4       	brne	.+32     	; 0x4cca <f_truncate+0x48>
    4caa:	d6 01       	movw	r26, r12
    4cac:	1f 96       	adiw	r26, 0x0f	; 15
    4cae:	ec 90       	ld	r14, X
    4cb0:	1f 97       	sbiw	r26, 0x0f	; 15
    4cb2:	ff 24       	eor	r15, r15
    4cb4:	e1 14       	cp	r14, r1
    4cb6:	f1 04       	cpc	r15, r1
    4cb8:	41 f4       	brne	.+16     	; 0x4cca <f_truncate+0x48>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    4cba:	1e 96       	adiw	r26, 0x0e	; 14
    4cbc:	8c 91       	ld	r24, X
    4cbe:	1e 97       	sbiw	r26, 0x0e	; 14
    4cc0:	81 fd       	sbrc	r24, 1
    4cc2:	0f c0       	rjmp	.+30     	; 0x4ce2 <f_truncate+0x60>
    4cc4:	67 e0       	ldi	r22, 0x07	; 7
    4cc6:	e6 2e       	mov	r14, r22
    4cc8:	f1 2c       	mov	r15, r1
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    4cca:	c7 01       	movw	r24, r14
    4ccc:	0f 90       	pop	r0
    4cce:	0f 90       	pop	r0
    4cd0:	df 91       	pop	r29
    4cd2:	cf 91       	pop	r28
    4cd4:	1f 91       	pop	r17
    4cd6:	0f 91       	pop	r16
    4cd8:	ff 90       	pop	r15
    4cda:	ef 90       	pop	r14
    4cdc:	df 90       	pop	r13
    4cde:	cf 90       	pop	r12
    4ce0:	08 95       	ret

	res = validate(fp, &fs);	/* Check validity of the object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */

	if (fp->obj.objsize > fp->fptr) {
    4ce2:	50 96       	adiw	r26, 0x10	; 16
    4ce4:	8d 91       	ld	r24, X+
    4ce6:	9d 91       	ld	r25, X+
    4ce8:	0d 90       	ld	r0, X+
    4cea:	bc 91       	ld	r27, X
    4cec:	a0 2d       	mov	r26, r0
    4cee:	f6 01       	movw	r30, r12
    4cf0:	42 85       	ldd	r20, Z+10	; 0x0a
    4cf2:	53 85       	ldd	r21, Z+11	; 0x0b
    4cf4:	64 85       	ldd	r22, Z+12	; 0x0c
    4cf6:	75 85       	ldd	r23, Z+13	; 0x0d
    4cf8:	84 17       	cp	r24, r20
    4cfa:	95 07       	cpc	r25, r21
    4cfc:	a6 07       	cpc	r26, r22
    4cfe:	b7 07       	cpc	r27, r23
    4d00:	20 f7       	brcc	.-56     	; 0x4cca <f_truncate+0x48>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    4d02:	00 97       	sbiw	r24, 0x00	; 0
    4d04:	a1 05       	cpc	r26, r1
    4d06:	b1 05       	cpc	r27, r1
    4d08:	09 f4       	brne	.+2      	; 0x4d0c <f_truncate+0x8a>
    4d0a:	4d c0       	rjmp	.+154    	; 0x4da6 <f_truncate+0x124>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
			fp->obj.sclust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
    4d0c:	f6 01       	movw	r30, r12
    4d0e:	44 89       	ldd	r20, Z+20	; 0x14
    4d10:	55 89       	ldd	r21, Z+21	; 0x15
    4d12:	66 89       	ldd	r22, Z+22	; 0x16
    4d14:	77 89       	ldd	r23, Z+23	; 0x17
    4d16:	80 81       	ld	r24, Z
    4d18:	91 81       	ldd	r25, Z+1	; 0x01
    4d1a:	0e 94 1f 11 	call	0x223e	; 0x223e <get_fat.isra.8>
    4d1e:	ab 01       	movw	r20, r22
    4d20:	bc 01       	movw	r22, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    4d22:	4f 3f       	cpi	r20, 0xFF	; 255
    4d24:	ff ef       	ldi	r31, 0xFF	; 255
    4d26:	5f 07       	cpc	r21, r31
    4d28:	ff ef       	ldi	r31, 0xFF	; 255
    4d2a:	6f 07       	cpc	r22, r31
    4d2c:	ff ef       	ldi	r31, 0xFF	; 255
    4d2e:	7f 07       	cpc	r23, r31
    4d30:	09 f4       	brne	.+2      	; 0x4d34 <f_truncate+0xb2>
    4d32:	72 c0       	rjmp	.+228    	; 0x4e18 <f_truncate+0x196>
			if (ncl == 1) res = FR_INT_ERR;
    4d34:	41 30       	cpi	r20, 0x01	; 1
    4d36:	51 05       	cpc	r21, r1
    4d38:	61 05       	cpc	r22, r1
    4d3a:	71 05       	cpc	r23, r1
    4d3c:	09 f4       	brne	.+2      	; 0x4d40 <f_truncate+0xbe>
    4d3e:	5b c0       	rjmp	.+182    	; 0x4df6 <f_truncate+0x174>
			if (res == FR_OK && ncl < fs->n_fatent) {
    4d40:	e9 81       	ldd	r30, Y+1	; 0x01
    4d42:	fa 81       	ldd	r31, Y+2	; 0x02
    4d44:	83 89       	ldd	r24, Z+19	; 0x13
    4d46:	94 89       	ldd	r25, Z+20	; 0x14
    4d48:	a5 89       	ldd	r26, Z+21	; 0x15
    4d4a:	b6 89       	ldd	r27, Z+22	; 0x16
    4d4c:	48 17       	cp	r20, r24
    4d4e:	59 07       	cpc	r21, r25
    4d50:	6a 07       	cpc	r22, r26
    4d52:	7b 07       	cpc	r23, r27
    4d54:	08 f4       	brcc	.+2      	; 0x4d58 <f_truncate+0xd6>
    4d56:	65 c0       	rjmp	.+202    	; 0x4e22 <f_truncate+0x1a0>
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
    4d58:	f6 01       	movw	r30, r12
    4d5a:	80 89       	ldd	r24, Z+16	; 0x10
    4d5c:	91 89       	ldd	r25, Z+17	; 0x11
    4d5e:	a2 89       	ldd	r26, Z+18	; 0x12
    4d60:	b3 89       	ldd	r27, Z+19	; 0x13
    4d62:	82 87       	std	Z+10, r24	; 0x0a
    4d64:	93 87       	std	Z+11, r25	; 0x0b
    4d66:	a4 87       	std	Z+12, r26	; 0x0c
    4d68:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA_MODIFIED;
    4d6a:	86 85       	ldd	r24, Z+14	; 0x0e
    4d6c:	80 64       	ori	r24, 0x40	; 64
    4d6e:	86 87       	std	Z+14, r24	; 0x0e
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
    4d70:	87 ff       	sbrs	r24, 7
    4d72:	ab cf       	rjmp	.-170    	; 0x4cca <f_truncate+0x48>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
    4d74:	e9 81       	ldd	r30, Y+1	; 0x01
    4d76:	fa 81       	ldd	r31, Y+2	; 0x02
    4d78:	b6 01       	movw	r22, r12
    4d7a:	6e 5d       	subi	r22, 0xDE	; 222
    4d7c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d7e:	d6 01       	movw	r26, r12
    4d80:	58 96       	adiw	r26, 0x18	; 24
    4d82:	2d 91       	ld	r18, X+
    4d84:	3d 91       	ld	r19, X+
    4d86:	4d 91       	ld	r20, X+
    4d88:	5c 91       	ld	r21, X
    4d8a:	5b 97       	sbiw	r26, 0x1b	; 27
    4d8c:	81 81       	ldd	r24, Z+1	; 0x01
    4d8e:	01 e0       	ldi	r16, 0x01	; 1
    4d90:	10 e0       	ldi	r17, 0x00	; 0
    4d92:	0e 94 17 2e 	call	0x5c2e	; 0x5c2e <disk_write>
    4d96:	00 97       	sbiw	r24, 0x00	; 0
    4d98:	09 f0       	breq	.+2      	; 0x4d9c <f_truncate+0x11a>
    4d9a:	4f c0       	rjmp	.+158    	; 0x4e3a <f_truncate+0x1b8>
				res = FR_DISK_ERR;
			} else {
				fp->flag &= ~FA_DIRTY;
    4d9c:	f6 01       	movw	r30, r12
    4d9e:	86 85       	ldd	r24, Z+14	; 0x0e
    4da0:	8f 77       	andi	r24, 0x7F	; 127
    4da2:	86 87       	std	Z+14, r24	; 0x0e
    4da4:	92 cf       	rjmp	.-220    	; 0x4cca <f_truncate+0x48>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */

	if (fp->obj.objsize > fp->fptr) {
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
    4da6:	46 81       	ldd	r20, Z+6	; 0x06
    4da8:	57 81       	ldd	r21, Z+7	; 0x07
    4daa:	60 85       	ldd	r22, Z+8	; 0x08
    4dac:	71 85       	ldd	r23, Z+9	; 0x09
    4dae:	c6 01       	movw	r24, r12
    4db0:	00 e0       	ldi	r16, 0x00	; 0
    4db2:	10 e0       	ldi	r17, 0x00	; 0
    4db4:	98 01       	movw	r18, r16
    4db6:	0e 94 d5 15 	call	0x2baa	; 0x2baa <remove_chain>
    4dba:	9c 01       	movw	r18, r24
			fp->obj.sclust = 0;
    4dbc:	d6 01       	movw	r26, r12
    4dbe:	16 96       	adiw	r26, 0x06	; 6
    4dc0:	1d 92       	st	X+, r1
    4dc2:	1d 92       	st	X+, r1
    4dc4:	1d 92       	st	X+, r1
    4dc6:	1c 92       	st	X, r1
    4dc8:	19 97       	sbiw	r26, 0x09	; 9
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
    4dca:	f6 01       	movw	r30, r12
    4dcc:	80 89       	ldd	r24, Z+16	; 0x10
    4dce:	91 89       	ldd	r25, Z+17	; 0x11
    4dd0:	a2 89       	ldd	r26, Z+18	; 0x12
    4dd2:	b3 89       	ldd	r27, Z+19	; 0x13
    4dd4:	82 87       	std	Z+10, r24	; 0x0a
    4dd6:	93 87       	std	Z+11, r25	; 0x0b
    4dd8:	a4 87       	std	Z+12, r26	; 0x0c
    4dda:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA_MODIFIED;
    4ddc:	86 85       	ldd	r24, Z+14	; 0x0e
    4dde:	80 64       	ori	r24, 0x40	; 64
    4de0:	86 87       	std	Z+14, r24	; 0x0e
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
    4de2:	21 15       	cp	r18, r1
    4de4:	31 05       	cpc	r19, r1
    4de6:	21 f2       	breq	.-120    	; 0x4d70 <f_truncate+0xee>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
				res = FR_DISK_ERR;
			} else {
				fp->flag &= ~FA_DIRTY;
    4de8:	42 2f       	mov	r20, r18
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
		fp->flag |= FA_MODIFIED;
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
    4dea:	79 01       	movw	r14, r18
			} else {
				fp->flag &= ~FA_DIRTY;
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
    4dec:	d6 01       	movw	r26, r12
    4dee:	1f 96       	adiw	r26, 0x0f	; 15
    4df0:	4c 93       	st	X, r20
    4df2:	1f 97       	sbiw	r26, 0x0f	; 15
    4df4:	6a cf       	rjmp	.-300    	; 0x4cca <f_truncate+0x48>
			fp->obj.sclust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (ncl == 1) res = FR_INT_ERR;
    4df6:	42 e0       	ldi	r20, 0x02	; 2
    4df8:	32 e0       	ldi	r19, 0x02	; 2
    4dfa:	e3 2e       	mov	r14, r19
    4dfc:	f1 2c       	mov	r15, r1
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
    4dfe:	f6 01       	movw	r30, r12
    4e00:	80 89       	ldd	r24, Z+16	; 0x10
    4e02:	91 89       	ldd	r25, Z+17	; 0x11
    4e04:	a2 89       	ldd	r26, Z+18	; 0x12
    4e06:	b3 89       	ldd	r27, Z+19	; 0x13
    4e08:	82 87       	std	Z+10, r24	; 0x0a
    4e0a:	93 87       	std	Z+11, r25	; 0x0b
    4e0c:	a4 87       	std	Z+12, r26	; 0x0c
    4e0e:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA_MODIFIED;
    4e10:	86 85       	ldd	r24, Z+14	; 0x0e
    4e12:	80 64       	ori	r24, 0x40	; 64
    4e14:	86 87       	std	Z+14, r24	; 0x0e
    4e16:	ea cf       	rjmp	.-44     	; 0x4dec <f_truncate+0x16a>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
			fp->obj.sclust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    4e18:	41 e0       	ldi	r20, 0x01	; 1
    4e1a:	51 e0       	ldi	r21, 0x01	; 1
    4e1c:	e5 2e       	mov	r14, r21
    4e1e:	f1 2c       	mov	r15, r1
    4e20:	ee cf       	rjmp	.-36     	; 0x4dfe <f_truncate+0x17c>
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
    4e22:	d6 01       	movw	r26, r12
    4e24:	54 96       	adiw	r26, 0x14	; 20
    4e26:	0d 91       	ld	r16, X+
    4e28:	1d 91       	ld	r17, X+
    4e2a:	2d 91       	ld	r18, X+
    4e2c:	3c 91       	ld	r19, X
    4e2e:	57 97       	sbiw	r26, 0x17	; 23
    4e30:	c6 01       	movw	r24, r12
    4e32:	0e 94 d5 15 	call	0x2baa	; 0x2baa <remove_chain>
    4e36:	9c 01       	movw	r18, r24
    4e38:	c8 cf       	rjmp	.-112    	; 0x4dca <f_truncate+0x148>
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
		fp->flag |= FA_MODIFIED;
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
    4e3a:	41 e0       	ldi	r20, 0x01	; 1
				res = FR_DISK_ERR;
    4e3c:	71 e0       	ldi	r23, 0x01	; 1
    4e3e:	e7 2e       	mov	r14, r23
    4e40:	f1 2c       	mov	r15, r1
    4e42:	d4 cf       	rjmp	.-88     	; 0x4dec <f_truncate+0x16a>

00004e44 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    4e44:	cf 92       	push	r12
    4e46:	df 92       	push	r13
    4e48:	ef 92       	push	r14
    4e4a:	ff 92       	push	r15
    4e4c:	0f 93       	push	r16
    4e4e:	1f 93       	push	r17
    4e50:	cf 93       	push	r28
    4e52:	df 93       	push	r29
    4e54:	cd b7       	in	r28, 0x3d	; 61
    4e56:	de b7       	in	r29, 0x3e	; 62
    4e58:	c4 55       	subi	r28, 0x54	; 84
    4e5a:	d0 40       	sbci	r29, 0x00	; 0
    4e5c:	0f b6       	in	r0, 0x3f	; 63
    4e5e:	f8 94       	cli
    4e60:	de bf       	out	0x3e, r29	; 62
    4e62:	0f be       	out	0x3f, r0	; 63
    4e64:	cd bf       	out	0x3d, r28	; 61
    4e66:	65 96       	adiw	r28, 0x15	; 21
    4e68:	9f af       	sts	0x7f, r25
    4e6a:	8e af       	sts	0x7e, r24
    4e6c:	65 97       	sbiw	r28, 0x15	; 21
#endif
	DEF_NAMBUF


	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
    4e6e:	ce 01       	movw	r24, r28
    4e70:	8d 5a       	subi	r24, 0xAD	; 173
    4e72:	9f 4f       	sbci	r25, 0xFF	; 255
    4e74:	be 01       	movw	r22, r28
    4e76:	6f 5f       	subi	r22, 0xFF	; 255
    4e78:	7f 4f       	sbci	r23, 0xFF	; 255
    4e7a:	42 e0       	ldi	r20, 0x02	; 2
    4e7c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <find_volume>
	dj.obj.fs = fs;
    4e80:	29 81       	ldd	r18, Y+1	; 0x01
    4e82:	3a 81       	ldd	r19, Y+2	; 0x02
    4e84:	3c a7       	lds	r19, 0x7c
    4e86:	2b a7       	lds	r18, 0x7b
	if (res == FR_OK) {
    4e88:	00 97       	sbiw	r24, 0x00	; 0
    4e8a:	81 f0       	breq	.+32     	; 0x4eac <f_unlink+0x68>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    4e8c:	cc 5a       	subi	r28, 0xAC	; 172
    4e8e:	df 4f       	sbci	r29, 0xFF	; 255
    4e90:	0f b6       	in	r0, 0x3f	; 63
    4e92:	f8 94       	cli
    4e94:	de bf       	out	0x3e, r29	; 62
    4e96:	0f be       	out	0x3f, r0	; 63
    4e98:	cd bf       	out	0x3d, r28	; 61
    4e9a:	df 91       	pop	r29
    4e9c:	cf 91       	pop	r28
    4e9e:	1f 91       	pop	r17
    4ea0:	0f 91       	pop	r16
    4ea2:	ff 90       	pop	r15
    4ea4:	ef 90       	pop	r14
    4ea6:	df 90       	pop	r13
    4ea8:	cf 90       	pop	r12
    4eaa:	08 95       	ret
	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
    4eac:	65 96       	adiw	r28, 0x15	; 21
    4eae:	6e ad       	sts	0x6e, r22
    4eb0:	7f ad       	sts	0x6f, r23
    4eb2:	65 97       	sbiw	r28, 0x15	; 21
    4eb4:	ce 01       	movw	r24, r28
    4eb6:	8b 96       	adiw	r24, 0x2b	; 43
    4eb8:	0e 94 d5 17 	call	0x2faa	; 0x2faa <follow_path>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    4ebc:	00 97       	sbiw	r24, 0x00	; 0
    4ebe:	31 f7       	brne	.-52     	; 0x4e8c <f_unlink+0x48>
			if (dj.fn[NSFLAG] & NS_NONAME) {
    4ec0:	63 96       	adiw	r28, 0x13	; 19
    4ec2:	8f ad       	sts	0x6f, r24
    4ec4:	63 97       	sbiw	r28, 0x13	; 19
    4ec6:	87 fd       	sbrc	r24, 7
    4ec8:	06 c0       	rjmp	.+12     	; 0x4ed6 <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    4eca:	4f a5       	lds	r20, 0x6f
    4ecc:	40 ff       	sbrs	r20, 0
    4ece:	06 c0       	rjmp	.+12     	; 0x4edc <f_unlink+0x98>
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = dir_read(&sdj, 0);			/* Read an item */
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    4ed0:	87 e0       	ldi	r24, 0x07	; 7
    4ed2:	90 e0       	ldi	r25, 0x00	; 0
    4ed4:	db cf       	rjmp	.-74     	; 0x4e8c <f_unlink+0x48>
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    4ed6:	86 e0       	ldi	r24, 0x06	; 6
    4ed8:	90 e0       	ldi	r25, 0x00	; 0
    4eda:	d8 cf       	rjmp	.-80     	; 0x4e8c <f_unlink+0x48>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    4edc:	69 81       	ldd	r22, Y+1	; 0x01
    4ede:	7a 81       	ldd	r23, Y+2	; 0x02
    4ee0:	27 96       	adiw	r28, 0x07	; 7
    4ee2:	ee ad       	sts	0x6e, r30
    4ee4:	ff ad       	sts	0x6f, r31
    4ee6:	27 97       	sbiw	r28, 0x07	; 7
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4ee8:	33 8d       	ldd	r19, Z+27	; 0x1b
    4eea:	20 e0       	ldi	r18, 0x00	; 0
    4eec:	82 8d       	ldd	r24, Z+26	; 0x1a
    4eee:	90 e0       	ldi	r25, 0x00	; 0
    4ef0:	82 2b       	or	r24, r18
    4ef2:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    4ef4:	6c 01       	movw	r12, r24
    4ef6:	ee 24       	eor	r14, r14
    4ef8:	ff 24       	eor	r15, r15
	if (fs->fs_type == FS_FAT32) {
    4efa:	db 01       	movw	r26, r22
    4efc:	8c 91       	ld	r24, X
    4efe:	83 30       	cpi	r24, 0x03	; 3
    4f00:	79 f4       	brne	.+30     	; 0x4f20 <f_unlink+0xdc>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4f02:	35 89       	ldd	r19, Z+21	; 0x15
    4f04:	20 e0       	ldi	r18, 0x00	; 0
    4f06:	84 89       	ldd	r24, Z+20	; 0x14
    4f08:	90 e0       	ldi	r25, 0x00	; 0
    4f0a:	82 2b       	or	r24, r18
    4f0c:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    4f0e:	a0 e0       	ldi	r26, 0x00	; 0
    4f10:	b0 e0       	ldi	r27, 0x00	; 0
    4f12:	dc 01       	movw	r26, r24
    4f14:	99 27       	eor	r25, r25
    4f16:	88 27       	eor	r24, r24
    4f18:	c8 2a       	or	r12, r24
    4f1a:	d9 2a       	or	r13, r25
    4f1c:	ea 2a       	or	r14, r26
    4f1e:	fb 2a       	or	r15, r27
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
    4f20:	44 fd       	sbrc	r20, 4
    4f22:	23 c0       	rjmp	.+70     	; 0x4f6a <f_unlink+0x126>
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    4f24:	0b a5       	lds	r16, 0x6b
    4f26:	1c a5       	lds	r17, 0x6c
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
    4f28:	25 96       	adiw	r28, 0x05	; 5
    4f2a:	4c ad       	sts	0x6c, r20
    4f2c:	5d ad       	sts	0x6d, r21
    4f2e:	6e ad       	sts	0x6e, r22
    4f30:	7f ad       	sts	0x6f, r23
    4f32:	25 97       	sbiw	r28, 0x05	; 5
    4f34:	c8 01       	movw	r24, r16
    4f36:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
	if (res == FR_OK) {
    4f3a:	00 97       	sbiw	r24, 0x00	; 0
    4f3c:	09 f0       	breq	.+2      	; 0x4f40 <f_unlink+0xfc>
    4f3e:	a6 cf       	rjmp	.-180    	; 0x4e8c <f_unlink+0x48>
		dp->dir[DIR_Name] = DDEM;
    4f40:	27 96       	adiw	r28, 0x07	; 7
    4f42:	ee ad       	sts	0x6e, r30
    4f44:	ff ad       	sts	0x6f, r31
    4f46:	27 97       	sbiw	r28, 0x07	; 7
    4f48:	85 ee       	ldi	r24, 0xE5	; 229
    4f4a:	80 83       	st	Z, r24
		fs->wflag = 1;
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	d8 01       	movw	r26, r16
    4f50:	13 96       	adiw	r26, 0x03	; 3
    4f52:	8c 93       	st	X, r24
    4f54:	13 97       	sbiw	r26, 0x03	; 3
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
    4f56:	c1 14       	cp	r12, r1
    4f58:	d1 04       	cpc	r13, r1
    4f5a:	e1 04       	cpc	r14, r1
    4f5c:	f1 04       	cpc	r15, r1
    4f5e:	e9 f4       	brne	.+58     	; 0x4f9a <f_unlink+0x156>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    4f60:	89 81       	ldd	r24, Y+1	; 0x01
    4f62:	9a 81       	ldd	r25, Y+2	; 0x02
    4f64:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <sync_fs>
    4f68:	91 cf       	rjmp	.-222    	; 0x4e8c <f_unlink+0x48>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
    4f6a:	7c 83       	std	Y+4, r23	; 0x04
    4f6c:	6b 83       	std	Y+3, r22	; 0x03
						sdj.obj.sclust = dclst;
    4f6e:	c9 86       	std	Y+9, r12	; 0x09
    4f70:	da 86       	std	Y+10, r13	; 0x0a
    4f72:	eb 86       	std	Y+11, r14	; 0x0b
    4f74:	fc 86       	std	Y+12, r15	; 0x0c
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    4f76:	ce 01       	movw	r24, r28
    4f78:	03 96       	adiw	r24, 0x03	; 3
    4f7a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <dir_sdi.constprop.11>
						if (res == FR_OK) {
    4f7e:	00 97       	sbiw	r24, 0x00	; 0
    4f80:	09 f0       	breq	.+2      	; 0x4f84 <f_unlink+0x140>
    4f82:	84 cf       	rjmp	.-248    	; 0x4e8c <f_unlink+0x48>
							res = dir_read(&sdj, 0);			/* Read an item */
    4f84:	ce 01       	movw	r24, r28
    4f86:	03 96       	adiw	r24, 0x03	; 3
    4f88:	0e 94 75 16 	call	0x2cea	; 0x2cea <dir_read.constprop.10>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    4f8c:	00 97       	sbiw	r24, 0x00	; 0
    4f8e:	09 f4       	brne	.+2      	; 0x4f92 <f_unlink+0x14e>
    4f90:	9f cf       	rjmp	.-194    	; 0x4ed0 <f_unlink+0x8c>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    4f92:	84 30       	cpi	r24, 0x04	; 4
    4f94:	91 05       	cpc	r25, r1
    4f96:	31 f2       	breq	.-116    	; 0x4f24 <f_unlink+0xe0>
    4f98:	79 cf       	rjmp	.-270    	; 0x4e8c <f_unlink+0x48>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    4f9a:	ce 01       	movw	r24, r28
    4f9c:	8b 96       	adiw	r24, 0x2b	; 43
    4f9e:	b7 01       	movw	r22, r14
    4fa0:	a6 01       	movw	r20, r12
    4fa2:	00 e0       	ldi	r16, 0x00	; 0
    4fa4:	10 e0       	ldi	r17, 0x00	; 0
    4fa6:	98 01       	movw	r18, r16
    4fa8:	0e 94 d5 15 	call	0x2baa	; 0x2baa <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    4fac:	00 97       	sbiw	r24, 0x00	; 0
    4fae:	09 f0       	breq	.+2      	; 0x4fb2 <f_unlink+0x16e>
    4fb0:	6d cf       	rjmp	.-294    	; 0x4e8c <f_unlink+0x48>
    4fb2:	d6 cf       	rjmp	.-84     	; 0x4f60 <f_unlink+0x11c>

00004fb4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    4fb4:	2f 92       	push	r2
    4fb6:	3f 92       	push	r3
    4fb8:	4f 92       	push	r4
    4fba:	5f 92       	push	r5
    4fbc:	6f 92       	push	r6
    4fbe:	7f 92       	push	r7
    4fc0:	8f 92       	push	r8
    4fc2:	9f 92       	push	r9
    4fc4:	af 92       	push	r10
    4fc6:	bf 92       	push	r11
    4fc8:	cf 92       	push	r12
    4fca:	df 92       	push	r13
    4fcc:	ef 92       	push	r14
    4fce:	ff 92       	push	r15
    4fd0:	0f 93       	push	r16
    4fd2:	1f 93       	push	r17
    4fd4:	cf 93       	push	r28
    4fd6:	df 93       	push	r29
    4fd8:	cd b7       	in	r28, 0x3d	; 61
    4fda:	de b7       	in	r29, 0x3e	; 62
    4fdc:	e1 97       	sbiw	r28, 0x31	; 49
    4fde:	0f b6       	in	r0, 0x3f	; 63
    4fe0:	f8 94       	cli
    4fe2:	de bf       	out	0x3e, r29	; 62
    4fe4:	0f be       	out	0x3f, r0	; 63
    4fe6:	cd bf       	out	0x3d, r28	; 61
    4fe8:	9c a7       	lds	r25, 0x7c
    4fea:	8b a7       	lds	r24, 0x7b
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
    4fec:	ce 01       	movw	r24, r28
    4fee:	8b 96       	adiw	r24, 0x2b	; 43
    4ff0:	be 01       	movw	r22, r28
    4ff2:	6f 5f       	subi	r22, 0xFF	; 255
    4ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ff6:	42 e0       	ldi	r20, 0x02	; 2
    4ff8:	0e 94 65 0c 	call	0x18ca	; 0x18ca <find_volume>
    4ffc:	7c 01       	movw	r14, r24
	dj.obj.fs = fs;
    4ffe:	89 81       	ldd	r24, Y+1	; 0x01
    5000:	9a 81       	ldd	r25, Y+2	; 0x02
    5002:	9c 83       	std	Y+4, r25	; 0x04
    5004:	8b 83       	std	Y+3, r24	; 0x03
	if (res == FR_OK) {
    5006:	e1 14       	cp	r14, r1
    5008:	f1 04       	cpc	r15, r1
    500a:	d1 f0       	breq	.+52     	; 0x5040 <f_mkdir+0x8c>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    500c:	c7 01       	movw	r24, r14
    500e:	e1 96       	adiw	r28, 0x31	; 49
    5010:	0f b6       	in	r0, 0x3f	; 63
    5012:	f8 94       	cli
    5014:	de bf       	out	0x3e, r29	; 62
    5016:	0f be       	out	0x3f, r0	; 63
    5018:	cd bf       	out	0x3d, r28	; 61
    501a:	df 91       	pop	r29
    501c:	cf 91       	pop	r28
    501e:	1f 91       	pop	r17
    5020:	0f 91       	pop	r16
    5022:	ff 90       	pop	r15
    5024:	ef 90       	pop	r14
    5026:	df 90       	pop	r13
    5028:	cf 90       	pop	r12
    502a:	bf 90       	pop	r11
    502c:	af 90       	pop	r10
    502e:	9f 90       	pop	r9
    5030:	8f 90       	pop	r8
    5032:	7f 90       	pop	r7
    5034:	6f 90       	pop	r6
    5036:	5f 90       	pop	r5
    5038:	4f 90       	pop	r4
    503a:	3f 90       	pop	r3
    503c:	2f 90       	pop	r2
    503e:	08 95       	ret
	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
    5040:	6b a5       	lds	r22, 0x6b
    5042:	7c a5       	lds	r23, 0x6c
    5044:	ce 01       	movw	r24, r28
    5046:	03 96       	adiw	r24, 0x03	; 3
    5048:	0e 94 d5 17 	call	0x2faa	; 0x2faa <follow_path>
    504c:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    504e:	00 97       	sbiw	r24, 0x00	; 0
    5050:	b9 f1       	breq	.+110    	; 0x50c0 <f_mkdir+0x10c>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
    5052:	84 30       	cpi	r24, 0x04	; 4
    5054:	91 05       	cpc	r25, r1
    5056:	d1 f6       	brne	.-76     	; 0x500c <f_mkdir+0x58>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
    5058:	ce 01       	movw	r24, r28
    505a:	03 96       	adiw	r24, 0x03	; 3
    505c:	40 e0       	ldi	r20, 0x00	; 0
    505e:	50 e0       	ldi	r21, 0x00	; 0
    5060:	ba 01       	movw	r22, r20
    5062:	0e 94 00 13 	call	0x2600	; 0x2600 <create_chain>
    5066:	6d a7       	lds	r22, 0x7d
    5068:	7e a7       	lds	r23, 0x7e
    506a:	8f a7       	lds	r24, 0x7f
    506c:	98 ab       	sts	0x58, r25
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
    506e:	e9 81       	ldd	r30, Y+1	; 0x01
    5070:	fa 81       	ldd	r31, Y+2	; 0x02
    5072:	81 85       	ldd	r24, Z+9	; 0x09
    5074:	92 85       	ldd	r25, Z+10	; 0x0a
    5076:	a0 e0       	ldi	r26, 0x00	; 0
    5078:	b0 e0       	ldi	r27, 0x00	; 0
    507a:	19 e0       	ldi	r17, 0x09	; 9
    507c:	88 0f       	add	r24, r24
    507e:	99 1f       	adc	r25, r25
    5080:	aa 1f       	adc	r26, r26
    5082:	bb 1f       	adc	r27, r27
    5084:	1a 95       	dec	r17
    5086:	d1 f7       	brne	.-12     	; 0x507c <f_mkdir+0xc8>
    5088:	8d 87       	std	Y+13, r24	; 0x0d
    508a:	9e 87       	std	Y+14, r25	; 0x0e
    508c:	af 87       	std	Y+15, r26	; 0x0f
    508e:	b8 8b       	std	Y+16, r27	; 0x10
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    5090:	0d a5       	lds	r16, 0x6d
    5092:	1e a5       	lds	r17, 0x6e
    5094:	2f a5       	lds	r18, 0x6f
    5096:	38 a9       	sts	0x48, r19
    5098:	01 15       	cp	r16, r1
    509a:	11 05       	cpc	r17, r1
    509c:	21 05       	cpc	r18, r1
    509e:	31 05       	cpc	r19, r1
    50a0:	99 f4       	brne	.+38     	; 0x50c8 <f_mkdir+0x114>
    50a2:	97 e0       	ldi	r25, 0x07	; 7
    50a4:	e9 2e       	mov	r14, r25
    50a6:	f1 2c       	mov	r15, r1
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
					fs->wflag = 1;
				}
				if (res == FR_OK) res = sync_fs(fs);
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
    50a8:	ce 01       	movw	r24, r28
    50aa:	03 96       	adiw	r24, 0x03	; 3
    50ac:	4d a5       	lds	r20, 0x6d
    50ae:	5e a5       	lds	r21, 0x6e
    50b0:	6f a5       	lds	r22, 0x6f
    50b2:	78 a9       	sts	0x48, r23
    50b4:	00 e0       	ldi	r16, 0x00	; 0
    50b6:	10 e0       	ldi	r17, 0x00	; 0
    50b8:	98 01       	movw	r18, r16
    50ba:	0e 94 d5 15 	call	0x2baa	; 0x2baa <remove_chain>
    50be:	a6 cf       	rjmp	.-180    	; 0x500c <f_mkdir+0x58>
	res = find_volume(&path, &fs, FA_WRITE);
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    50c0:	28 e0       	ldi	r18, 0x08	; 8
    50c2:	e2 2e       	mov	r14, r18
    50c4:	f1 2c       	mov	r15, r1
    50c6:	a2 cf       	rjmp	.-188    	; 0x500c <f_mkdir+0x58>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    50c8:	01 30       	cpi	r16, 0x01	; 1
    50ca:	11 05       	cpc	r17, r1
    50cc:	21 05       	cpc	r18, r1
    50ce:	31 05       	cpc	r19, r1
    50d0:	21 f4       	brne	.+8      	; 0x50da <f_mkdir+0x126>
    50d2:	82 e0       	ldi	r24, 0x02	; 2
    50d4:	e8 2e       	mov	r14, r24
    50d6:	f1 2c       	mov	r15, r1
    50d8:	e7 cf       	rjmp	.-50     	; 0x50a8 <f_mkdir+0xf4>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    50da:	0f 3f       	cpi	r16, 0xFF	; 255
    50dc:	4f ef       	ldi	r20, 0xFF	; 255
    50de:	14 07       	cpc	r17, r20
    50e0:	4f ef       	ldi	r20, 0xFF	; 255
    50e2:	24 07       	cpc	r18, r20
    50e4:	4f ef       	ldi	r20, 0xFF	; 255
    50e6:	34 07       	cpc	r19, r20
    50e8:	21 f4       	brne	.+8      	; 0x50f2 <f_mkdir+0x13e>
    50ea:	01 e0       	ldi	r16, 0x01	; 1
    50ec:	e0 2e       	mov	r14, r16
    50ee:	f1 2c       	mov	r15, r1
    50f0:	db cf       	rjmp	.-74     	; 0x50a8 <f_mkdir+0xf4>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
    50f2:	cf 01       	movw	r24, r30
    50f4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <sync_window>
    50f8:	7c 01       	movw	r14, r24
			tm = GET_FATTIME();
			if (res == FR_OK) {					/* Initialize the new directory table */
    50fa:	00 97       	sbiw	r24, 0x00	; 0
    50fc:	a9 f6       	brne	.-86     	; 0x50a8 <f_mkdir+0xf4>
				dsc = clust2sect(fs, dcl);
    50fe:	e9 80       	ldd	r14, Y+1	; 0x01
    5100:	fa 80       	ldd	r15, Y+2	; 0x02
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    5102:	8d a4       	lds	r24, 0xad
    5104:	9e a4       	lds	r25, 0xae
    5106:	af a4       	lds	r26, 0xaf
    5108:	b8 a8       	sts	0x88, r27
    510a:	8e ef       	ldi	r24, 0xFE	; 254
    510c:	9f ef       	ldi	r25, 0xFF	; 255
    510e:	af ef       	ldi	r26, 0xFF	; 255
    5110:	bf ef       	ldi	r27, 0xFF	; 255
    5112:	88 0e       	add	r8, r24
    5114:	99 1e       	adc	r9, r25
    5116:	aa 1e       	adc	r10, r26
    5118:	bb 1e       	adc	r11, r27
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    511a:	f7 01       	movw	r30, r14
    511c:	83 89       	ldd	r24, Z+19	; 0x13
    511e:	94 89       	ldd	r25, Z+20	; 0x14
    5120:	a5 89       	ldd	r26, Z+21	; 0x15
    5122:	b6 89       	ldd	r27, Z+22	; 0x16
    5124:	02 97       	sbiw	r24, 0x02	; 2
    5126:	a1 09       	sbc	r26, r1
    5128:	b1 09       	sbc	r27, r1
    512a:	88 16       	cp	r8, r24
    512c:	99 06       	cpc	r9, r25
    512e:	aa 06       	cpc	r10, r26
    5130:	bb 06       	cpc	r11, r27
    5132:	08 f0       	brcs	.+2      	; 0x5136 <f_mkdir+0x182>
    5134:	e4 c0       	rjmp	.+456    	; 0x52fe <f_mkdir+0x34a>
	return clst * fs->csize + fs->database;
    5136:	21 85       	ldd	r18, Z+9	; 0x09
    5138:	32 85       	ldd	r19, Z+10	; 0x0a
    513a:	40 e0       	ldi	r20, 0x00	; 0
    513c:	50 e0       	ldi	r21, 0x00	; 0
    513e:	c5 01       	movw	r24, r10
    5140:	b4 01       	movw	r22, r8
    5142:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__mulsi3>
    5146:	2b 01       	movw	r4, r22
    5148:	3c 01       	movw	r6, r24
    514a:	f7 01       	movw	r30, r14
    514c:	87 a1       	lds	r24, 0x47
    514e:	90 a5       	lds	r25, 0x60
    5150:	a1 a5       	lds	r26, 0x61
    5152:	b2 a5       	lds	r27, 0x62
    5154:	48 0e       	add	r4, r24
    5156:	59 1e       	adc	r5, r25
    5158:	6a 1e       	adc	r6, r26
    515a:	7b 1e       	adc	r7, r27
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
			tm = GET_FATTIME();
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(fs, dcl);
				dir = fs->win;
    515c:	af e2       	ldi	r26, 0x2F	; 47
    515e:	ca 2e       	mov	r12, r26
    5160:	d1 2c       	mov	r13, r1
    5162:	ce 0c       	add	r12, r14
    5164:	df 1c       	adc	r13, r15

/*-----------------------------------------------------------------------*/
/* Create a Directory                                                    */
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
    5166:	87 01       	movw	r16, r14
    5168:	01 5d       	subi	r16, 0xD1	; 209
    516a:	1d 4f       	sbci	r17, 0xFD	; 253
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    516c:	f6 01       	movw	r30, r12

	do *d++ = (BYTE)val; while (--cnt);
    516e:	11 92       	st	Z+, r1
    5170:	e0 17       	cp	r30, r16
    5172:	f1 07       	cpc	r31, r17
    5174:	e1 f7       	brne	.-8      	; 0x516e <f_mkdir+0x1ba>

/*-----------------------------------------------------------------------*/
/* Create a Directory                                                    */
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
    5176:	c6 01       	movw	r24, r12
    5178:	0b 96       	adiw	r24, 0x0b	; 11
    517a:	f6 01       	movw	r30, r12
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    517c:	20 e2       	ldi	r18, 0x20	; 32
    517e:	21 93       	st	Z+, r18
    5180:	e8 17       	cp	r30, r24
    5182:	f9 07       	cpc	r31, r25
    5184:	e1 f7       	brne	.-8      	; 0x517e <f_mkdir+0x1ca>
				dsc = clust2sect(fs, dcl);
				dir = fs->win;
				mem_set(dir, 0, SS(fs));
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
					dir[DIR_Name] = '.';
    5186:	8e e2       	ldi	r24, 0x2E	; 46
    5188:	d7 01       	movw	r26, r14
    518a:	9f 96       	adiw	r26, 0x2f	; 47
    518c:	8c 93       	st	X, r24
    518e:	9f 97       	sbiw	r26, 0x2f	; 47
					dir[DIR_Attr] = AM_DIR;
    5190:	80 e1       	ldi	r24, 0x10	; 16
    5192:	da 96       	adiw	r26, 0x3a	; 58
    5194:	8c 93       	st	X, r24
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    5196:	f7 01       	movw	r30, r14
    5198:	eb 5b       	subi	r30, 0xBB	; 187
    519a:	ff 4f       	sbci	r31, 0xFF	; 255
    519c:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    519e:	f7 01       	movw	r30, r14
    51a0:	ea 5b       	subi	r30, 0xBA	; 186
    51a2:	ff 4f       	sbci	r31, 0xFF	; 255
    51a4:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    51a6:	f7 01       	movw	r30, r14
    51a8:	e9 5b       	subi	r30, 0xB9	; 185
    51aa:	ff 4f       	sbci	r31, 0xFF	; 255
    51ac:	81 e2       	ldi	r24, 0x21	; 33
    51ae:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    51b0:	f7 01       	movw	r30, r14
    51b2:	e8 5b       	subi	r30, 0xB8	; 184
    51b4:	ff 4f       	sbci	r31, 0xFF	; 255
    51b6:	88 e4       	ldi	r24, 0x48	; 72
    51b8:	80 83       	st	Z, r24
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
					dir[DIR_Name] = '.';
					dir[DIR_Attr] = AM_DIR;
					st_dword(dir + DIR_ModTime, tm);
					st_clust(fs, dir, dcl);
    51ba:	a9 81       	ldd	r26, Y+1	; 0x01
    51bc:	ba 81       	ldd	r27, Y+2	; 0x02

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    51be:	2d a4       	lds	r18, 0xad
    51c0:	f7 01       	movw	r30, r14
    51c2:	e7 5b       	subi	r30, 0xB7	; 183
    51c4:	ff 4f       	sbci	r31, 0xFF	; 255
    51c6:	20 82       	st	Z, r2
	*ptr++ = (BYTE)val;
    51c8:	3e a5       	lds	r19, 0x6e
    51ca:	39 ab       	sts	0x59, r19
    51cc:	f7 01       	movw	r30, r14
    51ce:	e6 5b       	subi	r30, 0xB6	; 182
    51d0:	ff 4f       	sbci	r31, 0xFF	; 255
    51d2:	30 83       	st	Z, r19
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    51d4:	8c 91       	ld	r24, X
    51d6:	83 30       	cpi	r24, 0x03	; 3
    51d8:	09 f4       	brne	.+2      	; 0x51dc <f_mkdir+0x228>
    51da:	ab c0       	rjmp	.+342    	; 0x5332 <f_mkdir+0x37e>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
					dir[DIR_Name] = '.';
					dir[DIR_Attr] = AM_DIR;
					st_dword(dir + DIR_ModTime, tm);
					st_clust(fs, dir, dcl);
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
    51dc:	c7 01       	movw	r24, r14
    51de:	81 5b       	subi	r24, 0xB1	; 177
    51e0:	9f 4f       	sbci	r25, 0xFF	; 255
    51e2:	b6 01       	movw	r22, r12
    51e4:	40 e2       	ldi	r20, 0x20	; 32
    51e6:	50 e0       	ldi	r21, 0x00	; 0
    51e8:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    51ec:	f7 01       	movw	r30, r14
    51ee:	e0 5b       	subi	r30, 0xB0	; 176
    51f0:	ff 4f       	sbci	r31, 0xFF	; 255
    51f2:	8e e2       	ldi	r24, 0x2E	; 46
    51f4:	80 83       	st	Z, r24
    51f6:	49 85       	ldd	r20, Y+9	; 0x09
    51f8:	5a 85       	ldd	r21, Y+10	; 0x0a
    51fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    51fc:	7c 85       	ldd	r23, Y+12	; 0x0c
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
    51fe:	29 81       	ldd	r18, Y+1	; 0x01
    5200:	3a 81       	ldd	r19, Y+2	; 0x02
    5202:	d9 01       	movw	r26, r18
    5204:	8c 91       	ld	r24, X
    5206:	83 30       	cpi	r24, 0x03	; 3
    5208:	09 f4       	brne	.+2      	; 0x520c <f_mkdir+0x258>
    520a:	45 c0       	rjmp	.+138    	; 0x5296 <f_mkdir+0x2e2>
    520c:	ca 01       	movw	r24, r20

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    520e:	f7 01       	movw	r30, r14
    5210:	e7 59       	subi	r30, 0x97	; 151
    5212:	ff 4f       	sbci	r31, 0xFF	; 255
    5214:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    5216:	f7 01       	movw	r30, r14
    5218:	e6 59       	subi	r30, 0x96	; 150
    521a:	ff 4f       	sbci	r31, 0xFF	; 255
    521c:	90 83       	st	Z, r25
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    521e:	d9 01       	movw	r26, r18
    5220:	8c 91       	ld	r24, X
    5222:	83 30       	cpi	r24, 0x03	; 3
    5224:	09 f4       	brne	.+2      	; 0x5228 <f_mkdir+0x274>
    5226:	79 c0       	rjmp	.+242    	; 0x531a <f_mkdir+0x366>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    5228:	f9 01       	movw	r30, r18
    522a:	81 85       	ldd	r24, Z+9	; 0x09
    522c:	92 85       	ldd	r25, Z+10	; 0x0a
    522e:	00 97       	sbiw	r24, 0x00	; 0
    5230:	09 f4       	brne	.+2      	; 0x5234 <f_mkdir+0x280>
    5232:	42 c0       	rjmp	.+132    	; 0x52b8 <f_mkdir+0x304>

/*-----------------------------------------------------------------------*/
/* Create a Directory                                                    */
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
    5234:	01 97       	sbiw	r24, 0x01	; 1
    5236:	4c 01       	movw	r8, r24
    5238:	aa 24       	eor	r10, r10
    523a:	bb 24       	eor	r11, r11
    523c:	08 94       	sec
    523e:	81 1c       	adc	r8, r1
    5240:	91 1c       	adc	r9, r1
    5242:	a1 1c       	adc	r10, r1
    5244:	b1 1c       	adc	r11, r1
    5246:	84 0c       	add	r8, r4
    5248:	95 1c       	adc	r9, r5
    524a:	a6 1c       	adc	r10, r6
    524c:	b7 1c       	adc	r11, r7
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					fs->winsect = dsc++;
					fs->wflag = 1;
    524e:	33 24       	eor	r3, r3
    5250:	33 94       	inc	r3
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					fs->winsect = dsc++;
    5252:	d9 01       	movw	r26, r18
    5254:	9b 96       	adiw	r26, 0x2b	; 43
    5256:	4d 92       	st	X+, r4
    5258:	5d 92       	st	X+, r5
    525a:	6d 92       	st	X+, r6
    525c:	7c 92       	st	X, r7
    525e:	9e 97       	sbiw	r26, 0x2e	; 46
    5260:	08 94       	sec
    5262:	41 1c       	adc	r4, r1
    5264:	51 1c       	adc	r5, r1
    5266:	61 1c       	adc	r6, r1
    5268:	71 1c       	adc	r7, r1
					fs->wflag = 1;
    526a:	13 96       	adiw	r26, 0x03	; 3
    526c:	3c 92       	st	X, r3
					res = sync_window(fs);
    526e:	c9 01       	movw	r24, r18
    5270:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <sync_window>
    5274:	7c 01       	movw	r14, r24
					if (res != FR_OK) break;
    5276:	00 97       	sbiw	r24, 0x00	; 0
    5278:	09 f0       	breq	.+2      	; 0x527c <f_mkdir+0x2c8>
    527a:	16 cf       	rjmp	.-468    	; 0x50a8 <f_mkdir+0xf4>
    527c:	f6 01       	movw	r30, r12
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    527e:	11 92       	st	Z+, r1
    5280:	0e 17       	cp	r16, r30
    5282:	1f 07       	cpc	r17, r31
    5284:	e1 f7       	brne	.-8      	; 0x527e <f_mkdir+0x2ca>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    5286:	48 14       	cp	r4, r8
    5288:	59 04       	cpc	r5, r9
    528a:	6a 04       	cpc	r6, r10
    528c:	7b 04       	cpc	r7, r11
    528e:	a1 f0       	breq	.+40     	; 0x52b8 <f_mkdir+0x304>
    5290:	29 81       	ldd	r18, Y+1	; 0x01
    5292:	3a 81       	ldd	r19, Y+2	; 0x02
    5294:	de cf       	rjmp	.-68     	; 0x5252 <f_mkdir+0x29e>
					dir[DIR_Attr] = AM_DIR;
					st_dword(dir + DIR_ModTime, tm);
					st_clust(fs, dir, dcl);
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
    5296:	f9 01       	movw	r30, r18
    5298:	83 a1       	lds	r24, 0x43
    529a:	94 a1       	lds	r25, 0x44
    529c:	a5 a1       	lds	r26, 0x45
    529e:	b6 a1       	lds	r27, 0x46
    52a0:	84 17       	cp	r24, r20
    52a2:	95 07       	cpc	r25, r21
    52a4:	a6 07       	cpc	r26, r22
    52a6:	b7 07       	cpc	r27, r23
    52a8:	09 f0       	breq	.+2      	; 0x52ac <f_mkdir+0x2f8>
    52aa:	b0 cf       	rjmp	.-160    	; 0x520c <f_mkdir+0x258>
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	80 e0       	ldi	r24, 0x00	; 0
    52b0:	40 e0       	ldi	r20, 0x00	; 0
    52b2:	50 e0       	ldi	r21, 0x00	; 0
    52b4:	ba 01       	movw	r22, r20
    52b6:	ab cf       	rjmp	.-170    	; 0x520e <f_mkdir+0x25a>
					res = sync_window(fs);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    52b8:	ce 01       	movw	r24, r28
    52ba:	03 96       	adiw	r24, 0x03	; 3
    52bc:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <dir_register>
    52c0:	7c 01       	movw	r14, r24
			if (res == FR_OK) {
    52c2:	00 97       	sbiw	r24, 0x00	; 0
    52c4:	09 f0       	breq	.+2      	; 0x52c8 <f_mkdir+0x314>
    52c6:	f0 ce       	rjmp	.-544    	; 0x50a8 <f_mkdir+0xf4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
    52c8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    52ca:	fe 8d       	ldd	r31, Y+30	; 0x1e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    52cc:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    52ce:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    52d0:	81 e2       	ldi	r24, 0x21	; 33
    52d2:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    52d4:	88 e4       	ldi	r24, 0x48	; 72
    52d6:	81 8f       	std	Z+25, r24	; 0x19
				} else
#endif
				{
					dir = dj.dir;
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
					st_clust(fs, dir, dcl);				/* Table start cluster */
    52d8:	89 81       	ldd	r24, Y+1	; 0x01
    52da:	9a 81       	ldd	r25, Y+2	; 0x02

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    52dc:	22 8e       	std	Z+26, r2	; 0x1a
	*ptr++ = (BYTE)val;
    52de:	09 a9       	sts	0x49, r16
    52e0:	03 8f       	std	Z+27, r16	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    52e2:	dc 01       	movw	r26, r24
    52e4:	2c 91       	ld	r18, X
    52e6:	23 30       	cpi	r18, 0x03	; 3
    52e8:	71 f0       	breq	.+28     	; 0x5306 <f_mkdir+0x352>
#endif
				{
					dir = dj.dir;
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
					st_clust(fs, dir, dcl);				/* Table start cluster */
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
    52ea:	20 e1       	ldi	r18, 0x10	; 16
    52ec:	23 87       	std	Z+11, r18	; 0x0b
					fs->wflag = 1;
    52ee:	21 e0       	ldi	r18, 0x01	; 1
    52f0:	dc 01       	movw	r26, r24
    52f2:	13 96       	adiw	r26, 0x03	; 3
    52f4:	2c 93       	st	X, r18
				}
				if (res == FR_OK) res = sync_fs(fs);
    52f6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <sync_fs>
    52fa:	7c 01       	movw	r14, r24
    52fc:	87 ce       	rjmp	.-754    	; 0x500c <f_mkdir+0x58>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    52fe:	44 24       	eor	r4, r4
    5300:	55 24       	eor	r5, r5
    5302:	32 01       	movw	r6, r4
    5304:	2b cf       	rjmp	.-426    	; 0x515c <f_mkdir+0x1a8>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    5306:	0d a5       	lds	r16, 0x6d
    5308:	1e a5       	lds	r17, 0x6e
    530a:	2f a5       	lds	r18, 0x6f
    530c:	38 a9       	sts	0x48, r19
    530e:	a9 01       	movw	r20, r18
    5310:	66 27       	eor	r22, r22
    5312:	77 27       	eor	r23, r23

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    5314:	44 8b       	std	Z+20, r20	; 0x14
	*ptr++ = (BYTE)val;
    5316:	55 8b       	std	Z+21, r21	; 0x15
    5318:	e8 cf       	rjmp	.-48     	; 0x52ea <f_mkdir+0x336>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    531a:	ab 01       	movw	r20, r22
    531c:	66 27       	eor	r22, r22
    531e:	77 27       	eor	r23, r23

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    5320:	f7 01       	movw	r30, r14
    5322:	ed 59       	subi	r30, 0x9D	; 157
    5324:	ff 4f       	sbci	r31, 0xFF	; 255
    5326:	40 83       	st	Z, r20
	*ptr++ = (BYTE)val;
    5328:	f7 01       	movw	r30, r14
    532a:	ec 59       	subi	r30, 0x9C	; 156
    532c:	ff 4f       	sbci	r31, 0xFF	; 255
    532e:	50 83       	st	Z, r21
    5330:	7b cf       	rjmp	.-266    	; 0x5228 <f_mkdir+0x274>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    5332:	2d a5       	lds	r18, 0x6d
    5334:	3e a5       	lds	r19, 0x6e
    5336:	4f a5       	lds	r20, 0x6f
    5338:	58 a9       	sts	0x48, r21
    533a:	ca 01       	movw	r24, r20
    533c:	aa 27       	eor	r26, r26
    533e:	bb 27       	eor	r27, r27

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    5340:	f7 01       	movw	r30, r14
    5342:	ed 5b       	subi	r30, 0xBD	; 189
    5344:	ff 4f       	sbci	r31, 0xFF	; 255
    5346:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    5348:	f7 01       	movw	r30, r14
    534a:	ec 5b       	subi	r30, 0xBC	; 188
    534c:	ff 4f       	sbci	r31, 0xFF	; 255
    534e:	90 83       	st	Z, r25
    5350:	45 cf       	rjmp	.-374    	; 0x51dc <f_mkdir+0x228>

00005352 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    5352:	ef 92       	push	r14
    5354:	ff 92       	push	r15
    5356:	0f 93       	push	r16
    5358:	1f 93       	push	r17
    535a:	cf 93       	push	r28
    535c:	df 93       	push	r29
    535e:	cd b7       	in	r28, 0x3d	; 61
    5360:	de b7       	in	r29, 0x3e	; 62
    5362:	ce 56       	subi	r28, 0x6E	; 110
    5364:	d0 40       	sbci	r29, 0x00	; 0
    5366:	0f b6       	in	r0, 0x3f	; 63
    5368:	f8 94       	cli
    536a:	de bf       	out	0x3e, r29	; 62
    536c:	0f be       	out	0x3f, r0	; 63
    536e:	cd bf       	out	0x3d, r28	; 61
    5370:	ad 96       	adiw	r28, 0x2d	; 45
    5372:	9f af       	sts	0x7f, r25
    5374:	8e af       	sts	0x7e, r24
    5376:	ad 97       	sbiw	r28, 0x2d	; 45
    5378:	af 96       	adiw	r28, 0x2f	; 47
    537a:	7f af       	sts	0x7f, r23
    537c:	6e af       	sts	0x7e, r22
    537e:	af 97       	sbiw	r28, 0x2f	; 47
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Ignore drive number of new name */
    5380:	ce 01       	movw	r24, r28
    5382:	83 59       	subi	r24, 0x93	; 147
    5384:	9f 4f       	sbci	r25, 0xFF	; 255
    5386:	0e 94 6f 09 	call	0x12de	; 0x12de <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive number of the old object */
    538a:	ce 01       	movw	r24, r28
    538c:	85 59       	subi	r24, 0x95	; 149
    538e:	9f 4f       	sbci	r25, 0xFF	; 255
    5390:	be 01       	movw	r22, r28
    5392:	6f 5f       	subi	r22, 0xFF	; 255
    5394:	7f 4f       	sbci	r23, 0xFF	; 255
    5396:	42 e0       	ldi	r20, 0x02	; 2
    5398:	0e 94 65 0c 	call	0x18ca	; 0x18ca <find_volume>
	if (res == FR_OK) {
    539c:	00 97       	sbiw	r24, 0x00	; 0
    539e:	71 f0       	breq	.+28     	; 0x53bc <f_rename+0x6a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    53a0:	c2 59       	subi	r28, 0x92	; 146
    53a2:	df 4f       	sbci	r29, 0xFF	; 255
    53a4:	0f b6       	in	r0, 0x3f	; 63
    53a6:	f8 94       	cli
    53a8:	de bf       	out	0x3e, r29	; 62
    53aa:	0f be       	out	0x3f, r0	; 63
    53ac:	cd bf       	out	0x3d, r28	; 61
    53ae:	df 91       	pop	r29
    53b0:	cf 91       	pop	r28
    53b2:	1f 91       	pop	r17
    53b4:	0f 91       	pop	r16
    53b6:	ff 90       	pop	r15
    53b8:	ef 90       	pop	r14
    53ba:	08 95       	ret


	get_ldnumber(&path_new);						/* Ignore drive number of new name */
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive number of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
    53bc:	89 81       	ldd	r24, Y+1	; 0x01
    53be:	9a 81       	ldd	r25, Y+2	; 0x02
    53c0:	25 96       	adiw	r28, 0x05	; 5
    53c2:	9f af       	sts	0x7f, r25
    53c4:	8e af       	sts	0x7e, r24
    53c6:	25 97       	sbiw	r28, 0x05	; 5
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
    53c8:	ad 96       	adiw	r28, 0x2d	; 45
    53ca:	6e ad       	sts	0x6e, r22
    53cc:	7f ad       	sts	0x6f, r23
    53ce:	ad 97       	sbiw	r28, 0x2d	; 45
    53d0:	ce 01       	movw	r24, r28
    53d2:	8d 5b       	subi	r24, 0xBD	; 189
    53d4:	9f 4f       	sbci	r25, 0xFF	; 255
    53d6:	0e 94 d5 17 	call	0x2faa	; 0x2faa <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    53da:	00 97       	sbiw	r24, 0x00	; 0
    53dc:	09 f7       	brne	.-62     	; 0x53a0 <f_rename+0x4e>
    53de:	ab 96       	adiw	r28, 0x2b	; 43
    53e0:	8f ad       	sts	0x6f, r24
    53e2:	ab 97       	sbiw	r28, 0x2b	; 43
    53e4:	80 7a       	andi	r24, 0xA0	; 160
    53e6:	19 f0       	breq	.+6      	; 0x53ee <f_rename+0x9c>
    53e8:	86 e0       	ldi	r24, 0x06	; 6
    53ea:	90 e0       	ldi	r25, 0x00	; 0
    53ec:	d9 cf       	rjmp	.-78     	; 0x53a0 <f_rename+0x4e>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
    53ee:	6f 96       	adiw	r28, 0x1f	; 31
    53f0:	6e ad       	sts	0x6e, r22
    53f2:	7f ad       	sts	0x6f, r23
    53f4:	6f 97       	sbiw	r28, 0x1f	; 31
    53f6:	65 5f       	subi	r22, 0xF5	; 245
    53f8:	7f 4f       	sbci	r23, 0xFF	; 255
    53fa:	ce 01       	movw	r24, r28
    53fc:	03 96       	adiw	r24, 0x03	; 3
    53fe:	45 e1       	ldi	r20, 0x15	; 21
    5400:	50 e0       	ldi	r21, 0x00	; 0
    5402:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
    5406:	ce 01       	movw	r24, r28
    5408:	4b 96       	adiw	r24, 0x1b	; 27
    540a:	be 01       	movw	r22, r28
    540c:	6d 5b       	subi	r22, 0xBD	; 189
    540e:	7f 4f       	sbci	r23, 0xFF	; 255
    5410:	48 e2       	ldi	r20, 0x28	; 40
    5412:	50 e0       	ldi	r21, 0x00	; 0
    5414:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    5418:	af 96       	adiw	r28, 0x2f	; 47
    541a:	6e ad       	sts	0x6e, r22
    541c:	7f ad       	sts	0x6f, r23
    541e:	af 97       	sbiw	r28, 0x2f	; 47
    5420:	ce 01       	movw	r24, r28
    5422:	4b 96       	adiw	r24, 0x1b	; 27
    5424:	0e 94 d5 17 	call	0x2faa	; 0x2faa <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    5428:	00 97       	sbiw	r24, 0x00	; 0
    542a:	99 f4       	brne	.+38     	; 0x5452 <f_rename+0x100>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    542c:	49 a1       	lds	r20, 0x49
    542e:	5a a1       	lds	r21, 0x4a
    5430:	6b a1       	lds	r22, 0x4b
    5432:	7c a1       	lds	r23, 0x4c
    5434:	2d 96       	adiw	r28, 0x0d	; 13
    5436:	8c ad       	sts	0x6c, r24
    5438:	9d ad       	sts	0x6d, r25
    543a:	ae ad       	sts	0x6e, r26
    543c:	bf ad       	sts	0x6f, r27
    543e:	2d 97       	sbiw	r28, 0x0d	; 13
    5440:	48 17       	cp	r20, r24
    5442:	59 07       	cpc	r21, r25
    5444:	6a 07       	cpc	r22, r26
    5446:	7b 07       	cpc	r23, r27
    5448:	09 f4       	brne	.+2      	; 0x544c <f_rename+0xfa>
    544a:	9d c0       	rjmp	.+314    	; 0x5586 <f_rename+0x234>
    544c:	88 e0       	ldi	r24, 0x08	; 8
    544e:	90 e0       	ldi	r25, 0x00	; 0
    5450:	a7 cf       	rjmp	.-178    	; 0x53a0 <f_rename+0x4e>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    5452:	84 30       	cpi	r24, 0x04	; 4
    5454:	91 05       	cpc	r25, r1
    5456:	09 f0       	breq	.+2      	; 0x545a <f_rename+0x108>
    5458:	a3 cf       	rjmp	.-186    	; 0x53a0 <f_rename+0x4e>
					res = dir_register(&djn);			/* Register the new entry */
    545a:	ce 01       	movw	r24, r28
    545c:	4b 96       	adiw	r24, 0x1b	; 27
    545e:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <dir_register>
					if (res == FR_OK) {
    5462:	00 97       	sbiw	r24, 0x00	; 0
    5464:	09 f0       	breq	.+2      	; 0x5468 <f_rename+0x116>
    5466:	9c cf       	rjmp	.-200    	; 0x53a0 <f_rename+0x4e>
						dir = djn.dir;					/* Copy information about object except name */
    5468:	0d a9       	sts	0x4d, r16
    546a:	1e a9       	sts	0x4e, r17
						mem_cpy(dir + 13, buf + 2, 19);
    546c:	c8 01       	movw	r24, r16
    546e:	0d 96       	adiw	r24, 0x0d	; 13
    5470:	be 01       	movw	r22, r28
    5472:	6b 5f       	subi	r22, 0xFB	; 251
    5474:	7f 4f       	sbci	r23, 0xFF	; 255
    5476:	43 e1       	ldi	r20, 0x13	; 19
    5478:	50 e0       	ldi	r21, 0x00	; 0
    547a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    547e:	8b 81       	ldd	r24, Y+3	; 0x03
    5480:	80 62       	ori	r24, 0x20	; 32
    5482:	f8 01       	movw	r30, r16
    5484:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    5486:	e9 80       	ldd	r14, Y+1	; 0x01
    5488:	fa 80       	ldd	r15, Y+2	; 0x02
    548a:	81 e0       	ldi	r24, 0x01	; 1
    548c:	f7 01       	movw	r30, r14
    548e:	83 83       	std	Z+3, r24	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    5490:	f8 01       	movw	r30, r16
    5492:	83 85       	ldd	r24, Z+11	; 0x0b
    5494:	84 ff       	sbrs	r24, 4
    5496:	59 c0       	rjmp	.+178    	; 0x554a <f_rename+0x1f8>
    5498:	2d 96       	adiw	r28, 0x0d	; 13
    549a:	4c ad       	sts	0x6c, r20
    549c:	5d ad       	sts	0x6d, r21
    549e:	6e ad       	sts	0x6e, r22
    54a0:	7f ad       	sts	0x6f, r23
    54a2:	2d 97       	sbiw	r28, 0x0d	; 13
    54a4:	89 a1       	lds	r24, 0x49
    54a6:	9a a1       	lds	r25, 0x4a
    54a8:	ab a1       	lds	r26, 0x4b
    54aa:	bc a1       	lds	r27, 0x4c
    54ac:	48 17       	cp	r20, r24
    54ae:	59 07       	cpc	r21, r25
    54b0:	6a 07       	cpc	r22, r26
    54b2:	7b 07       	cpc	r23, r27
    54b4:	09 f4       	brne	.+2      	; 0x54b8 <f_rename+0x166>
    54b6:	49 c0       	rjmp	.+146    	; 0x554a <f_rename+0x1f8>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    54b8:	33 8d       	ldd	r19, Z+27	; 0x1b
    54ba:	20 e0       	ldi	r18, 0x00	; 0
    54bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    54be:	90 e0       	ldi	r25, 0x00	; 0
    54c0:	82 2b       	or	r24, r18
    54c2:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    54c4:	ac 01       	movw	r20, r24
    54c6:	60 e0       	ldi	r22, 0x00	; 0
    54c8:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    54ca:	f7 01       	movw	r30, r14
    54cc:	80 81       	ld	r24, Z
    54ce:	83 30       	cpi	r24, 0x03	; 3
    54d0:	09 f4       	brne	.+2      	; 0x54d4 <f_rename+0x182>
    54d2:	6d c0       	rjmp	.+218    	; 0x55ae <f_rename+0x25c>
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    54d4:	db 01       	movw	r26, r22
    54d6:	ca 01       	movw	r24, r20
    54d8:	02 97       	sbiw	r24, 0x02	; 2
    54da:	a1 09       	sbc	r26, r1
    54dc:	b1 09       	sbc	r27, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    54de:	f7 01       	movw	r30, r14
    54e0:	43 89       	ldd	r20, Z+19	; 0x13
    54e2:	54 89       	ldd	r21, Z+20	; 0x14
    54e4:	65 89       	ldd	r22, Z+21	; 0x15
    54e6:	76 89       	ldd	r23, Z+22	; 0x16
    54e8:	42 50       	subi	r20, 0x02	; 2
    54ea:	50 40       	sbci	r21, 0x00	; 0
    54ec:	60 40       	sbci	r22, 0x00	; 0
    54ee:	70 40       	sbci	r23, 0x00	; 0
    54f0:	84 17       	cp	r24, r20
    54f2:	95 07       	cpc	r25, r21
    54f4:	a6 07       	cpc	r26, r22
    54f6:	b7 07       	cpc	r27, r23
    54f8:	08 f0       	brcs	.+2      	; 0x54fc <f_rename+0x1aa>
    54fa:	56 c0       	rjmp	.+172    	; 0x55a8 <f_rename+0x256>
	return clst * fs->csize + fs->database;
    54fc:	21 85       	ldd	r18, Z+9	; 0x09
    54fe:	32 85       	ldd	r19, Z+10	; 0x0a
    5500:	40 e0       	ldi	r20, 0x00	; 0
    5502:	50 e0       	ldi	r21, 0x00	; 0
    5504:	bc 01       	movw	r22, r24
    5506:	cd 01       	movw	r24, r26
    5508:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__mulsi3>
    550c:	ab 01       	movw	r20, r22
    550e:	bc 01       	movw	r22, r24
    5510:	f7 01       	movw	r30, r14
    5512:	87 a1       	lds	r24, 0x47
    5514:	90 a5       	lds	r25, 0x60
    5516:	a1 a5       	lds	r26, 0x61
    5518:	b2 a5       	lds	r27, 0x62
    551a:	48 0f       	add	r20, r24
    551c:	59 1f       	adc	r21, r25
    551e:	6a 1f       	adc	r22, r26
    5520:	7b 1f       	adc	r23, r27
						mem_cpy(dir + 13, buf + 2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							dw = clust2sect(fs, ld_clust(fs, dir));
							if (!dw) {
    5522:	41 15       	cp	r20, r1
    5524:	51 05       	cpc	r21, r1
    5526:	61 05       	cpc	r22, r1
    5528:	71 05       	cpc	r23, r1
    552a:	f1 f1       	breq	.+124    	; 0x55a8 <f_rename+0x256>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where any interruption can cause a cross-link */
								res = move_window(fs, dw);
    552c:	c7 01       	movw	r24, r14
    552e:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    5532:	e9 81       	ldd	r30, Y+1	; 0x01
    5534:	fa 81       	ldd	r31, Y+2	; 0x02
								if (res == FR_OK && dir[1] == '.') {
    5536:	00 97       	sbiw	r24, 0x00	; 0
    5538:	09 f0       	breq	.+2      	; 0x553c <f_rename+0x1ea>
    553a:	32 cf       	rjmp	.-412    	; 0x53a0 <f_rename+0x4e>
    553c:	df 01       	movw	r26, r30
    553e:	a0 5b       	subi	r26, 0xB0	; 176
    5540:	bf 4f       	sbci	r27, 0xFF	; 255
    5542:	8c 91       	ld	r24, X
    5544:	8e 32       	cpi	r24, 0x2E	; 46
    5546:	09 f4       	brne	.+2      	; 0x554a <f_rename+0x1f8>
    5548:	43 c0       	rjmp	.+134    	; 0x55d0 <f_rename+0x27e>
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    554a:	25 96       	adiw	r28, 0x05	; 5
    554c:	0e ad       	sts	0x6e, r16
    554e:	1f ad       	sts	0x6f, r17
    5550:	25 97       	sbiw	r28, 0x05	; 5
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
    5552:	6d 96       	adiw	r28, 0x1d	; 29
    5554:	4c ad       	sts	0x6c, r20
    5556:	5d ad       	sts	0x6d, r21
    5558:	6e ad       	sts	0x6e, r22
    555a:	7f ad       	sts	0x6f, r23
    555c:	6d 97       	sbiw	r28, 0x1d	; 29
    555e:	c8 01       	movw	r24, r16
    5560:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <move_window>
	if (res == FR_OK) {
    5564:	00 97       	sbiw	r24, 0x00	; 0
    5566:	09 f0       	breq	.+2      	; 0x556a <f_rename+0x218>
    5568:	1b cf       	rjmp	.-458    	; 0x53a0 <f_rename+0x4e>
		dp->dir[DIR_Name] = DDEM;
    556a:	6f 96       	adiw	r28, 0x1f	; 31
    556c:	ee ad       	sts	0x6e, r30
    556e:	ff ad       	sts	0x6f, r31
    5570:	6f 97       	sbiw	r28, 0x1f	; 31
    5572:	85 ee       	ldi	r24, 0xE5	; 229
    5574:	80 83       	st	Z, r24
		fs->wflag = 1;
    5576:	81 e0       	ldi	r24, 0x01	; 1
    5578:	f8 01       	movw	r30, r16
    557a:	83 83       	std	Z+3, r24	; 0x03
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
				if (res == FR_OK) {
					res = sync_fs(fs);
    557c:	89 81       	ldd	r24, Y+1	; 0x01
    557e:	9a 81       	ldd	r25, Y+2	; 0x02
    5580:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <sync_fs>
    5584:	0d cf       	rjmp	.-486    	; 0x53a0 <f_rename+0x4e>
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    5586:	49 a5       	lds	r20, 0x69
    5588:	5a a5       	lds	r21, 0x6a
    558a:	6b a5       	lds	r22, 0x6b
    558c:	7c a5       	lds	r23, 0x6c
    558e:	65 96       	adiw	r28, 0x15	; 21
    5590:	8c ad       	sts	0x6c, r24
    5592:	9d ad       	sts	0x6d, r25
    5594:	ae ad       	sts	0x6e, r26
    5596:	bf ad       	sts	0x6f, r27
    5598:	65 97       	sbiw	r28, 0x15	; 21
    559a:	48 17       	cp	r20, r24
    559c:	59 07       	cpc	r21, r25
    559e:	6a 07       	cpc	r22, r26
    55a0:	7b 07       	cpc	r23, r27
    55a2:	09 f0       	breq	.+2      	; 0x55a6 <f_rename+0x254>
    55a4:	53 cf       	rjmp	.-346    	; 0x544c <f_rename+0xfa>
    55a6:	59 cf       	rjmp	.-334    	; 0x545a <f_rename+0x108>
						dir[DIR_Attr] = buf[0] | AM_ARC;
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							dw = clust2sect(fs, ld_clust(fs, dir));
							if (!dw) {
								res = FR_INT_ERR;
    55a8:	82 e0       	ldi	r24, 0x02	; 2
    55aa:	90 e0       	ldi	r25, 0x00	; 0
    55ac:	f9 ce       	rjmp	.-526    	; 0x53a0 <f_rename+0x4e>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    55ae:	f8 01       	movw	r30, r16
    55b0:	35 89       	ldd	r19, Z+21	; 0x15
    55b2:	20 e0       	ldi	r18, 0x00	; 0
    55b4:	84 89       	ldd	r24, Z+20	; 0x14
    55b6:	90 e0       	ldi	r25, 0x00	; 0
    55b8:	82 2b       	or	r24, r18
    55ba:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    55bc:	a0 e0       	ldi	r26, 0x00	; 0
    55be:	b0 e0       	ldi	r27, 0x00	; 0
    55c0:	dc 01       	movw	r26, r24
    55c2:	99 27       	eor	r25, r25
    55c4:	88 27       	eor	r24, r24
    55c6:	48 2b       	or	r20, r24
    55c8:	59 2b       	or	r21, r25
    55ca:	6a 2b       	or	r22, r26
    55cc:	7b 2b       	or	r23, r27
    55ce:	82 cf       	rjmp	.-252    	; 0x54d4 <f_rename+0x182>
							} else {
/* Start of critical section where any interruption can cause a cross-link */
								res = move_window(fs, dw);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    55d0:	49 a1       	lds	r20, 0x49
    55d2:	5a a1       	lds	r21, 0x4a
    55d4:	6b a1       	lds	r22, 0x4b
    55d6:	7c a1       	lds	r23, 0x4c

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    55d8:	df 01       	movw	r26, r30
    55da:	a7 59       	subi	r26, 0x97	; 151
    55dc:	bf 4f       	sbci	r27, 0xFF	; 255
    55de:	4c 93       	st	X, r20
	*ptr++ = (BYTE)val;
    55e0:	df 01       	movw	r26, r30
    55e2:	a6 59       	subi	r26, 0x96	; 150
    55e4:	bf 4f       	sbci	r27, 0xFF	; 255
    55e6:	5c 93       	st	X, r21
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    55e8:	80 81       	ld	r24, Z
    55ea:	83 30       	cpi	r24, 0x03	; 3
    55ec:	19 f0       	breq	.+6      	; 0x55f4 <f_rename+0x2a2>
/* Start of critical section where any interruption can cause a cross-link */
								res = move_window(fs, dw);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
									fs->wflag = 1;
    55ee:	81 e0       	ldi	r24, 0x01	; 1
    55f0:	83 83       	std	Z+3, r24	; 0x03
    55f2:	ab cf       	rjmp	.-170    	; 0x554a <f_rename+0x1f8>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    55f4:	ab 01       	movw	r20, r22
    55f6:	66 27       	eor	r22, r22
    55f8:	77 27       	eor	r23, r23

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    55fa:	df 01       	movw	r26, r30
    55fc:	ad 59       	subi	r26, 0x9D	; 157
    55fe:	bf 4f       	sbci	r27, 0xFF	; 255
    5600:	4c 93       	st	X, r20
	*ptr++ = (BYTE)val;
    5602:	df 01       	movw	r26, r30
    5604:	ac 59       	subi	r26, 0x9C	; 156
    5606:	bf 4f       	sbci	r27, 0xFF	; 255
    5608:	5c 93       	st	X, r21
    560a:	f1 cf       	rjmp	.-30     	; 0x55ee <f_rename+0x29c>

0000560c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
    560c:	8f 92       	push	r8
    560e:	9f 92       	push	r9
    5610:	af 92       	push	r10
    5612:	bf 92       	push	r11
    5614:	cf 92       	push	r12
    5616:	df 92       	push	r13
    5618:	ef 92       	push	r14
    561a:	ff 92       	push	r15
    561c:	0f 93       	push	r16
    561e:	1f 93       	push	r17
    5620:	cf 93       	push	r28
    5622:	df 93       	push	r29
    5624:	00 d0       	rcall	.+0      	; 0x5626 <f_gets+0x1a>
    5626:	00 d0       	rcall	.+0      	; 0x5628 <f_gets+0x1c>
    5628:	cd b7       	in	r28, 0x3d	; 61
    562a:	de b7       	in	r29, 0x3e	; 62
    562c:	4c 01       	movw	r8, r24
    562e:	6b 01       	movw	r12, r22
    5630:	5a 01       	movw	r10, r20
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    5632:	08 94       	sec
    5634:	c1 08       	sbc	r12, r1
    5636:	d1 08       	sbc	r13, r1
    5638:	7c 01       	movw	r14, r24
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
	int n = 0;
    563a:	00 e0       	ldi	r16, 0x00	; 0
    563c:	10 e0       	ldi	r17, 0x00	; 0
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
    563e:	0c 15       	cp	r16, r12
    5640:	1d 05       	cpc	r17, r13
    5642:	c4 f4       	brge	.+48     	; 0x5674 <f_gets+0x68>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
    5644:	c5 01       	movw	r24, r10
    5646:	be 01       	movw	r22, r28
    5648:	6d 5f       	subi	r22, 0xFD	; 253
    564a:	7f 4f       	sbci	r23, 0xFF	; 255
    564c:	41 e0       	ldi	r20, 0x01	; 1
    564e:	50 e0       	ldi	r21, 0x00	; 0
    5650:	9e 01       	movw	r18, r28
    5652:	2f 5f       	subi	r18, 0xFF	; 255
    5654:	3f 4f       	sbci	r19, 0xFF	; 255
    5656:	0e 94 3d 1c 	call	0x387a	; 0x387a <f_read>
		if (rc != 1) break;
    565a:	89 81       	ldd	r24, Y+1	; 0x01
    565c:	9a 81       	ldd	r25, Y+2	; 0x02
    565e:	81 30       	cpi	r24, 0x01	; 1
    5660:	91 05       	cpc	r25, r1
    5662:	41 f4       	brne	.+16     	; 0x5674 <f_gets+0x68>
		c = s[0];
    5664:	8b 81       	ldd	r24, Y+3	; 0x03
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
    5666:	f7 01       	movw	r30, r14
    5668:	81 93       	st	Z+, r24
    566a:	7f 01       	movw	r14, r30
		n++;
    566c:	0f 5f       	subi	r16, 0xFF	; 255
    566e:	1f 4f       	sbci	r17, 0xFF	; 255
		if (c == '\n') break;		/* Break on EOL */
    5670:	8a 30       	cpi	r24, 0x0A	; 10
    5672:	29 f7       	brne	.-54     	; 0x563e <f_gets+0x32>
	}
	*p = 0;
    5674:	f7 01       	movw	r30, r14
    5676:	10 82       	st	Z, r1
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    5678:	01 15       	cp	r16, r1
    567a:	11 05       	cpc	r17, r1
    567c:	91 f0       	breq	.+36     	; 0x56a2 <f_gets+0x96>
}
    567e:	c4 01       	movw	r24, r8
    5680:	0f 90       	pop	r0
    5682:	0f 90       	pop	r0
    5684:	0f 90       	pop	r0
    5686:	0f 90       	pop	r0
    5688:	df 91       	pop	r29
    568a:	cf 91       	pop	r28
    568c:	1f 91       	pop	r17
    568e:	0f 91       	pop	r16
    5690:	ff 90       	pop	r15
    5692:	ef 90       	pop	r14
    5694:	df 90       	pop	r13
    5696:	cf 90       	pop	r12
    5698:	bf 90       	pop	r11
    569a:	af 90       	pop	r10
    569c:	9f 90       	pop	r9
    569e:	8f 90       	pop	r8
    56a0:	08 95       	ret
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    56a2:	88 24       	eor	r8, r8
    56a4:	99 24       	eor	r9, r9
    56a6:	eb cf       	rjmp	.-42     	; 0x567e <f_gets+0x72>

000056a8 <f_putc>:

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
    56a8:	cf 93       	push	r28
    56aa:	df 93       	push	r29
    56ac:	cd b7       	in	r28, 0x3d	; 61
    56ae:	de b7       	in	r29, 0x3e	; 62
    56b0:	c6 54       	subi	r28, 0x46	; 70
    56b2:	d0 40       	sbci	r29, 0x00	; 0
    56b4:	0f b6       	in	r0, 0x3f	; 63
    56b6:	f8 94       	cli
    56b8:	de bf       	out	0x3e, r29	; 62
    56ba:	0f be       	out	0x3f, r0	; 63
    56bc:	cd bf       	out	0x3d, r28	; 61
    56be:	48 2f       	mov	r20, r24
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
    56c0:	7a 83       	std	Y+2, r23	; 0x02
    56c2:	69 83       	std	Y+1, r22	; 0x01
	pb->nchr = pb->idx = 0;
    56c4:	1c 82       	std	Y+4, r1	; 0x04
    56c6:	1b 82       	std	Y+3, r1	; 0x03
    56c8:	1e 82       	std	Y+6, r1	; 0x06
    56ca:	1d 82       	std	Y+5, r1	; 0x05
{
	putbuff pb;


	putc_init(&pb, fp);
	putc_bfd(&pb, c);	/* Put the character */
    56cc:	ce 01       	movw	r24, r28
    56ce:	01 96       	adiw	r24, 0x01	; 1
    56d0:	64 2f       	mov	r22, r20
    56d2:	0e 94 35 20 	call	0x406a	; 0x406a <putc_bfd>
	return putc_flush(&pb);
    56d6:	ce 01       	movw	r24, r28
    56d8:	01 96       	adiw	r24, 0x01	; 1
    56da:	0e 94 77 20 	call	0x40ee	; 0x40ee <putc_flush>
}
    56de:	ca 5b       	subi	r28, 0xBA	; 186
    56e0:	df 4f       	sbci	r29, 0xFF	; 255
    56e2:	0f b6       	in	r0, 0x3f	; 63
    56e4:	f8 94       	cli
    56e6:	de bf       	out	0x3e, r29	; 62
    56e8:	0f be       	out	0x3f, r0	; 63
    56ea:	cd bf       	out	0x3d, r28	; 61
    56ec:	df 91       	pop	r29
    56ee:	cf 91       	pop	r28
    56f0:	08 95       	ret

000056f2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
    56f2:	ef 92       	push	r14
    56f4:	ff 92       	push	r15
    56f6:	0f 93       	push	r16
    56f8:	1f 93       	push	r17
    56fa:	cf 93       	push	r28
    56fc:	df 93       	push	r29
    56fe:	cd b7       	in	r28, 0x3d	; 61
    5700:	de b7       	in	r29, 0x3e	; 62
    5702:	c6 54       	subi	r28, 0x46	; 70
    5704:	d0 40       	sbci	r29, 0x00	; 0
    5706:	0f b6       	in	r0, 0x3f	; 63
    5708:	f8 94       	cli
    570a:	de bf       	out	0x3e, r29	; 62
    570c:	0f be       	out	0x3f, r0	; 63
    570e:	cd bf       	out	0x3d, r28	; 61
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
    5710:	7a 83       	std	Y+2, r23	; 0x02
    5712:	69 83       	std	Y+1, r22	; 0x01
	pb->nchr = pb->idx = 0;
    5714:	1c 82       	std	Y+4, r1	; 0x04
    5716:	1b 82       	std	Y+3, r1	; 0x03
    5718:	1e 82       	std	Y+6, r1	; 0x06
    571a:	1d 82       	std	Y+5, r1	; 0x05
{
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
    571c:	fc 01       	movw	r30, r24
    571e:	60 81       	ld	r22, Z
    5720:	66 23       	and	r22, r22
    5722:	01 f1       	breq	.+64     	; 0x5764 <f_puts+0x72>

/*-----------------------------------------------------------------------*/
/* Put a string to the file                                              */
/*-----------------------------------------------------------------------*/

int f_puts (
    5724:	8c 01       	movw	r16, r24
    5726:	0f 5f       	subi	r16, 0xFF	; 255
    5728:	1f 4f       	sbci	r17, 0xFF	; 255
    572a:	7e 01       	movw	r14, r28
    572c:	08 94       	sec
    572e:	e1 1c       	adc	r14, r1
    5730:	f1 1c       	adc	r15, r1
{
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
    5732:	c7 01       	movw	r24, r14
    5734:	0e 94 35 20 	call	0x406a	; 0x406a <putc_bfd>
    5738:	f8 01       	movw	r30, r16
    573a:	61 91       	ld	r22, Z+
    573c:	8f 01       	movw	r16, r30
    573e:	66 23       	and	r22, r22
    5740:	c1 f7       	brne	.-16     	; 0x5732 <f_puts+0x40>
	return putc_flush(&pb);
    5742:	c7 01       	movw	r24, r14
    5744:	0e 94 77 20 	call	0x40ee	; 0x40ee <putc_flush>
}
    5748:	ca 5b       	subi	r28, 0xBA	; 186
    574a:	df 4f       	sbci	r29, 0xFF	; 255
    574c:	0f b6       	in	r0, 0x3f	; 63
    574e:	f8 94       	cli
    5750:	de bf       	out	0x3e, r29	; 62
    5752:	0f be       	out	0x3f, r0	; 63
    5754:	cd bf       	out	0x3d, r28	; 61
    5756:	df 91       	pop	r29
    5758:	cf 91       	pop	r28
    575a:	1f 91       	pop	r17
    575c:	0f 91       	pop	r16
    575e:	ff 90       	pop	r15
    5760:	ef 90       	pop	r14
    5762:	08 95       	ret
    5764:	7e 01       	movw	r14, r28
    5766:	08 94       	sec
    5768:	e1 1c       	adc	r14, r1
    576a:	f1 1c       	adc	r15, r1
    576c:	ea cf       	rjmp	.-44     	; 0x5742 <f_puts+0x50>

0000576e <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    576e:	2f 92       	push	r2
    5770:	3f 92       	push	r3
    5772:	4f 92       	push	r4
    5774:	5f 92       	push	r5
    5776:	6f 92       	push	r6
    5778:	7f 92       	push	r7
    577a:	8f 92       	push	r8
    577c:	9f 92       	push	r9
    577e:	af 92       	push	r10
    5780:	bf 92       	push	r11
    5782:	cf 92       	push	r12
    5784:	df 92       	push	r13
    5786:	ef 92       	push	r14
    5788:	ff 92       	push	r15
    578a:	0f 93       	push	r16
    578c:	1f 93       	push	r17
    578e:	cf 93       	push	r28
    5790:	df 93       	push	r29
    5792:	cd b7       	in	r28, 0x3d	; 61
    5794:	de b7       	in	r29, 0x3e	; 62
    5796:	c8 56       	subi	r28, 0x68	; 104
    5798:	d0 40       	sbci	r29, 0x00	; 0
    579a:	0f b6       	in	r0, 0x3f	; 63
    579c:	f8 94       	cli
    579e:	de bf       	out	0x3e, r29	; 62
    57a0:	0f be       	out	0x3f, r0	; 63
    57a2:	cd bf       	out	0x3d, r28	; 61
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
    57a4:	ef 96       	adiw	r28, 0x3f	; 63
    57a6:	8e ad       	sts	0x6e, r24
    57a8:	9f ad       	sts	0x6f, r25
    57aa:	ef 97       	sbiw	r28, 0x3f	; 63
    57ac:	9a a3       	lds	r25, 0x5a
    57ae:	89 a3       	lds	r24, 0x59
	pb->nchr = pb->idx = 0;
    57b0:	1c a2       	lds	r17, 0x9c
    57b2:	1b a2       	lds	r17, 0x9b
    57b4:	1e a2       	lds	r17, 0x9e
    57b6:	1d a2       	lds	r17, 0x9d
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);

	va_start(arp, fmt);
    57b8:	ae 01       	movw	r20, r28
    57ba:	4f 57       	subi	r20, 0x7F	; 127
    57bc:	5f 4f       	sbci	r21, 0xFF	; 255
    57be:	a9 96       	adiw	r28, 0x29	; 41
    57c0:	5f af       	sts	0x7f, r21
    57c2:	4e af       	sts	0x7e, r20
    57c4:	a9 97       	sbiw	r28, 0x29	; 41

	for (;;) {
		c = *fmt++;
    57c6:	c1 58       	subi	r28, 0x81	; 129
    57c8:	df 4f       	sbci	r29, 0xFF	; 255
    57ca:	e8 81       	ld	r30, Y
    57cc:	f9 81       	ldd	r31, Y+1	; 0x01
    57ce:	cf 57       	subi	r28, 0x7F	; 127
    57d0:	d0 40       	sbci	r29, 0x00	; 0
    57d2:	60 81       	ld	r22, Z
		if (c == 0) break;			/* End of string */
    57d4:	66 23       	and	r22, r22
    57d6:	09 f4       	brne	.+2      	; 0x57da <f_printf+0x6c>
    57d8:	8b c0       	rjmp	.+278    	; 0x58f0 <f_printf+0x182>
		if (c != '%') {				/* Non escape character */
    57da:	65 32       	cpi	r22, 0x25	; 37
    57dc:	61 f0       	breq	.+24     	; 0x57f6 <f_printf+0x88>
	putc_init(&pb, fp);

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    57de:	31 96       	adiw	r30, 0x01	; 1
    57e0:	c1 58       	subi	r28, 0x81	; 129
    57e2:	df 4f       	sbci	r29, 0xFF	; 255
    57e4:	f9 83       	std	Y+1, r31	; 0x01
    57e6:	e8 83       	st	Y, r30
    57e8:	cf 57       	subi	r28, 0x7F	; 127
    57ea:	d0 40       	sbci	r29, 0x00	; 0
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
    57ec:	ce 01       	movw	r24, r28
    57ee:	81 96       	adiw	r24, 0x21	; 33
    57f0:	0e 94 35 20 	call	0x406a	; 0x406a <putc_bfd>
			continue;
    57f4:	e8 cf       	rjmp	.-48     	; 0x57c6 <f_printf+0x58>
		}
		w = f = 0;
		c = *fmt++;
    57f6:	c1 58       	subi	r28, 0x81	; 129
    57f8:	df 4f       	sbci	r29, 0xFF	; 255
    57fa:	e8 81       	ld	r30, Y
    57fc:	f9 81       	ldd	r31, Y+1	; 0x01
    57fe:	cf 57       	subi	r28, 0x7F	; 127
    5800:	d0 40       	sbci	r29, 0x00	; 0
    5802:	b1 80       	ldd	r11, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padding */
    5804:	f0 e3       	ldi	r31, 0x30	; 48
    5806:	bf 16       	cp	r11, r31
    5808:	09 f4       	brne	.+2      	; 0x580c <f_printf+0x9e>
    580a:	ec c0       	rjmp	.+472    	; 0x59e4 <f_printf+0x276>
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
    580c:	fd e2       	ldi	r31, 0x2D	; 45
    580e:	bf 16       	cp	r11, r31
    5810:	09 f4       	brne	.+2      	; 0x5814 <f_printf+0xa6>
    5812:	ff c0       	rjmp	.+510    	; 0x5a12 <f_printf+0x2a4>
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
    5814:	c1 58       	subi	r28, 0x81	; 129
    5816:	df 4f       	sbci	r29, 0xFF	; 255
    5818:	48 81       	ld	r20, Y
    581a:	59 81       	ldd	r21, Y+1	; 0x01
    581c:	cf 57       	subi	r28, 0x7F	; 127
    581e:	d0 40       	sbci	r29, 0x00	; 0
    5820:	4e 5f       	subi	r20, 0xFE	; 254
    5822:	5f 4f       	sbci	r21, 0xFF	; 255
    5824:	c1 58       	subi	r28, 0x81	; 129
    5826:	df 4f       	sbci	r29, 0xFF	; 255
    5828:	59 83       	std	Y+1, r21	; 0x01
    582a:	48 83       	st	Y, r20
    582c:	cf 57       	subi	r28, 0x7F	; 127
    582e:	d0 40       	sbci	r29, 0x00	; 0
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
    5830:	20 e0       	ldi	r18, 0x00	; 0
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    5832:	8b 2d       	mov	r24, r11
    5834:	80 53       	subi	r24, 0x30	; 48
    5836:	8a 30       	cpi	r24, 0x0A	; 10
    5838:	08 f0       	brcs	.+2      	; 0x583c <f_printf+0xce>
    583a:	e8 c0       	rjmp	.+464    	; 0x5a0c <f_printf+0x29e>
    583c:	c1 58       	subi	r28, 0x81	; 129
    583e:	df 4f       	sbci	r29, 0xFF	; 255
    5840:	e8 81       	ld	r30, Y
    5842:	f9 81       	ldd	r31, Y+1	; 0x01
    5844:	cf 57       	subi	r28, 0x7F	; 127
    5846:	d0 40       	sbci	r29, 0x00	; 0
    5848:	cc 24       	eor	r12, r12
    584a:	dd 24       	eor	r13, r13
			w = w * 10 + c - '0';
    584c:	c6 01       	movw	r24, r12
    584e:	88 0f       	add	r24, r24
    5850:	99 1f       	adc	r25, r25
    5852:	cc 0c       	add	r12, r12
    5854:	dd 1c       	adc	r13, r13
    5856:	cc 0c       	add	r12, r12
    5858:	dd 1c       	adc	r13, r13
    585a:	cc 0c       	add	r12, r12
    585c:	dd 1c       	adc	r13, r13
    585e:	c8 0e       	add	r12, r24
    5860:	d9 1e       	adc	r13, r25
    5862:	8b 2d       	mov	r24, r11
    5864:	99 27       	eor	r25, r25
    5866:	87 fd       	sbrc	r24, 7
    5868:	90 95       	com	r25
    586a:	c8 0e       	add	r12, r24
    586c:	d9 1e       	adc	r13, r25
    586e:	40 ed       	ldi	r20, 0xD0	; 208
    5870:	5f ef       	ldi	r21, 0xFF	; 255
    5872:	c4 0e       	add	r12, r20
    5874:	d5 1e       	adc	r13, r21
			c = *fmt++;
    5876:	b1 90       	ld	r11, Z+
    5878:	c1 58       	subi	r28, 0x81	; 129
    587a:	df 4f       	sbci	r29, 0xFF	; 255
    587c:	f9 83       	std	Y+1, r31	; 0x01
    587e:	e8 83       	st	Y, r30
    5880:	cf 57       	subi	r28, 0x7F	; 127
    5882:	d0 40       	sbci	r29, 0x00	; 0
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    5884:	8b 2d       	mov	r24, r11
    5886:	80 53       	subi	r24, 0x30	; 48
    5888:	8a 30       	cpi	r24, 0x0A	; 10
    588a:	00 f3       	brcs	.-64     	; 0x584c <f_printf+0xde>
			w = w * 10 + c - '0';
			c = *fmt++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    588c:	5c e6       	ldi	r21, 0x6C	; 108
    588e:	b5 16       	cp	r11, r21
    5890:	f9 f0       	breq	.+62     	; 0x58d0 <f_printf+0x162>
    5892:	8c e4       	ldi	r24, 0x4C	; 76
    5894:	b8 16       	cp	r11, r24
    5896:	e1 f0       	breq	.+56     	; 0x58d0 <f_printf+0x162>
			f |= 4; c = *fmt++;
		}
		if (!c) break;
    5898:	bb 20       	and	r11, r11
    589a:	51 f1       	breq	.+84     	; 0x58f0 <f_printf+0x182>
		d = c;
		if (IsLower(d)) d -= 0x20;
    589c:	8b 2d       	mov	r24, r11
    589e:	81 56       	subi	r24, 0x61	; 97
    58a0:	3b 2d       	mov	r19, r11
    58a2:	8a 31       	cpi	r24, 0x1A	; 26
    58a4:	08 f4       	brcc	.+2      	; 0x58a8 <f_printf+0x13a>
    58a6:	30 52       	subi	r19, 0x20	; 32
		switch (d) {				/* Type is... */
    58a8:	3f 34       	cpi	r19, 0x4F	; 79
    58aa:	09 f4       	brne	.+2      	; 0x58ae <f_printf+0x140>
    58ac:	90 c1       	rjmp	.+800    	; 0x5bce <f_printf+0x460>
    58ae:	30 35       	cpi	r19, 0x50	; 80
    58b0:	ec f5       	brge	.+122    	; 0x592c <f_printf+0x1be>
    58b2:	33 34       	cpi	r19, 0x43	; 67
    58b4:	09 f4       	brne	.+2      	; 0x58b8 <f_printf+0x14a>
    58b6:	97 c1       	rjmp	.+814    	; 0x5be6 <f_printf+0x478>
    58b8:	34 34       	cpi	r19, 0x44	; 68
    58ba:	09 f4       	brne	.+2      	; 0x58be <f_printf+0x150>
    58bc:	8e c1       	rjmp	.+796    	; 0x5bda <f_printf+0x46c>
    58be:	32 34       	cpi	r19, 0x42	; 66
    58c0:	09 f4       	brne	.+2      	; 0x58c4 <f_printf+0x156>
    58c2:	7f c1       	rjmp	.+766    	; 0x5bc2 <f_printf+0x454>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
    58c4:	ce 01       	movw	r24, r28
    58c6:	81 96       	adiw	r24, 0x21	; 33
    58c8:	6b 2d       	mov	r22, r11
    58ca:	0e 94 35 20 	call	0x406a	; 0x406a <putc_bfd>
    58ce:	7b cf       	rjmp	.-266    	; 0x57c6 <f_printf+0x58>
		while (IsDigit(c)) {		/* Precision */
			w = w * 10 + c - '0';
			c = *fmt++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 4; c = *fmt++;
    58d0:	24 60       	ori	r18, 0x04	; 4
    58d2:	c1 58       	subi	r28, 0x81	; 129
    58d4:	df 4f       	sbci	r29, 0xFF	; 255
    58d6:	e8 81       	ld	r30, Y
    58d8:	f9 81       	ldd	r31, Y+1	; 0x01
    58da:	cf 57       	subi	r28, 0x7F	; 127
    58dc:	d0 40       	sbci	r29, 0x00	; 0
    58de:	b1 90       	ld	r11, Z+
    58e0:	c1 58       	subi	r28, 0x81	; 129
    58e2:	df 4f       	sbci	r29, 0xFF	; 255
    58e4:	f9 83       	std	Y+1, r31	; 0x01
    58e6:	e8 83       	st	Y, r30
    58e8:	cf 57       	subi	r28, 0x7F	; 127
    58ea:	d0 40       	sbci	r29, 0x00	; 0
		}
		if (!c) break;
    58ec:	bb 20       	and	r11, r11
    58ee:	b1 f6       	brne	.-84     	; 0x589c <f_printf+0x12e>
		while (j++ < w) putc_bfd(&pb, d);
	}

	va_end(arp);

	return putc_flush(&pb);
    58f0:	ce 01       	movw	r24, r28
    58f2:	81 96       	adiw	r24, 0x21	; 33
    58f4:	0e 94 77 20 	call	0x40ee	; 0x40ee <putc_flush>
}
    58f8:	c8 59       	subi	r28, 0x98	; 152
    58fa:	df 4f       	sbci	r29, 0xFF	; 255
    58fc:	0f b6       	in	r0, 0x3f	; 63
    58fe:	f8 94       	cli
    5900:	de bf       	out	0x3e, r29	; 62
    5902:	0f be       	out	0x3f, r0	; 63
    5904:	cd bf       	out	0x3d, r28	; 61
    5906:	df 91       	pop	r29
    5908:	cf 91       	pop	r28
    590a:	1f 91       	pop	r17
    590c:	0f 91       	pop	r16
    590e:	ff 90       	pop	r15
    5910:	ef 90       	pop	r14
    5912:	df 90       	pop	r13
    5914:	cf 90       	pop	r12
    5916:	bf 90       	pop	r11
    5918:	af 90       	pop	r10
    591a:	9f 90       	pop	r9
    591c:	8f 90       	pop	r8
    591e:	7f 90       	pop	r7
    5920:	6f 90       	pop	r6
    5922:	5f 90       	pop	r5
    5924:	4f 90       	pop	r4
    5926:	3f 90       	pop	r3
    5928:	2f 90       	pop	r2
    592a:	08 95       	ret
			f |= 4; c = *fmt++;
		}
		if (!c) break;
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    592c:	35 35       	cpi	r19, 0x55	; 85
    592e:	09 f4       	brne	.+2      	; 0x5932 <f_printf+0x1c4>
    5930:	54 c1       	rjmp	.+680    	; 0x5bda <f_printf+0x46c>
    5932:	38 35       	cpi	r19, 0x58	; 88
    5934:	09 f4       	brne	.+2      	; 0x5938 <f_printf+0x1ca>
    5936:	7d c0       	rjmp	.+250    	; 0x5a32 <f_printf+0x2c4>
    5938:	33 35       	cpi	r19, 0x53	; 83
    593a:	21 f6       	brne	.-120    	; 0x58c4 <f_printf+0x156>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
    593c:	a9 96       	adiw	r28, 0x29	; 41
    593e:	ee ad       	sts	0x6e, r30
    5940:	ff ad       	sts	0x6f, r31
    5942:	a9 97       	sbiw	r28, 0x29	; 41
    5944:	af 01       	movw	r20, r30
    5946:	4e 5f       	subi	r20, 0xFE	; 254
    5948:	5f 4f       	sbci	r21, 0xFF	; 255
    594a:	a9 96       	adiw	r28, 0x29	; 41
    594c:	5f af       	sts	0x7f, r21
    594e:	4e af       	sts	0x7e, r20
    5950:	a9 97       	sbiw	r28, 0x29	; 41
    5952:	a0 80       	ld	r10, Z
    5954:	b1 80       	ldd	r11, Z+1	; 0x01
			for (j = 0; p[j]; j++) ;
    5956:	f5 01       	movw	r30, r10
    5958:	60 81       	ld	r22, Z
    595a:	66 23       	and	r22, r22
    595c:	09 f4       	brne	.+2      	; 0x5960 <f_printf+0x1f2>
    595e:	57 c1       	rjmp	.+686    	; 0x5c0e <f_printf+0x4a0>

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    5960:	31 96       	adiw	r30, 0x01	; 1
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    5962:	ee 24       	eor	r14, r14
    5964:	ff 24       	eor	r15, r15
    5966:	08 94       	sec
    5968:	e1 1c       	adc	r14, r1
    596a:	f1 1c       	adc	r15, r1
    596c:	81 91       	ld	r24, Z+
    596e:	88 23       	and	r24, r24
    5970:	d1 f7       	brne	.-12     	; 0x5966 <f_printf+0x1f8>
    5972:	87 01       	movw	r16, r14
    5974:	0f 5f       	subi	r16, 0xFF	; 255
    5976:	1f 4f       	sbci	r17, 0xFF	; 255
			if (!(f & 2)) {
    5978:	21 fd       	sbrc	r18, 1
    597a:	16 c0       	rjmp	.+44     	; 0x59a8 <f_printf+0x23a>
				while (j++ < w) putc_bfd(&pb, ' ');
    597c:	ec 14       	cp	r14, r12
    597e:	fd 04       	cpc	r15, r13
    5980:	10 f0       	brcs	.+4      	; 0x5986 <f_printf+0x218>
    5982:	4a c1       	rjmp	.+660    	; 0x5c18 <f_printf+0x4aa>
    5984:	87 01       	movw	r16, r14
    5986:	ce 01       	movw	r24, r28
    5988:	81 96       	adiw	r24, 0x21	; 33
    598a:	60 e2       	ldi	r22, 0x20	; 32
    598c:	0e 94 35 20 	call	0x406a	; 0x406a <putc_bfd>
    5990:	78 01       	movw	r14, r16
    5992:	08 94       	sec
    5994:	e1 1c       	adc	r14, r1
    5996:	f1 1c       	adc	r15, r1
    5998:	0c 15       	cp	r16, r12
    599a:	1d 05       	cpc	r17, r13
    599c:	98 f3       	brcs	.-26     	; 0x5984 <f_printf+0x216>
    599e:	f5 01       	movw	r30, r10
    59a0:	60 81       	ld	r22, Z
    59a2:	87 01       	movw	r16, r14
    59a4:	0f 5f       	subi	r16, 0xFF	; 255
    59a6:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			while (*p) putc_bfd(&pb, *p++);
    59a8:	66 23       	and	r22, r22
    59aa:	61 f0       	breq	.+24     	; 0x59c4 <f_printf+0x256>

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    59ac:	08 94       	sec
    59ae:	a1 1c       	adc	r10, r1
    59b0:	b1 1c       	adc	r11, r1
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
			}
			while (*p) putc_bfd(&pb, *p++);
    59b2:	ce 01       	movw	r24, r28
    59b4:	81 96       	adiw	r24, 0x21	; 33
    59b6:	0e 94 35 20 	call	0x406a	; 0x406a <putc_bfd>
    59ba:	f5 01       	movw	r30, r10
    59bc:	61 91       	ld	r22, Z+
    59be:	5f 01       	movw	r10, r30
    59c0:	66 23       	and	r22, r22
    59c2:	b9 f7       	brne	.-18     	; 0x59b2 <f_printf+0x244>
			while (j++ < w) putc_bfd(&pb, ' ');
    59c4:	ec 14       	cp	r14, r12
    59c6:	fd 04       	cpc	r15, r13
    59c8:	10 f0       	brcs	.+4      	; 0x59ce <f_printf+0x260>
    59ca:	fd ce       	rjmp	.-518    	; 0x57c6 <f_printf+0x58>
    59cc:	8c 01       	movw	r16, r24
    59ce:	ce 01       	movw	r24, r28
    59d0:	81 96       	adiw	r24, 0x21	; 33
    59d2:	60 e2       	ldi	r22, 0x20	; 32
    59d4:	0e 94 35 20 	call	0x406a	; 0x406a <putc_bfd>
    59d8:	c8 01       	movw	r24, r16
    59da:	01 96       	adiw	r24, 0x01	; 1
    59dc:	0c 15       	cp	r16, r12
    59de:	1d 05       	cpc	r17, r13
    59e0:	a8 f3       	brcs	.-22     	; 0x59cc <f_printf+0x25e>
    59e2:	f1 ce       	rjmp	.-542    	; 0x57c6 <f_printf+0x58>
			continue;
		}
		w = f = 0;
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
    59e4:	c1 58       	subi	r28, 0x81	; 129
    59e6:	df 4f       	sbci	r29, 0xFF	; 255
    59e8:	e8 81       	ld	r30, Y
    59ea:	f9 81       	ldd	r31, Y+1	; 0x01
    59ec:	cf 57       	subi	r28, 0x7F	; 127
    59ee:	d0 40       	sbci	r29, 0x00	; 0
    59f0:	b2 80       	ldd	r11, Z+2	; 0x02
    59f2:	33 96       	adiw	r30, 0x03	; 3
    59f4:	c1 58       	subi	r28, 0x81	; 129
    59f6:	df 4f       	sbci	r29, 0xFF	; 255
    59f8:	f9 83       	std	Y+1, r31	; 0x01
    59fa:	e8 83       	st	Y, r30
    59fc:	cf 57       	subi	r28, 0x7F	; 127
    59fe:	d0 40       	sbci	r29, 0x00	; 0
    5a00:	21 e0       	ldi	r18, 0x01	; 1
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    5a02:	8b 2d       	mov	r24, r11
    5a04:	80 53       	subi	r24, 0x30	; 48
    5a06:	8a 30       	cpi	r24, 0x0A	; 10
    5a08:	08 f4       	brcc	.+2      	; 0x5a0c <f_printf+0x29e>
    5a0a:	18 cf       	rjmp	.-464    	; 0x583c <f_printf+0xce>
    5a0c:	cc 24       	eor	r12, r12
    5a0e:	dd 24       	eor	r13, r13
    5a10:	3d cf       	rjmp	.-390    	; 0x588c <f_printf+0x11e>
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
    5a12:	c1 58       	subi	r28, 0x81	; 129
    5a14:	df 4f       	sbci	r29, 0xFF	; 255
    5a16:	e8 81       	ld	r30, Y
    5a18:	f9 81       	ldd	r31, Y+1	; 0x01
    5a1a:	cf 57       	subi	r28, 0x7F	; 127
    5a1c:	d0 40       	sbci	r29, 0x00	; 0
    5a1e:	b2 80       	ldd	r11, Z+2	; 0x02
    5a20:	33 96       	adiw	r30, 0x03	; 3
    5a22:	c1 58       	subi	r28, 0x81	; 129
    5a24:	df 4f       	sbci	r29, 0xFF	; 255
    5a26:	f9 83       	std	Y+1, r31	; 0x01
    5a28:	e8 83       	st	Y, r30
    5a2a:	cf 57       	subi	r28, 0x7F	; 127
    5a2c:	d0 40       	sbci	r29, 0x00	; 0
    5a2e:	22 e0       	ldi	r18, 0x02	; 2
    5a30:	00 cf       	rjmp	.-512    	; 0x5832 <f_printf+0xc4>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    5a32:	60 e1       	ldi	r22, 0x10	; 16
    5a34:	26 2e       	mov	r2, r22
    5a36:	31 2c       	mov	r3, r1
    5a38:	41 2c       	mov	r4, r1
    5a3a:	51 2c       	mov	r5, r1
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    5a3c:	a2 2e       	mov	r10, r18
    5a3e:	a9 96       	adiw	r28, 0x29	; 41
    5a40:	ee ad       	sts	0x6e, r30
    5a42:	ff ad       	sts	0x6f, r31
    5a44:	a9 97       	sbiw	r28, 0x29	; 41
    5a46:	22 ff       	sbrs	r18, 2
    5a48:	97 c0       	rjmp	.+302    	; 0x5b78 <f_printf+0x40a>
    5a4a:	af 01       	movw	r20, r30
    5a4c:	4c 5f       	subi	r20, 0xFC	; 252
    5a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    5a50:	a9 96       	adiw	r28, 0x29	; 41
    5a52:	5f af       	sts	0x7f, r21
    5a54:	4e af       	sts	0x7e, r20
    5a56:	a9 97       	sbiw	r28, 0x29	; 41
    5a58:	60 81       	ld	r22, Z
    5a5a:	71 81       	ldd	r23, Z+1	; 0x01
    5a5c:	82 81       	ldd	r24, Z+2	; 0x02
    5a5e:	93 81       	ldd	r25, Z+3	; 0x03
		if (d == 'D' && (v & 0x80000000)) {
    5a60:	34 34       	cpi	r19, 0x44	; 68
    5a62:	09 f4       	brne	.+2      	; 0x5a66 <f_printf+0x2f8>
    5a64:	a2 c0       	rjmp	.+324    	; 0x5baa <f_printf+0x43c>
			v = 0 - v;
    5a66:	4e 01       	movw	r8, r28
    5a68:	08 94       	sec
    5a6a:	81 1c       	adc	r8, r1
    5a6c:	91 1c       	adc	r9, r1
			f |= 8;
		}
		i = 0;
    5a6e:	66 24       	eor	r6, r6
    5a70:	77 24       	eor	r7, r7
		do {
			d = (TCHAR)(v % r); v /= r;
    5a72:	a2 01       	movw	r20, r4
    5a74:	91 01       	movw	r18, r2
    5a76:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <__udivmodsi4>
    5a7a:	89 01       	movw	r16, r18
    5a7c:	9a 01       	movw	r18, r20
    5a7e:	46 2f       	mov	r20, r22
    5a80:	c9 01       	movw	r24, r18
    5a82:	b8 01       	movw	r22, r16
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    5a84:	4a 30       	cpi	r20, 0x0A	; 10
    5a86:	2c f0       	brlt	.+10     	; 0x5a92 <f_printf+0x324>
    5a88:	58 e7       	ldi	r21, 0x78	; 120
    5a8a:	b5 16       	cp	r11, r21
    5a8c:	a9 f0       	breq	.+42     	; 0x5ab8 <f_printf+0x34a>
    5a8e:	57 e0       	ldi	r21, 0x07	; 7
    5a90:	45 0f       	add	r20, r21
			str[i++] = d + '0';
    5a92:	40 5d       	subi	r20, 0xD0	; 208
    5a94:	f4 01       	movw	r30, r8
    5a96:	41 93       	st	Z+, r20
    5a98:	4f 01       	movw	r8, r30
    5a9a:	73 01       	movw	r14, r6
    5a9c:	08 94       	sec
    5a9e:	e1 1c       	adc	r14, r1
    5aa0:	f1 1c       	adc	r15, r1
		} while (v && i < sizeof str / sizeof str[0]);
    5aa2:	01 15       	cp	r16, r1
    5aa4:	11 05       	cpc	r17, r1
    5aa6:	21 05       	cpc	r18, r1
    5aa8:	31 05       	cpc	r19, r1
    5aaa:	59 f0       	breq	.+22     	; 0x5ac2 <f_printf+0x354>
    5aac:	f0 e2       	ldi	r31, 0x20	; 32
    5aae:	ef 16       	cp	r14, r31
    5ab0:	f1 04       	cpc	r15, r1
    5ab2:	21 f0       	breq	.+8      	; 0x5abc <f_printf+0x34e>
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
    5ab4:	37 01       	movw	r6, r14
    5ab6:	dd cf       	rjmp	.-70     	; 0x5a72 <f_printf+0x304>
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    5ab8:	57 e2       	ldi	r21, 0x27	; 39
    5aba:	ea cf       	rjmp	.-44     	; 0x5a90 <f_printf+0x322>
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
    5abc:	3f e1       	ldi	r19, 0x1F	; 31
    5abe:	63 2e       	mov	r6, r19
    5ac0:	71 2c       	mov	r7, r1
		if (f & 8) str[i++] = '-';
    5ac2:	a3 fe       	sbrs	r10, 3
    5ac4:	0d c0       	rjmp	.+26     	; 0x5ae0 <f_printf+0x372>
    5ac6:	e1 e0       	ldi	r30, 0x01	; 1
    5ac8:	f0 e0       	ldi	r31, 0x00	; 0
    5aca:	ec 0f       	add	r30, r28
    5acc:	fd 1f       	adc	r31, r29
    5ace:	ee 0d       	add	r30, r14
    5ad0:	ff 1d       	adc	r31, r15
    5ad2:	2d e2       	ldi	r18, 0x2D	; 45
    5ad4:	20 83       	st	Z, r18
    5ad6:	22 e0       	ldi	r18, 0x02	; 2
    5ad8:	e2 2e       	mov	r14, r18
    5ada:	f1 2c       	mov	r15, r1
    5adc:	e6 0c       	add	r14, r6
    5ade:	f7 1c       	adc	r15, r7
		j = i; d = (f & 1) ? '0' : ' ';
    5ae0:	a0 fe       	sbrs	r10, 0
    5ae2:	44 c0       	rjmp	.+136    	; 0x5b6c <f_printf+0x3fe>
    5ae4:	90 e3       	ldi	r25, 0x30	; 48
    5ae6:	99 2e       	mov	r9, r25
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    5ae8:	a1 fc       	sbrc	r10, 1
    5aea:	44 c0       	rjmp	.+136    	; 0x5b74 <f_printf+0x406>
    5aec:	57 01       	movw	r10, r14
    5aee:	08 94       	sec
    5af0:	a1 1c       	adc	r10, r1
    5af2:	b1 1c       	adc	r11, r1
    5af4:	ec 14       	cp	r14, r12
    5af6:	fd 04       	cpc	r15, r13
    5af8:	b0 f4       	brcc	.+44     	; 0x5b26 <f_printf+0x3b8>
    5afa:	ce 01       	movw	r24, r28
    5afc:	81 96       	adiw	r24, 0x21	; 33
    5afe:	69 2d       	mov	r22, r9
    5b00:	0e 94 35 20 	call	0x406a	; 0x406a <putc_bfd>
    5b04:	87 01       	movw	r16, r14
    5b06:	05 c0       	rjmp	.+10     	; 0x5b12 <f_printf+0x3a4>
    5b08:	ce 01       	movw	r24, r28
    5b0a:	81 96       	adiw	r24, 0x21	; 33
    5b0c:	69 2d       	mov	r22, r9
    5b0e:	0e 94 35 20 	call	0x406a	; 0x406a <putc_bfd>
    5b12:	0f 5f       	subi	r16, 0xFF	; 255
    5b14:	1f 4f       	sbci	r17, 0xFF	; 255
    5b16:	0c 15       	cp	r16, r12
    5b18:	1d 05       	cpc	r17, r13
    5b1a:	b0 f3       	brcs	.-20     	; 0x5b08 <f_printf+0x39a>

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    5b1c:	c6 01       	movw	r24, r12
    5b1e:	8e 19       	sub	r24, r14
    5b20:	9f 09       	sbc	r25, r15
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    5b22:	a8 0e       	add	r10, r24
    5b24:	b9 1e       	adc	r11, r25

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    5b26:	01 e0       	ldi	r16, 0x01	; 1
    5b28:	10 e0       	ldi	r17, 0x00	; 0
    5b2a:	0c 0f       	add	r16, r28
    5b2c:	1d 1f       	adc	r17, r29
    5b2e:	0e 0d       	add	r16, r14
    5b30:	1f 1d       	adc	r17, r15
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
		do putc_bfd(&pb, str[--i]); while (i);
    5b32:	08 94       	sec
    5b34:	e1 08       	sbc	r14, r1
    5b36:	f1 08       	sbc	r15, r1
    5b38:	ce 01       	movw	r24, r28
    5b3a:	81 96       	adiw	r24, 0x21	; 33
    5b3c:	f8 01       	movw	r30, r16
    5b3e:	62 91       	ld	r22, -Z
    5b40:	8f 01       	movw	r16, r30
    5b42:	0e 94 35 20 	call	0x406a	; 0x406a <putc_bfd>
    5b46:	e1 14       	cp	r14, r1
    5b48:	f1 04       	cpc	r15, r1
    5b4a:	99 f7       	brne	.-26     	; 0x5b32 <f_printf+0x3c4>
		while (j++ < w) putc_bfd(&pb, d);
    5b4c:	ac 14       	cp	r10, r12
    5b4e:	bd 04       	cpc	r11, r13
    5b50:	08 f0       	brcs	.+2      	; 0x5b54 <f_printf+0x3e6>
    5b52:	39 ce       	rjmp	.-910    	; 0x57c6 <f_printf+0x58>
    5b54:	ce 01       	movw	r24, r28
    5b56:	81 96       	adiw	r24, 0x21	; 33
    5b58:	69 2d       	mov	r22, r9
    5b5a:	0e 94 35 20 	call	0x406a	; 0x406a <putc_bfd>
    5b5e:	08 94       	sec
    5b60:	a1 1c       	adc	r10, r1
    5b62:	b1 1c       	adc	r11, r1
    5b64:	ac 14       	cp	r10, r12
    5b66:	bd 04       	cpc	r11, r13
    5b68:	a8 f3       	brcs	.-22     	; 0x5b54 <f_printf+0x3e6>
    5b6a:	2d ce       	rjmp	.-934    	; 0x57c6 <f_printf+0x58>
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
    5b6c:	80 e2       	ldi	r24, 0x20	; 32
    5b6e:	98 2e       	mov	r9, r24
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    5b70:	a1 fe       	sbrs	r10, 1
    5b72:	bc cf       	rjmp	.-136    	; 0x5aec <f_printf+0x37e>
    5b74:	57 01       	movw	r10, r14
    5b76:	d7 cf       	rjmp	.-82     	; 0x5b26 <f_printf+0x3b8>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    5b78:	34 34       	cpi	r19, 0x44	; 68
    5b7a:	61 f0       	breq	.+24     	; 0x5b94 <f_printf+0x426>
    5b7c:	af 01       	movw	r20, r30
    5b7e:	4e 5f       	subi	r20, 0xFE	; 254
    5b80:	5f 4f       	sbci	r21, 0xFF	; 255
    5b82:	a9 96       	adiw	r28, 0x29	; 41
    5b84:	5f af       	sts	0x7f, r21
    5b86:	4e af       	sts	0x7e, r20
    5b88:	a9 97       	sbiw	r28, 0x29	; 41
    5b8a:	60 81       	ld	r22, Z
    5b8c:	71 81       	ldd	r23, Z+1	; 0x01
    5b8e:	80 e0       	ldi	r24, 0x00	; 0
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	69 cf       	rjmp	.-302    	; 0x5a66 <f_printf+0x2f8>
    5b94:	60 81       	ld	r22, Z
    5b96:	71 81       	ldd	r23, Z+1	; 0x01
    5b98:	88 27       	eor	r24, r24
    5b9a:	77 fd       	sbrc	r23, 7
    5b9c:	80 95       	com	r24
    5b9e:	98 2f       	mov	r25, r24
    5ba0:	32 96       	adiw	r30, 0x02	; 2
    5ba2:	a9 96       	adiw	r28, 0x29	; 41
    5ba4:	ff af       	sts	0x7f, r31
    5ba6:	ee af       	sts	0x7e, r30
    5ba8:	a9 97       	sbiw	r28, 0x29	; 41
		if (d == 'D' && (v & 0x80000000)) {
    5baa:	97 ff       	sbrs	r25, 7
    5bac:	5c cf       	rjmp	.-328    	; 0x5a66 <f_printf+0x2f8>
			v = 0 - v;
    5bae:	90 95       	com	r25
    5bb0:	80 95       	com	r24
    5bb2:	70 95       	com	r23
    5bb4:	61 95       	neg	r22
    5bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    5bb8:	8f 4f       	sbci	r24, 0xFF	; 255
    5bba:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
    5bbc:	28 60       	ori	r18, 0x08	; 8
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
		if (d == 'D' && (v & 0x80000000)) {
			v = 0 - v;
    5bbe:	a2 2e       	mov	r10, r18
    5bc0:	52 cf       	rjmp	.-348    	; 0x5a66 <f_printf+0x2f8>
			f |= 4; c = *fmt++;
		}
		if (!c) break;
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    5bc2:	52 e0       	ldi	r21, 0x02	; 2
    5bc4:	25 2e       	mov	r2, r21
    5bc6:	31 2c       	mov	r3, r1
    5bc8:	41 2c       	mov	r4, r1
    5bca:	51 2c       	mov	r5, r1
    5bcc:	37 cf       	rjmp	.-402    	; 0x5a3c <f_printf+0x2ce>
    5bce:	48 e0       	ldi	r20, 0x08	; 8
    5bd0:	24 2e       	mov	r2, r20
    5bd2:	31 2c       	mov	r3, r1
    5bd4:	41 2c       	mov	r4, r1
    5bd6:	51 2c       	mov	r5, r1
    5bd8:	31 cf       	rjmp	.-414    	; 0x5a3c <f_printf+0x2ce>
    5bda:	7a e0       	ldi	r23, 0x0A	; 10
    5bdc:	27 2e       	mov	r2, r23
    5bde:	31 2c       	mov	r3, r1
    5be0:	41 2c       	mov	r4, r1
    5be2:	51 2c       	mov	r5, r1
    5be4:	2b cf       	rjmp	.-426    	; 0x5a3c <f_printf+0x2ce>
			}
			while (*p) putc_bfd(&pb, *p++);
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
    5be6:	a9 96       	adiw	r28, 0x29	; 41
    5be8:	0e ad       	sts	0x6e, r16
    5bea:	1f ad       	sts	0x6f, r17
    5bec:	a9 97       	sbiw	r28, 0x29	; 41
    5bee:	0e 5f       	subi	r16, 0xFE	; 254
    5bf0:	1f 4f       	sbci	r17, 0xFF	; 255
    5bf2:	ce 01       	movw	r24, r28
    5bf4:	81 96       	adiw	r24, 0x21	; 33
    5bf6:	a9 96       	adiw	r28, 0x29	; 41
    5bf8:	ee ad       	sts	0x6e, r30
    5bfa:	ff ad       	sts	0x6f, r31
    5bfc:	a9 97       	sbiw	r28, 0x29	; 41
    5bfe:	60 81       	ld	r22, Z
    5c00:	0e 94 35 20 	call	0x406a	; 0x406a <putc_bfd>
    5c04:	a9 96       	adiw	r28, 0x29	; 41
    5c06:	1f af       	sts	0x7f, r17
    5c08:	0e af       	sts	0x7e, r16
    5c0a:	a9 97       	sbiw	r28, 0x29	; 41
    5c0c:	dc cd       	rjmp	.-1096   	; 0x57c6 <f_printf+0x58>
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    5c0e:	01 e0       	ldi	r16, 0x01	; 1
    5c10:	10 e0       	ldi	r17, 0x00	; 0
    5c12:	ee 24       	eor	r14, r14
    5c14:	ff 24       	eor	r15, r15
    5c16:	b0 ce       	rjmp	.-672    	; 0x5978 <f_printf+0x20a>
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    5c18:	78 01       	movw	r14, r16
    5c1a:	0f 5f       	subi	r16, 0xFF	; 255
    5c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    5c1e:	c4 ce       	rjmp	.-632    	; 0x59a8 <f_printf+0x23a>

00005c20 <disk_status>:
	case DRV_MMC :
		return mmc_disk_status();
#endif
	}
	return STA_NOINIT;
}
    5c20:	81 e0       	ldi	r24, 0x01	; 1
    5c22:	08 95       	ret

00005c24 <disk_initialize>:
	case DRV_MMC :
		return mmc_disk_initialize();
#endif
	}
	return STA_NOINIT;
}
    5c24:	81 e0       	ldi	r24, 0x01	; 1
    5c26:	08 95       	ret

00005c28 <disk_read>:
	case DRV_MMC :
		return mmc_disk_read(buff, sector, count);
#endif
	}
	return RES_PARERR;
}
    5c28:	84 e0       	ldi	r24, 0x04	; 4
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
    5c2c:	08 95       	ret

00005c2e <disk_write>:
	case DRV_MMC :
		return mmc_disk_write(buff, sector, count);
#endif
	}
	return RES_PARERR;
}
    5c2e:	84 e0       	ldi	r24, 0x04	; 4
    5c30:	90 e0       	ldi	r25, 0x00	; 0
    5c32:	08 95       	ret

00005c34 <disk_ioctl>:
	case DRV_MMC :	
		return mmc_disk_ioctl(cmd, buff);
#endif
	}
	return RES_PARERR;
}
    5c34:	84 e0       	ldi	r24, 0x04	; 4
    5c36:	90 e0       	ldi	r25, 0x00	; 0
    5c38:	08 95       	ret

00005c3a <disk_timerproc>:
	cf_disk_timerproc();
#endif
#ifdef DRV_MMC
	mmc_disk_timerproc();
#endif
}
    5c3a:	08 95       	ret

00005c3c <main>:
#include "ffconf.h"
#include "ff.h"
#include "mmc_avr.h"
//#include "RSXAVRD.h"

int main(void) {
    5c3c:	cf 93       	push	r28
    5c3e:	df 93       	push	r29
    5c40:	cd b7       	in	r28, 0x3d	; 61
    5c42:	de b7       	in	r29, 0x3e	; 62
    5c44:	c1 53       	subi	r28, 0x31	; 49
    5c46:	d2 40       	sbci	r29, 0x02	; 2
    5c48:	0f b6       	in	r0, 0x3f	; 63
    5c4a:	f8 94       	cli
    5c4c:	de bf       	out	0x3e, r29	; 62
    5c4e:	0f be       	out	0x3f, r0	; 63
    5c50:	cd bf       	out	0x3d, r28	; 61

    //AVR_init();
    //DDRD = 0xFF;
    FIL* fp = malloc(sizeof(FIL));
    5c52:	82 e2       	ldi	r24, 0x22	; 34
    5c54:	92 e0       	ldi	r25, 0x02	; 2
    5c56:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <malloc>
    5c5a:	f8 2e       	mov	r15, r24
    5c5c:	e9 2e       	mov	r14, r25
    
    char* path = "filename";
    UINT bytesRead = 0;
    5c5e:	1a 82       	std	Y+2, r1	; 0x02
    5c60:	19 82       	std	Y+1, r1	; 0x01
    
    //FRESULT res;
    FATFS fs;
    //RTC rtc;
    //f_mount(&fs, "0:/", 1);
    DDRB |= 0xF0;
    5c62:	87 b3       	in	r24, 0x17	; 23
    5c64:	80 6f       	ori	r24, 0xF0	; 240
    5c66:	87 bb       	out	0x17, r24	; 23
    /* Enable SPI module in SPI mode 0 */
    //Enable AVR SPI as Master, SCK as Fosc/64 = 250kHz, SPI mode 0
    
    

    if(f_mount(&fs,"0:/", 1) == FR_OK){
    5c68:	ce 01       	movw	r24, r28
    5c6a:	03 96       	adiw	r24, 0x03	; 3
    5c6c:	60 e0       	ldi	r22, 0x00	; 0
    5c6e:	71 e0       	ldi	r23, 0x01	; 1
    5c70:	41 e0       	ldi	r20, 0x01	; 1
    5c72:	0e 94 78 19 	call	0x32f0	; 0x32f0 <f_mount>
    

    

    char *toWrite = "Hello World";
    char *toRead = malloc(1000);
    5c76:	88 ee       	ldi	r24, 0xE8	; 232
    5c78:	93 e0       	ldi	r25, 0x03	; 3
    5c7a:	0e 94 c6 2e 	call	0x5d8c	; 0x5d8c <malloc>
    5c7e:	6c 01       	movw	r12, r24
    if(f_open(fp, path, FA_READ | FA_WRITE | FA_OPEN_ALWAYS) == FR_OK){
    5c80:	8f 2d       	mov	r24, r15
    5c82:	9e 2d       	mov	r25, r14
    5c84:	64 e0       	ldi	r22, 0x04	; 4
    5c86:	71 e0       	ldi	r23, 0x01	; 1
    5c88:	43 e1       	ldi	r20, 0x13	; 19
    5c8a:	0e 94 c7 19 	call	0x338e	; 0x338e <f_open>
    5c8e:	00 97       	sbiw	r24, 0x00	; 0
    5c90:	69 f4       	brne	.+26     	; 0x5cac <main+0x70>
        //PORTB = 0xAA;
        // try creating file on the SD card, opening it, and reading from it
        if(f_read(fp, (void *)toRead, 11, &bytesRead) == FR_DISK_ERR){ // write buffer
    5c92:	8f 2d       	mov	r24, r15
    5c94:	9e 2d       	mov	r25, r14
    5c96:	b6 01       	movw	r22, r12
    5c98:	4b e0       	ldi	r20, 0x0B	; 11
    5c9a:	50 e0       	ldi	r21, 0x00	; 0
    5c9c:	9e 01       	movw	r18, r28
    5c9e:	2f 5f       	subi	r18, 0xFF	; 255
    5ca0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca2:	0e 94 3d 1c 	call	0x387a	; 0x387a <f_read>
    5ca6:	81 30       	cpi	r24, 0x01	; 1
    5ca8:	91 05       	cpc	r25, r1
    5caa:	29 f0       	breq	.+10     	; 0x5cb6 <main+0x7a>
       PORTD = 0xBF;
    }
    //DRESULT stat = mmc_disk_write(toWrite, 1, 1); // in theory - this should write the string to the first sector and only the first sector
    //ack can't tell if we need to use mmc functions or can still use regular FatFS api???
    */
    if(f_close(fp) != FR_OK){
    5cac:	8f 2d       	mov	r24, r15
    5cae:	9e 2d       	mov	r25, r14
    5cb0:	0e 94 3a 21 	call	0x4274	; 0x4274 <f_close>
    5cb4:	ff cf       	rjmp	.-2      	; 0x5cb4 <main+0x78>
    char *toRead = malloc(1000);
    if(f_open(fp, path, FA_READ | FA_WRITE | FA_OPEN_ALWAYS) == FR_OK){
        //PORTB = 0xAA;
        // try creating file on the SD card, opening it, and reading from it
        if(f_read(fp, (void *)toRead, 11, &bytesRead) == FR_DISK_ERR){ // write buffer
            PORTB &= ~(0xF0);
    5cb6:	88 b3       	in	r24, 0x18	; 24
    5cb8:	8f 70       	andi	r24, 0x0F	; 15
    5cba:	88 bb       	out	0x18, r24	; 24
            while(1){
                SPDR = 0xAC;
    5cbc:	4c ea       	ldi	r20, 0xAC	; 172
                while(!((SPSR & (1<<SPIF)) > 0x00)){}
                    num = (num + 1) % 10000;
    5cbe:	20 e1       	ldi	r18, 0x10	; 16
    5cc0:	37 e2       	ldi	r19, 0x27	; 39
                    if(num == 0)
                        PORTB ^= 0xF0;
    5cc2:	e0 ef       	ldi	r30, 0xF0	; 240
        //PORTB = 0xAA;
        // try creating file on the SD card, opening it, and reading from it
        if(f_read(fp, (void *)toRead, 11, &bytesRead) == FR_DISK_ERR){ // write buffer
            PORTB &= ~(0xF0);
            while(1){
                SPDR = 0xAC;
    5cc4:	4f b9       	out	0x0f, r20	; 15
                while(!((SPSR & (1<<SPIF)) > 0x00)){}
    5cc6:	77 9b       	sbis	0x0e, 7	; 14
    5cc8:	fe cf       	rjmp	.-4      	; 0x5cc6 <main+0x8a>
                    num = (num + 1) % 10000;
    5cca:	c8 01       	movw	r24, r16
    5ccc:	01 96       	adiw	r24, 0x01	; 1
    5cce:	b9 01       	movw	r22, r18
    5cd0:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <__udivmodhi4>
    5cd4:	8c 01       	movw	r16, r24
                    if(num == 0)
    5cd6:	00 97       	sbiw	r24, 0x00	; 0
    5cd8:	a9 f7       	brne	.-22     	; 0x5cc4 <main+0x88>
                        PORTB ^= 0xF0;
    5cda:	88 b3       	in	r24, 0x18	; 24
    5cdc:	8e 27       	eor	r24, r30
    5cde:	88 bb       	out	0x18, r24	; 24
    5ce0:	f1 cf       	rjmp	.-30     	; 0x5cc4 <main+0x88>

00005ce2 <__mulsi3>:
    5ce2:	62 9f       	mul	r22, r18
    5ce4:	d0 01       	movw	r26, r0
    5ce6:	73 9f       	mul	r23, r19
    5ce8:	f0 01       	movw	r30, r0
    5cea:	82 9f       	mul	r24, r18
    5cec:	e0 0d       	add	r30, r0
    5cee:	f1 1d       	adc	r31, r1
    5cf0:	64 9f       	mul	r22, r20
    5cf2:	e0 0d       	add	r30, r0
    5cf4:	f1 1d       	adc	r31, r1
    5cf6:	92 9f       	mul	r25, r18
    5cf8:	f0 0d       	add	r31, r0
    5cfa:	83 9f       	mul	r24, r19
    5cfc:	f0 0d       	add	r31, r0
    5cfe:	74 9f       	mul	r23, r20
    5d00:	f0 0d       	add	r31, r0
    5d02:	65 9f       	mul	r22, r21
    5d04:	f0 0d       	add	r31, r0
    5d06:	99 27       	eor	r25, r25
    5d08:	72 9f       	mul	r23, r18
    5d0a:	b0 0d       	add	r27, r0
    5d0c:	e1 1d       	adc	r30, r1
    5d0e:	f9 1f       	adc	r31, r25
    5d10:	63 9f       	mul	r22, r19
    5d12:	b0 0d       	add	r27, r0
    5d14:	e1 1d       	adc	r30, r1
    5d16:	f9 1f       	adc	r31, r25
    5d18:	bd 01       	movw	r22, r26
    5d1a:	cf 01       	movw	r24, r30
    5d1c:	11 24       	eor	r1, r1
    5d1e:	08 95       	ret

00005d20 <__udivmodhi4>:
    5d20:	aa 1b       	sub	r26, r26
    5d22:	bb 1b       	sub	r27, r27
    5d24:	51 e1       	ldi	r21, 0x11	; 17
    5d26:	07 c0       	rjmp	.+14     	; 0x5d36 <__udivmodhi4_ep>

00005d28 <__udivmodhi4_loop>:
    5d28:	aa 1f       	adc	r26, r26
    5d2a:	bb 1f       	adc	r27, r27
    5d2c:	a6 17       	cp	r26, r22
    5d2e:	b7 07       	cpc	r27, r23
    5d30:	10 f0       	brcs	.+4      	; 0x5d36 <__udivmodhi4_ep>
    5d32:	a6 1b       	sub	r26, r22
    5d34:	b7 0b       	sbc	r27, r23

00005d36 <__udivmodhi4_ep>:
    5d36:	88 1f       	adc	r24, r24
    5d38:	99 1f       	adc	r25, r25
    5d3a:	5a 95       	dec	r21
    5d3c:	a9 f7       	brne	.-22     	; 0x5d28 <__udivmodhi4_loop>
    5d3e:	80 95       	com	r24
    5d40:	90 95       	com	r25
    5d42:	bc 01       	movw	r22, r24
    5d44:	cd 01       	movw	r24, r26
    5d46:	08 95       	ret

00005d48 <__udivmodsi4>:
    5d48:	a1 e2       	ldi	r26, 0x21	; 33
    5d4a:	1a 2e       	mov	r1, r26
    5d4c:	aa 1b       	sub	r26, r26
    5d4e:	bb 1b       	sub	r27, r27
    5d50:	fd 01       	movw	r30, r26
    5d52:	0d c0       	rjmp	.+26     	; 0x5d6e <__udivmodsi4_ep>

00005d54 <__udivmodsi4_loop>:
    5d54:	aa 1f       	adc	r26, r26
    5d56:	bb 1f       	adc	r27, r27
    5d58:	ee 1f       	adc	r30, r30
    5d5a:	ff 1f       	adc	r31, r31
    5d5c:	a2 17       	cp	r26, r18
    5d5e:	b3 07       	cpc	r27, r19
    5d60:	e4 07       	cpc	r30, r20
    5d62:	f5 07       	cpc	r31, r21
    5d64:	20 f0       	brcs	.+8      	; 0x5d6e <__udivmodsi4_ep>
    5d66:	a2 1b       	sub	r26, r18
    5d68:	b3 0b       	sbc	r27, r19
    5d6a:	e4 0b       	sbc	r30, r20
    5d6c:	f5 0b       	sbc	r31, r21

00005d6e <__udivmodsi4_ep>:
    5d6e:	66 1f       	adc	r22, r22
    5d70:	77 1f       	adc	r23, r23
    5d72:	88 1f       	adc	r24, r24
    5d74:	99 1f       	adc	r25, r25
    5d76:	1a 94       	dec	r1
    5d78:	69 f7       	brne	.-38     	; 0x5d54 <__udivmodsi4_loop>
    5d7a:	60 95       	com	r22
    5d7c:	70 95       	com	r23
    5d7e:	80 95       	com	r24
    5d80:	90 95       	com	r25
    5d82:	9b 01       	movw	r18, r22
    5d84:	ac 01       	movw	r20, r24
    5d86:	bd 01       	movw	r22, r26
    5d88:	cf 01       	movw	r24, r30
    5d8a:	08 95       	ret

00005d8c <malloc>:
    5d8c:	cf 93       	push	r28
    5d8e:	df 93       	push	r29
    5d90:	ac 01       	movw	r20, r24
    5d92:	82 30       	cpi	r24, 0x02	; 2
    5d94:	91 05       	cpc	r25, r1
    5d96:	10 f4       	brcc	.+4      	; 0x5d9c <malloc+0x10>
    5d98:	42 e0       	ldi	r20, 0x02	; 2
    5d9a:	50 e0       	ldi	r21, 0x00	; 0
    5d9c:	e0 91 3f 01 	lds	r30, 0x013F
    5da0:	f0 91 40 01 	lds	r31, 0x0140
    5da4:	20 e0       	ldi	r18, 0x00	; 0
    5da6:	30 e0       	ldi	r19, 0x00	; 0
    5da8:	a0 e0       	ldi	r26, 0x00	; 0
    5daa:	b0 e0       	ldi	r27, 0x00	; 0
    5dac:	24 c0       	rjmp	.+72     	; 0x5df6 <malloc+0x6a>
    5dae:	80 81       	ld	r24, Z
    5db0:	91 81       	ldd	r25, Z+1	; 0x01
    5db2:	84 17       	cp	r24, r20
    5db4:	95 07       	cpc	r25, r21
    5db6:	d0 f0       	brcs	.+52     	; 0x5dec <malloc+0x60>
    5db8:	84 17       	cp	r24, r20
    5dba:	95 07       	cpc	r25, r21
    5dbc:	71 f4       	brne	.+28     	; 0x5dda <malloc+0x4e>
    5dbe:	82 81       	ldd	r24, Z+2	; 0x02
    5dc0:	93 81       	ldd	r25, Z+3	; 0x03
    5dc2:	10 97       	sbiw	r26, 0x00	; 0
    5dc4:	29 f0       	breq	.+10     	; 0x5dd0 <malloc+0x44>
    5dc6:	13 96       	adiw	r26, 0x03	; 3
    5dc8:	9c 93       	st	X, r25
    5dca:	8e 93       	st	-X, r24
    5dcc:	12 97       	sbiw	r26, 0x02	; 2
    5dce:	2c c0       	rjmp	.+88     	; 0x5e28 <malloc+0x9c>
    5dd0:	90 93 40 01 	sts	0x0140, r25
    5dd4:	80 93 3f 01 	sts	0x013F, r24
    5dd8:	27 c0       	rjmp	.+78     	; 0x5e28 <malloc+0x9c>
    5dda:	21 15       	cp	r18, r1
    5ddc:	31 05       	cpc	r19, r1
    5dde:	19 f0       	breq	.+6      	; 0x5de6 <malloc+0x5a>
    5de0:	82 17       	cp	r24, r18
    5de2:	93 07       	cpc	r25, r19
    5de4:	18 f4       	brcc	.+6      	; 0x5dec <malloc+0x60>
    5de6:	9c 01       	movw	r18, r24
    5de8:	bd 01       	movw	r22, r26
    5dea:	ef 01       	movw	r28, r30
    5dec:	92 81       	ldd	r25, Z+2	; 0x02
    5dee:	83 81       	ldd	r24, Z+3	; 0x03
    5df0:	df 01       	movw	r26, r30
    5df2:	e9 2f       	mov	r30, r25
    5df4:	f8 2f       	mov	r31, r24
    5df6:	30 97       	sbiw	r30, 0x00	; 0
    5df8:	d1 f6       	brne	.-76     	; 0x5dae <malloc+0x22>
    5dfa:	21 15       	cp	r18, r1
    5dfc:	31 05       	cpc	r19, r1
    5dfe:	f9 f0       	breq	.+62     	; 0x5e3e <malloc+0xb2>
    5e00:	c9 01       	movw	r24, r18
    5e02:	84 1b       	sub	r24, r20
    5e04:	95 0b       	sbc	r25, r21
    5e06:	84 30       	cpi	r24, 0x04	; 4
    5e08:	91 05       	cpc	r25, r1
    5e0a:	80 f4       	brcc	.+32     	; 0x5e2c <malloc+0xa0>
    5e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    5e10:	61 15       	cp	r22, r1
    5e12:	71 05       	cpc	r23, r1
    5e14:	21 f0       	breq	.+8      	; 0x5e1e <malloc+0x92>
    5e16:	fb 01       	movw	r30, r22
    5e18:	93 83       	std	Z+3, r25	; 0x03
    5e1a:	82 83       	std	Z+2, r24	; 0x02
    5e1c:	04 c0       	rjmp	.+8      	; 0x5e26 <malloc+0x9a>
    5e1e:	90 93 40 01 	sts	0x0140, r25
    5e22:	80 93 3f 01 	sts	0x013F, r24
    5e26:	fe 01       	movw	r30, r28
    5e28:	32 96       	adiw	r30, 0x02	; 2
    5e2a:	42 c0       	rjmp	.+132    	; 0x5eb0 <malloc+0x124>
    5e2c:	fe 01       	movw	r30, r28
    5e2e:	e8 0f       	add	r30, r24
    5e30:	f9 1f       	adc	r31, r25
    5e32:	41 93       	st	Z+, r20
    5e34:	51 93       	st	Z+, r21
    5e36:	02 97       	sbiw	r24, 0x02	; 2
    5e38:	99 83       	std	Y+1, r25	; 0x01
    5e3a:	88 83       	st	Y, r24
    5e3c:	39 c0       	rjmp	.+114    	; 0x5eb0 <malloc+0x124>
    5e3e:	80 91 3d 01 	lds	r24, 0x013D
    5e42:	90 91 3e 01 	lds	r25, 0x013E
    5e46:	00 97       	sbiw	r24, 0x00	; 0
    5e48:	41 f4       	brne	.+16     	; 0x5e5a <malloc+0xce>
    5e4a:	80 91 2b 01 	lds	r24, 0x012B
    5e4e:	90 91 2c 01 	lds	r25, 0x012C
    5e52:	90 93 3e 01 	sts	0x013E, r25
    5e56:	80 93 3d 01 	sts	0x013D, r24
    5e5a:	20 91 29 01 	lds	r18, 0x0129
    5e5e:	30 91 2a 01 	lds	r19, 0x012A
    5e62:	21 15       	cp	r18, r1
    5e64:	31 05       	cpc	r19, r1
    5e66:	41 f4       	brne	.+16     	; 0x5e78 <malloc+0xec>
    5e68:	2d b7       	in	r18, 0x3d	; 61
    5e6a:	3e b7       	in	r19, 0x3e	; 62
    5e6c:	80 91 2d 01 	lds	r24, 0x012D
    5e70:	90 91 2e 01 	lds	r25, 0x012E
    5e74:	28 1b       	sub	r18, r24
    5e76:	39 0b       	sbc	r19, r25
    5e78:	e0 91 3d 01 	lds	r30, 0x013D
    5e7c:	f0 91 3e 01 	lds	r31, 0x013E
    5e80:	e2 17       	cp	r30, r18
    5e82:	f3 07       	cpc	r31, r19
    5e84:	98 f4       	brcc	.+38     	; 0x5eac <malloc+0x120>
    5e86:	2e 1b       	sub	r18, r30
    5e88:	3f 0b       	sbc	r19, r31
    5e8a:	24 17       	cp	r18, r20
    5e8c:	35 07       	cpc	r19, r21
    5e8e:	70 f0       	brcs	.+28     	; 0x5eac <malloc+0x120>
    5e90:	ca 01       	movw	r24, r20
    5e92:	02 96       	adiw	r24, 0x02	; 2
    5e94:	28 17       	cp	r18, r24
    5e96:	39 07       	cpc	r19, r25
    5e98:	48 f0       	brcs	.+18     	; 0x5eac <malloc+0x120>
    5e9a:	8e 0f       	add	r24, r30
    5e9c:	9f 1f       	adc	r25, r31
    5e9e:	90 93 3e 01 	sts	0x013E, r25
    5ea2:	80 93 3d 01 	sts	0x013D, r24
    5ea6:	41 93       	st	Z+, r20
    5ea8:	51 93       	st	Z+, r21
    5eaa:	02 c0       	rjmp	.+4      	; 0x5eb0 <malloc+0x124>
    5eac:	e0 e0       	ldi	r30, 0x00	; 0
    5eae:	f0 e0       	ldi	r31, 0x00	; 0
    5eb0:	cf 01       	movw	r24, r30
    5eb2:	df 91       	pop	r29
    5eb4:	cf 91       	pop	r28
    5eb6:	08 95       	ret

00005eb8 <free>:
    5eb8:	0f 93       	push	r16
    5eba:	1f 93       	push	r17
    5ebc:	cf 93       	push	r28
    5ebe:	df 93       	push	r29
    5ec0:	9c 01       	movw	r18, r24
    5ec2:	00 97       	sbiw	r24, 0x00	; 0
    5ec4:	09 f4       	brne	.+2      	; 0x5ec8 <free+0x10>
    5ec6:	8c c0       	rjmp	.+280    	; 0x5fe0 <free+0x128>
    5ec8:	dc 01       	movw	r26, r24
    5eca:	12 97       	sbiw	r26, 0x02	; 2
    5ecc:	13 96       	adiw	r26, 0x03	; 3
    5ece:	1c 92       	st	X, r1
    5ed0:	1e 92       	st	-X, r1
    5ed2:	12 97       	sbiw	r26, 0x02	; 2
    5ed4:	60 91 3f 01 	lds	r22, 0x013F
    5ed8:	70 91 40 01 	lds	r23, 0x0140
    5edc:	61 15       	cp	r22, r1
    5ede:	71 05       	cpc	r23, r1
    5ee0:	89 f4       	brne	.+34     	; 0x5f04 <free+0x4c>
    5ee2:	8d 91       	ld	r24, X+
    5ee4:	9c 91       	ld	r25, X
    5ee6:	11 97       	sbiw	r26, 0x01	; 1
    5ee8:	82 0f       	add	r24, r18
    5eea:	93 1f       	adc	r25, r19
    5eec:	20 91 3d 01 	lds	r18, 0x013D
    5ef0:	30 91 3e 01 	lds	r19, 0x013E
    5ef4:	28 17       	cp	r18, r24
    5ef6:	39 07       	cpc	r19, r25
    5ef8:	69 f5       	brne	.+90     	; 0x5f54 <free+0x9c>
    5efa:	b0 93 3e 01 	sts	0x013E, r27
    5efe:	a0 93 3d 01 	sts	0x013D, r26
    5f02:	6e c0       	rjmp	.+220    	; 0x5fe0 <free+0x128>
    5f04:	fb 01       	movw	r30, r22
    5f06:	40 e0       	ldi	r20, 0x00	; 0
    5f08:	50 e0       	ldi	r21, 0x00	; 0
    5f0a:	01 c0       	rjmp	.+2      	; 0x5f0e <free+0x56>
    5f0c:	fc 01       	movw	r30, r24
    5f0e:	ea 17       	cp	r30, r26
    5f10:	fb 07       	cpc	r31, r27
    5f12:	30 f4       	brcc	.+12     	; 0x5f20 <free+0x68>
    5f14:	82 81       	ldd	r24, Z+2	; 0x02
    5f16:	93 81       	ldd	r25, Z+3	; 0x03
    5f18:	af 01       	movw	r20, r30
    5f1a:	00 97       	sbiw	r24, 0x00	; 0
    5f1c:	b9 f7       	brne	.-18     	; 0x5f0c <free+0x54>
    5f1e:	1f c0       	rjmp	.+62     	; 0x5f5e <free+0xa6>
    5f20:	e9 01       	movw	r28, r18
    5f22:	22 97       	sbiw	r28, 0x02	; 2
    5f24:	fb 83       	std	Y+3, r31	; 0x03
    5f26:	ea 83       	std	Y+2, r30	; 0x02
    5f28:	08 81       	ld	r16, Y
    5f2a:	19 81       	ldd	r17, Y+1	; 0x01
    5f2c:	c9 01       	movw	r24, r18
    5f2e:	80 0f       	add	r24, r16
    5f30:	91 1f       	adc	r25, r17
    5f32:	8e 17       	cp	r24, r30
    5f34:	9f 07       	cpc	r25, r31
    5f36:	59 f4       	brne	.+22     	; 0x5f4e <free+0x96>
    5f38:	80 81       	ld	r24, Z
    5f3a:	91 81       	ldd	r25, Z+1	; 0x01
    5f3c:	80 0f       	add	r24, r16
    5f3e:	91 1f       	adc	r25, r17
    5f40:	02 96       	adiw	r24, 0x02	; 2
    5f42:	99 83       	std	Y+1, r25	; 0x01
    5f44:	88 83       	st	Y, r24
    5f46:	82 81       	ldd	r24, Z+2	; 0x02
    5f48:	93 81       	ldd	r25, Z+3	; 0x03
    5f4a:	9b 83       	std	Y+3, r25	; 0x03
    5f4c:	8a 83       	std	Y+2, r24	; 0x02
    5f4e:	41 15       	cp	r20, r1
    5f50:	51 05       	cpc	r21, r1
    5f52:	29 f4       	brne	.+10     	; 0x5f5e <free+0xa6>
    5f54:	b0 93 40 01 	sts	0x0140, r27
    5f58:	a0 93 3f 01 	sts	0x013F, r26
    5f5c:	41 c0       	rjmp	.+130    	; 0x5fe0 <free+0x128>
    5f5e:	fa 01       	movw	r30, r20
    5f60:	b3 83       	std	Z+3, r27	; 0x03
    5f62:	a2 83       	std	Z+2, r26	; 0x02
    5f64:	c1 91       	ld	r28, Z+
    5f66:	d1 91       	ld	r29, Z+
    5f68:	ec 0f       	add	r30, r28
    5f6a:	fd 1f       	adc	r31, r29
    5f6c:	ae 17       	cp	r26, r30
    5f6e:	bf 07       	cpc	r27, r31
    5f70:	81 f4       	brne	.+32     	; 0x5f92 <free+0xda>
    5f72:	f9 01       	movw	r30, r18
    5f74:	92 91       	ld	r25, -Z
    5f76:	82 91       	ld	r24, -Z
    5f78:	8c 0f       	add	r24, r28
    5f7a:	9d 1f       	adc	r25, r29
    5f7c:	02 96       	adiw	r24, 0x02	; 2
    5f7e:	da 01       	movw	r26, r20
    5f80:	11 96       	adiw	r26, 0x01	; 1
    5f82:	9c 93       	st	X, r25
    5f84:	8e 93       	st	-X, r24
    5f86:	82 81       	ldd	r24, Z+2	; 0x02
    5f88:	93 81       	ldd	r25, Z+3	; 0x03
    5f8a:	13 96       	adiw	r26, 0x03	; 3
    5f8c:	9c 93       	st	X, r25
    5f8e:	8e 93       	st	-X, r24
    5f90:	12 97       	sbiw	r26, 0x02	; 2
    5f92:	e0 e0       	ldi	r30, 0x00	; 0
    5f94:	f0 e0       	ldi	r31, 0x00	; 0
    5f96:	02 c0       	rjmp	.+4      	; 0x5f9c <free+0xe4>
    5f98:	fb 01       	movw	r30, r22
    5f9a:	bc 01       	movw	r22, r24
    5f9c:	db 01       	movw	r26, r22
    5f9e:	12 96       	adiw	r26, 0x02	; 2
    5fa0:	8d 91       	ld	r24, X+
    5fa2:	9c 91       	ld	r25, X
    5fa4:	13 97       	sbiw	r26, 0x03	; 3
    5fa6:	00 97       	sbiw	r24, 0x00	; 0
    5fa8:	b9 f7       	brne	.-18     	; 0x5f98 <free+0xe0>
    5faa:	cb 01       	movw	r24, r22
    5fac:	02 96       	adiw	r24, 0x02	; 2
    5fae:	2d 91       	ld	r18, X+
    5fb0:	3c 91       	ld	r19, X
    5fb2:	11 97       	sbiw	r26, 0x01	; 1
    5fb4:	82 0f       	add	r24, r18
    5fb6:	93 1f       	adc	r25, r19
    5fb8:	20 91 3d 01 	lds	r18, 0x013D
    5fbc:	30 91 3e 01 	lds	r19, 0x013E
    5fc0:	28 17       	cp	r18, r24
    5fc2:	39 07       	cpc	r19, r25
    5fc4:	69 f4       	brne	.+26     	; 0x5fe0 <free+0x128>
    5fc6:	30 97       	sbiw	r30, 0x00	; 0
    5fc8:	29 f4       	brne	.+10     	; 0x5fd4 <free+0x11c>
    5fca:	10 92 40 01 	sts	0x0140, r1
    5fce:	10 92 3f 01 	sts	0x013F, r1
    5fd2:	02 c0       	rjmp	.+4      	; 0x5fd8 <free+0x120>
    5fd4:	13 82       	std	Z+3, r1	; 0x03
    5fd6:	12 82       	std	Z+2, r1	; 0x02
    5fd8:	70 93 3e 01 	sts	0x013E, r23
    5fdc:	60 93 3d 01 	sts	0x013D, r22
    5fe0:	df 91       	pop	r29
    5fe2:	cf 91       	pop	r28
    5fe4:	1f 91       	pop	r17
    5fe6:	0f 91       	pop	r16
    5fe8:	08 95       	ret

00005fea <_exit>:
    5fea:	f8 94       	cli

00005fec <__stop_program>:
    5fec:	ff cf       	rjmp	.-2      	; 0x5fec <__stop_program>
