
sd_card_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00005dfa  00005e8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005dfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800120  00800120  00005eae  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00005eb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000081  00000000  00000000  0000657c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006600  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004f97  00000000  00000000  00006760  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000999  00000000  00000000  0000b6f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001820  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f20  00000000  00000000  0000d8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000987  00000000  00000000  0000e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009a78  00000000  00000000  0000f157  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000478  00000000  00000000  00018bcf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 94 07 	jmp	0xf28	; 0xf28 <__vector_1>
       8:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__vector_2>
       c:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__vector_3>
      10:	0c 94 c7 07 	jmp	0xf8e	; 0xf8e <__vector_4>
      14:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__vector_5>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 e9 07 	jmp	0xfd2	; 0xfd2 <__vector_7>
      20:	0c 94 f8 07 	jmp	0xff0	; 0xff0 <__vector_8>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 07 08 	jmp	0x100e	; 0x100e <__vector_12>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      80:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      84:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      88:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ef       	ldi	r30, 0xFA	; 250
      a0:	fd e5       	ldi	r31, 0x5D	; 93
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 32       	cpi	r26, 0x20	; 32
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
      b2:	1b be       	out	0x3b, r1	; 59

000000b4 <__do_clear_bss>:
      b4:	11 e0       	ldi	r17, 0x01	; 1
      b6:	a0 e2       	ldi	r26, 0x20	; 32
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	ad 32       	cpi	r26, 0x2D	; 45
      c0:	b1 07       	cpc	r27, r17
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 8b 2e 	call	0x5d16	; 0x5d16 <main>
      c8:	0c 94 fb 2e 	jmp	0x5df6	; 0x5df6 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <wait_ready>:
)
{
	BYTE d;


	Timer2 = wt / 10;
      d0:	6a e0       	ldi	r22, 0x0A	; 10
      d2:	70 e0       	ldi	r23, 0x00	; 0
      d4:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <__udivmodhi4>
      d8:	60 93 20 01 	sts	0x0120, r22
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
      dc:	9f ef       	ldi	r25, 0xFF	; 255
      de:	9f b9       	out	0x0f, r25	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
      e0:	77 9b       	sbis	0x0e, 7	; 14
      e2:	fe cf       	rjmp	.-4      	; 0xe0 <wait_ready+0x10>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
      e4:	77 9b       	sbis	0x0e, 7	; 14
      e6:	fe cf       	rjmp	.-4      	; 0xe4 <wait_ready+0x14>
	return SPDR;
      e8:	8f b1       	in	r24, 0x0f	; 15


	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
      ea:	8f 3f       	cpi	r24, 0xFF	; 255
      ec:	39 f0       	breq	.+14     	; 0xfc <wait_ready+0x2c>
      ee:	80 91 20 01 	lds	r24, 0x0120
      f2:	88 23       	and	r24, r24
      f4:	a1 f7       	brne	.-24     	; 0xde <wait_ready+0xe>
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	08 95       	ret
      fc:	81 e0       	ldi	r24, 0x01	; 1
      fe:	90 e0       	ldi	r25, 0x00	; 0

	return (d == 0xFF) ? 1 : 0;
}
     100:	08 95       	ret

00000102 <select>:
/*-----------------------------------------------------------------------*/

static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
     102:	c0 98       	cbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     104:	8f ef       	ldi	r24, 0xFF	; 255
     106:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     108:	77 9b       	sbis	0x0e, 7	; 14
     10a:	fe cf       	rjmp	.-4      	; 0x108 <select+0x6>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     10c:	77 9b       	sbis	0x0e, 7	; 14
     10e:	fe cf       	rjmp	.-4      	; 0x10c <select+0xa>
	return SPDR;
     110:	8f b1       	in	r24, 0x0f	; 15
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
     112:	84 ef       	ldi	r24, 0xF4	; 244
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 68 00 	call	0xd0	; 0xd0 <wait_ready>
     11a:	00 97       	sbiw	r24, 0x00	; 0
     11c:	59 f4       	brne	.+22     	; 0x134 <select+0x32>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     11e:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     120:	8f ef       	ldi	r24, 0xFF	; 255
     122:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     124:	77 9b       	sbis	0x0e, 7	; 14
     126:	fe cf       	rjmp	.-4      	; 0x124 <select+0x22>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     128:	77 9b       	sbis	0x0e, 7	; 14
     12a:	fe cf       	rjmp	.-4      	; 0x128 <select+0x26>
	return SPDR;
     12c:	8f b1       	in	r24, 0x0f	; 15
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
     138:	08 95       	ret

0000013a <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
     13a:	cf 92       	push	r12
     13c:	df 92       	push	r13
     13e:	ef 92       	push	r14
     140:	ff 92       	push	r15
     142:	cf 93       	push	r28
     144:	c8 2f       	mov	r28, r24
     146:	6a 01       	movw	r12, r20
     148:	7b 01       	movw	r14, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
     14a:	87 fd       	sbrc	r24, 7
     14c:	6b c0       	rjmp	.+214    	; 0x224 <send_cmd+0xea>
		if (res > 1) // > 1
		 return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
     14e:	cc 30       	cpi	r28, 0x0C	; 12
     150:	99 f0       	breq	.+38     	; 0x178 <send_cmd+0x3e>
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     152:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     154:	8f ef       	ldi	r24, 0xFF	; 255
     156:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     158:	77 9b       	sbis	0x0e, 7	; 14
     15a:	fe cf       	rjmp	.-4      	; 0x158 <send_cmd+0x1e>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     15c:	77 9b       	sbis	0x0e, 7	; 14
     15e:	fe cf       	rjmp	.-4      	; 0x15c <send_cmd+0x22>
	return SPDR;
     160:	8f b1       	in	r24, 0x0f	; 15
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
     162:	0e 94 81 00 	call	0x102	; 0x102 <select>
     166:	00 97       	sbiw	r24, 0x00	; 0
     168:	39 f4       	brne	.+14     	; 0x178 <send_cmd+0x3e>
     16a:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
     16c:	cf 91       	pop	r28
     16e:	ff 90       	pop	r15
     170:	ef 90       	pop	r14
     172:	df 90       	pop	r13
     174:	cf 90       	pop	r12
     176:	08 95       	ret
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
     178:	8c 2f       	mov	r24, r28
     17a:	80 64       	ori	r24, 0x40	; 64
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     17c:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     17e:	77 9b       	sbis	0x0e, 7	; 14
     180:	fe cf       	rjmp	.-4      	; 0x17e <send_cmd+0x44>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     182:	77 9b       	sbis	0x0e, 7	; 14
     184:	fe cf       	rjmp	.-4      	; 0x182 <send_cmd+0x48>
	return SPDR;
     186:	8f b1       	in	r24, 0x0f	; 15
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
     188:	8f 2d       	mov	r24, r15
     18a:	99 27       	eor	r25, r25
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     190:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     192:	77 9b       	sbis	0x0e, 7	; 14
     194:	fe cf       	rjmp	.-4      	; 0x192 <send_cmd+0x58>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     196:	77 9b       	sbis	0x0e, 7	; 14
     198:	fe cf       	rjmp	.-4      	; 0x196 <send_cmd+0x5c>
	return SPDR;
     19a:	8f b1       	in	r24, 0x0f	; 15
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
     19c:	c7 01       	movw	r24, r14
     19e:	aa 27       	eor	r26, r26
     1a0:	bb 27       	eor	r27, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     1a2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     1a4:	77 9b       	sbis	0x0e, 7	; 14
     1a6:	fe cf       	rjmp	.-4      	; 0x1a4 <send_cmd+0x6a>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     1a8:	77 9b       	sbis	0x0e, 7	; 14
     1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <send_cmd+0x6e>
	return SPDR;
     1ac:	8f b1       	in	r24, 0x0f	; 15

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
     1ae:	77 27       	eor	r23, r23
     1b0:	6f 2d       	mov	r22, r15
     1b2:	5e 2d       	mov	r21, r14
     1b4:	4d 2d       	mov	r20, r13
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     1b6:	4f b9       	out	0x0f, r20	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     1b8:	77 9b       	sbis	0x0e, 7	; 14
     1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <send_cmd+0x7e>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     1bc:	77 9b       	sbis	0x0e, 7	; 14
     1be:	fe cf       	rjmp	.-4      	; 0x1bc <send_cmd+0x82>
	return SPDR;
     1c0:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     1c2:	cf b8       	out	0x0f, r12	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     1c4:	77 9b       	sbis	0x0e, 7	; 14
     1c6:	fe cf       	rjmp	.-4      	; 0x1c4 <send_cmd+0x8a>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     1c8:	77 9b       	sbis	0x0e, 7	; 14
     1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <send_cmd+0x8e>
	return SPDR;
     1cc:	8f b1       	in	r24, 0x0f	; 15
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     1ce:	cc 23       	and	r28, r28
     1d0:	e9 f0       	breq	.+58     	; 0x20c <send_cmd+0xd2>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     1d2:	c8 30       	cpi	r28, 0x08	; 8
     1d4:	e9 f4       	brne	.+58     	; 0x210 <send_cmd+0xd6>
     1d6:	87 e8       	ldi	r24, 0x87	; 135
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     1d8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     1da:	77 9b       	sbis	0x0e, 7	; 14
     1dc:	fe cf       	rjmp	.-4      	; 0x1da <send_cmd+0xa0>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     1de:	77 9b       	sbis	0x0e, 7	; 14
     1e0:	fe cf       	rjmp	.-4      	; 0x1de <send_cmd+0xa4>
	return SPDR;
     1e2:	8f b1       	in	r24, 0x0f	; 15
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
     1e4:	cc 30       	cpi	r28, 0x0C	; 12
     1e6:	b1 f0       	breq	.+44     	; 0x214 <send_cmd+0xda>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
     1e8:	9a e0       	ldi	r25, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     1ea:	2f ef       	ldi	r18, 0xFF	; 255
     1ec:	2f b9       	out	0x0f, r18	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     1ee:	77 9b       	sbis	0x0e, 7	; 14
     1f0:	fe cf       	rjmp	.-4      	; 0x1ee <send_cmd+0xb4>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     1f2:	77 9b       	sbis	0x0e, 7	; 14
     1f4:	fe cf       	rjmp	.-4      	; 0x1f2 <send_cmd+0xb8>
	return SPDR;
     1f6:	8f b1       	in	r24, 0x0f	; 15
	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);
     1f8:	87 ff       	sbrs	r24, 7
     1fa:	b8 cf       	rjmp	.-144    	; 0x16c <send_cmd+0x32>
     1fc:	91 50       	subi	r25, 0x01	; 1
     1fe:	b1 f7       	brne	.-20     	; 0x1ec <send_cmd+0xb2>

	return res;			/* Return with the response value */
}
     200:	cf 91       	pop	r28
     202:	ff 90       	pop	r15
     204:	ef 90       	pop	r14
     206:	df 90       	pop	r13
     208:	cf 90       	pop	r12
     20a:	08 95       	ret
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
     20c:	85 e9       	ldi	r24, 0x95	; 149
     20e:	e4 cf       	rjmp	.-56     	; 0x1d8 <send_cmd+0x9e>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	e2 cf       	rjmp	.-60     	; 0x1d8 <send_cmd+0x9e>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     214:	8f ef       	ldi	r24, 0xFF	; 255
     216:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     218:	77 9b       	sbis	0x0e, 7	; 14
     21a:	fe cf       	rjmp	.-4      	; 0x218 <send_cmd+0xde>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     21c:	77 9b       	sbis	0x0e, 7	; 14
     21e:	fe cf       	rjmp	.-4      	; 0x21c <send_cmd+0xe2>
	return SPDR;
     220:	8f b1       	in	r24, 0x0f	; 15
     222:	e2 cf       	rjmp	.-60     	; 0x1e8 <send_cmd+0xae>
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
     224:	87 e3       	ldi	r24, 0x37	; 55
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	ba 01       	movw	r22, r20
     22c:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
		if (res > 1) // > 1
     230:	82 30       	cpi	r24, 0x02	; 2
     232:	08 f0       	brcs	.+2      	; 0x236 <send_cmd+0xfc>
     234:	9b cf       	rjmp	.-202    	; 0x16c <send_cmd+0x32>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
     236:	cf 77       	andi	r28, 0x7F	; 127
     238:	8a cf       	rjmp	.-236    	; 0x14e <send_cmd+0x14>

0000023a <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
     23a:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
     23c:	84 e1       	ldi	r24, 0x14	; 20
     23e:	80 93 21 01 	sts	0x0121, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     242:	9f ef       	ldi	r25, 0xFF	; 255
     244:	9f b9       	out	0x0f, r25	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     246:	77 9b       	sbis	0x0e, 7	; 14
     248:	fe cf       	rjmp	.-4      	; 0x246 <rcvr_datablock+0xc>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     24a:	77 9b       	sbis	0x0e, 7	; 14
     24c:	fe cf       	rjmp	.-4      	; 0x24a <rcvr_datablock+0x10>
	return SPDR;
     24e:	8f b1       	in	r24, 0x0f	; 15


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
     250:	8f 3f       	cpi	r24, 0xFF	; 255
     252:	39 f4       	brne	.+14     	; 0x262 <rcvr_datablock+0x28>
     254:	80 91 21 01 	lds	r24, 0x0121
     258:	88 23       	and	r24, r24
     25a:	a1 f7       	brne	.-24     	; 0x244 <rcvr_datablock+0xa>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     25c:	80 e0       	ldi	r24, 0x00	; 0
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	08 95       	ret
     262:	8e 3f       	cpi	r24, 0xFE	; 254
     264:	01 f5       	brne	.+64     	; 0x2a6 <rcvr_datablock+0x6c>
	BYTE *p,	/* Data read buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF;
     266:	8f ef       	ldi	r24, 0xFF	; 255
     268:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     26a:	77 9b       	sbis	0x0e, 7	; 14
     26c:	fe cf       	rjmp	.-4      	; 0x26a <rcvr_datablock+0x30>
		*p++ = SPDR;
     26e:	9f b1       	in	r25, 0x0f	; 15
     270:	90 83       	st	Z, r25
		SPDR = 0xFF;
     272:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     274:	77 9b       	sbis	0x0e, 7	; 14
     276:	fe cf       	rjmp	.-4      	; 0x274 <rcvr_datablock+0x3a>
		*p++ = SPDR;
     278:	9f b1       	in	r25, 0x0f	; 15
     27a:	91 83       	std	Z+1, r25	; 0x01
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
int rcvr_datablock (
     27c:	32 96       	adiw	r30, 0x02	; 2
		loop_until_bit_is_set(SPSR, SPIF);
		*p++ = SPDR;
		SPDR = 0xFF;
		loop_until_bit_is_set(SPSR, SPIF);
		*p++ = SPDR;
	} while (cnt -= 2);
     27e:	62 50       	subi	r22, 0x02	; 2
     280:	70 40       	sbci	r23, 0x00	; 0
     282:	91 f7       	brne	.-28     	; 0x268 <rcvr_datablock+0x2e>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     284:	8f ef       	ldi	r24, 0xFF	; 255
     286:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     288:	77 9b       	sbis	0x0e, 7	; 14
     28a:	fe cf       	rjmp	.-4      	; 0x288 <rcvr_datablock+0x4e>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     28c:	77 9b       	sbis	0x0e, 7	; 14
     28e:	fe cf       	rjmp	.-4      	; 0x28c <rcvr_datablock+0x52>
	return SPDR;
     290:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     292:	8f ef       	ldi	r24, 0xFF	; 255
     294:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     296:	77 9b       	sbis	0x0e, 7	; 14
     298:	fe cf       	rjmp	.-4      	; 0x296 <rcvr_datablock+0x5c>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     29a:	77 9b       	sbis	0x0e, 7	; 14
     29c:	fe cf       	rjmp	.-4      	; 0x29a <rcvr_datablock+0x60>
	return SPDR;
     29e:	8f b1       	in	r24, 0x0f	; 15
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	08 95       	ret

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
     2aa:	08 95       	ret

000002ac <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
     2ac:	0f 93       	push	r16
     2ae:	1f 93       	push	r17
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	0f 92       	push	r0
     2b6:	cd b7       	in	r28, 0x3d	; 61
     2b8:	de b7       	in	r29, 0x3e	; 62
     2ba:	8c 01       	movw	r16, r24
	BYTE resp;


	if (!wait_ready(500)) return 0;
     2bc:	84 ef       	ldi	r24, 0xF4	; 244
     2be:	91 e0       	ldi	r25, 0x01	; 1
     2c0:	69 83       	std	Y+1, r22	; 0x01
     2c2:	0e 94 68 00 	call	0xd0	; 0xd0 <wait_ready>
     2c6:	69 81       	ldd	r22, Y+1	; 0x01
     2c8:	00 97       	sbiw	r24, 0x00	; 0
     2ca:	a1 f1       	breq	.+104    	; 0x334 <xmit_datablock+0x88>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     2cc:	6f b9       	out	0x0f, r22	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     2ce:	77 9b       	sbis	0x0e, 7	; 14
     2d0:	fe cf       	rjmp	.-4      	; 0x2ce <xmit_datablock+0x22>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     2d2:	77 9b       	sbis	0x0e, 7	; 14
     2d4:	fe cf       	rjmp	.-4      	; 0x2d2 <xmit_datablock+0x26>
	return SPDR;
     2d6:	8f b1       	in	r24, 0x0f	; 15


	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
     2d8:	6d 3f       	cpi	r22, 0xFD	; 253
     2da:	a1 f1       	breq	.+104    	; 0x344 <xmit_datablock+0x98>
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
     2dc:	c8 01       	movw	r24, r16
     2de:	80 50       	subi	r24, 0x00	; 0
     2e0:	9e 4f       	sbci	r25, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++;
     2e2:	f8 01       	movw	r30, r16
     2e4:	20 81       	ld	r18, Z
     2e6:	2f b9       	out	0x0f, r18	; 15
		loop_until_bit_is_set(SPSR, SPIF);
     2e8:	77 9b       	sbis	0x0e, 7	; 14
     2ea:	fe cf       	rjmp	.-4      	; 0x2e8 <xmit_datablock+0x3c>
		SPDR = *p++;
     2ec:	f8 01       	movw	r30, r16
     2ee:	21 81       	ldd	r18, Z+1	; 0x01
     2f0:	2f b9       	out	0x0f, r18	; 15
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
     2f2:	0e 5f       	subi	r16, 0xFE	; 254
     2f4:	1f 4f       	sbci	r17, 0xFF	; 255
{
	do {
		SPDR = *p++;
		loop_until_bit_is_set(SPSR, SPIF);
		SPDR = *p++;
		loop_until_bit_is_set(SPSR, SPIF);
     2f6:	77 9b       	sbis	0x0e, 7	; 14
     2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <xmit_datablock+0x4a>
	} while (cnt -= 2);
     2fa:	80 17       	cp	r24, r16
     2fc:	91 07       	cpc	r25, r17
     2fe:	89 f7       	brne	.-30     	; 0x2e2 <xmit_datablock+0x36>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     300:	8f ef       	ldi	r24, 0xFF	; 255
     302:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     304:	77 9b       	sbis	0x0e, 7	; 14
     306:	fe cf       	rjmp	.-4      	; 0x304 <xmit_datablock+0x58>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     308:	77 9b       	sbis	0x0e, 7	; 14
     30a:	fe cf       	rjmp	.-4      	; 0x308 <xmit_datablock+0x5c>
	return SPDR;
     30c:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     312:	77 9b       	sbis	0x0e, 7	; 14
     314:	fe cf       	rjmp	.-4      	; 0x312 <xmit_datablock+0x66>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     316:	77 9b       	sbis	0x0e, 7	; 14
     318:	fe cf       	rjmp	.-4      	; 0x316 <xmit_datablock+0x6a>
	return SPDR;
     31a:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     31c:	8f ef       	ldi	r24, 0xFF	; 255
     31e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     320:	77 9b       	sbis	0x0e, 7	; 14
     322:	fe cf       	rjmp	.-4      	; 0x320 <xmit_datablock+0x74>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     324:	77 9b       	sbis	0x0e, 7	; 14
     326:	fe cf       	rjmp	.-4      	; 0x324 <xmit_datablock+0x78>
	return SPDR;
     328:	2f b1       	in	r18, 0x0f	; 15
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
		xchg_spi(0xFF);
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
     32a:	2f 71       	andi	r18, 0x1F	; 31
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	25 30       	cpi	r18, 0x05	; 5
     332:	11 f0       	breq	.+4      	; 0x338 <xmit_datablock+0x8c>
)
{
	BYTE resp;


	if (!wait_ready(500)) return 0;
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	90 e0       	ldi	r25, 0x00	; 0
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
}
     338:	0f 90       	pop	r0
     33a:	df 91       	pop	r29
     33c:	cf 91       	pop	r28
     33e:	1f 91       	pop	r17
     340:	0f 91       	pop	r16
     342:	08 95       	ret
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
     344:	81 e0       	ldi	r24, 0x01	; 1
     346:	90 e0       	ldi	r25, 0x00	; 0
}
     348:	0f 90       	pop	r0
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	08 95       	ret

00000354 <mmc_disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_initialize (void)
{
     354:	ef 92       	push	r14
     356:	ff 92       	push	r15
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	00 d0       	rcall	.+0      	; 0x362 <mmc_disk_initialize+0xe>
     362:	00 d0       	rcall	.+0      	; 0x364 <mmc_disk_initialize+0x10>
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
{
	/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
	// N/a for our design

	/* Configure MOSI/MISO/SCLK/CS pins */
	DDRB |= 0x0F;
     368:	87 b3       	in	r24, 0x17	; 23
     36a:	8f 60       	ori	r24, 0x0F	; 15
     36c:	87 bb       	out	0x17, r24	; 23

	/* Enable SPI module in SPI mode 0 */
	//Enable AVR SPI as Master, SCK as Fosc/64 = 250kHz, SPI mode 0
	SPCR = (1<<SPE | 1<<MSTR | 1<<SPR1);
     36e:	82 e5       	ldi	r24, 0x52	; 82
     370:	8d b9       	out	0x0d, r24	; 13
	//power_off();						/* Turn off the socket power to reset the card */
	//for (Timer1 = 10; Timer1; ) ;		/* Wait for 100ms */
	//if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */

	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
     372:	69 9a       	sbi	0x0d, 1	; 13
     374:	70 98       	cbi	0x0e, 0	; 14
     376:	8a e0       	ldi	r24, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     378:	9f ef       	ldi	r25, 0xFF	; 255
     37a:	9f b9       	out	0x0f, r25	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     37c:	77 9b       	sbis	0x0e, 7	; 14
     37e:	fe cf       	rjmp	.-4      	; 0x37c <mmc_disk_initialize+0x28>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     380:	77 9b       	sbis	0x0e, 7	; 14
     382:	fe cf       	rjmp	.-4      	; 0x380 <mmc_disk_initialize+0x2c>
	return SPDR;
     384:	2f b1       	in	r18, 0x0f	; 15
     386:	81 50       	subi	r24, 0x01	; 1
	//if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */

	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
	
	for (n = 10; n; n--) xchg_spi(0xFF);	 /*80 dummy clocks */
     388:	c1 f7       	brne	.-16     	; 0x37a <mmc_disk_initialize+0x26>
	
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {	/* Put the card SPI mode */
     38a:	40 e0       	ldi	r20, 0x00	; 0
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	ba 01       	movw	r22, r20
     390:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     394:	81 30       	cpi	r24, 0x01	; 1
     396:	41 f1       	breq	.+80     	; 0x3e8 <mmc_disk_initialize+0x94>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
     398:	00 e0       	ldi	r16, 0x00	; 0
		}
	}
	CardType = ty;
     39a:	00 93 22 01 	sts	0x0122, r16
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     39e:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     3a0:	8f ef       	ldi	r24, 0xFF	; 255
     3a2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     3a4:	77 9b       	sbis	0x0e, 7	; 14
     3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <mmc_disk_initialize+0x50>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     3a8:	77 9b       	sbis	0x0e, 7	; 14
     3aa:	fe cf       	rjmp	.-4      	; 0x3a8 <mmc_disk_initialize+0x54>
	return SPDR;
     3ac:	8f b1       	in	r24, 0x0f	; 15
	CardType = ty;
	deselect();

	

	if (ty) {			/* Initialization succeded */
     3ae:	00 23       	and	r16, r16
     3b0:	99 f4       	brne	.+38     	; 0x3d8 <mmc_disk_initialize+0x84>

static
void power_off (void)
{
	/* Disable SPI function */
	SPCR &= ~(1<<SPE | 1<<MSTR | 1<<SPR1);
     3b2:	8d b1       	in	r24, 0x0d	; 13
     3b4:	8d 7a       	andi	r24, 0xAD	; 173
     3b6:	8d b9       	out	0x0d, r24	; 13

	/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
	DDRB &= ~(0x0F);
     3b8:	87 b3       	in	r24, 0x17	; 23
     3ba:	80 7f       	andi	r24, 0xF0	; 240
     3bc:	87 bb       	out	0x17, r24	; 23
		}*/
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
     3be:	80 91 04 01 	lds	r24, 0x0104
}
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	0f 91       	pop	r16
     3d2:	ff 90       	pop	r15
     3d4:	ef 90       	pop	r14
     3d6:	08 95       	ret
	deselect();

	

	if (ty) {			/* Initialization succeded */
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
     3d8:	80 91 04 01 	lds	r24, 0x0104
     3dc:	8e 7f       	andi	r24, 0xFE	; 254
     3de:	80 93 04 01 	sts	0x0104, r24
		FCLK_FAST();
     3e2:	69 98       	cbi	0x0d, 1	; 13
     3e4:	70 9a       	sbi	0x0e, 0	; 14
     3e6:	eb cf       	rjmp	.-42     	; 0x3be <mmc_disk_initialize+0x6a>
	
	for (n = 10; n; n--) xchg_spi(0xFF);	 /*80 dummy clocks */
	
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {	/* Put the card SPI mode */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
     3e8:	84 e6       	ldi	r24, 0x64	; 100
     3ea:	80 93 21 01 	sts	0x0121, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
     3ee:	88 e0       	ldi	r24, 0x08	; 8
     3f0:	4a ea       	ldi	r20, 0xAA	; 170
     3f2:	51 e0       	ldi	r21, 0x01	; 1
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     3fc:	81 30       	cpi	r24, 0x01	; 1
     3fe:	09 f0       	breq	.+2      	; 0x402 <mmc_disk_initialize+0xae>
     400:	48 c0       	rjmp	.+144    	; 0x492 <mmc_disk_initialize+0x13e>
     402:	7e 01       	movw	r14, r28
     404:	08 94       	sec
     406:	e1 1c       	adc	r14, r1
     408:	f1 1c       	adc	r15, r1

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_initialize (void)
     40a:	8e 01       	movw	r16, r28
     40c:	0b 5f       	subi	r16, 0xFB	; 251
     40e:	1f 4f       	sbci	r17, 0xFF	; 255
     410:	f7 01       	movw	r30, r14
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     412:	9f ef       	ldi	r25, 0xFF	; 255
     414:	9f b9       	out	0x0f, r25	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     416:	77 9b       	sbis	0x0e, 7	; 14
     418:	fe cf       	rjmp	.-4      	; 0x416 <mmc_disk_initialize+0xc2>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     41a:	77 9b       	sbis	0x0e, 7	; 14
     41c:	fe cf       	rjmp	.-4      	; 0x41a <mmc_disk_initialize+0xc6>
	return SPDR;
     41e:	8f b1       	in	r24, 0x0f	; 15
	
	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {	/* Put the card SPI mode */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */				
     420:	81 93       	st	Z+, r24
     422:	e0 17       	cp	r30, r16
     424:	f1 07       	cpc	r31, r17
     426:	b1 f7       	brne	.-20     	; 0x414 <mmc_disk_initialize+0xc0>
				
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */					
     428:	8b 81       	ldd	r24, Y+3	; 0x03
     42a:	81 30       	cpi	r24, 0x01	; 1
     42c:	09 f0       	breq	.+2      	; 0x430 <mmc_disk_initialize+0xdc>
     42e:	b4 cf       	rjmp	.-152    	; 0x398 <mmc_disk_initialize+0x44>
     430:	8c 81       	ldd	r24, Y+4	; 0x04
     432:	8a 3a       	cpi	r24, 0xAA	; 170
     434:	09 f0       	breq	.+2      	; 0x438 <mmc_disk_initialize+0xe4>
     436:	b0 cf       	rjmp	.-160    	; 0x398 <mmc_disk_initialize+0x44>

				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
     438:	80 91 21 01 	lds	r24, 0x0121
     43c:	88 23       	and	r24, r24
     43e:	49 f0       	breq	.+18     	; 0x452 <mmc_disk_initialize+0xfe>
     440:	89 ea       	ldi	r24, 0xA9	; 169
     442:	40 e0       	ldi	r20, 0x00	; 0
     444:	50 e0       	ldi	r21, 0x00	; 0
     446:	60 e0       	ldi	r22, 0x00	; 0
     448:	70 e4       	ldi	r23, 0x40	; 64
     44a:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     44e:	88 23       	and	r24, r24
     450:	99 f7       	brne	.-26     	; 0x438 <mmc_disk_initialize+0xe4>
				
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */					
     452:	80 91 21 01 	lds	r24, 0x0121
     456:	88 23       	and	r24, r24
     458:	09 f4       	brne	.+2      	; 0x45c <mmc_disk_initialize+0x108>
     45a:	9e cf       	rjmp	.-196    	; 0x398 <mmc_disk_initialize+0x44>
     45c:	8a e3       	ldi	r24, 0x3A	; 58
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	50 e0       	ldi	r21, 0x00	; 0
     462:	ba 01       	movw	r22, r20
     464:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     468:	88 23       	and	r24, r24
     46a:	09 f0       	breq	.+2      	; 0x46e <mmc_disk_initialize+0x11a>
     46c:	95 cf       	rjmp	.-214    	; 0x398 <mmc_disk_initialize+0x44>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     46e:	8f ef       	ldi	r24, 0xFF	; 255
     470:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     472:	77 9b       	sbis	0x0e, 7	; 14
     474:	fe cf       	rjmp	.-4      	; 0x472 <mmc_disk_initialize+0x11e>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     476:	77 9b       	sbis	0x0e, 7	; 14
     478:	fe cf       	rjmp	.-4      	; 0x476 <mmc_disk_initialize+0x122>
	return SPDR;
     47a:	9f b1       	in	r25, 0x0f	; 15

				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */					
					
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF); /* line doesn't add light???? - nevermind it's good??? */
     47c:	f7 01       	movw	r30, r14
     47e:	91 93       	st	Z+, r25
     480:	7f 01       	movw	r14, r30
     482:	0e 17       	cp	r16, r30
     484:	1f 07       	cpc	r17, r31
     486:	a1 f7       	brne	.-24     	; 0x470 <mmc_disk_initialize+0x11c>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	86 ff       	sbrs	r24, 6
     48c:	2b c0       	rjmp	.+86     	; 0x4e4 <mmc_disk_initialize+0x190>
     48e:	0c e0       	ldi	r16, 0x0C	; 12
     490:	84 cf       	rjmp	.-248    	; 0x39a <mmc_disk_initialize+0x46>
				}
			}
		} else {							/* SDv1 or MMCv3 */			
			if (send_cmd(ACMD41, 0) <= 1) 	{
     492:	89 ea       	ldi	r24, 0xA9	; 169
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	ba 01       	movw	r22, r20
     49a:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     49e:	82 30       	cpi	r24, 0x02	; 2
     4a0:	f0 f0       	brcs	.+60     	; 0x4de <mmc_disk_initialize+0x18a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
     4a2:	01 e0       	ldi	r16, 0x01	; 1
     4a4:	11 e0       	ldi	r17, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
     4a6:	80 91 21 01 	lds	r24, 0x0121
     4aa:	88 23       	and	r24, r24
     4ac:	41 f0       	breq	.+16     	; 0x4be <mmc_disk_initialize+0x16a>
     4ae:	81 2f       	mov	r24, r17
     4b0:	40 e0       	ldi	r20, 0x00	; 0
     4b2:	50 e0       	ldi	r21, 0x00	; 0
     4b4:	ba 01       	movw	r22, r20
     4b6:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     4ba:	88 23       	and	r24, r24
     4bc:	a1 f7       	brne	.-24     	; 0x4a6 <mmc_disk_initialize+0x152>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
     4be:	80 91 21 01 	lds	r24, 0x0121
     4c2:	88 23       	and	r24, r24
     4c4:	09 f4       	brne	.+2      	; 0x4c8 <mmc_disk_initialize+0x174>
     4c6:	68 cf       	rjmp	.-304    	; 0x398 <mmc_disk_initialize+0x44>
     4c8:	80 e1       	ldi	r24, 0x10	; 16
     4ca:	40 e0       	ldi	r20, 0x00	; 0
     4cc:	52 e0       	ldi	r21, 0x02	; 2
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     4d6:	88 23       	and	r24, r24
     4d8:	09 f0       	breq	.+2      	; 0x4dc <mmc_disk_initialize+0x188>
     4da:	5e cf       	rjmp	.-324    	; 0x398 <mmc_disk_initialize+0x44>
     4dc:	5e cf       	rjmp	.-324    	; 0x39a <mmc_disk_initialize+0x46>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */			
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
     4de:	02 e0       	ldi	r16, 0x02	; 2
     4e0:	19 ea       	ldi	r17, 0xA9	; 169
     4e2:	e1 cf       	rjmp	.-62     	; 0x4a6 <mmc_disk_initialize+0x152>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */					
					
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF); /* line doesn't add light???? - nevermind it's good??? */
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
     4e4:	04 e0       	ldi	r16, 0x04	; 4
     4e6:	59 cf       	rjmp	.-334    	; 0x39a <mmc_disk_initialize+0x46>

000004e8 <mmc_disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_status (void)
{
	return Stat;
     4e8:	80 91 04 01 	lds	r24, 0x0104
}
     4ec:	08 95       	ret

000004ee <mmc_disk_read>:
DRESULT mmc_disk_read (
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	ec 01       	movw	r28, r24
     4fa:	89 01       	movw	r16, r18
	BYTE cmd;


	if (!count) {
     4fc:	21 15       	cp	r18, r1
     4fe:	31 05       	cpc	r19, r1
     500:	49 f4       	brne	.+18     	; 0x514 <mmc_disk_read+0x26>
		return RES_PARERR;
     502:	c4 e0       	ldi	r28, 0x04	; 4
     504:	d0 e0       	ldi	r29, 0x00	; 0
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     506:	ce 01       	movw	r24, r28
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	0f 91       	pop	r16
     510:	ff 90       	pop	r15
     512:	08 95       	ret


	if (!count) {
		return RES_PARERR;
	}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     514:	80 91 04 01 	lds	r24, 0x0104
     518:	80 ff       	sbrs	r24, 0
     51a:	09 c0       	rjmp	.+18     	; 0x52e <mmc_disk_read+0x40>
     51c:	c3 e0       	ldi	r28, 0x03	; 3
     51e:	d0 e0       	ldi	r29, 0x00	; 0
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     520:	ce 01       	movw	r24, r28
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	1f 91       	pop	r17
     528:	0f 91       	pop	r16
     52a:	ff 90       	pop	r15
     52c:	08 95       	ret
	if (!count) {
		return RES_PARERR;
	}
	if (Stat & STA_NOINIT) return RES_NOTRDY;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     52e:	80 91 22 01 	lds	r24, 0x0122
     532:	83 fd       	sbrc	r24, 3
     534:	07 c0       	rjmp	.+14     	; 0x544 <mmc_disk_read+0x56>
     536:	f9 e0       	ldi	r31, 0x09	; 9
     538:	44 0f       	add	r20, r20
     53a:	55 1f       	adc	r21, r21
     53c:	66 1f       	adc	r22, r22
     53e:	77 1f       	adc	r23, r23
     540:	fa 95       	dec	r31
     542:	d1 f7       	brne	.-12     	; 0x538 <mmc_disk_read+0x4a>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
     544:	02 30       	cpi	r16, 0x02	; 2
     546:	11 05       	cpc	r17, r1
     548:	80 f1       	brcs	.+96     	; 0x5aa <mmc_disk_read+0xbc>
     54a:	e2 e1       	ldi	r30, 0x12	; 18
     54c:	fe 2e       	mov	r15, r30
	if (send_cmd(cmd, sector) == 0) {
     54e:	8f 2d       	mov	r24, r15
     550:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     554:	88 23       	and	r24, r24
     556:	89 f0       	breq	.+34     	; 0x57a <mmc_disk_read+0x8c>
     558:	c1 e0       	ldi	r28, 0x01	; 1
     55a:	d0 e0       	ldi	r29, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     55c:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     55e:	8f ef       	ldi	r24, 0xFF	; 255
     560:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     562:	77 9b       	sbis	0x0e, 7	; 14
     564:	fe cf       	rjmp	.-4      	; 0x562 <mmc_disk_read+0x74>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     566:	77 9b       	sbis	0x0e, 7	; 14
     568:	fe cf       	rjmp	.-4      	; 0x566 <mmc_disk_read+0x78>
	return SPDR;
     56a:	8f b1       	in	r24, 0x0f	; 15
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     56c:	ce 01       	movw	r24, r28
     56e:	df 91       	pop	r29
     570:	cf 91       	pop	r28
     572:	1f 91       	pop	r17
     574:	0f 91       	pop	r16
     576:	ff 90       	pop	r15
     578:	08 95       	ret
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
     57a:	ce 01       	movw	r24, r28
     57c:	60 e0       	ldi	r22, 0x00	; 0
     57e:	72 e0       	ldi	r23, 0x02	; 2
     580:	0e 94 1d 01 	call	0x23a	; 0x23a <rcvr_datablock>
     584:	00 97       	sbiw	r24, 0x00	; 0
     586:	a1 f0       	breq	.+40     	; 0x5b0 <mmc_disk_read+0xc2>
			buff += 512;
     588:	c0 50       	subi	r28, 0x00	; 0
     58a:	de 4f       	sbci	r29, 0xFE	; 254
		} while (--count);
     58c:	01 50       	subi	r16, 0x01	; 1
     58e:	10 40       	sbci	r17, 0x00	; 0
     590:	a1 f7       	brne	.-24     	; 0x57a <mmc_disk_read+0x8c>
     592:	c0 e0       	ldi	r28, 0x00	; 0
     594:	d0 e0       	ldi	r29, 0x00	; 0
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
     596:	82 e1       	ldi	r24, 0x12	; 18
     598:	f8 16       	cp	r15, r24
     59a:	01 f7       	brne	.-64     	; 0x55c <mmc_disk_read+0x6e>
     59c:	8c e0       	ldi	r24, 0x0C	; 12
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	ba 01       	movw	r22, r20
     5a4:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     5a8:	d9 cf       	rjmp	.-78     	; 0x55c <mmc_disk_read+0x6e>
	}
	if (Stat & STA_NOINIT) return RES_NOTRDY;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
     5aa:	31 e1       	ldi	r19, 0x11	; 17
     5ac:	f3 2e       	mov	r15, r19
     5ae:	cf cf       	rjmp	.-98     	; 0x54e <mmc_disk_read+0x60>
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
     5b0:	c1 e0       	ldi	r28, 0x01	; 1
     5b2:	d0 e0       	ldi	r29, 0x00	; 0
     5b4:	01 15       	cp	r16, r1
     5b6:	11 05       	cpc	r17, r1
     5b8:	71 f7       	brne	.-36     	; 0x596 <mmc_disk_read+0xa8>
     5ba:	eb cf       	rjmp	.-42     	; 0x592 <mmc_disk_read+0xa4>

000005bc <mmc_disk_write>:
DRESULT mmc_disk_write (
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
     5bc:	cf 92       	push	r12
     5be:	df 92       	push	r13
     5c0:	ef 92       	push	r14
     5c2:	ff 92       	push	r15
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	00 d0       	rcall	.+0      	; 0x5ce <mmc_disk_write+0x12>
     5ce:	cd b7       	in	r28, 0x3d	; 61
     5d0:	de b7       	in	r29, 0x3e	; 62
     5d2:	8c 01       	movw	r16, r24
     5d4:	6a 01       	movw	r12, r20
     5d6:	7b 01       	movw	r14, r22
	if (!count) return RES_PARERR;
     5d8:	21 15       	cp	r18, r1
     5da:	31 05       	cpc	r19, r1
     5dc:	69 f4       	brne	.+26     	; 0x5f8 <mmc_disk_write+0x3c>
     5de:	84 e0       	ldi	r24, 0x04	; 4
     5e0:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	1f 91       	pop	r17
     5ec:	0f 91       	pop	r16
     5ee:	ff 90       	pop	r15
     5f0:	ef 90       	pop	r14
     5f2:	df 90       	pop	r13
     5f4:	cf 90       	pop	r12
     5f6:	08 95       	ret
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (!count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;
     5f8:	80 91 04 01 	lds	r24, 0x0104
     5fc:	80 ff       	sbrs	r24, 0
     5fe:	03 c0       	rjmp	.+6      	; 0x606 <mmc_disk_write+0x4a>
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	ee cf       	rjmp	.-36     	; 0x5e2 <mmc_disk_write+0x26>
	if (Stat & STA_PROTECT) return RES_WRPRT;
     606:	80 91 04 01 	lds	r24, 0x0104
     60a:	82 ff       	sbrs	r24, 2
     60c:	03 c0       	rjmp	.+6      	; 0x614 <mmc_disk_write+0x58>
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	e7 cf       	rjmp	.-50     	; 0x5e2 <mmc_disk_write+0x26>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
     614:	80 91 22 01 	lds	r24, 0x0122
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	83 fd       	sbrc	r24, 3
     61c:	07 c0       	rjmp	.+14     	; 0x62c <mmc_disk_write+0x70>
     61e:	a9 e0       	ldi	r26, 0x09	; 9
     620:	cc 0c       	add	r12, r12
     622:	dd 1c       	adc	r13, r13
     624:	ee 1c       	adc	r14, r14
     626:	ff 1c       	adc	r15, r15
     628:	aa 95       	dec	r26
     62a:	d1 f7       	brne	.-12     	; 0x620 <mmc_disk_write+0x64>

	if (count == 1) {	/* Single block write */
     62c:	21 30       	cpi	r18, 0x01	; 1
     62e:	31 05       	cpc	r19, r1
     630:	09 f4       	brne	.+2      	; 0x634 <mmc_disk_write+0x78>
     632:	47 c0       	rjmp	.+142    	; 0x6c2 <mmc_disk_write+0x106>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     634:	86 70       	andi	r24, 0x06	; 6
     636:	90 70       	andi	r25, 0x00	; 0
     638:	00 97       	sbiw	r24, 0x00	; 0
     63a:	c1 f5       	brne	.+112    	; 0x6ac <mmc_disk_write+0xf0>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
     63c:	89 e1       	ldi	r24, 0x19	; 25
     63e:	b7 01       	movw	r22, r14
     640:	a6 01       	movw	r20, r12
     642:	29 83       	std	Y+1, r18	; 0x01
     644:	3a 83       	std	Y+2, r19	; 0x02
     646:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     64a:	29 81       	ldd	r18, Y+1	; 0x01
     64c:	3a 81       	ldd	r19, Y+2	; 0x02
     64e:	88 23       	and	r24, r24
     650:	59 f0       	breq	.+22     	; 0x668 <mmc_disk_write+0xac>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     656:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     658:	2f ef       	ldi	r18, 0xFF	; 255
     65a:	2f b9       	out	0x0f, r18	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     65c:	77 9b       	sbis	0x0e, 7	; 14
     65e:	fe cf       	rjmp	.-4      	; 0x65c <mmc_disk_write+0xa0>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     660:	77 9b       	sbis	0x0e, 7	; 14
     662:	fe cf       	rjmp	.-4      	; 0x660 <mmc_disk_write+0xa4>
	return SPDR;
     664:	2f b1       	in	r18, 0x0f	; 15
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
     666:	bd cf       	rjmp	.-134    	; 0x5e2 <mmc_disk_write+0x26>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
     668:	c8 01       	movw	r24, r16
     66a:	6c ef       	ldi	r22, 0xFC	; 252
     66c:	29 83       	std	Y+1, r18	; 0x01
     66e:	3a 83       	std	Y+2, r19	; 0x02
     670:	0e 94 56 01 	call	0x2ac	; 0x2ac <xmit_datablock>
     674:	29 81       	ldd	r18, Y+1	; 0x01
     676:	3a 81       	ldd	r19, Y+2	; 0x02
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	29 f0       	breq	.+10     	; 0x686 <mmc_disk_write+0xca>
				buff += 512;
     67c:	00 50       	subi	r16, 0x00	; 0
     67e:	1e 4f       	sbci	r17, 0xFE	; 254
			} while (--count);
     680:	21 50       	subi	r18, 0x01	; 1
     682:	30 40       	sbci	r19, 0x00	; 0
     684:	89 f7       	brne	.-30     	; 0x668 <mmc_disk_write+0xac>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	6d ef       	ldi	r22, 0xFD	; 253
     68c:	29 83       	std	Y+1, r18	; 0x01
     68e:	3a 83       	std	Y+2, r19	; 0x02
     690:	0e 94 56 01 	call	0x2ac	; 0x2ac <xmit_datablock>
     694:	29 81       	ldd	r18, Y+1	; 0x01
     696:	3a 81       	ldd	r19, Y+2	; 0x02
     698:	00 97       	sbiw	r24, 0x00	; 0
     69a:	d9 f2       	breq	.-74     	; 0x652 <mmc_disk_write+0x96>
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	21 15       	cp	r18, r1
     6a2:	31 05       	cpc	r19, r1
     6a4:	c1 f6       	brne	.-80     	; 0x656 <mmc_disk_write+0x9a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	d5 cf       	rjmp	.-86     	; 0x656 <mmc_disk_write+0x9a>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
     6ac:	a9 01       	movw	r20, r18
     6ae:	60 e0       	ldi	r22, 0x00	; 0
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	87 e9       	ldi	r24, 0x97	; 151
     6b4:	29 83       	std	Y+1, r18	; 0x01
     6b6:	3a 83       	std	Y+2, r19	; 0x02
     6b8:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     6bc:	3a 81       	ldd	r19, Y+2	; 0x02
     6be:	29 81       	ldd	r18, Y+1	; 0x01
     6c0:	bd cf       	rjmp	.-134    	; 0x63c <mmc_disk_write+0x80>
	if (Stat & STA_PROTECT) return RES_WRPRT;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
     6c2:	88 e1       	ldi	r24, 0x18	; 24
     6c4:	b7 01       	movw	r22, r14
     6c6:	a6 01       	movw	r20, r12
     6c8:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     6cc:	88 23       	and	r24, r24
     6ce:	09 f0       	breq	.+2      	; 0x6d2 <mmc_disk_write+0x116>
     6d0:	c0 cf       	rjmp	.-128    	; 0x652 <mmc_disk_write+0x96>
			&& xmit_datablock(buff, 0xFE))
     6d2:	c8 01       	movw	r24, r16
     6d4:	6e ef       	ldi	r22, 0xFE	; 254
     6d6:	0e 94 56 01 	call	0x2ac	; 0x2ac <xmit_datablock>
     6da:	00 97       	sbiw	r24, 0x00	; 0
     6dc:	21 f7       	brne	.-56     	; 0x6a6 <mmc_disk_write+0xea>
     6de:	b9 cf       	rjmp	.-142    	; 0x652 <mmc_disk_write+0x96>

000006e0 <mmc_disk_ioctl>:
#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
     6e0:	cf 92       	push	r12
     6e2:	df 92       	push	r13
     6e4:	ef 92       	push	r14
     6e6:	ff 92       	push	r15
     6e8:	0f 93       	push	r16
     6ea:	1f 93       	push	r17
     6ec:	cf 93       	push	r28
     6ee:	df 93       	push	r29
     6f0:	cd b7       	in	r28, 0x3d	; 61
     6f2:	de b7       	in	r29, 0x3e	; 62
     6f4:	60 97       	sbiw	r28, 0x10	; 16
     6f6:	0f b6       	in	r0, 0x3f	; 63
     6f8:	f8 94       	cli
     6fa:	de bf       	out	0x3e, r29	; 62
     6fc:	0f be       	out	0x3f, r0	; 63
     6fe:	cd bf       	out	0x3d, r28	; 61
     700:	6b 01       	movw	r12, r22
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
     702:	90 91 04 01 	lds	r25, 0x0104
     706:	90 ff       	sbrs	r25, 0
     708:	12 c0       	rjmp	.+36     	; 0x72e <mmc_disk_ioctl+0x4e>
     70a:	23 e0       	ldi	r18, 0x03	; 3
     70c:	30 e0       	ldi	r19, 0x00	; 0
#endif
	default:
		res = RES_PARERR;
	}
	return res;
}
     70e:	c9 01       	movw	r24, r18
     710:	60 96       	adiw	r28, 0x10	; 16
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	df 90       	pop	r13
     72a:	cf 90       	pop	r12
     72c:	08 95       	ret
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
     72e:	83 33       	cpi	r24, 0x33	; 51
     730:	09 f4       	brne	.+2      	; 0x734 <mmc_disk_ioctl+0x54>
     732:	57 c1       	rjmp	.+686    	; 0x9e2 <mmc_disk_ioctl+0x302>
     734:	84 33       	cpi	r24, 0x34	; 52
     736:	08 f4       	brcc	.+2      	; 0x73a <mmc_disk_ioctl+0x5a>
     738:	74 c0       	rjmp	.+232    	; 0x822 <mmc_disk_ioctl+0x142>
     73a:	86 33       	cpi	r24, 0x36	; 54
     73c:	09 f4       	brne	.+2      	; 0x740 <mmc_disk_ioctl+0x60>
     73e:	f7 c1       	rjmp	.+1006   	; 0xb2e <mmc_disk_ioctl+0x44e>
     740:	87 33       	cpi	r24, 0x37	; 55
     742:	08 f4       	brcc	.+2      	; 0x746 <mmc_disk_ioctl+0x66>
     744:	8c c0       	rjmp	.+280    	; 0x85e <mmc_disk_ioctl+0x17e>
     746:	88 33       	cpi	r24, 0x38	; 56
     748:	09 f4       	brne	.+2      	; 0x74c <mmc_disk_ioctl+0x6c>
     74a:	75 c1       	rjmp	.+746    	; 0xa36 <mmc_disk_ioctl+0x356>
     74c:	88 33       	cpi	r24, 0x38	; 56
     74e:	08 f4       	brcc	.+2      	; 0x752 <mmc_disk_ioctl+0x72>
     750:	b5 c0       	rjmp	.+362    	; 0x8bc <mmc_disk_ioctl+0x1dc>
     752:	89 33       	cpi	r24, 0x39	; 57
     754:	09 f0       	breq	.+2      	; 0x758 <mmc_disk_ioctl+0x78>
     756:	89 c0       	rjmp	.+274    	; 0x86a <mmc_disk_ioctl+0x18a>
		deselect();
		break;

	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
     758:	db 01       	movw	r26, r22
     75a:	13 96       	adiw	r26, 0x03	; 3
     75c:	4d 91       	ld	r20, X+
     75e:	5d 91       	ld	r21, X+
     760:	6d 91       	ld	r22, X+
     762:	7c 91       	ld	r23, X
     764:	16 97       	sbiw	r26, 0x06	; 6
     766:	19 e0       	ldi	r17, 0x09	; 9
     768:	44 0f       	add	r20, r20
     76a:	55 1f       	adc	r21, r21
     76c:	66 1f       	adc	r22, r22
     76e:	77 1f       	adc	r23, r23
     770:	1a 95       	dec	r17
     772:	d1 f7       	brne	.-12     	; 0x768 <mmc_disk_ioctl+0x88>
     774:	74 68       	ori	r23, 0x84	; 132
     776:	8c 91       	ld	r24, X
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	0c e1       	ldi	r16, 0x1C	; 28
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	aa 1f       	adc	r26, r26
     786:	bb 1f       	adc	r27, r27
     788:	0a 95       	dec	r16
     78a:	d1 f7       	brne	.-12     	; 0x780 <mmc_disk_ioctl+0xa0>
     78c:	48 2b       	or	r20, r24
     78e:	59 2b       	or	r21, r25
     790:	6a 2b       	or	r22, r26
     792:	7b 2b       	or	r23, r27
     794:	f6 01       	movw	r30, r12
     796:	82 81       	ldd	r24, Z+2	; 0x02
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	a0 e0       	ldi	r26, 0x00	; 0
     79c:	b0 e0       	ldi	r27, 0x00	; 0
     79e:	48 2b       	or	r20, r24
     7a0:	59 2b       	or	r21, r25
     7a2:	6a 2b       	or	r22, r26
     7a4:	7b 2b       	or	r23, r27
     7a6:	81 e3       	ldi	r24, 0x31	; 49
     7a8:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     7ac:	88 23       	and	r24, r24
     7ae:	71 f5       	brne	.+92     	; 0x80c <mmc_disk_ioctl+0x12c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     7b4:	77 9b       	sbis	0x0e, 7	; 14
     7b6:	fe cf       	rjmp	.-4      	; 0x7b4 <mmc_disk_ioctl+0xd4>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     7b8:	77 9b       	sbis	0x0e, 7	; 14
     7ba:	fe cf       	rjmp	.-4      	; 0x7b8 <mmc_disk_ioctl+0xd8>
	return SPDR;
     7bc:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     7be:	8e ef       	ldi	r24, 0xFE	; 254
     7c0:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     7c2:	77 9b       	sbis	0x0e, 7	; 14
     7c4:	fe cf       	rjmp	.-4      	; 0x7c2 <mmc_disk_ioctl+0xe2>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     7c6:	77 9b       	sbis	0x0e, 7	; 14
     7c8:	fe cf       	rjmp	.-4      	; 0x7c6 <mmc_disk_ioctl+0xe6>
	return SPDR;
     7ca:	8f b1       	in	r24, 0x0f	; 15

	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
     7cc:	d6 01       	movw	r26, r12
     7ce:	11 96       	adiw	r26, 0x01	; 1
     7d0:	8c 91       	ld	r24, X
     7d2:	11 97       	sbiw	r26, 0x01	; 1
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     7d4:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     7d6:	77 9b       	sbis	0x0e, 7	; 14
     7d8:	fe cf       	rjmp	.-4      	; 0x7d6 <mmc_disk_ioctl+0xf6>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     7da:	77 9b       	sbis	0x0e, 7	; 14
     7dc:	fe cf       	rjmp	.-4      	; 0x7da <mmc_disk_ioctl+0xfa>
	return SPDR;
     7de:	8f b1       	in	r24, 0x0f	; 15
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	92 e0       	ldi	r25, 0x02	; 2
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     7e4:	2f ef       	ldi	r18, 0xFF	; 255
     7e6:	2f b9       	out	0x0f, r18	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     7e8:	77 9b       	sbis	0x0e, 7	; 14
     7ea:	fe cf       	rjmp	.-4      	; 0x7e8 <mmc_disk_ioctl+0x108>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     7ec:	77 9b       	sbis	0x0e, 7	; 14
     7ee:	fe cf       	rjmp	.-4      	; 0x7ec <mmc_disk_ioctl+0x10c>
	return SPDR;
     7f0:	3f b1       	in	r19, 0x0f	; 15
     7f2:	01 97       	sbiw	r24, 0x01	; 1
	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
     7f4:	c1 f7       	brne	.-16     	; 0x7e6 <mmc_disk_ioctl+0x106>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     7f6:	8f ef       	ldi	r24, 0xFF	; 255
     7f8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     7fa:	77 9b       	sbis	0x0e, 7	; 14
     7fc:	fe cf       	rjmp	.-4      	; 0x7fa <mmc_disk_ioctl+0x11a>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     7fe:	77 9b       	sbis	0x0e, 7	; 14
     800:	fe cf       	rjmp	.-4      	; 0x7fe <mmc_disk_ioctl+0x11e>
	return SPDR;
     802:	8f b1       	in	r24, 0x0f	; 15
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
     804:	8f 71       	andi	r24, 0x1F	; 31
     806:	85 30       	cpi	r24, 0x05	; 5
     808:	09 f4       	brne	.+2      	; 0x80c <mmc_disk_ioctl+0x12c>
     80a:	db c2       	rjmp	.+1462   	; 0xdc2 <mmc_disk_ioctl+0x6e2>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     80c:	21 e0       	ldi	r18, 0x01	; 1
     80e:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     810:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     812:	8f ef       	ldi	r24, 0xFF	; 255
     814:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     816:	77 9b       	sbis	0x0e, 7	; 14
     818:	fe cf       	rjmp	.-4      	; 0x816 <mmc_disk_ioctl+0x136>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     81a:	77 9b       	sbis	0x0e, 7	; 14
     81c:	fe cf       	rjmp	.-4      	; 0x81a <mmc_disk_ioctl+0x13a>
	return SPDR;
     81e:	8f b1       	in	r24, 0x0f	; 15
     820:	76 cf       	rjmp	.-276    	; 0x70e <mmc_disk_ioctl+0x2e>
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
     822:	83 30       	cpi	r24, 0x03	; 3
     824:	09 f4       	brne	.+2      	; 0x828 <mmc_disk_ioctl+0x148>
     826:	97 c0       	rjmp	.+302    	; 0x956 <mmc_disk_ioctl+0x276>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	10 f5       	brcc	.+68     	; 0x870 <mmc_disk_ioctl+0x190>
     82c:	88 23       	and	r24, r24
     82e:	a1 f1       	breq	.+104    	; 0x898 <mmc_disk_ioctl+0x1b8>
     830:	81 30       	cpi	r24, 0x01	; 1
     832:	d9 f4       	brne	.+54     	; 0x86a <mmc_disk_ioctl+0x18a>
		if (select()) res = RES_OK;
		deselect();
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     834:	89 e0       	ldi	r24, 0x09	; 9
     836:	40 e0       	ldi	r20, 0x00	; 0
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	ba 01       	movw	r22, r20
     83c:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     840:	88 23       	and	r24, r24
     842:	09 f4       	brne	.+2      	; 0x846 <mmc_disk_ioctl+0x166>
     844:	6a c2       	rjmp	.+1236   	; 0xd1a <mmc_disk_ioctl+0x63a>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     846:	21 e0       	ldi	r18, 0x01	; 1
     848:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     84a:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     84c:	8f ef       	ldi	r24, 0xFF	; 255
     84e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     850:	77 9b       	sbis	0x0e, 7	; 14
     852:	fe cf       	rjmp	.-4      	; 0x850 <mmc_disk_ioctl+0x170>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     854:	77 99       	sbic	0x0e, 7	; 14
     856:	e3 cf       	rjmp	.-58     	; 0x81e <mmc_disk_ioctl+0x13e>
     858:	77 9b       	sbis	0x0e, 7	; 14
     85a:	fc cf       	rjmp	.-8      	; 0x854 <mmc_disk_ioctl+0x174>
     85c:	e0 cf       	rjmp	.-64     	; 0x81e <mmc_disk_ioctl+0x13e>
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
     85e:	84 33       	cpi	r24, 0x34	; 52
     860:	09 f4       	brne	.+2      	; 0x864 <mmc_disk_ioctl+0x184>
     862:	ac c1       	rjmp	.+856    	; 0xbbc <mmc_disk_ioctl+0x4dc>
     864:	85 33       	cpi	r24, 0x35	; 53
     866:	09 f4       	brne	.+2      	; 0x86a <mmc_disk_ioctl+0x18a>
     868:	86 c1       	rjmp	.+780    	; 0xb76 <mmc_disk_ioctl+0x496>
		}
		deselect();
		break;
#endif
	default:
		res = RES_PARERR;
     86a:	24 e0       	ldi	r18, 0x04	; 4
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	4f cf       	rjmp	.-354    	; 0x70e <mmc_disk_ioctl+0x2e>
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
     870:	87 30       	cpi	r24, 0x07	; 7
     872:	09 f4       	brne	.+2      	; 0x876 <mmc_disk_ioctl+0x196>
     874:	d2 c0       	rjmp	.+420    	; 0xa1a <mmc_disk_ioctl+0x33a>
     876:	82 33       	cpi	r24, 0x32	; 50
     878:	09 f4       	brne	.+2      	; 0x87c <mmc_disk_ioctl+0x19c>
     87a:	c8 c0       	rjmp	.+400    	; 0xa0c <mmc_disk_ioctl+0x32c>
     87c:	84 30       	cpi	r24, 0x04	; 4
     87e:	a9 f7       	brne	.-22     	; 0x86a <mmc_disk_ioctl+0x18a>
		}
		deselect();
		break;

	case CTRL_TRIM:		/* Erase a block of sectors (used when _USE_TRIM in ffconf.h is 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
     880:	00 91 22 01 	lds	r16, 0x0122
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	c8 01       	movw	r24, r16
     888:	86 70       	andi	r24, 0x06	; 6
     88a:	90 70       	andi	r25, 0x00	; 0
     88c:	00 97       	sbiw	r24, 0x00	; 0
     88e:	09 f0       	breq	.+2      	; 0x892 <mmc_disk_ioctl+0x1b2>
     890:	f5 c1       	rjmp	.+1002   	; 0xc7c <mmc_disk_ioctl+0x59c>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     892:	21 e0       	ldi	r18, 0x01	; 1
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	3b cf       	rjmp	.-394    	; 0x70e <mmc_disk_ioctl+0x2e>
	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
     898:	0e 94 81 00 	call	0x102	; 0x102 <select>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     89c:	21 e0       	ldi	r18, 0x01	; 1
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	00 97       	sbiw	r24, 0x00	; 0
     8a2:	11 f0       	breq	.+4      	; 0x8a8 <mmc_disk_ioctl+0x1c8>
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     8a8:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     8aa:	8f ef       	ldi	r24, 0xFF	; 255
     8ac:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     8ae:	77 9b       	sbis	0x0e, 7	; 14
     8b0:	fe cf       	rjmp	.-4      	; 0x8ae <mmc_disk_ioctl+0x1ce>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     8b2:	77 99       	sbic	0x0e, 7	; 14
     8b4:	b4 cf       	rjmp	.-152    	; 0x81e <mmc_disk_ioctl+0x13e>
     8b6:	77 9b       	sbis	0x0e, 7	; 14
     8b8:	fc cf       	rjmp	.-8      	; 0x8b2 <mmc_disk_ioctl+0x1d2>
     8ba:	b1 cf       	rjmp	.-158    	; 0x81e <mmc_disk_ioctl+0x13e>
		res = RES_OK;
		break;
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
     8bc:	db 01       	movw	r26, r22
     8be:	13 96       	adiw	r26, 0x03	; 3
     8c0:	4d 91       	ld	r20, X+
     8c2:	5d 91       	ld	r21, X+
     8c4:	6d 91       	ld	r22, X+
     8c6:	7c 91       	ld	r23, X
     8c8:	16 97       	sbiw	r26, 0x06	; 6
     8ca:	39 e0       	ldi	r19, 0x09	; 9
     8cc:	44 0f       	add	r20, r20
     8ce:	55 1f       	adc	r21, r21
     8d0:	66 1f       	adc	r22, r22
     8d2:	77 1f       	adc	r23, r23
     8d4:	3a 95       	dec	r19
     8d6:	d1 f7       	brne	.-12     	; 0x8cc <mmc_disk_ioctl+0x1ec>
     8d8:	70 68       	ori	r23, 0x80	; 128
     8da:	8c 91       	ld	r24, X
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	a0 e0       	ldi	r26, 0x00	; 0
     8e0:	b0 e0       	ldi	r27, 0x00	; 0
     8e2:	ec e1       	ldi	r30, 0x1C	; 28
     8e4:	88 0f       	add	r24, r24
     8e6:	99 1f       	adc	r25, r25
     8e8:	aa 1f       	adc	r26, r26
     8ea:	bb 1f       	adc	r27, r27
     8ec:	ea 95       	dec	r30
     8ee:	d1 f7       	brne	.-12     	; 0x8e4 <mmc_disk_ioctl+0x204>
     8f0:	48 2b       	or	r20, r24
     8f2:	59 2b       	or	r21, r25
     8f4:	6a 2b       	or	r22, r26
     8f6:	7b 2b       	or	r23, r27
     8f8:	f6 01       	movw	r30, r12
     8fa:	81 81       	ldd	r24, Z+1	; 0x01
     8fc:	92 81       	ldd	r25, Z+2	; 0x02
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e0       	ldi	r27, 0x00	; 0
     904:	91 70       	andi	r25, 0x01	; 1
     906:	a0 70       	andi	r26, 0x00	; 0
     908:	b0 70       	andi	r27, 0x00	; 0
     90a:	48 2b       	or	r20, r24
     90c:	59 2b       	or	r21, r25
     90e:	6a 2b       	or	r22, r26
     910:	7b 2b       	or	r23, r27
     912:	80 e3       	ldi	r24, 0x30	; 48
     914:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     918:	88 23       	and	r24, r24
     91a:	89 f4       	brne	.+34     	; 0x93e <mmc_disk_ioctl+0x25e>
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
     91c:	84 e6       	ldi	r24, 0x64	; 100
     91e:	80 93 21 01 	sts	0x0121, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	9f b9       	out	0x0f, r25	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     926:	77 9b       	sbis	0x0e, 7	; 14
     928:	fe cf       	rjmp	.-4      	; 0x926 <mmc_disk_ioctl+0x246>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     92a:	77 9b       	sbis	0x0e, 7	; 14
     92c:	fe cf       	rjmp	.-4      	; 0x92a <mmc_disk_ioctl+0x24a>
	return SPDR;
     92e:	8f b1       	in	r24, 0x0f	; 15
		break;
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
     930:	8f 3f       	cpi	r24, 0xFF	; 255
     932:	09 f0       	breq	.+2      	; 0x936 <mmc_disk_ioctl+0x256>
     934:	49 c2       	rjmp	.+1170   	; 0xdc8 <mmc_disk_ioctl+0x6e8>
     936:	80 91 21 01 	lds	r24, 0x0121
     93a:	88 23       	and	r24, r24
     93c:	99 f7       	brne	.-26     	; 0x924 <mmc_disk_ioctl+0x244>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     93e:	21 e0       	ldi	r18, 0x01	; 1
     940:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     942:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     948:	77 9b       	sbis	0x0e, 7	; 14
     94a:	fe cf       	rjmp	.-4      	; 0x948 <mmc_disk_ioctl+0x268>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     94c:	77 99       	sbic	0x0e, 7	; 14
     94e:	67 cf       	rjmp	.-306    	; 0x81e <mmc_disk_ioctl+0x13e>
     950:	77 9b       	sbis	0x0e, 7	; 14
     952:	fc cf       	rjmp	.-8      	; 0x94c <mmc_disk_ioctl+0x26c>
     954:	64 cf       	rjmp	.-312    	; 0x81e <mmc_disk_ioctl+0x13e>
		}
		deselect();
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
     956:	00 91 22 01 	lds	r16, 0x0122
     95a:	02 ff       	sbrs	r16, 2
     95c:	4a c1       	rjmp	.+660    	; 0xbf2 <mmc_disk_ioctl+0x512>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
     95e:	8d e8       	ldi	r24, 0x8D	; 141
     960:	40 e0       	ldi	r20, 0x00	; 0
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	ba 01       	movw	r22, r20
     966:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     96a:	88 23       	and	r24, r24
     96c:	09 f0       	breq	.+2      	; 0x970 <mmc_disk_ioctl+0x290>
     96e:	3b c1       	rjmp	.+630    	; 0xbe6 <mmc_disk_ioctl+0x506>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     970:	8f ef       	ldi	r24, 0xFF	; 255
     972:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     974:	77 9b       	sbis	0x0e, 7	; 14
     976:	fe cf       	rjmp	.-4      	; 0x974 <mmc_disk_ioctl+0x294>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     978:	77 9b       	sbis	0x0e, 7	; 14
     97a:	fe cf       	rjmp	.-4      	; 0x978 <mmc_disk_ioctl+0x298>
	return SPDR;
     97c:	8f b1       	in	r24, 0x0f	; 15

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
				xchg_spi(0xFF);
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
     97e:	ce 01       	movw	r24, r28
     980:	01 96       	adiw	r24, 0x01	; 1
     982:	60 e1       	ldi	r22, 0x10	; 16
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	0e 94 1d 01 	call	0x23a	; 0x23a <rcvr_datablock>
     98a:	00 97       	sbiw	r24, 0x00	; 0
     98c:	09 f4       	brne	.+2      	; 0x990 <mmc_disk_ioctl+0x2b0>
     98e:	2b c1       	rjmp	.+598    	; 0xbe6 <mmc_disk_ioctl+0x506>
     990:	80 e3       	ldi	r24, 0x30	; 48
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     992:	9f ef       	ldi	r25, 0xFF	; 255
     994:	9f b9       	out	0x0f, r25	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     996:	77 9b       	sbis	0x0e, 7	; 14
     998:	fe cf       	rjmp	.-4      	; 0x996 <mmc_disk_ioctl+0x2b6>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     99a:	77 9b       	sbis	0x0e, 7	; 14
     99c:	fe cf       	rjmp	.-4      	; 0x99a <mmc_disk_ioctl+0x2ba>
	return SPDR;
     99e:	2f b1       	in	r18, 0x0f	; 15
     9a0:	81 50       	subi	r24, 0x01	; 1
	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
				xchg_spi(0xFF);
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
     9a2:	c1 f7       	brne	.-16     	; 0x994 <mmc_disk_ioctl+0x2b4>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
     9a4:	2b 85       	ldd	r18, Y+11	; 0x0b
     9a6:	22 95       	swap	r18
     9a8:	2f 70       	andi	r18, 0x0F	; 15
     9aa:	80 e1       	ldi	r24, 0x10	; 16
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <mmc_disk_ioctl+0x2dc>
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	aa 1f       	adc	r26, r26
     9ba:	bb 1f       	adc	r27, r27
     9bc:	2a 95       	dec	r18
     9be:	d2 f7       	brpl	.-12     	; 0x9b4 <mmc_disk_ioctl+0x2d4>
     9c0:	f6 01       	movw	r30, r12
     9c2:	80 83       	st	Z, r24
     9c4:	91 83       	std	Z+1, r25	; 0x01
     9c6:	a2 83       	std	Z+2, r26	; 0x02
     9c8:	b3 83       	std	Z+3, r27	; 0x03
					res = RES_OK;
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     9ce:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     9d0:	8f ef       	ldi	r24, 0xFF	; 255
     9d2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     9d4:	77 9b       	sbis	0x0e, 7	; 14
     9d6:	fe cf       	rjmp	.-4      	; 0x9d4 <mmc_disk_ioctl+0x2f4>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     9d8:	77 99       	sbic	0x0e, 7	; 14
     9da:	21 cf       	rjmp	.-446    	; 0x81e <mmc_disk_ioctl+0x13e>
     9dc:	77 9b       	sbis	0x0e, 7	; 14
     9de:	fc cf       	rjmp	.-8      	; 0x9d8 <mmc_disk_ioctl+0x2f8>
     9e0:	1e cf       	rjmp	.-452    	; 0x81e <mmc_disk_ioctl+0x13e>
		*ptr = CardType;
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))		/* READ_CSD */
     9e2:	89 e0       	ldi	r24, 0x09	; 9
     9e4:	40 e0       	ldi	r20, 0x00	; 0
     9e6:	50 e0       	ldi	r21, 0x00	; 0
     9e8:	ba 01       	movw	r22, r20
     9ea:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     9ee:	88 23       	and	r24, r24
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <mmc_disk_ioctl+0x314>
     9f2:	39 c1       	rjmp	.+626    	; 0xc66 <mmc_disk_ioctl+0x586>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     9f4:	21 e0       	ldi	r18, 0x01	; 1
     9f6:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     9f8:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     9fe:	77 9b       	sbis	0x0e, 7	; 14
     a00:	fe cf       	rjmp	.-4      	; 0x9fe <mmc_disk_ioctl+0x31e>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     a02:	77 99       	sbic	0x0e, 7	; 14
     a04:	0c cf       	rjmp	.-488    	; 0x81e <mmc_disk_ioctl+0x13e>
     a06:	77 9b       	sbis	0x0e, 7	; 14
     a08:	fc cf       	rjmp	.-8      	; 0xa02 <mmc_disk_ioctl+0x322>
     a0a:	09 cf       	rjmp	.-494    	; 0x81e <mmc_disk_ioctl+0x13e>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
     a0c:	80 91 22 01 	lds	r24, 0x0122
     a10:	fb 01       	movw	r30, r22
     a12:	80 83       	st	Z, r24
		res = RES_OK;
     a14:	20 e0       	ldi	r18, 0x00	; 0
     a16:	30 e0       	ldi	r19, 0x00	; 0
		break;
     a18:	7a ce       	rjmp	.-780    	; 0x70e <mmc_disk_ioctl+0x2e>

static
void power_off (void)
{
	/* Disable SPI function */
	SPCR &= ~(1<<SPE | 1<<MSTR | 1<<SPR1);
     a1a:	8d b1       	in	r24, 0x0d	; 13
     a1c:	8d 7a       	andi	r24, 0xAD	; 173
     a1e:	8d b9       	out	0x0d, r24	; 13

	/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
	DDRB &= ~(0x0F);
     a20:	87 b3       	in	r24, 0x17	; 23
     a22:	80 7f       	andi	r24, 0xF0	; 240
     a24:	87 bb       	out	0x17, r24	; 23
		deselect();
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
     a26:	80 91 04 01 	lds	r24, 0x0104
     a2a:	81 60       	ori	r24, 0x01	; 1
     a2c:	80 93 04 01 	sts	0x0104, r24
		res = RES_OK;
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	30 e0       	ldi	r19, 0x00	; 0
		break;
     a34:	6c ce       	rjmp	.-808    	; 0x70e <mmc_disk_ioctl+0x2e>
		deselect();
		break;

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
     a36:	db 01       	movw	r26, r22
     a38:	13 96       	adiw	r26, 0x03	; 3
     a3a:	4d 91       	ld	r20, X+
     a3c:	5d 91       	ld	r21, X+
     a3e:	6d 91       	ld	r22, X+
     a40:	7c 91       	ld	r23, X
     a42:	16 97       	sbiw	r26, 0x06	; 6
     a44:	89 e0       	ldi	r24, 0x09	; 9
     a46:	44 0f       	add	r20, r20
     a48:	55 1f       	adc	r21, r21
     a4a:	66 1f       	adc	r22, r22
     a4c:	77 1f       	adc	r23, r23
     a4e:	8a 95       	dec	r24
     a50:	d1 f7       	brne	.-12     	; 0xa46 <mmc_disk_ioctl+0x366>
     a52:	70 68       	ori	r23, 0x80	; 128
     a54:	8c 91       	ld	r24, X
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	2c e1       	ldi	r18, 0x1C	; 28
     a5e:	88 0f       	add	r24, r24
     a60:	99 1f       	adc	r25, r25
     a62:	aa 1f       	adc	r26, r26
     a64:	bb 1f       	adc	r27, r27
     a66:	2a 95       	dec	r18
     a68:	d1 f7       	brne	.-12     	; 0xa5e <mmc_disk_ioctl+0x37e>
     a6a:	48 2b       	or	r20, r24
     a6c:	59 2b       	or	r21, r25
     a6e:	6a 2b       	or	r22, r26
     a70:	7b 2b       	or	r23, r27
     a72:	f6 01       	movw	r30, r12
     a74:	81 81       	ldd	r24, Z+1	; 0x01
     a76:	92 81       	ldd	r25, Z+2	; 0x02
     a78:	01 97       	sbiw	r24, 0x01	; 1
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	91 70       	andi	r25, 0x01	; 1
     a80:	a0 70       	andi	r26, 0x00	; 0
     a82:	b0 70       	andi	r27, 0x00	; 0
     a84:	48 2b       	or	r20, r24
     a86:	59 2b       	or	r21, r25
     a88:	6a 2b       	or	r22, r26
     a8a:	7b 2b       	or	r23, r27
     a8c:	81 e3       	ldi	r24, 0x31	; 49
     a8e:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     a92:	88 23       	and	r24, r24
     a94:	09 f0       	breq	.+2      	; 0xa98 <mmc_disk_ioctl+0x3b8>
     a96:	3f c0       	rjmp	.+126    	; 0xb16 <mmc_disk_ioctl+0x436>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     a98:	8f ef       	ldi	r24, 0xFF	; 255
     a9a:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     a9c:	77 9b       	sbis	0x0e, 7	; 14
     a9e:	fe cf       	rjmp	.-4      	; 0xa9c <mmc_disk_ioctl+0x3bc>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     aa0:	77 9b       	sbis	0x0e, 7	; 14
     aa2:	fe cf       	rjmp	.-4      	; 0xaa0 <mmc_disk_ioctl+0x3c0>
	return SPDR;
     aa4:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     aa6:	8e ef       	ldi	r24, 0xFE	; 254
     aa8:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     aaa:	77 9b       	sbis	0x0e, 7	; 14
     aac:	fe cf       	rjmp	.-4      	; 0xaaa <mmc_disk_ioctl+0x3ca>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     aae:	77 9b       	sbis	0x0e, 7	; 14
     ab0:	fe cf       	rjmp	.-4      	; 0xaae <mmc_disk_ioctl+0x3ce>
	return SPDR;
     ab2:	8f b1       	in	r24, 0x0f	; 15

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
     ab4:	d6 01       	movw	r26, r12
     ab6:	17 96       	adiw	r26, 0x07	; 7
     ab8:	ed 91       	ld	r30, X+
     aba:	fc 91       	ld	r31, X
     abc:	18 97       	sbiw	r26, 0x08	; 8
     abe:	11 96       	adiw	r26, 0x01	; 1
     ac0:	8d 91       	ld	r24, X+
     ac2:	9c 91       	ld	r25, X
     ac4:	12 97       	sbiw	r26, 0x02	; 2
     ac6:	00 97       	sbiw	r24, 0x00	; 0
     ac8:	09 f4       	brne	.+2      	; 0xacc <mmc_disk_ioctl+0x3ec>
     aca:	ae c1       	rjmp	.+860    	; 0xe28 <mmc_disk_ioctl+0x748>
     acc:	21 91       	ld	r18, Z+
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     ace:	2f b9       	out	0x0f, r18	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     ad0:	77 9b       	sbis	0x0e, 7	; 14
     ad2:	fe cf       	rjmp	.-4      	; 0xad0 <mmc_disk_ioctl+0x3f0>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     ad4:	77 9b       	sbis	0x0e, 7	; 14
     ad6:	fe cf       	rjmp	.-4      	; 0xad4 <mmc_disk_ioctl+0x3f4>
	return SPDR;
     ad8:	2f b1       	in	r18, 0x0f	; 15

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
     ada:	01 97       	sbiw	r24, 0x01	; 1
     adc:	b9 f7       	brne	.-18     	; 0xacc <mmc_disk_ioctl+0x3ec>
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	92 e0       	ldi	r25, 0x02	; 2
     ae2:	f6 01       	movw	r30, r12
     ae4:	21 81       	ldd	r18, Z+1	; 0x01
     ae6:	32 81       	ldd	r19, Z+2	; 0x02
     ae8:	82 1b       	sub	r24, r18
     aea:	93 0b       	sbc	r25, r19
     aec:	49 f0       	breq	.+18     	; 0xb00 <mmc_disk_ioctl+0x420>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     aee:	2f ef       	ldi	r18, 0xFF	; 255
     af0:	2f b9       	out	0x0f, r18	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     af2:	77 9b       	sbis	0x0e, 7	; 14
     af4:	fe cf       	rjmp	.-4      	; 0xaf2 <mmc_disk_ioctl+0x412>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     af6:	77 9b       	sbis	0x0e, 7	; 14
     af8:	fe cf       	rjmp	.-4      	; 0xaf6 <mmc_disk_ioctl+0x416>
	return SPDR;
     afa:	3f b1       	in	r19, 0x0f	; 15
	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     afc:	01 97       	sbiw	r24, 0x01	; 1
     afe:	c1 f7       	brne	.-16     	; 0xaf0 <mmc_disk_ioctl+0x410>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     b00:	8f ef       	ldi	r24, 0xFF	; 255
     b02:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     b04:	77 9b       	sbis	0x0e, 7	; 14
     b06:	fe cf       	rjmp	.-4      	; 0xb04 <mmc_disk_ioctl+0x424>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     b08:	77 9b       	sbis	0x0e, 7	; 14
     b0a:	fe cf       	rjmp	.-4      	; 0xb08 <mmc_disk_ioctl+0x428>
	return SPDR;
     b0c:	8f b1       	in	r24, 0x0f	; 15
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
     b0e:	8f 71       	andi	r24, 0x1F	; 31
     b10:	85 30       	cpi	r24, 0x05	; 5
     b12:	09 f4       	brne	.+2      	; 0xb16 <mmc_disk_ioctl+0x436>
     b14:	86 c1       	rjmp	.+780    	; 0xe22 <mmc_disk_ioctl+0x742>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     b16:	21 e0       	ldi	r18, 0x01	; 1
     b18:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     b1a:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     b1c:	8f ef       	ldi	r24, 0xFF	; 255
     b1e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     b20:	77 9b       	sbis	0x0e, 7	; 14
     b22:	fe cf       	rjmp	.-4      	; 0xb20 <mmc_disk_ioctl+0x440>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     b24:	77 99       	sbic	0x0e, 7	; 14
     b26:	7b ce       	rjmp	.-778    	; 0x81e <mmc_disk_ioctl+0x13e>
     b28:	77 9b       	sbis	0x0e, 7	; 14
     b2a:	fc cf       	rjmp	.-8      	; 0xb24 <mmc_disk_ioctl+0x444>
     b2c:	78 ce       	rjmp	.-784    	; 0x81e <mmc_disk_ioctl+0x13e>
		}
		deselect();
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
     b2e:	8d e8       	ldi	r24, 0x8D	; 141
     b30:	40 e0       	ldi	r20, 0x00	; 0
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	ba 01       	movw	r22, r20
     b36:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     b3a:	88 23       	and	r24, r24
     b3c:	09 f0       	breq	.+2      	; 0xb40 <mmc_disk_ioctl+0x460>
     b3e:	56 c0       	rjmp	.+172    	; 0xbec <mmc_disk_ioctl+0x50c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     b44:	77 9b       	sbis	0x0e, 7	; 14
     b46:	fe cf       	rjmp	.-4      	; 0xb44 <mmc_disk_ioctl+0x464>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     b48:	77 9b       	sbis	0x0e, 7	; 14
     b4a:	fe cf       	rjmp	.-4      	; 0xb48 <mmc_disk_ioctl+0x468>
	return SPDR;
     b4c:	8f b1       	in	r24, 0x0f	; 15
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
			xchg_spi(0xFF);
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
     b4e:	c6 01       	movw	r24, r12
     b50:	60 e4       	ldi	r22, 0x40	; 64
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	0e 94 1d 01 	call	0x23a	; 0x23a <rcvr_datablock>
     b58:	00 97       	sbiw	r24, 0x00	; 0
     b5a:	09 f4       	brne	.+2      	; 0xb5e <mmc_disk_ioctl+0x47e>
     b5c:	47 c0       	rjmp	.+142    	; 0xbec <mmc_disk_ioctl+0x50c>
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     b62:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     b64:	8f ef       	ldi	r24, 0xFF	; 255
     b66:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     b68:	77 9b       	sbis	0x0e, 7	; 14
     b6a:	fe cf       	rjmp	.-4      	; 0xb68 <mmc_disk_ioctl+0x488>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     b6c:	77 99       	sbic	0x0e, 7	; 14
     b6e:	57 ce       	rjmp	.-850    	; 0x81e <mmc_disk_ioctl+0x13e>
     b70:	77 9b       	sbis	0x0e, 7	; 14
     b72:	fc cf       	rjmp	.-8      	; 0xb6c <mmc_disk_ioctl+0x48c>
     b74:	54 ce       	rjmp	.-856    	; 0x81e <mmc_disk_ioctl+0x13e>
			res = RES_OK;
		deselect();
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
     b76:	8a e3       	ldi	r24, 0x3A	; 58
     b78:	40 e0       	ldi	r20, 0x00	; 0
     b7a:	50 e0       	ldi	r21, 0x00	; 0
     b7c:	ba 01       	movw	r22, r20
     b7e:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     b82:	88 23       	and	r24, r24
     b84:	09 f0       	breq	.+2      	; 0xb88 <mmc_disk_ioctl+0x4a8>
     b86:	6c c0       	rjmp	.+216    	; 0xc60 <mmc_disk_ioctl+0x580>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
     b88:	c6 01       	movw	r24, r12
     b8a:	04 96       	adiw	r24, 0x04	; 4
     b8c:	f6 01       	movw	r30, r12
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     b8e:	3f ef       	ldi	r19, 0xFF	; 255
     b90:	3f b9       	out	0x0f, r19	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     b92:	77 9b       	sbis	0x0e, 7	; 14
     b94:	fe cf       	rjmp	.-4      	; 0xb92 <mmc_disk_ioctl+0x4b2>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     b96:	77 9b       	sbis	0x0e, 7	; 14
     b98:	fe cf       	rjmp	.-4      	; 0xb96 <mmc_disk_ioctl+0x4b6>
	return SPDR;
     b9a:	2f b1       	in	r18, 0x0f	; 15
		deselect();
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
     b9c:	21 93       	st	Z+, r18
     b9e:	e8 17       	cp	r30, r24
     ba0:	f9 07       	cpc	r31, r25
     ba2:	b1 f7       	brne	.-20     	; 0xb90 <mmc_disk_ioctl+0x4b0>
			res = RES_OK;
     ba4:	20 e0       	ldi	r18, 0x00	; 0
     ba6:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     ba8:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     bae:	77 9b       	sbis	0x0e, 7	; 14
     bb0:	fe cf       	rjmp	.-4      	; 0xbae <mmc_disk_ioctl+0x4ce>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     bb2:	77 99       	sbic	0x0e, 7	; 14
     bb4:	34 ce       	rjmp	.-920    	; 0x81e <mmc_disk_ioctl+0x13e>
     bb6:	77 9b       	sbis	0x0e, 7	; 14
     bb8:	fc cf       	rjmp	.-8      	; 0xbb2 <mmc_disk_ioctl+0x4d2>
     bba:	31 ce       	rjmp	.-926    	; 0x81e <mmc_disk_ioctl+0x13e>
			res = RES_OK;
		deselect();
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))		/* READ_CID */
     bbc:	8a e0       	ldi	r24, 0x0A	; 10
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	50 e0       	ldi	r21, 0x00	; 0
     bc2:	ba 01       	movw	r22, r20
     bc4:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     bc8:	88 23       	and	r24, r24
     bca:	09 f4       	brne	.+2      	; 0xbce <mmc_disk_ioctl+0x4ee>
     bcc:	ef c0       	rjmp	.+478    	; 0xdac <mmc_disk_ioctl+0x6cc>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     bce:	21 e0       	ldi	r18, 0x01	; 1
     bd0:	30 e0       	ldi	r19, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
	CS_HIGH();		/* Set CS# high */
     bd2:	c0 9a       	sbi	0x18, 0	; 24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     bd8:	77 9b       	sbis	0x0e, 7	; 14
     bda:	fe cf       	rjmp	.-4      	; 0xbd8 <mmc_disk_ioctl+0x4f8>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     bdc:	77 99       	sbic	0x0e, 7	; 14
     bde:	1f ce       	rjmp	.-962    	; 0x81e <mmc_disk_ioctl+0x13e>
     be0:	77 9b       	sbis	0x0e, 7	; 14
     be2:	fc cf       	rjmp	.-8      	; 0xbdc <mmc_disk_ioctl+0x4fc>
     be4:	1c ce       	rjmp	.-968    	; 0x81e <mmc_disk_ioctl+0x13e>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     be6:	21 e0       	ldi	r18, 0x01	; 1
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	f1 ce       	rjmp	.-542    	; 0x9ce <mmc_disk_ioctl+0x2ee>
     bec:	21 e0       	ldi	r18, 0x01	; 1
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	b8 cf       	rjmp	.-144    	; 0xb62 <mmc_disk_ioctl+0x482>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
     bf2:	89 e0       	ldi	r24, 0x09	; 9
     bf4:	40 e0       	ldi	r20, 0x00	; 0
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	ba 01       	movw	r22, r20
     bfa:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     bfe:	88 23       	and	r24, r24
     c00:	91 f7       	brne	.-28     	; 0xbe6 <mmc_disk_ioctl+0x506>
     c02:	ce 01       	movw	r24, r28
     c04:	01 96       	adiw	r24, 0x01	; 1
     c06:	60 e1       	ldi	r22, 0x10	; 16
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	0e 94 1d 01 	call	0x23a	; 0x23a <rcvr_datablock>
     c0e:	00 97       	sbiw	r24, 0x00	; 0
     c10:	51 f3       	breq	.-44     	; 0xbe6 <mmc_disk_ioctl+0x506>
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     c12:	8c 85       	ldd	r24, Y+12	; 0x0c
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
     c14:	01 ff       	sbrs	r16, 1
     c16:	0c c1       	rjmp	.+536    	; 0xe30 <mmc_disk_ioctl+0x750>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
     c18:	88 1f       	adc	r24, r24
     c1a:	88 27       	eor	r24, r24
     c1c:	88 1f       	adc	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	01 96       	adiw	r24, 0x01	; 1
     c22:	2b 85       	ldd	r18, Y+11	; 0x0b
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	2f 73       	andi	r18, 0x3F	; 63
     c28:	30 70       	andi	r19, 0x00	; 0
     c2a:	22 0f       	add	r18, r18
     c2c:	33 1f       	adc	r19, r19
     c2e:	82 0f       	add	r24, r18
     c30:	93 1f       	adc	r25, r19
     c32:	2e 85       	ldd	r18, Y+14	; 0x0e
     c34:	22 95       	swap	r18
     c36:	26 95       	lsr	r18
     c38:	26 95       	lsr	r18
     c3a:	23 70       	andi	r18, 0x03	; 3
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	21 50       	subi	r18, 0x01	; 1
     c40:	30 40       	sbci	r19, 0x00	; 0
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <mmc_disk_ioctl+0x568>
     c44:	88 0f       	add	r24, r24
     c46:	99 1f       	adc	r25, r25
     c48:	2a 95       	dec	r18
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <mmc_disk_ioctl+0x564>
     c4c:	a0 e0       	ldi	r26, 0x00	; 0
     c4e:	b0 e0       	ldi	r27, 0x00	; 0
     c50:	f6 01       	movw	r30, r12
     c52:	80 83       	st	Z, r24
     c54:	91 83       	std	Z+1, r25	; 0x01
     c56:	a2 83       	std	Z+2, r26	; 0x02
     c58:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
     c5a:	20 e0       	ldi	r18, 0x00	; 0
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	b7 ce       	rjmp	.-658    	; 0x9ce <mmc_disk_ioctl+0x2ee>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
     c60:	21 e0       	ldi	r18, 0x01	; 1
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	a1 cf       	rjmp	.-190    	; 0xba8 <mmc_disk_ioctl+0x4c8>
		*ptr = CardType;
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))		/* READ_CSD */
     c66:	c6 01       	movw	r24, r12
     c68:	60 e1       	ldi	r22, 0x10	; 16
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	0e 94 1d 01 	call	0x23a	; 0x23a <rcvr_datablock>
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	09 f4       	brne	.+2      	; 0xc76 <mmc_disk_ioctl+0x596>
     c74:	bf ce       	rjmp	.-642    	; 0x9f4 <mmc_disk_ioctl+0x314>
			res = RES_OK;
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	be ce       	rjmp	.-644    	; 0x9f8 <mmc_disk_ioctl+0x318>
		deselect();
		break;

	case CTRL_TRIM:		/* Erase a block of sectors (used when _USE_TRIM in ffconf.h is 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
		if (mmc_disk_ioctl(MMC_GET_CSD, csd)) break;	/* Get CSD */
     c7c:	83 e3       	ldi	r24, 0x33	; 51
     c7e:	be 01       	movw	r22, r28
     c80:	6f 5f       	subi	r22, 0xFF	; 255
     c82:	7f 4f       	sbci	r23, 0xFF	; 255
     c84:	0e 94 70 03 	call	0x6e0	; 0x6e0 <mmc_disk_ioctl>
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	09 f0       	breq	.+2      	; 0xc8e <mmc_disk_ioctl+0x5ae>
     c8c:	02 ce       	rjmp	.-1020   	; 0x892 <mmc_disk_ioctl+0x1b2>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	82 95       	swap	r24
     c92:	86 95       	lsr	r24
     c94:	86 95       	lsr	r24
     c96:	83 70       	andi	r24, 0x03	; 3
     c98:	19 f4       	brne	.+6      	; 0xca0 <mmc_disk_ioctl+0x5c0>
     c9a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c9c:	86 ff       	sbrs	r24, 6
     c9e:	f9 cd       	rjmp	.-1038   	; 0x892 <mmc_disk_ioctl+0x1b2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
     ca0:	d6 01       	movw	r26, r12
     ca2:	4d 91       	ld	r20, X+
     ca4:	5d 91       	ld	r21, X+
     ca6:	6d 91       	ld	r22, X+
     ca8:	7c 91       	ld	r23, X
     caa:	13 97       	sbiw	r26, 0x03	; 3
     cac:	14 96       	adiw	r26, 0x04	; 4
     cae:	cd 90       	ld	r12, X+
     cb0:	dd 90       	ld	r13, X+
     cb2:	ed 90       	ld	r14, X+
     cb4:	fc 90       	ld	r15, X
     cb6:	17 97       	sbiw	r26, 0x07	; 7
		if (!(CardType & CT_BLOCK)) {
     cb8:	03 fd       	sbrc	r16, 3
     cba:	0e c0       	rjmp	.+28     	; 0xcd8 <mmc_disk_ioctl+0x5f8>
			st *= 512; ed *= 512;
     cbc:	f9 e0       	ldi	r31, 0x09	; 9
     cbe:	44 0f       	add	r20, r20
     cc0:	55 1f       	adc	r21, r21
     cc2:	66 1f       	adc	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	fa 95       	dec	r31
     cc8:	d1 f7       	brne	.-12     	; 0xcbe <mmc_disk_ioctl+0x5de>
     cca:	a9 e0       	ldi	r26, 0x09	; 9
     ccc:	cc 0c       	add	r12, r12
     cce:	dd 1c       	adc	r13, r13
     cd0:	ee 1c       	adc	r14, r14
     cd2:	ff 1c       	adc	r15, r15
     cd4:	aa 95       	dec	r26
     cd6:	d1 f7       	brne	.-12     	; 0xccc <mmc_disk_ioctl+0x5ec>
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))	/* Erase sector block */
     cd8:	80 e2       	ldi	r24, 0x20	; 32
     cda:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     cde:	88 23       	and	r24, r24
     ce0:	09 f0       	breq	.+2      	; 0xce4 <mmc_disk_ioctl+0x604>
     ce2:	d7 cd       	rjmp	.-1106   	; 0x892 <mmc_disk_ioctl+0x1b2>
     ce4:	81 e2       	ldi	r24, 0x21	; 33
     ce6:	b7 01       	movw	r22, r14
     ce8:	a6 01       	movw	r20, r12
     cea:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     cee:	88 23       	and	r24, r24
     cf0:	09 f0       	breq	.+2      	; 0xcf4 <mmc_disk_ioctl+0x614>
     cf2:	cf cd       	rjmp	.-1122   	; 0x892 <mmc_disk_ioctl+0x1b2>
     cf4:	86 e2       	ldi	r24, 0x26	; 38
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	ba 01       	movw	r22, r20
     cfc:	0e 94 9d 00 	call	0x13a	; 0x13a <send_cmd>
     d00:	88 23       	and	r24, r24
     d02:	09 f0       	breq	.+2      	; 0xd06 <mmc_disk_ioctl+0x626>
     d04:	c6 cd       	rjmp	.-1140   	; 0x892 <mmc_disk_ioctl+0x1b2>
     d06:	80 e3       	ldi	r24, 0x30	; 48
     d08:	95 e7       	ldi	r25, 0x75	; 117
     d0a:	0e 94 68 00 	call	0xd0	; 0xd0 <wait_ready>
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
     d0e:	21 e0       	ldi	r18, 0x01	; 1
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	09 f4       	brne	.+2      	; 0xd18 <mmc_disk_ioctl+0x638>
     d16:	fb cc       	rjmp	.-1546   	; 0x70e <mmc_disk_ioctl+0x2e>
     d18:	8b ce       	rjmp	.-746    	; 0xa30 <mmc_disk_ioctl+0x350>
		if (select()) res = RES_OK;
		deselect();
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
     d1a:	ce 01       	movw	r24, r28
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	60 e1       	ldi	r22, 0x10	; 16
     d20:	70 e0       	ldi	r23, 0x00	; 0
     d22:	0e 94 1d 01 	call	0x23a	; 0x23a <rcvr_datablock>
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	09 f4       	brne	.+2      	; 0xd2c <mmc_disk_ioctl+0x64c>
     d2a:	8d cd       	rjmp	.-1254   	; 0x846 <mmc_disk_ioctl+0x166>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	82 95       	swap	r24
     d30:	86 95       	lsr	r24
     d32:	86 95       	lsr	r24
     d34:	83 70       	andi	r24, 0x03	; 3
     d36:	81 30       	cpi	r24, 0x01	; 1
     d38:	09 f4       	brne	.+2      	; 0xd3c <mmc_disk_ioctl+0x65c>
     d3a:	a6 c0       	rjmp	.+332    	; 0xe88 <mmc_disk_ioctl+0x7a8>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
     d3c:	89 85       	ldd	r24, Y+9	; 0x09
     d3e:	82 95       	swap	r24
     d40:	86 95       	lsr	r24
     d42:	86 95       	lsr	r24
     d44:	83 70       	andi	r24, 0x03	; 3
     d46:	48 85       	ldd	r20, Y+8	; 0x08
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	44 0f       	add	r20, r20
     d4c:	55 1f       	adc	r21, r21
     d4e:	44 0f       	add	r20, r20
     d50:	55 1f       	adc	r21, r21
     d52:	48 0f       	add	r20, r24
     d54:	51 1d       	adc	r21, r1
     d56:	4f 5f       	subi	r20, 0xFF	; 255
     d58:	5f 4f       	sbci	r21, 0xFF	; 255
     d5a:	8f 81       	ldd	r24, Y+7	; 0x07
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	83 70       	andi	r24, 0x03	; 3
     d60:	90 70       	andi	r25, 0x00	; 0
     d62:	98 2f       	mov	r25, r24
     d64:	88 27       	eor	r24, r24
     d66:	99 0f       	add	r25, r25
     d68:	99 0f       	add	r25, r25
     d6a:	48 0f       	add	r20, r24
     d6c:	59 1f       	adc	r21, r25
     d6e:	60 e0       	ldi	r22, 0x00	; 0
     d70:	70 e0       	ldi	r23, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	8f 70       	andi	r24, 0x0F	; 15
     d76:	9b 85       	ldd	r25, Y+11	; 0x0b
     d78:	99 1f       	adc	r25, r25
     d7a:	99 27       	eor	r25, r25
     d7c:	99 1f       	adc	r25, r25
     d7e:	89 0f       	add	r24, r25
     d80:	8e 5f       	subi	r24, 0xFE	; 254
     d82:	9a 85       	ldd	r25, Y+10	; 0x0a
     d84:	93 70       	andi	r25, 0x03	; 3
     d86:	99 0f       	add	r25, r25
     d88:	89 0f       	add	r24, r25
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	09 97       	sbiw	r24, 0x09	; 9
     d8e:	04 c0       	rjmp	.+8      	; 0xd98 <mmc_disk_ioctl+0x6b8>
     d90:	44 0f       	add	r20, r20
     d92:	55 1f       	adc	r21, r21
     d94:	66 1f       	adc	r22, r22
     d96:	77 1f       	adc	r23, r23
     d98:	8a 95       	dec	r24
     d9a:	d2 f7       	brpl	.-12     	; 0xd90 <mmc_disk_ioctl+0x6b0>
     d9c:	f6 01       	movw	r30, r12
     d9e:	40 83       	st	Z, r20
     da0:	51 83       	std	Z+1, r21	; 0x01
     da2:	62 83       	std	Z+2, r22	; 0x02
     da4:	73 83       	std	Z+3, r23	; 0x03
			}
			res = RES_OK;
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	4f cd       	rjmp	.-1378   	; 0x84a <mmc_disk_ioctl+0x16a>
			res = RES_OK;
		deselect();
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))		/* READ_CID */
     dac:	c6 01       	movw	r24, r12
     dae:	60 e1       	ldi	r22, 0x10	; 16
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	0e 94 1d 01 	call	0x23a	; 0x23a <rcvr_datablock>
     db6:	00 97       	sbiw	r24, 0x00	; 0
     db8:	09 f4       	brne	.+2      	; 0xdbc <mmc_disk_ioctl+0x6dc>
     dba:	09 cf       	rjmp	.-494    	; 0xbce <mmc_disk_ioctl+0x4ee>
			
			res = RES_OK;
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	08 cf       	rjmp	.-496    	; 0xbd2 <mmc_disk_ioctl+0x4f2>
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	24 cd       	rjmp	.-1464   	; 0x810 <mmc_disk_ioctl+0x130>
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
     dc8:	8e 3f       	cpi	r24, 0xFE	; 254
     dca:	09 f0       	breq	.+2      	; 0xdce <mmc_disk_ioctl+0x6ee>
     dcc:	b8 cd       	rjmp	.-1168   	; 0x93e <mmc_disk_ioctl+0x25e>
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
     dce:	d6 01       	movw	r26, r12
     dd0:	17 96       	adiw	r26, 0x07	; 7
     dd2:	ed 91       	ld	r30, X+
     dd4:	fc 91       	ld	r31, X
     dd6:	18 97       	sbiw	r26, 0x08	; 8
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	8d 91       	ld	r24, X+
     ddc:	9c 91       	ld	r25, X
     dde:	12 97       	sbiw	r26, 0x02	; 2
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	09 f4       	brne	.+2      	; 0xde6 <mmc_disk_ioctl+0x706>
     de4:	7b c0       	rjmp	.+246    	; 0xedc <mmc_disk_ioctl+0x7fc>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     de6:	3f ef       	ldi	r19, 0xFF	; 255
     de8:	3f b9       	out	0x0f, r19	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     dea:	77 9b       	sbis	0x0e, 7	; 14
     dec:	fe cf       	rjmp	.-4      	; 0xdea <mmc_disk_ioctl+0x70a>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     dee:	77 9b       	sbis	0x0e, 7	; 14
     df0:	fe cf       	rjmp	.-4      	; 0xdee <mmc_disk_ioctl+0x70e>
	return SPDR;
     df2:	2f b1       	in	r18, 0x0f	; 15
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
     df4:	21 93       	st	Z+, r18
     df6:	01 97       	sbiw	r24, 0x01	; 1
     df8:	b9 f7       	brne	.-18     	; 0xde8 <mmc_disk_ioctl+0x708>
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	92 e0       	ldi	r25, 0x02	; 2
     dfe:	f6 01       	movw	r30, r12
     e00:	21 81       	ldd	r18, Z+1	; 0x01
     e02:	32 81       	ldd	r19, Z+2	; 0x02
     e04:	82 1b       	sub	r24, r18
     e06:	93 0b       	sbc	r25, r19
     e08:	49 f0       	breq	.+18     	; 0xe1c <mmc_disk_ioctl+0x73c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     e0a:	2f ef       	ldi	r18, 0xFF	; 255
     e0c:	2f b9       	out	0x0f, r18	; 15
	while(!(SPSR & (1<<SPIF)));	//Wait until you're done sending
     e0e:	77 9b       	sbis	0x0e, 7	; 14
     e10:	fe cf       	rjmp	.-4      	; 0xe0e <mmc_disk_ioctl+0x72e>
	//Store the SPDR value
	while(!(SPSR & (1<<SPIF)));
     e12:	77 9b       	sbis	0x0e, 7	; 14
     e14:	fe cf       	rjmp	.-4      	; 0xe12 <mmc_disk_ioctl+0x732>
	return SPDR;
     e16:	3f b1       	in	r19, 0x0f	; 15
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     e18:	01 97       	sbiw	r24, 0x01	; 1
     e1a:	c1 f7       	brne	.-16     	; 0xe0c <mmc_disk_ioctl+0x72c>
				res = RES_OK;
     e1c:	20 e0       	ldi	r18, 0x00	; 0
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	90 cd       	rjmp	.-1248   	; 0x942 <mmc_disk_ioctl+0x262>
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
     e22:	20 e0       	ldi	r18, 0x00	; 0
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	79 ce       	rjmp	.-782    	; 0xb1a <mmc_disk_ioctl+0x43a>
	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     e28:	82 e0       	ldi	r24, 0x02	; 2
     e2a:	92 e0       	ldi	r25, 0x02	; 2
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     e2c:	2f ef       	ldi	r18, 0xFF	; 255
     e2e:	60 ce       	rjmp	.-832    	; 0xaf0 <mmc_disk_ioctl+0x410>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
     e30:	48 2f       	mov	r20, r24
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	43 70       	andi	r20, 0x03	; 3
     e36:	50 70       	andi	r21, 0x00	; 0
     e38:	44 0f       	add	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	44 0f       	add	r20, r20
     e3e:	55 1f       	adc	r21, r21
     e40:	44 0f       	add	r20, r20
     e42:	55 1f       	adc	r21, r21
     e44:	82 95       	swap	r24
     e46:	86 95       	lsr	r24
     e48:	87 70       	andi	r24, 0x07	; 7
     e4a:	48 0f       	add	r20, r24
     e4c:	51 1d       	adc	r21, r1
     e4e:	4f 5f       	subi	r20, 0xFF	; 255
     e50:	5f 4f       	sbci	r21, 0xFF	; 255
     e52:	8b 85       	ldd	r24, Y+11	; 0x0b
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	8c 77       	andi	r24, 0x7C	; 124
     e58:	90 70       	andi	r25, 0x00	; 0
     e5a:	95 95       	asr	r25
     e5c:	87 95       	ror	r24
     e5e:	95 95       	asr	r25
     e60:	87 95       	ror	r24
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	48 9f       	mul	r20, r24
     e66:	90 01       	movw	r18, r0
     e68:	49 9f       	mul	r20, r25
     e6a:	30 0d       	add	r19, r0
     e6c:	58 9f       	mul	r21, r24
     e6e:	30 0d       	add	r19, r0
     e70:	11 24       	eor	r1, r1
     e72:	c9 01       	movw	r24, r18
     e74:	a0 e0       	ldi	r26, 0x00	; 0
     e76:	b0 e0       	ldi	r27, 0x00	; 0
     e78:	f6 01       	movw	r30, r12
     e7a:	80 83       	st	Z, r24
     e7c:	91 83       	std	Z+1, r25	; 0x01
     e7e:	a2 83       	std	Z+2, r26	; 0x02
     e80:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	a3 cd       	rjmp	.-1210   	; 0x9ce <mmc_disk_ioctl+0x2ee>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
     e88:	48 85       	ldd	r20, Y+8	; 0x08
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	4f 73       	andi	r20, 0x3F	; 63
     e92:	50 70       	andi	r21, 0x00	; 0
     e94:	60 70       	andi	r22, 0x00	; 0
     e96:	70 70       	andi	r23, 0x00	; 0
     e98:	ba 01       	movw	r22, r20
     e9a:	55 27       	eor	r21, r21
     e9c:	44 27       	eor	r20, r20
     e9e:	4f 5f       	subi	r20, 0xFF	; 255
     ea0:	5f 4f       	sbci	r21, 0xFF	; 255
     ea2:	6f 4f       	sbci	r22, 0xFF	; 255
     ea4:	7f 4f       	sbci	r23, 0xFF	; 255
     ea6:	99 85       	ldd	r25, Y+9	; 0x09
     ea8:	80 e0       	ldi	r24, 0x00	; 0
     eaa:	2a 85       	ldd	r18, Y+10	; 0x0a
     eac:	82 0f       	add	r24, r18
     eae:	91 1d       	adc	r25, r1
     eb0:	a0 e0       	ldi	r26, 0x00	; 0
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	48 0f       	add	r20, r24
     eb6:	59 1f       	adc	r21, r25
     eb8:	6a 1f       	adc	r22, r26
     eba:	7b 1f       	adc	r23, r27
				*(DWORD*)buff = csize << 10;
     ebc:	ea e0       	ldi	r30, 0x0A	; 10
     ebe:	44 0f       	add	r20, r20
     ec0:	55 1f       	adc	r21, r21
     ec2:	66 1f       	adc	r22, r22
     ec4:	77 1f       	adc	r23, r23
     ec6:	ea 95       	dec	r30
     ec8:	d1 f7       	brne	.-12     	; 0xebe <mmc_disk_ioctl+0x7de>
     eca:	d6 01       	movw	r26, r12
     ecc:	4d 93       	st	X+, r20
     ece:	5d 93       	st	X+, r21
     ed0:	6d 93       	st	X+, r22
     ed2:	7c 93       	st	X, r23
     ed4:	13 97       	sbiw	r26, 0x03	; 3
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	b7 cc       	rjmp	.-1682   	; 0x84a <mmc_disk_ioctl+0x16a>
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	92 e0       	ldi	r25, 0x02	; 2
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat; //Load the mode into SPDR
     ee0:	2f ef       	ldi	r18, 0xFF	; 255
     ee2:	94 cf       	rjmp	.-216    	; 0xe0c <mmc_disk_ioctl+0x72c>

00000ee4 <mmc_disk_timerproc>:
void mmc_disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
     ee4:	80 91 21 01 	lds	r24, 0x0121
	if (n) Timer1 = --n;
     ee8:	88 23       	and	r24, r24
     eea:	19 f0       	breq	.+6      	; 0xef2 <mmc_disk_timerproc+0xe>
     eec:	81 50       	subi	r24, 0x01	; 1
     eee:	80 93 21 01 	sts	0x0121, r24
	n = Timer2;
     ef2:	80 91 20 01 	lds	r24, 0x0120
	if (n) Timer2 = --n;
     ef6:	88 23       	and	r24, r24
     ef8:	19 f0       	breq	.+6      	; 0xf00 <mmc_disk_timerproc+0x1c>
     efa:	81 50       	subi	r24, 0x01	; 1
     efc:	80 93 20 01 	sts	0x0120, r24

	s = Stat;
     f00:	80 91 04 01 	lds	r24, 0x0104
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if(MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
     f04:	89 7f       	andi	r24, 0xF9	; 249
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
     f06:	80 93 04 01 	sts	0x0104, r24
}
     f0a:	08 95       	ret

00000f0c <get_time>:
uint8_t calibration_flg = 0x00; //Will hold number other than 0 when calibration switch triggered
uint8_t timer_event0_flg = 0x00; //Will switch to 1 once experiment begin signal received
uint8_t timer_event1_flg = 0x00; //Will switch to 1 once emergency retract signel receieved
uint16_t time = 0x0000; //Holds time count in tenths of a second from when timer_counter_enable() is turned on

uint16_t get_time(){return time;}
     f0c:	80 91 23 01 	lds	r24, 0x0123
     f10:	90 91 24 01 	lds	r25, 0x0124
     f14:	08 95       	ret

00000f16 <get_TE0_status>:
uint8_t get_TE0_status(){return timer_event0_flg;}
     f16:	80 91 26 01 	lds	r24, 0x0126
     f1a:	08 95       	ret

00000f1c <get_TE1_status>:
uint8_t get_TE1_status(){return timer_event1_flg;}
     f1c:	80 91 25 01 	lds	r24, 0x0125
     f20:	08 95       	ret

00000f22 <get_calibration_status>:
uint8_t get_calibration_status(){return calibration_flg;}
     f22:	80 91 27 01 	lds	r24, 0x0127
     f26:	08 95       	ret

00000f28 <__vector_1>:

/*********Interrupts*********/
//Calibration Interrupt function for motor 0
ISR(INT0_vect){
     f28:	1f 92       	push	r1
     f2a:	0f 92       	push	r0
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	0f 92       	push	r0
     f30:	11 24       	eor	r1, r1
     f32:	8f 93       	push	r24
	calibration_flg |= 0x01;
     f34:	80 91 27 01 	lds	r24, 0x0127
     f38:	81 60       	ori	r24, 0x01	; 1
     f3a:	80 93 27 01 	sts	0x0127, r24
}
     f3e:	8f 91       	pop	r24
     f40:	0f 90       	pop	r0
     f42:	0f be       	out	0x3f, r0	; 63
     f44:	0f 90       	pop	r0
     f46:	1f 90       	pop	r1
     f48:	18 95       	reti

00000f4a <__vector_2>:

//Calibration Interrupt function for motor 1
ISR(INT1_vect){
     f4a:	1f 92       	push	r1
     f4c:	0f 92       	push	r0
     f4e:	0f b6       	in	r0, 0x3f	; 63
     f50:	0f 92       	push	r0
     f52:	11 24       	eor	r1, r1
     f54:	8f 93       	push	r24
	calibration_flg |= 0x02;
     f56:	80 91 27 01 	lds	r24, 0x0127
     f5a:	82 60       	ori	r24, 0x02	; 2
     f5c:	80 93 27 01 	sts	0x0127, r24
}
     f60:	8f 91       	pop	r24
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	0f 90       	pop	r0
     f68:	1f 90       	pop	r1
     f6a:	18 95       	reti

00000f6c <__vector_3>:

//Calibration Interrupt function for motor 2
ISR(INT2_vect){
     f6c:	1f 92       	push	r1
     f6e:	0f 92       	push	r0
     f70:	0f b6       	in	r0, 0x3f	; 63
     f72:	0f 92       	push	r0
     f74:	11 24       	eor	r1, r1
     f76:	8f 93       	push	r24
	calibration_flg |= 0x04;
     f78:	80 91 27 01 	lds	r24, 0x0127
     f7c:	84 60       	ori	r24, 0x04	; 4
     f7e:	80 93 27 01 	sts	0x0127, r24
}
     f82:	8f 91       	pop	r24
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_4>:

//Calibration Interrupt function for motor 3
ISR(INT3_vect){
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	8f 93       	push	r24
	calibration_flg |= 0x08;
     f9a:	80 91 27 01 	lds	r24, 0x0127
     f9e:	88 60       	ori	r24, 0x08	; 8
     fa0:	80 93 27 01 	sts	0x0127, r24
}
     fa4:	8f 91       	pop	r24
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0
     fac:	1f 90       	pop	r1
     fae:	18 95       	reti

00000fb0 <__vector_5>:

//Calibration Interrupt function for motor 4
ISR(INT4_vect){
     fb0:	1f 92       	push	r1
     fb2:	0f 92       	push	r0
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	0f 92       	push	r0
     fb8:	11 24       	eor	r1, r1
     fba:	8f 93       	push	r24
	calibration_flg |= 0x10;
     fbc:	80 91 27 01 	lds	r24, 0x0127
     fc0:	80 61       	ori	r24, 0x10	; 16
     fc2:	80 93 27 01 	sts	0x0127, r24
}
     fc6:	8f 91       	pop	r24
     fc8:	0f 90       	pop	r0
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	0f 90       	pop	r0
     fce:	1f 90       	pop	r1
     fd0:	18 95       	reti

00000fd2 <__vector_7>:

//Timer Event 0 Interrupt Function - Begin Experiment
ISR(INT6_vect){
     fd2:	1f 92       	push	r1
     fd4:	0f 92       	push	r0
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	0f 92       	push	r0
     fda:	11 24       	eor	r1, r1
     fdc:	8f 93       	push	r24
	timer_event0_flg = 0x01;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	80 93 26 01 	sts	0x0126, r24
}
     fe4:	8f 91       	pop	r24
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <__vector_8>:

//Timer Event 1 Interrupt Function - Emergency Shutoff
ISR(INT7_vect){
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	8f 93       	push	r24
	timer_event1_flg = 0x01;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	80 93 25 01 	sts	0x0125, r24
	/* CONSIDER REVISING THIS FOR FINAL */
}
    1002:	8f 91       	pop	r24
    1004:	0f 90       	pop	r0
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	0f 90       	pop	r0
    100a:	1f 90       	pop	r1
    100c:	18 95       	reti

0000100e <__vector_12>:

//Timer Counter Interrupt - increments time variable every 0.1 sec
ISR(TIMER1_COMPA_vect){
    100e:	1f 92       	push	r1
    1010:	0f 92       	push	r0
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	0f 92       	push	r0
    1016:	11 24       	eor	r1, r1
    1018:	8f 93       	push	r24
    101a:	9f 93       	push	r25
	PORTD ^= 0x01; //For timing testing
    101c:	82 b3       	in	r24, 0x12	; 18
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	89 27       	eor	r24, r25
    1022:	82 bb       	out	0x12, r24	; 18
	time++;
    1024:	80 91 23 01 	lds	r24, 0x0123
    1028:	90 91 24 01 	lds	r25, 0x0124
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	90 93 24 01 	sts	0x0124, r25
    1032:	80 93 23 01 	sts	0x0123, r24
}
    1036:	9f 91       	pop	r25
    1038:	8f 91       	pop	r24
    103a:	0f 90       	pop	r0
    103c:	0f be       	out	0x3f, r0	; 63
    103e:	0f 90       	pop	r0
    1040:	1f 90       	pop	r1
    1042:	18 95       	reti

00001044 <AVR_init>:

/***********************************General***********************************/
void AVR_init(){
	//Motor Data Direction
	*MOTOR_EN_DDR |= (1<<MOT0_EN_PIN | 1<<MOT1_EN_PIN | 1<<MOT2_EN_PIN | 1<<MOT3_EN_PIN | 1<<MOT4_EN_PIN | 1<<MOT5_EN_PIN);
    1044:	e1 e6       	ldi	r30, 0x61	; 97
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	8c 6f       	ori	r24, 0xFC	; 252
    104c:	80 83       	st	Z, r24
	*MOTOR_DIR_DDR |= (1<<MOT0_DIR_PIN | 1<<MOT1_DIR_PIN | 1<<MOT2_DIR_PIN | 1<<MOT3_DIR_PIN | 1<<MOT4_DIR_PIN | 1<<MOT5_DIR_PIN);
    104e:	8a b3       	in	r24, 0x1a	; 26
    1050:	8f 63       	ori	r24, 0x3F	; 63
    1052:	8a bb       	out	0x1a, r24	; 26
	*MOTOR_STEP_DDR |= (1<<MOT0_STEP_PIN | 1<<MOT1_STEP_PIN | 1<<MOT2_STEP_PIN | 1<<MOT3_STEP_PIN | 1<<MOT4_STEP_PIN | 1<<MOT5_STEP_PIN);
    1054:	84 b3       	in	r24, 0x14	; 20
    1056:	8f 63       	ori	r24, 0x3F	; 63
    1058:	84 bb       	out	0x14, r24	; 20
	
	//Parallel lines pin direction
	*LINES_DDR |= (1<<LINE0_PIN | 1<<LINE1_PIN | 1<<LINE2_PIN | 1<<LINE3_PIN);
    105a:	81 b3       	in	r24, 0x11	; 17
    105c:	80 6f       	ori	r24, 0xF0	; 240
    105e:	81 bb       	out	0x11, r24	; 17
	
	//Camera Data Direction
	*CAMERA_EN_DDR |= (1<<CAMERA_EN_PIN);
    1060:	d6 9a       	sbi	0x1a, 6	; 26
	
	//External Interrupt Settings
	EICRA |= (1<<ISC31 | 1<<ISC30 | 1<<ISC21 | 1<<ISC20 | 1<<ISC11 | 1<<ISC10 | 1<<ISC01 | 1<<ISC00);
    1062:	ea e6       	ldi	r30, 0x6A	; 106
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	8f ef       	ldi	r24, 0xFF	; 255
    106a:	80 83       	st	Z, r24
	EICRB |= (1<<ISC71 | 1<<ISC70 | 1<<ISC61 | 1<<ISC60 | 1<<ISC51 | 1<<ISC50 | 1<<ISC41 | 1<<ISC40);
    106c:	9a b7       	in	r25, 0x3a	; 58
    106e:	8a bf       	out	0x3a, r24	; 58
	
	//TimerCounter1: 16-bit CTC mode, 64 prescale, 12500 top, no output latching
	TCCR1B |= (1<<WGM12 | 1<<CS11 | 1<<CS10);
    1070:	8e b5       	in	r24, 0x2e	; 46
    1072:	8b 60       	ori	r24, 0x0B	; 11
    1074:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 0x30D4;
    1076:	84 ed       	ldi	r24, 0xD4	; 212
    1078:	90 e3       	ldi	r25, 0x30	; 48
    107a:	9b bd       	out	0x2b, r25	; 43
    107c:	8a bd       	out	0x2a, r24	; 42
	
	//Enable ADC, single conversion mode, use external common GND, right-adjusted.
	ADMUX = (1<<REFS0);
    107e:	80 e4       	ldi	r24, 0x40	; 64
    1080:	87 b9       	out	0x07, r24	; 7
	ADCSRA = (1<<ADEN);
    1082:	80 e8       	ldi	r24, 0x80	; 128
    1084:	86 b9       	out	0x06, r24	; 6
}
    1086:	08 95       	ret

00001088 <timer_counter_enable>:

void timer_counter_enable(uint8_t flag){
	cli();
    1088:	f8 94       	cli
	if(flag == 0x01)
    108a:	81 30       	cpi	r24, 0x01	; 1
    108c:	29 f0       	breq	.+10     	; 0x1098 <timer_counter_enable+0x10>
		TIMSK |= (1<<OCIE1A);
	else{
		TIMSK &= ~(1<<OCIE1A);
    108e:	87 b7       	in	r24, 0x37	; 55
    1090:	8f 7e       	andi	r24, 0xEF	; 239
    1092:	87 bf       	out	0x37, r24	; 55
		//time = 0x0000;
	}
	sei();
    1094:	78 94       	sei
}
    1096:	08 95       	ret
}

void timer_counter_enable(uint8_t flag){
	cli();
	if(flag == 0x01)
		TIMSK |= (1<<OCIE1A);
    1098:	87 b7       	in	r24, 0x37	; 55
    109a:	80 61       	ori	r24, 0x10	; 16
    109c:	87 bf       	out	0x37, r24	; 55
	else{
		TIMSK &= ~(1<<OCIE1A);
		//time = 0x0000;
	}
	sei();
    109e:	78 94       	sei
}
    10a0:	08 95       	ret

000010a2 <timer_event_enable>:

void timer_event_enable(uint8_t event, uint8_t flag){
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <timer_event_enable+0x6>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
	cli();
    10ac:	f8 94       	cli
	uint8_t eventID[2] = {RSX_TE0_INT, RSX_TE1_INT};
    10ae:	96 e0       	ldi	r25, 0x06	; 6
    10b0:	99 83       	std	Y+1, r25	; 0x01
    10b2:	97 e0       	ldi	r25, 0x07	; 7
    10b4:	9a 83       	std	Y+2, r25	; 0x02
	if(flag == 0x01)
		EIMSK |= (1<<eventID[event]);
    10b6:	29 b7       	in	r18, 0x39	; 57
    10b8:	fe 01       	movw	r30, r28
    10ba:	e8 0f       	add	r30, r24
    10bc:	f1 1d       	adc	r31, r1
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	01 80       	ldd	r0, Z+1	; 0x01
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <timer_event_enable+0x28>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <timer_event_enable+0x24>
}

void timer_event_enable(uint8_t event, uint8_t flag){
	cli();
	uint8_t eventID[2] = {RSX_TE0_INT, RSX_TE1_INT};
	if(flag == 0x01)
    10ce:	61 30       	cpi	r22, 0x01	; 1
    10d0:	61 f0       	breq	.+24     	; 0x10ea <timer_event_enable+0x48>
		EIMSK |= (1<<eventID[event]);
	else{
		EIMSK &= (1<<eventID[event]);
    10d2:	28 23       	and	r18, r24
    10d4:	29 bf       	out	0x39, r18	; 57
		timer_event0_flg = 0x00;
    10d6:	10 92 26 01 	sts	0x0126, r1
		timer_event1_flg = 0x00;
    10da:	10 92 25 01 	sts	0x0125, r1
	}
	sei();
    10de:	78 94       	sei
}
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	df 91       	pop	r29
    10e6:	cf 91       	pop	r28
    10e8:	08 95       	ret

void timer_event_enable(uint8_t event, uint8_t flag){
	cli();
	uint8_t eventID[2] = {RSX_TE0_INT, RSX_TE1_INT};
	if(flag == 0x01)
		EIMSK |= (1<<eventID[event]);
    10ea:	28 2b       	or	r18, r24
    10ec:	29 bf       	out	0x39, r18	; 57
	else{
		EIMSK &= (1<<eventID[event]);
		timer_event0_flg = 0x00;
		timer_event1_flg = 0x00;
	}
	sei();
    10ee:	78 94       	sei
}
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	df 91       	pop	r29
    10f6:	cf 91       	pop	r28
    10f8:	08 95       	ret

000010fa <send_code>:

void send_code(uint8_t code, uint8_t ms){
	uint8_t i;
	while(!((PINE & 0x08) > 0x00)){} //wait for PRS
    10fa:	0b 9b       	sbis	0x01, 3	; 1
    10fc:	fe cf       	rjmp	.-4      	; 0x10fa <send_code>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10fe:	9a e1       	ldi	r25, 0x1A	; 26
    1100:	9a 95       	dec	r25
    1102:	f1 f7       	brne	.-4      	; 0x1100 <__stack+0x1>
    1104:	00 c0       	rjmp	.+0      	; 0x1106 <__stack+0x7>
	_delay_us(5); //wait for end of READ phase
	*LINES_PORT |= ((code&0x01)<<LINE0_PIN | (code&0x02)<<LINE1_PIN | (code&0x04)<<LINE2_PIN | (code&0x08)<<LINE3_PIN); //send code
    1106:	42 b3       	in	r20, 0x12	; 18
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	9c 01       	movw	r18, r24
    110c:	21 70       	andi	r18, 0x01	; 1
    110e:	30 70       	andi	r19, 0x00	; 0
    1110:	22 95       	swap	r18
    1112:	32 95       	swap	r19
    1114:	30 7f       	andi	r19, 0xF0	; 240
    1116:	32 27       	eor	r19, r18
    1118:	20 7f       	andi	r18, 0xF0	; 240
    111a:	32 27       	eor	r19, r18
    111c:	82 70       	andi	r24, 0x02	; 2
    111e:	90 70       	andi	r25, 0x00	; 0
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	82 95       	swap	r24
    1126:	92 95       	swap	r25
    1128:	90 7f       	andi	r25, 0xF0	; 240
    112a:	98 27       	eor	r25, r24
    112c:	80 7f       	andi	r24, 0xF0	; 240
    112e:	98 27       	eor	r25, r24
    1130:	82 2b       	or	r24, r18
    1132:	84 2b       	or	r24, r20
    1134:	82 bb       	out	0x12, r24	; 18
	for(i=0;i<ms;i++)
    1136:	66 23       	and	r22, r22
    1138:	51 f0       	breq	.+20     	; 0x114e <__stack+0x4f>
    113a:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    113c:	ef e9       	ldi	r30, 0x9F	; 159
    113e:	ff e0       	ldi	r31, 0x0F	; 15
    1140:	31 97       	sbiw	r30, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <__stack+0x41>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <__stack+0x47>
    1146:	00 00       	nop
    1148:	8f 5f       	subi	r24, 0xFF	; 255
    114a:	86 17       	cp	r24, r22
    114c:	b9 f7       	brne	.-18     	; 0x113c <__stack+0x3d>
		_delay_ms(1);
	while(!((PINE & 0x08) > 0x00)){} //wait for pulse
    114e:	0b 9b       	sbis	0x01, 3	; 1
    1150:	fe cf       	rjmp	.-4      	; 0x114e <__stack+0x4f>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1152:	fa e1       	ldi	r31, 0x1A	; 26
    1154:	fa 95       	dec	r31
    1156:	f1 f7       	brne	.-4      	; 0x1154 <__stack+0x55>
    1158:	00 c0       	rjmp	.+0      	; 0x115a <__stack+0x5b>
	_delay_us(5); //wait for end of READ phase
	*LINES_PORT &= ~(1<<LINE0_PIN | 1<<LINE1_PIN | 1<<LINE2_PIN | 1<<LINE3_PIN); //reset to 0's
    115a:	82 b3       	in	r24, 0x12	; 18
    115c:	8f 70       	andi	r24, 0x0F	; 15
    115e:	82 bb       	out	0x12, r24	; 18
}
    1160:	08 95       	ret

00001162 <camera_enable>:

/**************************************Device Functions**************************************/
void camera_enable(uint8_t flag){
	static uint8_t power = 0x00;
	if (((flag == 0x01)&(power == 0x00))||((flag == 0x00)&(power == 0x01))){
    1162:	90 91 28 01 	lds	r25, 0x0128
    1166:	81 30       	cpi	r24, 0x01	; 1
    1168:	29 f0       	breq	.+10     	; 0x1174 <camera_enable+0x12>
    116a:	88 23       	and	r24, r24
    116c:	11 f4       	brne	.+4      	; 0x1172 <camera_enable+0x10>
    116e:	91 30       	cpi	r25, 0x01	; 1
    1170:	19 f0       	breq	.+6      	; 0x1178 <camera_enable+0x16>
    1172:	08 95       	ret
    1174:	99 23       	and	r25, r25
    1176:	99 f4       	brne	.+38     	; 0x119e <camera_enable+0x3c>
		*CAMERA_EN_PORT |= (1<<CAMERA_EN_PIN);
    1178:	de 9a       	sbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    117a:	2f ef       	ldi	r18, 0xFF	; 255
    117c:	31 ee       	ldi	r19, 0xE1	; 225
    117e:	44 e0       	ldi	r20, 0x04	; 4
    1180:	21 50       	subi	r18, 0x01	; 1
    1182:	30 40       	sbci	r19, 0x00	; 0
    1184:	40 40       	sbci	r20, 0x00	; 0
    1186:	e1 f7       	brne	.-8      	; 0x1180 <camera_enable+0x1e>
    1188:	00 c0       	rjmp	.+0      	; 0x118a <camera_enable+0x28>
    118a:	00 00       	nop
		_delay_ms(100);
		*CAMERA_EN_PORT &= ~(1<<CAMERA_EN_PIN);
    118c:	de 98       	cbi	0x1b, 6	; 27
		power = (power + 1) % 2;
    118e:	89 2f       	mov	r24, r25
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	90 70       	andi	r25, 0x00	; 0
    1198:	80 93 28 01 	sts	0x0128, r24
    119c:	08 95       	ret
    119e:	08 95       	ret

000011a0 <touch_sensor_check>:
	}
}

uint8_t touch_sensor_check(){
	if((PINE & 0x04) > 0x00)
		return 0x01;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	0a 9b       	sbis	0x01, 2	; 1
    11a4:	80 e0       	ldi	r24, 0x00	; 0
	else
		return 0x00;
}
    11a6:	08 95       	ret

000011a8 <temperature_probe_sample>:

uint16_t temperature_probe_sample(uint8_t probe){
	if(probe == 0x00)
    11a8:	88 23       	and	r24, r24
    11aa:	39 f4       	brne	.+14     	; 0x11ba <temperature_probe_sample+0x12>
		ADMUX &= ~(1<<MUX0);
    11ac:	38 98       	cbi	0x07, 0	; 7
	else
		ADMUX |= (1<<MUX0);
	ADCSRA |= (1<<ADSC); //Starts conversion
    11ae:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA & (1<<ADSC));
    11b0:	36 99       	sbic	0x06, 6	; 6
    11b2:	fe cf       	rjmp	.-4      	; 0x11b0 <temperature_probe_sample+0x8>
	return ADC;
    11b4:	84 b1       	in	r24, 0x04	; 4
    11b6:	95 b1       	in	r25, 0x05	; 5
}
    11b8:	08 95       	ret

uint16_t temperature_probe_sample(uint8_t probe){
	if(probe == 0x00)
		ADMUX &= ~(1<<MUX0);
	else
		ADMUX |= (1<<MUX0);
    11ba:	38 9a       	sbi	0x07, 0	; 7
    11bc:	f8 cf       	rjmp	.-16     	; 0x11ae <temperature_probe_sample+0x6>

000011be <motor_calibration_enable>:
	while(ADCSRA & (1<<ADSC));
	return ADC;
}

/***********************************Motor Driver Functions***********************************/
void motor_calibration_enable(uint8_t motor, uint8_t flag){
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	00 d0       	rcall	.+0      	; 0x11c4 <motor_calibration_enable+0x6>
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <motor_calibration_enable+0x8>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <motor_calibration_enable+0xa>
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
	uint8_t motorCBID[6] = {MOT0_CALIB_INT, MOT1_CALIB_INT, MOT2_CALIB_INT, MOT3_CALIB_INT, MOT4_CALIB_INT};
    11cc:	fe 01       	movw	r30, r28
    11ce:	31 96       	adiw	r30, 0x01	; 1
    11d0:	96 e0       	ldi	r25, 0x06	; 6
    11d2:	df 01       	movw	r26, r30
    11d4:	1d 92       	st	X+, r1
    11d6:	9a 95       	dec	r25
    11d8:	e9 f7       	brne	.-6      	; 0x11d4 <motor_calibration_enable+0x16>
    11da:	91 e0       	ldi	r25, 0x01	; 1
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	9b 83       	std	Y+3, r25	; 0x03
    11e2:	93 e0       	ldi	r25, 0x03	; 3
    11e4:	9c 83       	std	Y+4, r25	; 0x04
    11e6:	94 e0       	ldi	r25, 0x04	; 4
    11e8:	9d 83       	std	Y+5, r25	; 0x05
	cli();
    11ea:	f8 94       	cli
	if(flag == 0x01)
		EIMSK |= (1<<motorCBID[motor]);
    11ec:	29 b7       	in	r18, 0x39	; 57
    11ee:	e8 0f       	add	r30, r24
    11f0:	f1 1d       	adc	r31, r1
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	00 80       	ld	r0, Z
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <motor_calibration_enable+0x40>
    11fa:	88 0f       	add	r24, r24
    11fc:	99 1f       	adc	r25, r25
    11fe:	0a 94       	dec	r0
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <motor_calibration_enable+0x3c>

/***********************************Motor Driver Functions***********************************/
void motor_calibration_enable(uint8_t motor, uint8_t flag){
	uint8_t motorCBID[6] = {MOT0_CALIB_INT, MOT1_CALIB_INT, MOT2_CALIB_INT, MOT3_CALIB_INT, MOT4_CALIB_INT};
	cli();
	if(flag == 0x01)
    1202:	61 30       	cpi	r22, 0x01	; 1
    1204:	71 f0       	breq	.+28     	; 0x1222 <motor_calibration_enable+0x64>
		EIMSK |= (1<<motorCBID[motor]);
	else
		EIMSK &= (1<<motorCBID[motor]);
    1206:	28 23       	and	r18, r24
    1208:	29 bf       	out	0x39, r18	; 57
	calibration_flg = 0x00;
    120a:	10 92 27 01 	sts	0x0127, r1
	sei();
    120e:	78 94       	sei
}
    1210:	26 96       	adiw	r28, 0x06	; 6
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	08 95       	ret
/***********************************Motor Driver Functions***********************************/
void motor_calibration_enable(uint8_t motor, uint8_t flag){
	uint8_t motorCBID[6] = {MOT0_CALIB_INT, MOT1_CALIB_INT, MOT2_CALIB_INT, MOT3_CALIB_INT, MOT4_CALIB_INT};
	cli();
	if(flag == 0x01)
		EIMSK |= (1<<motorCBID[motor]);
    1222:	28 2b       	or	r18, r24
    1224:	29 bf       	out	0x39, r18	; 57
    1226:	f1 cf       	rjmp	.-30     	; 0x120a <motor_calibration_enable+0x4c>

00001228 <motor_pwr>:
		EIMSK &= (1<<motorCBID[motor]);
	calibration_flg = 0x00;
	sei();
}

void motor_pwr(uint8_t motor, uint8_t flag){
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	00 d0       	rcall	.+0      	; 0x122e <motor_pwr+0x6>
    122e:	00 d0       	rcall	.+0      	; 0x1230 <motor_pwr+0x8>
    1230:	00 d0       	rcall	.+0      	; 0x1232 <motor_pwr+0xa>
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
	uint8_t motorENID[6] = {MOT0_EN_PIN, MOT1_EN_PIN, MOT2_EN_PIN,
    1236:	de 01       	movw	r26, r28
    1238:	11 96       	adiw	r26, 0x01	; 1
    123a:	e5 e0       	ldi	r30, 0x05	; 5
    123c:	f1 e0       	ldi	r31, 0x01	; 1
    123e:	96 e0       	ldi	r25, 0x06	; 6
    1240:	01 90       	ld	r0, Z+
    1242:	0d 92       	st	X+, r0
    1244:	91 50       	subi	r25, 0x01	; 1
    1246:	e1 f7       	brne	.-8      	; 0x1240 <motor_pwr+0x18>
					   MOT3_EN_PIN, MOT4_EN_PIN, MOT5_EN_PIN};
	if(flag == 0x01)
		*MOTOR_EN_PORT &= ~(1<<motorENID[motor]);
    1248:	20 91 62 00 	lds	r18, 0x0062
    124c:	e1 e0       	ldi	r30, 0x01	; 1
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	ec 0f       	add	r30, r28
    1252:	fd 1f       	adc	r31, r29
    1254:	e8 0f       	add	r30, r24
    1256:	f1 1d       	adc	r31, r1
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	00 80       	ld	r0, Z
    125e:	02 c0       	rjmp	.+4      	; 0x1264 <motor_pwr+0x3c>
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	0a 94       	dec	r0
    1266:	e2 f7       	brpl	.-8      	; 0x1260 <motor_pwr+0x38>
}

void motor_pwr(uint8_t motor, uint8_t flag){
	uint8_t motorENID[6] = {MOT0_EN_PIN, MOT1_EN_PIN, MOT2_EN_PIN,
					   MOT3_EN_PIN, MOT4_EN_PIN, MOT5_EN_PIN};
	if(flag == 0x01)
    1268:	61 30       	cpi	r22, 0x01	; 1
    126a:	61 f0       	breq	.+24     	; 0x1284 <motor_pwr+0x5c>
		*MOTOR_EN_PORT &= ~(1<<motorENID[motor]);
	else
		*MOTOR_EN_PORT |= (1<<motorENID[motor]);
    126c:	28 2b       	or	r18, r24
    126e:	20 93 62 00 	sts	0x0062, r18
}
    1272:	26 96       	adiw	r28, 0x06	; 6
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	de bf       	out	0x3e, r29	; 62
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	cd bf       	out	0x3d, r28	; 61
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret

void motor_pwr(uint8_t motor, uint8_t flag){
	uint8_t motorENID[6] = {MOT0_EN_PIN, MOT1_EN_PIN, MOT2_EN_PIN,
					   MOT3_EN_PIN, MOT4_EN_PIN, MOT5_EN_PIN};
	if(flag == 0x01)
		*MOTOR_EN_PORT &= ~(1<<motorENID[motor]);
    1284:	80 95       	com	r24
    1286:	82 23       	and	r24, r18
    1288:	80 93 62 00 	sts	0x0062, r24
    128c:	f2 cf       	rjmp	.-28     	; 0x1272 <motor_pwr+0x4a>

0000128e <motor_dir>:
	else
		*MOTOR_EN_PORT |= (1<<motorENID[motor]);
}

void motor_dir(uint8_t motor, uint8_t dir){
    128e:	cf 93       	push	r28
    1290:	df 93       	push	r29
    1292:	00 d0       	rcall	.+0      	; 0x1294 <motor_dir+0x6>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <motor_dir+0x8>
    1296:	00 d0       	rcall	.+0      	; 0x1298 <motor_dir+0xa>
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	uint8_t motorDIRID[6] = {MOT0_DIR_PIN, MOT1_DIR_PIN, MOT2_DIR_PIN,
    129c:	de 01       	movw	r26, r28
    129e:	11 96       	adiw	r26, 0x01	; 1
    12a0:	eb e0       	ldi	r30, 0x0B	; 11
    12a2:	f1 e0       	ldi	r31, 0x01	; 1
    12a4:	96 e0       	ldi	r25, 0x06	; 6
    12a6:	01 90       	ld	r0, Z+
    12a8:	0d 92       	st	X+, r0
    12aa:	91 50       	subi	r25, 0x01	; 1
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <motor_dir+0x18>
					   MOT3_DIR_PIN, MOT4_DIR_PIN, MOT5_DIR_PIN};
	if(dir == 0x01)
		*MOTOR_DIR_PORT |= (1<<motorDIRID[motor]);
    12ae:	2b b3       	in	r18, 0x1b	; 27
    12b0:	e1 e0       	ldi	r30, 0x01	; 1
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	ec 0f       	add	r30, r28
    12b6:	fd 1f       	adc	r31, r29
    12b8:	e8 0f       	add	r30, r24
    12ba:	f1 1d       	adc	r31, r1
    12bc:	81 e0       	ldi	r24, 0x01	; 1
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	00 80       	ld	r0, Z
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <motor_dir+0x3a>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	0a 94       	dec	r0
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <motor_dir+0x36>
}

void motor_dir(uint8_t motor, uint8_t dir){
	uint8_t motorDIRID[6] = {MOT0_DIR_PIN, MOT1_DIR_PIN, MOT2_DIR_PIN,
					   MOT3_DIR_PIN, MOT4_DIR_PIN, MOT5_DIR_PIN};
	if(dir == 0x01)
    12cc:	61 30       	cpi	r22, 0x01	; 1
    12ce:	61 f0       	breq	.+24     	; 0x12e8 <motor_dir+0x5a>
		*MOTOR_DIR_PORT |= (1<<motorDIRID[motor]);
	else
		*MOTOR_DIR_PORT &= ~(1<<motorDIRID[motor]);
    12d0:	80 95       	com	r24
    12d2:	82 23       	and	r24, r18
    12d4:	8b bb       	out	0x1b, r24	; 27
}
    12d6:	26 96       	adiw	r28, 0x06	; 6
    12d8:	0f b6       	in	r0, 0x3f	; 63
    12da:	f8 94       	cli
    12dc:	de bf       	out	0x3e, r29	; 62
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	08 95       	ret

void motor_dir(uint8_t motor, uint8_t dir){
	uint8_t motorDIRID[6] = {MOT0_DIR_PIN, MOT1_DIR_PIN, MOT2_DIR_PIN,
					   MOT3_DIR_PIN, MOT4_DIR_PIN, MOT5_DIR_PIN};
	if(dir == 0x01)
		*MOTOR_DIR_PORT |= (1<<motorDIRID[motor]);
    12e8:	28 2b       	or	r18, r24
    12ea:	2b bb       	out	0x1b, r18	; 27
    12ec:	f4 cf       	rjmp	.-24     	; 0x12d6 <motor_dir+0x48>

000012ee <motor_step>:
	else
		*MOTOR_DIR_PORT &= ~(1<<motorDIRID[motor]);
}

void motor_step(uint8_t motor, uint16_t steps, uint16_t speed){
    12ee:	1f 93       	push	r17
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	00 d0       	rcall	.+0      	; 0x12f6 <motor_step+0x8>
    12f6:	00 d0       	rcall	.+0      	; 0x12f8 <motor_step+0xa>
    12f8:	00 d0       	rcall	.+0      	; 0x12fa <motor_step+0xc>
    12fa:	cd b7       	in	r28, 0x3d	; 61
    12fc:	de b7       	in	r29, 0x3e	; 62
    12fe:	18 2f       	mov	r17, r24
	uint16_t j,k;
	uint8_t motorSTEPID[6] = {MOT0_STEP_PIN, MOT1_STEP_PIN, MOT2_STEP_PIN, MOT3_STEP_PIN, MOT4_STEP_PIN, MOT5_STEP_PIN};
    1300:	de 01       	movw	r26, r28
    1302:	11 96       	adiw	r26, 0x01	; 1
    1304:	eb e0       	ldi	r30, 0x0B	; 11
    1306:	f1 e0       	ldi	r31, 0x01	; 1
    1308:	86 e0       	ldi	r24, 0x06	; 6
    130a:	01 90       	ld	r0, Z+
    130c:	0d 92       	st	X+, r0
    130e:	81 50       	subi	r24, 0x01	; 1
    1310:	e1 f7       	brne	.-8      	; 0x130a <motor_step+0x1c>
	speed = -99*(speed)+10000;
    1312:	8d e9       	ldi	r24, 0x9D	; 157
    1314:	9f ef       	ldi	r25, 0xFF	; 255
    1316:	48 9f       	mul	r20, r24
    1318:	90 01       	movw	r18, r0
    131a:	49 9f       	mul	r20, r25
    131c:	30 0d       	add	r19, r0
    131e:	58 9f       	mul	r21, r24
    1320:	30 0d       	add	r19, r0
    1322:	11 24       	eor	r1, r1
    1324:	20 5f       	subi	r18, 0xF0	; 240
    1326:	38 4d       	sbci	r19, 0xD8	; 216
	steps = 2*steps;
    1328:	db 01       	movw	r26, r22
    132a:	aa 0f       	add	r26, r26
    132c:	bb 1f       	adc	r27, r27
	for (j=0;j<steps;j++){
    132e:	10 97       	sbiw	r26, 0x00	; 0
    1330:	51 f1       	breq	.+84     	; 0x1386 <motor_step+0x98>
		if(calibration_flg == 0x00){
    1332:	80 91 27 01 	lds	r24, 0x0127
    1336:	88 23       	and	r24, r24
    1338:	81 f5       	brne	.+96     	; 0x139a <motor_step+0xac>
void motor_step(uint8_t motor, uint16_t steps, uint16_t speed){
	uint16_t j,k;
	uint8_t motorSTEPID[6] = {MOT0_STEP_PIN, MOT1_STEP_PIN, MOT2_STEP_PIN, MOT3_STEP_PIN, MOT4_STEP_PIN, MOT5_STEP_PIN};
	speed = -99*(speed)+10000;
	steps = 2*steps;
	for (j=0;j<steps;j++){
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	50 e0       	ldi	r21, 0x00	; 0
		if(calibration_flg == 0x00){
			*MOTOR_STEP_PORT ^= (1<<motorSTEPID[motor]);
    133e:	e1 e0       	ldi	r30, 0x01	; 1
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	ec 0f       	add	r30, r28
    1344:	fd 1f       	adc	r31, r29
    1346:	e1 0f       	add	r30, r17
    1348:	f1 1d       	adc	r31, r1
    134a:	61 e0       	ldi	r22, 0x01	; 1
    134c:	70 e0       	ldi	r23, 0x00	; 0
    134e:	15 b3       	in	r17, 0x15	; 21
    1350:	cb 01       	movw	r24, r22
    1352:	00 80       	ld	r0, Z
    1354:	02 c0       	rjmp	.+4      	; 0x135a <motor_step+0x6c>
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	0a 94       	dec	r0
    135c:	e2 f7       	brpl	.-8      	; 0x1356 <motor_step+0x68>
    135e:	18 27       	eor	r17, r24
    1360:	15 bb       	out	0x15, r17	; 21
			for (k=0;k<speed;k++)
    1362:	21 15       	cp	r18, r1
    1364:	31 05       	cpc	r19, r1
    1366:	51 f0       	breq	.+20     	; 0x137c <motor_step+0x8e>
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    136c:	15 e0       	ldi	r17, 0x05	; 5
    136e:	1a 95       	dec	r17
    1370:	f1 f7       	brne	.-4      	; 0x136e <motor_step+0x80>
    1372:	00 00       	nop
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	82 17       	cp	r24, r18
    1378:	93 07       	cpc	r25, r19
    137a:	c0 f3       	brcs	.-16     	; 0x136c <motor_step+0x7e>
void motor_step(uint8_t motor, uint16_t steps, uint16_t speed){
	uint16_t j,k;
	uint8_t motorSTEPID[6] = {MOT0_STEP_PIN, MOT1_STEP_PIN, MOT2_STEP_PIN, MOT3_STEP_PIN, MOT4_STEP_PIN, MOT5_STEP_PIN};
	speed = -99*(speed)+10000;
	steps = 2*steps;
	for (j=0;j<steps;j++){
    137c:	4f 5f       	subi	r20, 0xFF	; 255
    137e:	5f 4f       	sbci	r21, 0xFF	; 255
    1380:	4a 17       	cp	r20, r26
    1382:	5b 07       	cpc	r21, r27
    1384:	21 f7       	brne	.-56     	; 0x134e <motor_step+0x60>
		}else{
			*MOTOR_STEP_PORT &= (1<<motorSTEPID[motor]);
			break;
		}
	}
}
    1386:	26 96       	adiw	r28, 0x06	; 6
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	08 95       	ret
		if(calibration_flg == 0x00){
			*MOTOR_STEP_PORT ^= (1<<motorSTEPID[motor]);
			for (k=0;k<speed;k++)
				_delay_us(1);
		}else{
			*MOTOR_STEP_PORT &= (1<<motorSTEPID[motor]);
    139a:	25 b3       	in	r18, 0x15	; 21
    139c:	e1 e0       	ldi	r30, 0x01	; 1
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	ec 0f       	add	r30, r28
    13a2:	fd 1f       	adc	r31, r29
    13a4:	e1 0f       	add	r30, r17
    13a6:	f1 1d       	adc	r31, r1
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	00 80       	ld	r0, Z
    13ae:	02 c0       	rjmp	.+4      	; 0x13b4 <motor_step+0xc6>
    13b0:	88 0f       	add	r24, r24
    13b2:	99 1f       	adc	r25, r25
    13b4:	0a 94       	dec	r0
    13b6:	e2 f7       	brpl	.-8      	; 0x13b0 <motor_step+0xc2>
    13b8:	28 23       	and	r18, r24
    13ba:	25 bb       	out	0x15, r18	; 21
			break;
    13bc:	e4 cf       	rjmp	.-56     	; 0x1386 <motor_step+0x98>

000013be <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29
    13c2:	ec 01       	movw	r28, r24
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
    13c4:	a8 81       	ld	r26, Y
    13c6:	b9 81       	ldd	r27, Y+1	; 0x01
    13c8:	10 97       	sbiw	r26, 0x00	; 0
    13ca:	11 f1       	breq	.+68     	; 0x1410 <get_ldnumber+0x52>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    13cc:	2c 91       	ld	r18, X
    13ce:	21 32       	cpi	r18, 0x21	; 33
    13d0:	70 f0       	brcs	.+28     	; 0x13ee <get_ldnumber+0x30>
    13d2:	2a 33       	cpi	r18, 0x3A	; 58
    13d4:	e9 f0       	breq	.+58     	; 0x1410 <get_ldnumber+0x52>
/*-----------------------------------------------------------------------*/
/* Get logical drive number from path name                               */
/*-----------------------------------------------------------------------*/

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
    13d6:	ad 01       	movw	r20, r26
    13d8:	4f 5f       	subi	r20, 0xFF	; 255
    13da:	5f 4f       	sbci	r21, 0xFF	; 255
    13dc:	ca 01       	movw	r24, r20
    13de:	03 c0       	rjmp	.+6      	; 0x13e6 <get_ldnumber+0x28>
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
    13e0:	3a 33       	cpi	r19, 0x3A	; 58
    13e2:	59 f0       	breq	.+22     	; 0x13fa <get_ldnumber+0x3c>
    13e4:	cf 01       	movw	r24, r30
    13e6:	fc 01       	movw	r30, r24
    13e8:	31 91       	ld	r19, Z+
    13ea:	31 32       	cpi	r19, 0x21	; 33
    13ec:	c8 f7       	brcc	.-14     	; 0x13e0 <get_ldnumber+0x22>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
    13ee:	20 e0       	ldi	r18, 0x00	; 0
    13f0:	30 e0       	ldi	r19, 0x00	; 0
#endif
	}
	return vol;
}
    13f2:	c9 01       	movw	r24, r18
    13f4:	df 91       	pop	r29
    13f6:	cf 91       	pop	r28
    13f8:	08 95       	ret

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
    13fa:	33 27       	eor	r19, r19
    13fc:	27 fd       	sbrc	r18, 7
    13fe:	30 95       	com	r19
    1400:	20 53       	subi	r18, 0x30	; 48
    1402:	30 40       	sbci	r19, 0x00	; 0
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
    1404:	2a 30       	cpi	r18, 0x0A	; 10
    1406:	31 05       	cpc	r19, r1
    1408:	18 f4       	brcc	.+6      	; 0x1410 <get_ldnumber+0x52>
    140a:	84 17       	cp	r24, r20
    140c:	95 07       	cpc	r25, r21
    140e:	31 f0       	breq	.+12     	; 0x141c <get_ldnumber+0x5e>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
    1410:	2f ef       	ldi	r18, 0xFF	; 255
    1412:	3f ef       	ldi	r19, 0xFF	; 255
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
    1414:	c9 01       	movw	r24, r18
    1416:	df 91       	pop	r29
    1418:	cf 91       	pop	r28
    141a:	08 95       	ret
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
    141c:	21 15       	cp	r18, r1
    141e:	31 05       	cpc	r19, r1
    1420:	b9 f7       	brne	.-18     	; 0x1410 <get_ldnumber+0x52>
					vol = (int)i;
					*path = ++tt;
    1422:	12 96       	adiw	r26, 0x02	; 2
    1424:	b9 83       	std	Y+1, r27	; 0x01
    1426:	a8 83       	st	Y, r26
    1428:	e4 cf       	rjmp	.-56     	; 0x13f2 <get_ldnumber+0x34>

0000142a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	void* dfp,		/* Pointer to the FIL/DIR object to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	00 d0       	rcall	.+0      	; 0x1434 <validate+0xa>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	8c 01       	movw	r16, r24
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
    143a:	00 97       	sbiw	r24, 0x00	; 0
    143c:	49 f0       	breq	.+18     	; 0x1450 <validate+0x26>
    143e:	dc 01       	movw	r26, r24
    1440:	ed 91       	ld	r30, X+
    1442:	fc 91       	ld	r31, X
    1444:	11 97       	sbiw	r26, 0x01	; 1
    1446:	30 97       	sbiw	r30, 0x00	; 0
    1448:	19 f0       	breq	.+6      	; 0x1450 <validate+0x26>
    144a:	80 81       	ld	r24, Z
    144c:	88 23       	and	r24, r24
    144e:	61 f4       	brne	.+24     	; 0x1468 <validate+0x3e>
		*fs = 0;				/* The object is invalid */
    1450:	fb 01       	movw	r30, r22
    1452:	11 82       	std	Z+1, r1	; 0x01
    1454:	10 82       	st	Z, r1
		res = FR_INVALID_OBJECT;
    1456:	89 e0       	ldi	r24, 0x09	; 9
    1458:	90 e0       	ldi	r25, 0x00	; 0
		*fs = obj->fs;			/* Owner file sytem object */
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
	}
	return res;
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	df 91       	pop	r29
    1460:	cf 91       	pop	r28
    1462:	1f 91       	pop	r17
    1464:	0f 91       	pop	r16
    1466:	08 95       	ret
{
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
    1468:	85 81       	ldd	r24, Z+5	; 0x05
    146a:	96 81       	ldd	r25, Z+6	; 0x06
    146c:	12 96       	adiw	r26, 0x02	; 2
    146e:	2d 91       	ld	r18, X+
    1470:	3c 91       	ld	r19, X
    1472:	13 97       	sbiw	r26, 0x03	; 3
    1474:	82 17       	cp	r24, r18
    1476:	93 07       	cpc	r25, r19
    1478:	59 f7       	brne	.-42     	; 0x1450 <validate+0x26>
    147a:	81 81       	ldd	r24, Z+1	; 0x01
    147c:	69 83       	std	Y+1, r22	; 0x01
    147e:	7a 83       	std	Y+2, r23	; 0x02
    1480:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <disk_status>
    1484:	69 81       	ldd	r22, Y+1	; 0x01
    1486:	7a 81       	ldd	r23, Y+2	; 0x02
    1488:	80 fd       	sbrc	r24, 0
    148a:	e2 cf       	rjmp	.-60     	; 0x1450 <validate+0x26>
		*fs = 0;				/* The object is invalid */
		res = FR_INVALID_OBJECT;
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
    148c:	d8 01       	movw	r26, r16
    148e:	8d 91       	ld	r24, X+
    1490:	9c 91       	ld	r25, X
    1492:	11 97       	sbiw	r26, 0x01	; 1
    1494:	fb 01       	movw	r30, r22
    1496:	91 83       	std	Z+1, r25	; 0x01
    1498:	80 83       	st	Z, r24
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
    149a:	80 e0       	ldi	r24, 0x00	; 0
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	dd cf       	rjmp	.-70     	; 0x145a <validate+0x30>

000014a0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    14a0:	fc 01       	movw	r30, r24
    14a2:	db 01       	movw	r26, r22
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
    14a4:	41 15       	cp	r20, r1
    14a6:	51 05       	cpc	r21, r1
    14a8:	29 f0       	breq	.+10     	; 0x14b4 <mem_cpy+0x14>
		do *d++ = *s++; while (--cnt);
    14aa:	8d 91       	ld	r24, X+
    14ac:	81 93       	st	Z+, r24
    14ae:	41 50       	subi	r20, 0x01	; 1
    14b0:	50 40       	sbci	r21, 0x00	; 0
    14b2:	d9 f7       	brne	.-10     	; 0x14aa <mem_cpy+0xa>
    14b4:	08 95       	ret

000014b6 <get_fileinfo.isra.3.part.4>:
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/

static
void get_fileinfo (		/* No return code */
    14b6:	cf 93       	push	r28
    14b8:	df 93       	push	r29
    14ba:	dc 01       	movw	r26, r24
    14bc:	eb 01       	movw	r28, r22
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
	i = j = 0;
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
    14c6:	5e e2       	ldi	r21, 0x2E	; 46
    14c8:	0c c0       	rjmp	.+24     	; 0x14e2 <get_fileinfo.isra.3.part.4+0x2c>
    14ca:	89 30       	cpi	r24, 0x09	; 9
    14cc:	91 05       	cpc	r25, r1
    14ce:	c1 f0       	breq	.+48     	; 0x1500 <get_fileinfo.isra.3.part.4+0x4a>
		fno->fname[j++] = c;
    14d0:	fe 01       	movw	r30, r28
    14d2:	e2 0f       	add	r30, r18
    14d4:	f3 1f       	adc	r31, r19
    14d6:	41 87       	std	Z+9, r20	; 0x09
    14d8:	2f 5f       	subi	r18, 0xFF	; 255
    14da:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
	while (i < 11) {		/* Copy name body and extension */
    14dc:	8b 30       	cpi	r24, 0x0B	; 11
    14de:	91 05       	cpc	r25, r1
    14e0:	b1 f0       	breq	.+44     	; 0x150e <get_fileinfo.isra.3.part.4+0x58>
		c = (TCHAR)dp->dir[i++];
    14e2:	ed 91       	ld	r30, X+
    14e4:	fc 91       	ld	r31, X
    14e6:	11 97       	sbiw	r26, 0x01	; 1
    14e8:	e8 0f       	add	r30, r24
    14ea:	f9 1f       	adc	r31, r25
    14ec:	40 81       	ld	r20, Z
    14ee:	01 96       	adiw	r24, 0x01	; 1
		if (c == ' ') continue;				/* Skip padding spaces */
    14f0:	40 32       	cpi	r20, 0x20	; 32
    14f2:	a1 f3       	breq	.-24     	; 0x14dc <get_fileinfo.isra.3.part.4+0x26>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
    14f4:	45 30       	cpi	r20, 0x05	; 5
    14f6:	49 f7       	brne	.-46     	; 0x14ca <get_fileinfo.isra.3.part.4+0x14>
    14f8:	45 ee       	ldi	r20, 0xE5	; 229
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
    14fa:	89 30       	cpi	r24, 0x09	; 9
    14fc:	91 05       	cpc	r25, r1
    14fe:	41 f7       	brne	.-48     	; 0x14d0 <get_fileinfo.isra.3.part.4+0x1a>
    1500:	fe 01       	movw	r30, r28
    1502:	e2 0f       	add	r30, r18
    1504:	f3 1f       	adc	r31, r19
    1506:	51 87       	std	Z+9, r21	; 0x09
    1508:	2f 5f       	subi	r18, 0xFF	; 255
    150a:	3f 4f       	sbci	r19, 0xFF	; 255
    150c:	e1 cf       	rjmp	.-62     	; 0x14d0 <get_fileinfo.isra.3.part.4+0x1a>
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
    150e:	2c 0f       	add	r18, r28
    1510:	3d 1f       	adc	r19, r29
    1512:	f9 01       	movw	r30, r18
    1514:	11 86       	std	Z+9, r1	; 0x09
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
    1516:	ed 91       	ld	r30, X+
    1518:	fc 91       	ld	r31, X
    151a:	11 97       	sbiw	r26, 0x01	; 1
    151c:	83 85       	ldd	r24, Z+11	; 0x0b
    151e:	88 87       	std	Y+8, r24	; 0x08
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
    1520:	ed 91       	ld	r30, X+
    1522:	fc 91       	ld	r31, X
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    1524:	87 8d       	ldd	r24, Z+31	; 0x1f
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	a0 e0       	ldi	r26, 0x00	; 0
    152a:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    152c:	ba 2f       	mov	r27, r26
    152e:	a9 2f       	mov	r26, r25
    1530:	98 2f       	mov	r25, r24
    1532:	88 27       	eor	r24, r24
    1534:	46 8d       	ldd	r20, Z+30	; 0x1e
    1536:	50 e0       	ldi	r21, 0x00	; 0
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	84 2b       	or	r24, r20
    153e:	95 2b       	or	r25, r21
    1540:	a6 2b       	or	r26, r22
    1542:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    1544:	ba 2f       	mov	r27, r26
    1546:	a9 2f       	mov	r26, r25
    1548:	98 2f       	mov	r25, r24
    154a:	88 27       	eor	r24, r24
    154c:	45 8d       	ldd	r20, Z+29	; 0x1d
    154e:	50 e0       	ldi	r21, 0x00	; 0
    1550:	60 e0       	ldi	r22, 0x00	; 0
    1552:	70 e0       	ldi	r23, 0x00	; 0
    1554:	84 2b       	or	r24, r20
    1556:	95 2b       	or	r25, r21
    1558:	a6 2b       	or	r26, r22
    155a:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    155c:	ba 2f       	mov	r27, r26
    155e:	a9 2f       	mov	r26, r25
    1560:	98 2f       	mov	r25, r24
    1562:	88 27       	eor	r24, r24
    1564:	44 8d       	ldd	r20, Z+28	; 0x1c
    1566:	50 e0       	ldi	r21, 0x00	; 0
    1568:	60 e0       	ldi	r22, 0x00	; 0
    156a:	70 e0       	ldi	r23, 0x00	; 0
    156c:	84 2b       	or	r24, r20
    156e:	95 2b       	or	r25, r21
    1570:	a6 2b       	or	r26, r22
    1572:	b7 2b       	or	r27, r23
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
    1574:	88 83       	st	Y, r24
    1576:	99 83       	std	Y+1, r25	; 0x01
    1578:	aa 83       	std	Y+2, r26	; 0x02
    157a:	bb 83       	std	Y+3, r27	; 0x03
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    157c:	81 8d       	ldd	r24, Z+25	; 0x19
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 e0       	ldi	r26, 0x00	; 0
    1582:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    1584:	ba 2f       	mov	r27, r26
    1586:	a9 2f       	mov	r26, r25
    1588:	98 2f       	mov	r25, r24
    158a:	88 27       	eor	r24, r24
    158c:	40 8d       	ldd	r20, Z+24	; 0x18
    158e:	50 e0       	ldi	r21, 0x00	; 0
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	84 2b       	or	r24, r20
    1596:	95 2b       	or	r25, r21
    1598:	a6 2b       	or	r26, r22
    159a:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    159c:	ba 2f       	mov	r27, r26
    159e:	a9 2f       	mov	r26, r25
    15a0:	98 2f       	mov	r25, r24
    15a2:	88 27       	eor	r24, r24
    15a4:	47 89       	ldd	r20, Z+23	; 0x17
    15a6:	50 e0       	ldi	r21, 0x00	; 0
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	70 e0       	ldi	r23, 0x00	; 0
    15ac:	84 2b       	or	r24, r20
    15ae:	95 2b       	or	r25, r21
    15b0:	a6 2b       	or	r26, r22
    15b2:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    15b4:	ba 2f       	mov	r27, r26
    15b6:	a9 2f       	mov	r26, r25
    15b8:	98 2f       	mov	r25, r24
    15ba:	88 27       	eor	r24, r24
    15bc:	46 89       	ldd	r20, Z+22	; 0x16
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	84 2b       	or	r24, r20
    15c6:	95 2b       	or	r25, r21
    15c8:	a6 2b       	or	r26, r22
    15ca:	b7 2b       	or	r27, r23
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
    15cc:	9f 83       	std	Y+7, r25	; 0x07
    15ce:	8e 83       	std	Y+6, r24	; 0x06
    15d0:	bd 83       	std	Y+5, r27	; 0x05
    15d2:	ac 83       	std	Y+4, r26	; 0x04
}
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	08 95       	ret

000015da <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
    15da:	8f 92       	push	r8
    15dc:	9f 92       	push	r9
    15de:	af 92       	push	r10
    15e0:	bf 92       	push	r11
    15e2:	cf 92       	push	r12
    15e4:	df 92       	push	r13
    15e6:	ef 92       	push	r14
    15e8:	ff 92       	push	r15
    15ea:	0f 93       	push	r16
    15ec:	1f 93       	push	r17
    15ee:	cf 93       	push	r28
    15f0:	df 93       	push	r29
    15f2:	ec 01       	movw	r28, r24
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	88 23       	and	r24, r24
    15f8:	79 f4       	brne	.+30     	; 0x1618 <sync_window+0x3e>
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
		}
	}
	return res;
}
    15fe:	df 91       	pop	r29
    1600:	cf 91       	pop	r28
    1602:	1f 91       	pop	r17
    1604:	0f 91       	pop	r16
    1606:	ff 90       	pop	r15
    1608:	ef 90       	pop	r14
    160a:	df 90       	pop	r13
    160c:	cf 90       	pop	r12
    160e:	bf 90       	pop	r11
    1610:	af 90       	pop	r10
    1612:	9f 90       	pop	r9
    1614:	8f 90       	pop	r8
    1616:	08 95       	ret
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
    1618:	cb a4       	lds	r28, 0xab
    161a:	dc a4       	lds	r29, 0xac
    161c:	ed a4       	lds	r30, 0xad
    161e:	fe a4       	lds	r31, 0xae
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
    1620:	8f e2       	ldi	r24, 0x2F	; 47
    1622:	88 2e       	mov	r8, r24
    1624:	91 2c       	mov	r9, r1
    1626:	8c 0e       	add	r8, r28
    1628:	9d 1e       	adc	r9, r29
    162a:	89 81       	ldd	r24, Y+1	; 0x01
    162c:	b4 01       	movw	r22, r8
    162e:	a7 01       	movw	r20, r14
    1630:	96 01       	movw	r18, r12
    1632:	01 e0       	ldi	r16, 0x01	; 1
    1634:	10 e0       	ldi	r17, 0x00	; 0
    1636:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <disk_write>
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	99 f5       	brne	.+102    	; 0x16a4 <sync_window+0xca>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
    163e:	1b 82       	std	Y+3, r1	; 0x03
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
    1640:	8f 89       	ldd	r24, Y+23	; 0x17
    1642:	98 8d       	ldd	r25, Y+24	; 0x18
    1644:	a9 8d       	ldd	r26, Y+25	; 0x19
    1646:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1648:	4f 8d       	ldd	r20, Y+31	; 0x1f
    164a:	58 a1       	lds	r21, 0x48
    164c:	69 a1       	lds	r22, 0x49
    164e:	7a a1       	lds	r23, 0x4a
    1650:	97 01       	movw	r18, r14
    1652:	86 01       	movw	r16, r12
    1654:	04 1b       	sub	r16, r20
    1656:	15 0b       	sbc	r17, r21
    1658:	26 0b       	sbc	r18, r22
    165a:	37 0b       	sbc	r19, r23
    165c:	08 17       	cp	r16, r24
    165e:	19 07       	cpc	r17, r25
    1660:	2a 07       	cpc	r18, r26
    1662:	3b 07       	cpc	r19, r27
    1664:	50 f6       	brcc	.-108    	; 0x15fa <sync_window+0x20>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    1666:	aa 80       	ldd	r10, Y+2	; 0x02
    1668:	bb 24       	eor	r11, r11
    166a:	12 e0       	ldi	r17, 0x02	; 2
    166c:	a1 16       	cp	r10, r17
    166e:	b1 04       	cpc	r11, r1
    1670:	28 f4       	brcc	.+10     	; 0x167c <sync_window+0xa2>
    1672:	c3 cf       	rjmp	.-122    	; 0x15fa <sync_window+0x20>
    1674:	8f 89       	ldd	r24, Y+23	; 0x17
    1676:	98 8d       	ldd	r25, Y+24	; 0x18
    1678:	a9 8d       	ldd	r26, Y+25	; 0x19
    167a:	ba 8d       	ldd	r27, Y+26	; 0x1a
					wsect += fs->fsize;
    167c:	c8 0e       	add	r12, r24
    167e:	d9 1e       	adc	r13, r25
    1680:	ea 1e       	adc	r14, r26
    1682:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	b4 01       	movw	r22, r8
    1688:	a7 01       	movw	r20, r14
    168a:	96 01       	movw	r18, r12
    168c:	01 e0       	ldi	r16, 0x01	; 1
    168e:	10 e0       	ldi	r17, 0x00	; 0
    1690:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <disk_write>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
    1694:	08 94       	sec
    1696:	a1 08       	sbc	r10, r1
    1698:	b1 08       	sbc	r11, r1
    169a:	21 e0       	ldi	r18, 0x01	; 1
    169c:	a2 16       	cp	r10, r18
    169e:	b1 04       	cpc	r11, r1
    16a0:	49 f7       	brne	.-46     	; 0x1674 <sync_window+0x9a>
    16a2:	ab cf       	rjmp	.-170    	; 0x15fa <sync_window+0x20>


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	aa cf       	rjmp	.-172    	; 0x15fe <sync_window+0x24>

000016aa <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
    16aa:	0f 93       	push	r16
    16ac:	1f 93       	push	r17
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	ec 01       	movw	r28, r24
	FRESULT res;


	res = sync_window(fs);
    16b4:	0e 94 ed 0a 	call	0x15da	; 0x15da <sync_window>
    16b8:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	69 f4       	brne	.+26     	; 0x16d8 <sync_fs+0x2e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    16be:	88 81       	ld	r24, Y
    16c0:	83 30       	cpi	r24, 0x03	; 3
    16c2:	c1 f0       	breq	.+48     	; 0x16f4 <sync_fs+0x4a>
			fs->winsect = fs->volbase + 1;
			disk_write(fs->drv, fs->win, fs->winsect, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    16c4:	89 81       	ldd	r24, Y+1	; 0x01
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	40 e0       	ldi	r20, 0x00	; 0
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	0e 94 87 2e 	call	0x5d0e	; 0x5d0e <disk_ioctl>
    16d0:	21 e0       	ldi	r18, 0x01	; 1
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	00 97       	sbiw	r24, 0x00	; 0
    16d6:	31 f0       	breq	.+12     	; 0x16e4 <sync_fs+0x3a>
	}

	return res;
}
    16d8:	c9 01       	movw	r24, r18
    16da:	df 91       	pop	r29
    16dc:	cf 91       	pop	r28
    16de:	1f 91       	pop	r17
    16e0:	0f 91       	pop	r16
    16e2:	08 95       	ret
			fs->winsect = fs->volbase + 1;
			disk_write(fs->drv, fs->win, fs->winsect, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    16e8:	c9 01       	movw	r24, r18
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	08 95       	ret


	res = sync_window(fs);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
    16f4:	8c 81       	ldd	r24, Y+4	; 0x04
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	29 f7       	brne	.-54     	; 0x16c4 <sync_fs+0x1a>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
    16fa:	be 01       	movw	r22, r28
    16fc:	61 5d       	subi	r22, 0xD1	; 209
    16fe:	7f 4f       	sbci	r23, 0xFF	; 255
/*-----------------------------------------------------------------------*/
/* Synchronize file system and strage device                             */
/*-----------------------------------------------------------------------*/

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
    1700:	ce 01       	movw	r24, r28
    1702:	81 5d       	subi	r24, 0xD1	; 209
    1704:	9d 4f       	sbci	r25, 0xFD	; 253
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    1706:	fb 01       	movw	r30, r22

	do *d++ = (BYTE)val; while (--cnt);
    1708:	11 92       	st	Z+, r1
    170a:	e8 17       	cp	r30, r24
    170c:	f9 07       	cpc	r31, r25
    170e:	e1 f7       	brne	.-8      	; 0x1708 <sync_fs+0x5e>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1710:	fe 01       	movw	r30, r28
    1712:	e3 5d       	subi	r30, 0xD3	; 211
    1714:	fd 4f       	sbci	r31, 0xFD	; 253
    1716:	85 e5       	ldi	r24, 0x55	; 85
    1718:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    171a:	fe 01       	movw	r30, r28
    171c:	e2 5d       	subi	r30, 0xD2	; 210
    171e:	fd 4f       	sbci	r31, 0xFD	; 253
    1720:	8a ea       	ldi	r24, 0xAA	; 170
    1722:	80 83       	st	Z, r24
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1724:	82 e5       	ldi	r24, 0x52	; 82
    1726:	8f a7       	lds	r24, 0x7f
	*ptr++ = (BYTE)val; val >>= 8;
    1728:	88 ab       	sts	0x58, r24
	*ptr++ = (BYTE)val; val >>= 8;
    172a:	81 e6       	ldi	r24, 0x61	; 97
    172c:	89 ab       	sts	0x59, r24
	*ptr++ = (BYTE)val;
    172e:	91 e4       	ldi	r25, 0x41	; 65
    1730:	9a ab       	sts	0x5a, r25
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1732:	fe 01       	movw	r30, r28
    1734:	ed 5e       	subi	r30, 0xED	; 237
    1736:	fd 4f       	sbci	r31, 0xFD	; 253
    1738:	22 e7       	ldi	r18, 0x72	; 114
    173a:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    173c:	fe 01       	movw	r30, r28
    173e:	ec 5e       	subi	r30, 0xEC	; 236
    1740:	fd 4f       	sbci	r31, 0xFD	; 253
    1742:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    1744:	fe 01       	movw	r30, r28
    1746:	eb 5e       	subi	r30, 0xEB	; 235
    1748:	fd 4f       	sbci	r31, 0xFD	; 253
    174a:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    174c:	fe 01       	movw	r30, r28
    174e:	ea 5e       	subi	r30, 0xEA	; 234
    1750:	fd 4f       	sbci	r31, 0xFD	; 253
    1752:	80 83       	st	Z, r24
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
			st_word(fs->win + BS_55AA, 0xAA55);
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
    1754:	3f 85       	ldd	r19, Y+15	; 0x0f
    1756:	28 89       	ldd	r18, Y+16	; 0x10
    1758:	99 89       	ldd	r25, Y+17	; 0x11
    175a:	8a 89       	ldd	r24, Y+18	; 0x12
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    175c:	fe 01       	movw	r30, r28
    175e:	e9 5e       	subi	r30, 0xE9	; 233
    1760:	fd 4f       	sbci	r31, 0xFD	; 253
    1762:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
    1764:	fe 01       	movw	r30, r28
    1766:	e8 5e       	subi	r30, 0xE8	; 232
    1768:	fd 4f       	sbci	r31, 0xFD	; 253
    176a:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    176c:	fe 01       	movw	r30, r28
    176e:	e7 5e       	subi	r30, 0xE7	; 231
    1770:	fd 4f       	sbci	r31, 0xFD	; 253
    1772:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    1774:	fe 01       	movw	r30, r28
    1776:	e6 5e       	subi	r30, 0xE6	; 230
    1778:	fd 4f       	sbci	r31, 0xFD	; 253
    177a:	80 83       	st	Z, r24
			mem_set(fs->win, 0, SS(fs));
			st_word(fs->win + BS_55AA, 0xAA55);
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
    177c:	3b 85       	ldd	r19, Y+11	; 0x0b
    177e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1780:	9d 85       	ldd	r25, Y+13	; 0x0d
    1782:	8e 85       	ldd	r24, Y+14	; 0x0e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1784:	fe 01       	movw	r30, r28
    1786:	e5 5e       	subi	r30, 0xE5	; 229
    1788:	fd 4f       	sbci	r31, 0xFD	; 253
    178a:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
    178c:	fe 01       	movw	r30, r28
    178e:	e4 5e       	subi	r30, 0xE4	; 228
    1790:	fd 4f       	sbci	r31, 0xFD	; 253
    1792:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    1794:	fe 01       	movw	r30, r28
    1796:	e3 5e       	subi	r30, 0xE3	; 227
    1798:	fd 4f       	sbci	r31, 0xFD	; 253
    179a:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    179c:	fe 01       	movw	r30, r28
    179e:	e2 5e       	subi	r30, 0xE2	; 226
    17a0:	fd 4f       	sbci	r31, 0xFD	; 253
    17a2:	80 83       	st	Z, r24
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
    17a4:	0b 8d       	ldd	r16, Y+27	; 0x1b
    17a6:	1c 8d       	ldd	r17, Y+28	; 0x1c
    17a8:	2d 8d       	ldd	r18, Y+29	; 0x1d
    17aa:	3e 8d       	ldd	r19, Y+30	; 0x1e
    17ac:	0f 5f       	subi	r16, 0xFF	; 255
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	2f 4f       	sbci	r18, 0xFF	; 255
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    17b4:	0b a7       	lds	r16, 0x7b
    17b6:	1c a7       	lds	r17, 0x7c
    17b8:	2d a7       	lds	r18, 0x7d
    17ba:	3e a7       	lds	r19, 0x7e
			disk_write(fs->drv, fs->win, fs->winsect, 1);
    17bc:	89 81       	ldd	r24, Y+1	; 0x01
    17be:	a9 01       	movw	r20, r18
    17c0:	98 01       	movw	r18, r16
    17c2:	01 e0       	ldi	r16, 0x01	; 1
    17c4:	10 e0       	ldi	r17, 0x00	; 0
    17c6:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <disk_write>
			fs->fsi_flag = 0;
    17ca:	1c 82       	std	Y+4, r1	; 0x04
    17cc:	7b cf       	rjmp	.-266    	; 0x16c4 <sync_fs+0x1a>

000017ce <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	8c 01       	movw	r16, r24
    17e0:	6a 01       	movw	r12, r20
    17e2:	7b 01       	movw	r14, r22
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
    17e4:	fc 01       	movw	r30, r24
    17e6:	83 a5       	lds	r24, 0x63
    17e8:	94 a5       	lds	r25, 0x64
    17ea:	a5 a5       	lds	r26, 0x65
    17ec:	b6 a5       	lds	r27, 0x66
    17ee:	84 17       	cp	r24, r20
    17f0:	95 07       	cpc	r25, r21
    17f2:	a6 07       	cpc	r26, r22
    17f4:	b7 07       	cpc	r27, r23
    17f6:	31 f1       	breq	.+76     	; 0x1844 <move_window+0x76>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
    17f8:	c8 01       	movw	r24, r16
    17fa:	0e 94 ed 0a 	call	0x15da	; 0x15da <sync_window>
    17fe:	ec 01       	movw	r28, r24
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
    1800:	00 97       	sbiw	r24, 0x00	; 0
    1802:	51 f0       	breq	.+20     	; 0x1818 <move_window+0x4a>
			}
			fs->winsect = sector;
		}
	}
	return res;
}
    1804:	ce 01       	movw	r24, r28
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	ff 90       	pop	r15
    1810:	ef 90       	pop	r14
    1812:	df 90       	pop	r13
    1814:	cf 90       	pop	r12
    1816:	08 95       	ret
	if (sector != fs->winsect) {	/* Window offset changed? */
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (mmc_disk_read(fs->win, sector, 1) != RES_OK) {
    1818:	c8 01       	movw	r24, r16
    181a:	8f 96       	adiw	r24, 0x2f	; 47
    181c:	b7 01       	movw	r22, r14
    181e:	a6 01       	movw	r20, r12
    1820:	21 e0       	ldi	r18, 0x01	; 1
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	0e 94 77 02 	call	0x4ee	; 0x4ee <mmc_disk_read>
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	31 f0       	breq	.+12     	; 0x1838 <move_window+0x6a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
    182c:	c1 e0       	ldi	r28, 0x01	; 1
    182e:	d0 e0       	ldi	r29, 0x00	; 0
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (mmc_disk_read(fs->win, sector, 1) != RES_OK) {
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
    1830:	cc 24       	eor	r12, r12
    1832:	ca 94       	dec	r12
    1834:	dc 2c       	mov	r13, r12
    1836:	76 01       	movw	r14, r12
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
    1838:	f8 01       	movw	r30, r16
    183a:	c3 a6       	lds	r28, 0xb3
    183c:	d4 a6       	lds	r29, 0xb4
    183e:	e5 a6       	lds	r30, 0xb5
    1840:	f6 a6       	lds	r31, 0xb6
    1842:	e0 cf       	rjmp	.-64     	; 0x1804 <move_window+0x36>
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
    1844:	c0 e0       	ldi	r28, 0x00	; 0
    1846:	d0 e0       	ldi	r29, 0x00	; 0
    1848:	dd cf       	rjmp	.-70     	; 0x1804 <move_window+0x36>

0000184a <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
    1850:	1b 82       	std	Y+3, r1	; 0x03
    1852:	8f ef       	ldi	r24, 0xFF	; 255
    1854:	9f ef       	ldi	r25, 0xFF	; 255
    1856:	dc 01       	movw	r26, r24
    1858:	8b a7       	lds	r24, 0x7b
    185a:	9c a7       	lds	r25, 0x7c
    185c:	ad a7       	lds	r26, 0x7d
    185e:	be a7       	lds	r27, 0x7e
	if (move_window(fs, sect) != FR_OK) {
    1860:	ce 01       	movw	r24, r28
    1862:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
    1866:	00 97       	sbiw	r24, 0x00	; 0
    1868:	21 f0       	breq	.+8      	; 0x1872 <check_fs+0x28>
		return 4;	/* Load boot record */
    186a:	84 e0       	ldi	r24, 0x04	; 4
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    1872:	fe 01       	movw	r30, r28
    1874:	e2 5d       	subi	r30, 0xD2	; 210
    1876:	fd 4f       	sbci	r31, 0xFD	; 253
	rv = rv << 8 | ptr[0];
    1878:	90 81       	ld	r25, Z
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	fe 01       	movw	r30, r28
    187e:	e3 5d       	subi	r30, 0xD3	; 211
    1880:	fd 4f       	sbci	r31, 0xFD	; 253
    1882:	20 81       	ld	r18, Z
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	28 2b       	or	r18, r24
    1888:	39 2b       	or	r19, r25
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) {
		return 4;	/* Load boot record */
	}

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
    188a:	8a ea       	ldi	r24, 0xAA	; 170
    188c:	25 35       	cpi	r18, 0x55	; 85
    188e:	38 07       	cpc	r19, r24
    1890:	21 f0       	breq	.+8      	; 0x189a <check_fs+0x50>
    1892:	83 e0       	ldi	r24, 0x03	; 3
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	08 95       	ret
		return 4;	/* Load boot record */
	}

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
    189a:	8f a5       	lds	r24, 0x6f
    189c:	89 3e       	cpi	r24, 0xE9	; 233
    189e:	39 f0       	breq	.+14     	; 0x18ae <check_fs+0x64>
    18a0:	8b 3e       	cpi	r24, 0xEB	; 235
    18a2:	11 f0       	breq	.+4      	; 0x18a8 <check_fs+0x5e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
    18a4:	82 e0       	ldi	r24, 0x02	; 2
    18a6:	e2 cf       	rjmp	.-60     	; 0x186c <check_fs+0x22>
		return 4;	/* Load boot record */
	}

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
    18a8:	89 a9       	sts	0x49, r24
    18aa:	80 39       	cpi	r24, 0x90	; 144
    18ac:	d9 f7       	brne	.-10     	; 0x18a4 <check_fs+0x5a>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    18ae:	fe 01       	movw	r30, r28
    18b0:	e8 59       	subi	r30, 0x98	; 152
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 81       	ld	r24, Z
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	a0 e0       	ldi	r26, 0x00	; 0
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    18bc:	ba 2f       	mov	r27, r26
    18be:	a9 2f       	mov	r26, r25
    18c0:	98 2f       	mov	r25, r24
    18c2:	88 27       	eor	r24, r24
    18c4:	fe 01       	movw	r30, r28
    18c6:	e9 59       	subi	r30, 0x99	; 153
    18c8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ca:	40 81       	ld	r20, Z
    18cc:	50 e0       	ldi	r21, 0x00	; 0
    18ce:	60 e0       	ldi	r22, 0x00	; 0
    18d0:	70 e0       	ldi	r23, 0x00	; 0
    18d2:	84 2b       	or	r24, r20
    18d4:	95 2b       	or	r25, r21
    18d6:	a6 2b       	or	r26, r22
    18d8:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    18da:	ba 2f       	mov	r27, r26
    18dc:	a9 2f       	mov	r26, r25
    18de:	98 2f       	mov	r25, r24
    18e0:	88 27       	eor	r24, r24
    18e2:	fe 01       	movw	r30, r28
    18e4:	ea 59       	subi	r30, 0x9A	; 154
    18e6:	ff 4f       	sbci	r31, 0xFF	; 255
    18e8:	40 81       	ld	r20, Z
    18ea:	50 e0       	ldi	r21, 0x00	; 0
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	84 2b       	or	r24, r20
    18f2:	95 2b       	or	r25, r21
    18f4:	a6 2b       	or	r26, r22
    18f6:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    18f8:	ba 2f       	mov	r27, r26
    18fa:	a9 2f       	mov	r26, r25
    18fc:	98 2f       	mov	r25, r24
    18fe:	88 27       	eor	r24, r24
    1900:	fe 01       	movw	r30, r28
    1902:	eb 59       	subi	r30, 0x9B	; 155
    1904:	ff 4f       	sbci	r31, 0xFF	; 255
    1906:	40 81       	ld	r20, Z
    1908:	50 e0       	ldi	r21, 0x00	; 0
    190a:	60 e0       	ldi	r22, 0x00	; 0
    190c:	70 e0       	ldi	r23, 0x00	; 0
    190e:	84 2b       	or	r24, r20
    1910:	95 2b       	or	r25, r21
    1912:	a6 2b       	or	r26, r22
    1914:	b7 2b       	or	r27, r23
	}

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
    1916:	b0 70       	andi	r27, 0x00	; 0
    1918:	86 34       	cpi	r24, 0x46	; 70
    191a:	21 e4       	ldi	r18, 0x41	; 65
    191c:	92 07       	cpc	r25, r18
    191e:	24 e5       	ldi	r18, 0x54	; 84
    1920:	a2 07       	cpc	r26, r18
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	b2 07       	cpc	r27, r18
    1926:	e1 f1       	breq	.+120    	; 0x19a0 <check_fs+0x156>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    1928:	fe 01       	movw	r30, r28
    192a:	ec 57       	subi	r30, 0x7C	; 124
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	80 81       	ld	r24, Z
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a0 e0       	ldi	r26, 0x00	; 0
    1934:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    1936:	ba 2f       	mov	r27, r26
    1938:	a9 2f       	mov	r26, r25
    193a:	98 2f       	mov	r25, r24
    193c:	88 27       	eor	r24, r24
    193e:	fe 01       	movw	r30, r28
    1940:	ed 57       	subi	r30, 0x7D	; 125
    1942:	ff 4f       	sbci	r31, 0xFF	; 255
    1944:	40 81       	ld	r20, Z
    1946:	50 e0       	ldi	r21, 0x00	; 0
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	70 e0       	ldi	r23, 0x00	; 0
    194c:	84 2b       	or	r24, r20
    194e:	95 2b       	or	r25, r21
    1950:	a6 2b       	or	r26, r22
    1952:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    1954:	ba 2f       	mov	r27, r26
    1956:	a9 2f       	mov	r26, r25
    1958:	98 2f       	mov	r25, r24
    195a:	88 27       	eor	r24, r24
    195c:	fe 01       	movw	r30, r28
    195e:	ee 57       	subi	r30, 0x7E	; 126
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	40 81       	ld	r20, Z
    1964:	50 e0       	ldi	r21, 0x00	; 0
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	70 e0       	ldi	r23, 0x00	; 0
    196a:	84 2b       	or	r24, r20
    196c:	95 2b       	or	r25, r21
    196e:	a6 2b       	or	r26, r22
    1970:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    1972:	ba 2f       	mov	r27, r26
    1974:	a9 2f       	mov	r26, r25
    1976:	98 2f       	mov	r25, r24
    1978:	88 27       	eor	r24, r24
    197a:	cf 57       	subi	r28, 0x7F	; 127
    197c:	df 4f       	sbci	r29, 0xFF	; 255
    197e:	48 81       	ld	r20, Y
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	84 2b       	or	r24, r20
    1988:	95 2b       	or	r25, r21
    198a:	a6 2b       	or	r26, r22
    198c:	b7 2b       	or	r27, r23

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
    198e:	86 34       	cpi	r24, 0x46	; 70
    1990:	21 e4       	ldi	r18, 0x41	; 65
    1992:	92 07       	cpc	r25, r18
    1994:	24 e5       	ldi	r18, 0x54	; 84
    1996:	a2 07       	cpc	r26, r18
    1998:	23 e3       	ldi	r18, 0x33	; 51
    199a:	b2 07       	cpc	r27, r18
    199c:	09 f0       	breq	.+2      	; 0x19a0 <check_fs+0x156>
    199e:	82 cf       	rjmp	.-252    	; 0x18a4 <check_fs+0x5a>
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	64 cf       	rjmp	.-312    	; 0x186c <check_fs+0x22>

000019a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
    19a4:	2f 92       	push	r2
    19a6:	3f 92       	push	r3
    19a8:	4f 92       	push	r4
    19aa:	5f 92       	push	r5
    19ac:	6f 92       	push	r6
    19ae:	7f 92       	push	r7
    19b0:	8f 92       	push	r8
    19b2:	9f 92       	push	r9
    19b4:	af 92       	push	r10
    19b6:	bf 92       	push	r11
    19b8:	cf 92       	push	r12
    19ba:	df 92       	push	r13
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	cf 93       	push	r28
    19c6:	df 93       	push	r29
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	6f 97       	sbiw	r28, 0x1f	; 31
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	7b 01       	movw	r14, r22
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
    19da:	db 01       	movw	r26, r22
    19dc:	1d 92       	st	X+, r1
    19de:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
    19e0:	4f 8f       	std	Y+31, r20	; 0x1f
    19e2:	0e 94 df 09 	call	0x13be	; 0x13be <get_ldnumber>
    19e6:	8c 01       	movw	r16, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    19e8:	4f 8d       	ldd	r20, Y+31	; 0x1f
    19ea:	97 fd       	sbrc	r25, 7
    19ec:	3e c0       	rjmp	.+124    	; 0x1a6a <find_volume+0xc6>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
    19ee:	fc 01       	movw	r30, r24
    19f0:	ee 0f       	add	r30, r30
    19f2:	ff 1f       	adc	r31, r31
    19f4:	e7 5d       	subi	r30, 0xD7	; 215
    19f6:	fe 4f       	sbci	r31, 0xFE	; 254
    19f8:	c0 80       	ld	r12, Z
    19fa:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    19fc:	c1 14       	cp	r12, r1
    19fe:	d1 04       	cpc	r13, r1
    1a00:	b9 f1       	breq	.+110    	; 0x1a70 <find_volume+0xcc>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
    1a02:	f7 01       	movw	r30, r14
    1a04:	d1 82       	std	Z+1, r13	; 0x01
    1a06:	c0 82       	st	Z, r12

	mode &= ~FA_READ;					/* Desired access mode, write access or not */
    1a08:	6e ef       	ldi	r22, 0xFE	; 254
    1a0a:	e6 2e       	mov	r14, r22
    1a0c:	e4 22       	and	r14, r20
	if (fs->fs_type) {					/* If the volume has been mounted */
    1a0e:	d6 01       	movw	r26, r12
    1a10:	8c 91       	ld	r24, X
    1a12:	88 23       	and	r24, r24
    1a14:	31 f0       	breq	.+12     	; 0x1a22 <find_volume+0x7e>
		stat = disk_status(fs->drv);
    1a16:	11 96       	adiw	r26, 0x01	; 1
    1a18:	8c 91       	ld	r24, X
    1a1a:	0e 94 7d 2e 	call	0x5cfa	; 0x5cfa <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
    1a1e:	80 ff       	sbrs	r24, 0
    1a20:	2a c0       	rjmp	.+84     	; 0x1a76 <find_volume+0xd2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    1a22:	f6 01       	movw	r30, r12
    1a24:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    1a26:	01 83       	std	Z+1, r16	; 0x01
	stat = mmc_disk_initialize(fs->drv); /* Initialize the physical drive */
    1a28:	80 2f       	mov	r24, r16
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	0e 94 aa 01 	call	0x354	; 0x354 <mmc_disk_initialize>
	if (stat & STA_NOINIT) { 		/* Check if the initialization succeeded */
    1a30:	80 ff       	sbrs	r24, 0
    1a32:	2b c0       	rjmp	.+86     	; 0x1a8a <find_volume+0xe6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	90 e0       	ldi	r25, 0x00	; 0
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
    1a38:	6f 96       	adiw	r28, 0x1f	; 31
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	ef 90       	pop	r14
    1a50:	df 90       	pop	r13
    1a52:	cf 90       	pop	r12
    1a54:	bf 90       	pop	r11
    1a56:	af 90       	pop	r10
    1a58:	9f 90       	pop	r9
    1a5a:	8f 90       	pop	r8
    1a5c:	7f 90       	pop	r7
    1a5e:	6f 90       	pop	r6
    1a60:	5f 90       	pop	r5
    1a62:	4f 90       	pop	r4
    1a64:	3f 90       	pop	r3
    1a66:	2f 90       	pop	r2
    1a68:	08 95       	ret


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
    1a6a:	8b e0       	ldi	r24, 0x0B	; 11
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	e4 cf       	rjmp	.-56     	; 0x1a38 <find_volume+0x94>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    1a70:	8c e0       	ldi	r24, 0x0C	; 12
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	e1 cf       	rjmp	.-62     	; 0x1a38 <find_volume+0x94>

	mode &= ~FA_READ;					/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
    1a76:	ee 20       	and	r14, r14
    1a78:	29 f0       	breq	.+10     	; 0x1a84 <find_volume+0xe0>
    1a7a:	82 ff       	sbrs	r24, 2
    1a7c:	03 c0       	rjmp	.+6      	; 0x1a84 <find_volume+0xe0>
	stat = mmc_disk_initialize(fs->drv); /* Initialize the physical drive */
	if (stat & STA_NOINIT) { 		/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
    1a7e:	8a e0       	ldi	r24, 0x0A	; 10
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	da cf       	rjmp	.-76     	; 0x1a38 <find_volume+0x94>
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	d7 cf       	rjmp	.-82     	; 0x1a38 <find_volume+0x94>
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = mmc_disk_initialize(fs->drv); /* Initialize the physical drive */
	if (stat & STA_NOINIT) { 		/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
    1a8a:	ee 20       	and	r14, r14
    1a8c:	11 f0       	breq	.+4      	; 0x1a92 <find_volume+0xee>
    1a8e:	82 fd       	sbrc	r24, 2
    1a90:	f6 cf       	rjmp	.-20     	; 0x1a7e <find_volume+0xda>
	 return FR_DISK_ERR;
	}
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
    1a92:	c6 01       	movw	r24, r12
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	50 e0       	ldi	r21, 0x00	; 0
    1a98:	ba 01       	movw	r22, r20
    1a9a:	0e 94 25 0c 	call	0x184a	; 0x184a <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
    1a9e:	82 30       	cpi	r24, 0x02	; 2
    1aa0:	61 f0       	breq	.+24     	; 0x1aba <find_volume+0x116>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))){
	 return FR_DISK_ERR;
	}
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
    1aa2:	88 24       	eor	r8, r8
    1aa4:	99 24       	eor	r9, r9
    1aa6:	54 01       	movw	r10, r8
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) {
    1aa8:	84 30       	cpi	r24, 0x04	; 4
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <find_volume+0x10a>
    1aac:	72 c2       	rjmp	.+1252   	; 0x1f92 <find_volume+0x5ee>
            SPDR = 0xAC;
            while(!(SPSR && (1<<SPIF)));
        }*/
		return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
	}
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
    1aae:	82 30       	cpi	r24, 0x02	; 2
    1ab0:	08 f4       	brcc	.+2      	; 0x1ab4 <find_volume+0x110>
    1ab2:	91 c0       	rjmp	.+290    	; 0x1bd6 <find_volume+0x232>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    1ab4:	8d e0       	ldi	r24, 0x0D	; 13
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	bf cf       	rjmp	.-130    	; 0x1a38 <find_volume+0x94>
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
    1aba:	96 01       	movw	r18, r12
    1abc:	2f 50       	subi	r18, 0x0F	; 15
    1abe:	3e 4f       	sbci	r19, 0xFE	; 254
	}
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
    1ac0:	7e 01       	movw	r14, r28
    1ac2:	08 94       	sec
    1ac4:	e1 1c       	adc	r14, r1
    1ac6:	f1 1c       	adc	r15, r1
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
    1ac8:	81 e1       	ldi	r24, 0x11	; 17
    1aca:	68 2e       	mov	r6, r24
    1acc:	71 2c       	mov	r7, r1
    1ace:	6c 0e       	add	r6, r28
    1ad0:	7d 1e       	adc	r7, r29
    1ad2:	87 01       	movw	r16, r14
    1ad4:	94 e0       	ldi	r25, 0x04	; 4
    1ad6:	89 2e       	mov	r8, r25
    1ad8:	91 2c       	mov	r9, r1
    1ada:	8c 0c       	add	r8, r12
    1adc:	9d 1c       	adc	r9, r13
    1ade:	4b e0       	ldi	r20, 0x0B	; 11
    1ae0:	44 2e       	mov	r4, r20
    1ae2:	51 2c       	mov	r5, r1
    1ae4:	4c 0c       	add	r4, r12
    1ae6:	5d 1c       	adc	r5, r13
    1ae8:	5a e0       	ldi	r21, 0x0A	; 10
    1aea:	25 2e       	mov	r2, r21
    1aec:	31 2c       	mov	r3, r1
    1aee:	2c 0c       	add	r2, r12
    1af0:	3d 1c       	adc	r3, r13
    1af2:	a6 01       	movw	r20, r12
    1af4:	47 5f       	subi	r20, 0xF7	; 247
    1af6:	5f 4f       	sbci	r21, 0xFF	; 255
    1af8:	5a 8b       	std	Y+18, r21	; 0x12
    1afa:	49 8b       	std	Y+17, r20	; 0x11
    1afc:	c6 01       	movw	r24, r12
    1afe:	08 96       	adiw	r24, 0x08	; 8
    1b00:	9e 8b       	std	Y+22, r25	; 0x16
    1b02:	8d 8b       	std	Y+21, r24	; 0x15
    1b04:	56 01       	movw	r10, r12
    1b06:	67 01       	movw	r12, r14
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    1b08:	d9 01       	movw	r26, r18
    1b0a:	8c 91       	ld	r24, X
    1b0c:	88 23       	and	r24, r24
    1b0e:	09 f4       	brne	.+2      	; 0x1b12 <find_volume+0x16e>
    1b10:	57 c0       	rjmp	.+174    	; 0x1bc0 <find_volume+0x21c>
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
    1b12:	79 01       	movw	r14, r18
    1b14:	e8 18       	sub	r14, r8
    1b16:	f9 08       	sbc	r15, r9
    1b18:	f7 01       	movw	r30, r14
    1b1a:	e4 0d       	add	r30, r4
    1b1c:	f5 1d       	adc	r31, r5
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    1b1e:	80 81       	ld	r24, Z
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	a0 e0       	ldi	r26, 0x00	; 0
    1b24:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    1b26:	44 27       	eor	r20, r20
    1b28:	58 2f       	mov	r21, r24
    1b2a:	69 2f       	mov	r22, r25
    1b2c:	7a 2f       	mov	r23, r26
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
    1b2e:	f7 01       	movw	r30, r14
    1b30:	e2 0d       	add	r30, r2
    1b32:	f3 1d       	adc	r31, r3
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
    1b34:	80 81       	ld	r24, Z
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a0 e0       	ldi	r26, 0x00	; 0
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	48 2b       	or	r20, r24
    1b3e:	59 2b       	or	r21, r25
    1b40:	6a 2b       	or	r22, r26
    1b42:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    1b44:	76 2f       	mov	r23, r22
    1b46:	65 2f       	mov	r22, r21
    1b48:	54 2f       	mov	r21, r20
    1b4a:	44 27       	eor	r20, r20
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
    1b4c:	e9 89       	ldd	r30, Y+17	; 0x11
    1b4e:	fa 89       	ldd	r31, Y+18	; 0x12
    1b50:	ee 0d       	add	r30, r14
    1b52:	ff 1d       	adc	r31, r15
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
    1b54:	80 81       	ld	r24, Z
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a0 e0       	ldi	r26, 0x00	; 0
    1b5a:	b0 e0       	ldi	r27, 0x00	; 0
    1b5c:	48 2b       	or	r20, r24
    1b5e:	59 2b       	or	r21, r25
    1b60:	6a 2b       	or	r22, r26
    1b62:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    1b64:	76 2f       	mov	r23, r22
    1b66:	65 2f       	mov	r22, r21
    1b68:	54 2f       	mov	r21, r20
    1b6a:	44 27       	eor	r20, r20
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
    1b6c:	ed 89       	ldd	r30, Y+21	; 0x15
    1b6e:	fe 89       	ldd	r31, Y+22	; 0x16
    1b70:	ee 0d       	add	r30, r14
    1b72:	ff 1d       	adc	r31, r15
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
    1b74:	80 81       	ld	r24, Z
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a0 e0       	ldi	r26, 0x00	; 0
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	48 2b       	or	r20, r24
    1b7e:	59 2b       	or	r21, r25
    1b80:	6a 2b       	or	r22, r26
    1b82:	7b 2b       	or	r23, r27
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    1b84:	f8 01       	movw	r30, r16
    1b86:	41 93       	st	Z+, r20
    1b88:	51 93       	st	Z+, r21
    1b8a:	61 93       	st	Z+, r22
    1b8c:	71 93       	st	Z+, r23
    1b8e:	8f 01       	movw	r16, r30
    1b90:	20 5f       	subi	r18, 0xF0	; 240
    1b92:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
    1b94:	e6 15       	cp	r30, r6
    1b96:	f7 05       	cpc	r31, r7
    1b98:	09 f0       	breq	.+2      	; 0x1b9c <find_volume+0x1f8>
    1b9a:	b6 cf       	rjmp	.-148    	; 0x1b08 <find_volume+0x164>
    1b9c:	76 01       	movw	r14, r12
    1b9e:	65 01       	movw	r12, r10
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
    1ba0:	d7 01       	movw	r26, r14
    1ba2:	8d 90       	ld	r8, X+
    1ba4:	9d 90       	ld	r9, X+
    1ba6:	ad 90       	ld	r10, X+
    1ba8:	bd 90       	ld	r11, X+
    1baa:	7d 01       	movw	r14, r26
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    1bac:	81 14       	cp	r8, r1
    1bae:	91 04       	cpc	r9, r1
    1bb0:	a1 04       	cpc	r10, r1
    1bb2:	b1 04       	cpc	r11, r1
    1bb4:	49 f4       	brne	.+18     	; 0x1bc8 <find_volume+0x224>
    1bb6:	83 e0       	ldi	r24, 0x03	; 3
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
    1bb8:	e6 14       	cp	r14, r6
    1bba:	f7 04       	cpc	r15, r7
    1bbc:	89 f7       	brne	.-30     	; 0x1ba0 <find_volume+0x1fc>
    1bbe:	74 cf       	rjmp	.-280    	; 0x1aa8 <find_volume+0x104>
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	50 e0       	ldi	r21, 0x00	; 0
    1bc4:	ba 01       	movw	r22, r20
    1bc6:	de cf       	rjmp	.-68     	; 0x1b84 <find_volume+0x1e0>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
    1bc8:	c6 01       	movw	r24, r12
    1bca:	b5 01       	movw	r22, r10
    1bcc:	a4 01       	movw	r20, r8
    1bce:	0e 94 25 0c 	call	0x184a	; 0x184a <check_fs>
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
    1bd2:	82 30       	cpi	r24, 0x02	; 2
    1bd4:	88 f7       	brcc	.-30     	; 0x1bb8 <find_volume+0x214>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1bd6:	f6 01       	movw	r30, r12
    1bd8:	33 ad       	sts	0x63, r19
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	82 ad       	sts	0x62, r24
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	82 2b       	or	r24, r18
    1be2:	93 2b       	or	r25, r19
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
    1be4:	f2 e0       	ldi	r31, 0x02	; 2
    1be6:	80 30       	cpi	r24, 0x00	; 0
    1be8:	9f 07       	cpc	r25, r31
    1bea:	09 f0       	breq	.+2      	; 0x1bee <find_volume+0x24a>
    1bec:	63 cf       	rjmp	.-314    	; 0x1ab4 <find_volume+0x110>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    1bee:	f6 01       	movw	r30, r12
    1bf0:	ea 5b       	subi	r30, 0xBA	; 186
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    1bf4:	30 81       	ld	r19, Z
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	f6 01       	movw	r30, r12
    1bfa:	eb 5b       	subi	r30, 0xBB	; 187
    1bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfe:	80 81       	ld	r24, Z
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	82 2b       	or	r24, r18
    1c04:	93 2b       	or	r25, r19
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
    1c06:	7c 01       	movw	r14, r24
    1c08:	00 e0       	ldi	r16, 0x00	; 0
    1c0a:	10 e0       	ldi	r17, 0x00	; 0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
    1c0c:	e1 14       	cp	r14, r1
    1c0e:	f1 04       	cpc	r15, r1
    1c10:	01 05       	cpc	r16, r1
    1c12:	11 05       	cpc	r17, r1
    1c14:	a1 f5       	brne	.+104    	; 0x1c7e <find_volume+0x2da>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    1c16:	f6 01       	movw	r30, r12
    1c18:	ea 5a       	subi	r30, 0xAA	; 170
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	40 81       	ld	r20, Z
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	70 e0       	ldi	r23, 0x00	; 0
	rv = rv << 8 | ptr[2];
    1c24:	76 2f       	mov	r23, r22
    1c26:	65 2f       	mov	r22, r21
    1c28:	54 2f       	mov	r21, r20
    1c2a:	44 27       	eor	r20, r20
    1c2c:	f6 01       	movw	r30, r12
    1c2e:	eb 5a       	subi	r30, 0xAB	; 171
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 81       	ld	r24, Z
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a0 e0       	ldi	r26, 0x00	; 0
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	48 2b       	or	r20, r24
    1c3c:	59 2b       	or	r21, r25
    1c3e:	6a 2b       	or	r22, r26
    1c40:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    1c42:	76 2f       	mov	r23, r22
    1c44:	65 2f       	mov	r22, r21
    1c46:	54 2f       	mov	r21, r20
    1c48:	44 27       	eor	r20, r20
    1c4a:	f6 01       	movw	r30, r12
    1c4c:	ec 5a       	subi	r30, 0xAC	; 172
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a0 e0       	ldi	r26, 0x00	; 0
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	48 2b       	or	r20, r24
    1c5a:	59 2b       	or	r21, r25
    1c5c:	6a 2b       	or	r22, r26
    1c5e:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    1c60:	ee 24       	eor	r14, r14
    1c62:	f4 2e       	mov	r15, r20
    1c64:	05 2f       	mov	r16, r21
    1c66:	16 2f       	mov	r17, r22
    1c68:	f6 01       	movw	r30, r12
    1c6a:	ed 5a       	subi	r30, 0xAD	; 173
    1c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6e:	80 81       	ld	r24, Z
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	a0 e0       	ldi	r26, 0x00	; 0
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e8 2a       	or	r14, r24
    1c78:	f9 2a       	or	r15, r25
    1c7a:	0a 2b       	or	r16, r26
    1c7c:	1b 2b       	or	r17, r27
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;
    1c7e:	d6 01       	movw	r26, r12
    1c80:	57 96       	adiw	r26, 0x17	; 23
    1c82:	ed 92       	st	X+, r14
    1c84:	fd 92       	st	X+, r15
    1c86:	0d 93       	st	X+, r16
    1c88:	1c 93       	st	X, r17
    1c8a:	5a 97       	sbiw	r26, 0x1a	; 26

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
    1c8c:	df 96       	adiw	r26, 0x3f	; 63
    1c8e:	4c 90       	ld	r4, X
    1c90:	df 97       	sbiw	r26, 0x3f	; 63
    1c92:	12 96       	adiw	r26, 0x02	; 2
    1c94:	4c 92       	st	X, r4
    1c96:	12 97       	sbiw	r26, 0x02	; 2
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
    1c98:	84 2d       	mov	r24, r4
    1c9a:	81 50       	subi	r24, 0x01	; 1
    1c9c:	82 30       	cpi	r24, 0x02	; 2
    1c9e:	08 f0       	brcs	.+2      	; 0x1ca2 <find_volume+0x2fe>
    1ca0:	09 cf       	rjmp	.-494    	; 0x1ab4 <find_volume+0x110>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
    1ca2:	dc 96       	adiw	r26, 0x3c	; 60
    1ca4:	8c 91       	ld	r24, X
    1ca6:	dc 97       	sbiw	r26, 0x3c	; 60
    1ca8:	e8 2f       	mov	r30, r24
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	fe 8b       	std	Y+22, r31	; 0x16
    1cae:	ed 8b       	std	Y+21, r30	; 0x15
    1cb0:	1a 96       	adiw	r26, 0x0a	; 10
    1cb2:	fc 93       	st	X, r31
    1cb4:	ee 93       	st	-X, r30
    1cb6:	19 97       	sbiw	r26, 0x09	; 9
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    1cb8:	30 97       	sbiw	r30, 0x00	; 0
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <find_volume+0x31a>
    1cbc:	fb ce       	rjmp	.-522    	; 0x1ab4 <find_volume+0x110>
    1cbe:	cf 01       	movw	r24, r30
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	8e 23       	and	r24, r30
    1cc4:	9f 23       	and	r25, r31
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <find_volume+0x328>
    1cca:	f4 ce       	rjmp	.-536    	; 0x1ab4 <find_volume+0x110>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    1ccc:	f6 01       	movw	r30, r12
    1cce:	ef 5b       	subi	r30, 0xBF	; 191
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    1cd2:	90 81       	ld	r25, Z
    1cd4:	80 e0       	ldi	r24, 0x00	; 0
    1cd6:	f6 01       	movw	r30, r12
    1cd8:	e0 5c       	subi	r30, 0xC0	; 192
    1cda:	ff 4f       	sbci	r31, 0xFF	; 255
    1cdc:	20 80       	ld	r2, Z
    1cde:	33 24       	eor	r3, r3
    1ce0:	28 2a       	or	r2, r24
    1ce2:	39 2a       	or	r3, r25
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
    1ce4:	18 96       	adiw	r26, 0x08	; 8
    1ce6:	3c 92       	st	X, r3
    1ce8:	2e 92       	st	-X, r2
    1cea:	17 97       	sbiw	r26, 0x07	; 7
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
    1cec:	c1 01       	movw	r24, r2
    1cee:	8f 70       	andi	r24, 0x0F	; 15
    1cf0:	90 70       	andi	r25, 0x00	; 0
    1cf2:	00 97       	sbiw	r24, 0x00	; 0
    1cf4:	09 f0       	breq	.+2      	; 0x1cf8 <find_volume+0x354>
    1cf6:	de ce       	rjmp	.-580    	; 0x1ab4 <find_volume+0x110>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    1cf8:	f6 01       	movw	r30, r12
    1cfa:	ed 5b       	subi	r30, 0xBD	; 189
    1cfc:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    1cfe:	30 81       	ld	r19, Z
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	f6 01       	movw	r30, r12
    1d04:	ee 5b       	subi	r30, 0xBE	; 190
    1d06:	ff 4f       	sbci	r31, 0xFF	; 255
    1d08:	80 81       	ld	r24, Z
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	82 2b       	or	r24, r18
    1d0e:	93 2b       	or	r25, r19
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
    1d10:	9c 01       	movw	r18, r24
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	50 e0       	ldi	r21, 0x00	; 0
    1d16:	29 8b       	std	Y+17, r18	; 0x11
    1d18:	3a 8b       	std	Y+18, r19	; 0x12
    1d1a:	4b 8b       	std	Y+19, r20	; 0x13
    1d1c:	5c 8b       	std	Y+20, r21	; 0x14
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
    1d1e:	21 15       	cp	r18, r1
    1d20:	31 05       	cpc	r19, r1
    1d22:	41 05       	cpc	r20, r1
    1d24:	51 05       	cpc	r21, r1
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <find_volume+0x386>
    1d28:	40 c0       	rjmp	.+128    	; 0x1daa <find_volume+0x406>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    1d2a:	f6 01       	movw	r30, r12
    1d2c:	ee 5a       	subi	r30, 0xAE	; 174
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	80 81       	ld	r24, Z
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	a0 e0       	ldi	r26, 0x00	; 0
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    1d38:	44 27       	eor	r20, r20
    1d3a:	58 2f       	mov	r21, r24
    1d3c:	69 2f       	mov	r22, r25
    1d3e:	7a 2f       	mov	r23, r26
    1d40:	f6 01       	movw	r30, r12
    1d42:	ef 5a       	subi	r30, 0xAF	; 175
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	80 81       	ld	r24, Z
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	a0 e0       	ldi	r26, 0x00	; 0
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	48 2b       	or	r20, r24
    1d50:	59 2b       	or	r21, r25
    1d52:	6a 2b       	or	r22, r26
    1d54:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    1d56:	76 2f       	mov	r23, r22
    1d58:	65 2f       	mov	r22, r21
    1d5a:	54 2f       	mov	r21, r20
    1d5c:	44 27       	eor	r20, r20
    1d5e:	f6 01       	movw	r30, r12
    1d60:	e0 5b       	subi	r30, 0xB0	; 176
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	80 81       	ld	r24, Z
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e0       	ldi	r26, 0x00	; 0
    1d6a:	b0 e0       	ldi	r27, 0x00	; 0
    1d6c:	48 2b       	or	r20, r24
    1d6e:	59 2b       	or	r21, r25
    1d70:	6a 2b       	or	r22, r26
    1d72:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    1d74:	b6 2f       	mov	r27, r22
    1d76:	a5 2f       	mov	r26, r21
    1d78:	94 2f       	mov	r25, r20
    1d7a:	88 27       	eor	r24, r24
    1d7c:	89 8b       	std	Y+17, r24	; 0x11
    1d7e:	9a 8b       	std	Y+18, r25	; 0x12
    1d80:	ab 8b       	std	Y+19, r26	; 0x13
    1d82:	bc 8b       	std	Y+20, r27	; 0x14
    1d84:	f6 01       	movw	r30, r12
    1d86:	e1 5b       	subi	r30, 0xB1	; 177
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 81       	ld	r24, Z
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 e0       	ldi	r26, 0x00	; 0
    1d90:	b0 e0       	ldi	r27, 0x00	; 0
    1d92:	29 89       	ldd	r18, Y+17	; 0x11
    1d94:	3a 89       	ldd	r19, Y+18	; 0x12
    1d96:	4b 89       	ldd	r20, Y+19	; 0x13
    1d98:	5c 89       	ldd	r21, Y+20	; 0x14
    1d9a:	28 2b       	or	r18, r24
    1d9c:	39 2b       	or	r19, r25
    1d9e:	4a 2b       	or	r20, r26
    1da0:	5b 2b       	or	r21, r27
    1da2:	29 8b       	std	Y+17, r18	; 0x11
    1da4:	3a 8b       	std	Y+18, r19	; 0x12
    1da6:	4b 8b       	std	Y+19, r20	; 0x13
    1da8:	5c 8b       	std	Y+20, r21	; 0x14
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    1daa:	d6 01       	movw	r26, r12
    1dac:	de 96       	adiw	r26, 0x3e	; 62
    1dae:	9c 91       	ld	r25, X
    1db0:	de 97       	sbiw	r26, 0x3e	; 62
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	dd 96       	adiw	r26, 0x3d	; 61
    1db6:	6c 90       	ld	r6, X
    1db8:	dd 97       	sbiw	r26, 0x3d	; 61
    1dba:	77 24       	eor	r7, r7
    1dbc:	68 2a       	or	r6, r24
    1dbe:	79 2a       	or	r7, r25

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
    1dc0:	61 14       	cp	r6, r1
    1dc2:	71 04       	cpc	r7, r1
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <find_volume+0x424>
    1dc6:	76 ce       	rjmp	.-788    	; 0x1ab4 <find_volume+0x110>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
    1dc8:	24 2d       	mov	r18, r4
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e0       	ldi	r20, 0x00	; 0
    1dce:	50 e0       	ldi	r21, 0x00	; 0
    1dd0:	c8 01       	movw	r24, r16
    1dd2:	b7 01       	movw	r22, r14
    1dd4:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__mulsi3>
    1dd8:	6b 8f       	std	Y+27, r22	; 0x1b
    1dda:	7c 8f       	std	Y+28, r23	; 0x1c
    1ddc:	8d 8f       	std	Y+29, r24	; 0x1d
    1dde:	9e 8f       	std	Y+30, r25	; 0x1e

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
    1de0:	93 01       	movw	r18, r6
    1de2:	40 e0       	ldi	r20, 0x00	; 0
    1de4:	50 e0       	ldi	r21, 0x00	; 0
    1de6:	2f 8b       	std	Y+23, r18	; 0x17
    1de8:	38 8f       	std	Y+24, r19	; 0x18
    1dea:	49 8f       	std	Y+25, r20	; 0x19
    1dec:	5a 8f       	std	Y+26, r21	; 0x1a
    1dee:	c1 01       	movw	r24, r2
    1df0:	92 95       	swap	r25
    1df2:	82 95       	swap	r24
    1df4:	8f 70       	andi	r24, 0x0F	; 15
    1df6:	89 27       	eor	r24, r25
    1df8:	9f 70       	andi	r25, 0x0F	; 15
    1dfa:	89 27       	eor	r24, r25
    1dfc:	2c 01       	movw	r4, r24
    1dfe:	66 24       	eor	r6, r6
    1e00:	77 24       	eor	r7, r7
    1e02:	42 0e       	add	r4, r18
    1e04:	53 1e       	adc	r5, r19
    1e06:	64 1e       	adc	r6, r20
    1e08:	75 1e       	adc	r7, r21
    1e0a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0e:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1e10:	be 8d       	ldd	r27, Y+30	; 0x1e
    1e12:	48 0e       	add	r4, r24
    1e14:	59 1e       	adc	r5, r25
    1e16:	6a 1e       	adc	r6, r26
    1e18:	7b 1e       	adc	r7, r27
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    1e1a:	29 89       	ldd	r18, Y+17	; 0x11
    1e1c:	3a 89       	ldd	r19, Y+18	; 0x12
    1e1e:	4b 89       	ldd	r20, Y+19	; 0x13
    1e20:	5c 89       	ldd	r21, Y+20	; 0x14
    1e22:	24 15       	cp	r18, r4
    1e24:	35 05       	cpc	r19, r5
    1e26:	46 05       	cpc	r20, r6
    1e28:	57 05       	cpc	r21, r7
    1e2a:	08 f4       	brcc	.+2      	; 0x1e2e <find_volume+0x48a>
    1e2c:	43 ce       	rjmp	.-890    	; 0x1ab4 <find_volume+0x110>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    1e2e:	ca 01       	movw	r24, r20
    1e30:	b9 01       	movw	r22, r18
    1e32:	64 19       	sub	r22, r4
    1e34:	75 09       	sbc	r23, r5
    1e36:	86 09       	sbc	r24, r6
    1e38:	97 09       	sbc	r25, r7
    1e3a:	ad 89       	ldd	r26, Y+21	; 0x15
    1e3c:	be 89       	ldd	r27, Y+22	; 0x16
    1e3e:	9d 01       	movw	r18, r26
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <__udivmodsi4>
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
    1e48:	21 15       	cp	r18, r1
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	41 05       	cpc	r20, r1
    1e4e:	51 05       	cpc	r21, r1
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <find_volume+0x4b0>
    1e52:	30 ce       	rjmp	.-928    	; 0x1ab4 <find_volume+0x110>
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    1e54:	26 3f       	cpi	r18, 0xF6	; 246
    1e56:	bf ef       	ldi	r27, 0xFF	; 255
    1e58:	3b 07       	cpc	r19, r27
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	4b 07       	cpc	r20, r27
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	5b 07       	cpc	r21, r27
    1e62:	08 f0       	brcs	.+2      	; 0x1e66 <find_volume+0x4c2>
    1e64:	c3 c0       	rjmp	.+390    	; 0x1fec <find_volume+0x648>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    1e66:	26 3f       	cpi	r18, 0xF6	; 246
    1e68:	ef e0       	ldi	r30, 0x0F	; 15
    1e6a:	3e 07       	cpc	r19, r30
    1e6c:	e0 e0       	ldi	r30, 0x00	; 0
    1e6e:	4e 07       	cpc	r20, r30
    1e70:	e0 e0       	ldi	r30, 0x00	; 0
    1e72:	5e 07       	cpc	r21, r30
    1e74:	08 f0       	brcs	.+2      	; 0x1e78 <find_volume+0x4d4>
    1e76:	90 c0       	rjmp	.+288    	; 0x1f98 <find_volume+0x5f4>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    1e78:	da 01       	movw	r26, r20
    1e7a:	c9 01       	movw	r24, r18
    1e7c:	02 96       	adiw	r24, 0x02	; 2
    1e7e:	a1 1d       	adc	r26, r1
    1e80:	b1 1d       	adc	r27, r1
    1e82:	89 8b       	std	Y+17, r24	; 0x11
    1e84:	9a 8b       	std	Y+18, r25	; 0x12
    1e86:	ab 8b       	std	Y+19, r26	; 0x13
    1e88:	bc 8b       	std	Y+20, r27	; 0x14
    1e8a:	f6 01       	movw	r30, r12
    1e8c:	83 8b       	std	Z+19, r24	; 0x13
    1e8e:	94 8b       	std	Z+20, r25	; 0x14
    1e90:	a5 8b       	std	Z+21, r26	; 0x15
    1e92:	b6 8b       	std	Z+22, r27	; 0x16
		fs->volbase = bsect;								/* Volume start sector */
    1e94:	83 8e       	std	Z+27, r8	; 0x1b
    1e96:	94 8e       	std	Z+28, r9	; 0x1c
    1e98:	a5 8e       	std	Z+29, r10	; 0x1d
    1e9a:	b6 8e       	std	Z+30, r11	; 0x1e
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1e9c:	4f 89       	ldd	r20, Y+23	; 0x17
    1e9e:	58 8d       	ldd	r21, Y+24	; 0x18
    1ea0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ea2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ea4:	48 0d       	add	r20, r8
    1ea6:	59 1d       	adc	r21, r9
    1ea8:	6a 1d       	adc	r22, r10
    1eaa:	7b 1d       	adc	r23, r11
    1eac:	47 8f       	std	Z+31, r20	; 0x1f
    1eae:	50 a3       	lds	r21, 0x50
    1eb0:	61 a3       	lds	r22, 0x51
    1eb2:	72 a3       	lds	r23, 0x52
		fs->database = bsect + sysect;						/* Data start sector */
    1eb4:	d3 01       	movw	r26, r6
    1eb6:	c2 01       	movw	r24, r4
    1eb8:	88 0d       	add	r24, r8
    1eba:	99 1d       	adc	r25, r9
    1ebc:	aa 1d       	adc	r26, r10
    1ebe:	bb 1d       	adc	r27, r11
    1ec0:	87 a3       	lds	r24, 0x57
    1ec2:	90 a7       	lds	r25, 0x70
    1ec4:	a1 a7       	lds	r26, 0x71
    1ec6:	b2 a7       	lds	r27, 0x72
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
    1ec8:	21 e0       	ldi	r18, 0x01	; 1
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
    1eca:	21 14       	cp	r2, r1
    1ecc:	31 04       	cpc	r3, r1
    1ece:	09 f4       	brne	.+2      	; 0x1ed2 <find_volume+0x52e>
    1ed0:	f1 cd       	rjmp	.-1054   	; 0x1ab4 <find_volume+0x110>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    1ed2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ed4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ed6:	ad 8d       	ldd	r26, Y+29	; 0x1d
    1ed8:	be 8d       	ldd	r27, Y+30	; 0x1e
    1eda:	84 0f       	add	r24, r20
    1edc:	95 1f       	adc	r25, r21
    1ede:	a6 1f       	adc	r26, r22
    1ee0:	b7 1f       	adc	r27, r23
    1ee2:	f6 01       	movw	r30, r12
    1ee4:	83 a3       	lds	r24, 0x53
    1ee6:	94 a3       	lds	r25, 0x54
    1ee8:	a5 a3       	lds	r26, 0x55
    1eea:	b6 a3       	lds	r27, 0x56
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    1eec:	49 89       	ldd	r20, Y+17	; 0x11
    1eee:	5a 89       	ldd	r21, Y+18	; 0x12
    1ef0:	6b 89       	ldd	r22, Y+19	; 0x13
    1ef2:	7c 89       	ldd	r23, Y+20	; 0x14
    1ef4:	44 0f       	add	r20, r20
    1ef6:	55 1f       	adc	r21, r21
    1ef8:	66 1f       	adc	r22, r22
    1efa:	77 1f       	adc	r23, r23
    1efc:	22 30       	cpi	r18, 0x02	; 2
    1efe:	a9 f0       	breq	.+42     	; 0x1f2a <find_volume+0x586>
    1f00:	89 89       	ldd	r24, Y+17	; 0x11
    1f02:	9a 89       	ldd	r25, Y+18	; 0x12
    1f04:	ab 89       	ldd	r26, Y+19	; 0x13
    1f06:	bc 89       	ldd	r27, Y+20	; 0x14
    1f08:	48 0f       	add	r20, r24
    1f0a:	59 1f       	adc	r21, r25
    1f0c:	6a 1f       	adc	r22, r26
    1f0e:	7b 1f       	adc	r23, r27
    1f10:	76 95       	lsr	r23
    1f12:	67 95       	ror	r22
    1f14:	57 95       	ror	r21
    1f16:	47 95       	ror	r20
    1f18:	81 70       	andi	r24, 0x01	; 1
    1f1a:	90 70       	andi	r25, 0x00	; 0
    1f1c:	a0 70       	andi	r26, 0x00	; 0
    1f1e:	b0 70       	andi	r27, 0x00	; 0
    1f20:	48 0f       	add	r20, r24
    1f22:	59 1f       	adc	r21, r25
    1f24:	6a 1f       	adc	r22, r26
    1f26:	7b 1f       	adc	r23, r27
    1f28:	21 e0       	ldi	r18, 0x01	; 1
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
    1f2a:	41 50       	subi	r20, 0x01	; 1
    1f2c:	5e 4f       	sbci	r21, 0xFE	; 254
    1f2e:	6f 4f       	sbci	r22, 0xFF	; 255
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	89 e0       	ldi	r24, 0x09	; 9
    1f34:	76 95       	lsr	r23
    1f36:	67 95       	ror	r22
    1f38:	57 95       	ror	r21
    1f3a:	47 95       	ror	r20
    1f3c:	8a 95       	dec	r24
    1f3e:	d1 f7       	brne	.-12     	; 0x1f34 <find_volume+0x590>
    1f40:	e4 16       	cp	r14, r20
    1f42:	f5 06       	cpc	r15, r21
    1f44:	06 07       	cpc	r16, r22
    1f46:	17 07       	cpc	r17, r23
    1f48:	08 f4       	brcc	.+2      	; 0x1f4c <find_volume+0x5a8>
    1f4a:	b4 cd       	rjmp	.-1176   	; 0x1ab4 <find_volume+0x110>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
    1f4c:	8f ef       	ldi	r24, 0xFF	; 255
    1f4e:	9f ef       	ldi	r25, 0xFF	; 255
    1f50:	dc 01       	movw	r26, r24
    1f52:	f6 01       	movw	r30, r12
    1f54:	87 87       	std	Z+15, r24	; 0x0f
    1f56:	90 8b       	std	Z+16, r25	; 0x10
    1f58:	a1 8b       	std	Z+17, r26	; 0x11
    1f5a:	b2 8b       	std	Z+18, r27	; 0x12
    1f5c:	83 87       	std	Z+11, r24	; 0x0b
    1f5e:	94 87       	std	Z+12, r25	; 0x0c
    1f60:	a5 87       	std	Z+13, r26	; 0x0d
    1f62:	b6 87       	std	Z+14, r27	; 0x0e
		fs->fsi_flag = 0x80;
    1f64:	80 e8       	ldi	r24, 0x80	; 128
    1f66:	84 83       	std	Z+4, r24	; 0x04
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
    1f68:	23 30       	cpi	r18, 0x03	; 3
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <find_volume+0x5ca>
    1f6c:	c2 c0       	rjmp	.+388    	; 0x20f2 <find_volume+0x74e>
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;	/* FAT sub-type */
    1f6e:	d6 01       	movw	r26, r12
    1f70:	2c 93       	st	X, r18
	fs->id = ++Fsid;	/* File system mount ID */
    1f72:	80 91 2b 01 	lds	r24, 0x012B
    1f76:	90 91 2c 01 	lds	r25, 0x012C
    1f7a:	01 96       	adiw	r24, 0x01	; 1
    1f7c:	90 93 2c 01 	sts	0x012C, r25
    1f80:	80 93 2b 01 	sts	0x012B, r24
    1f84:	16 96       	adiw	r26, 0x06	; 6
    1f86:	9c 93       	st	X, r25
    1f88:	8e 93       	st	-X, r24
    1f8a:	15 97       	sbiw	r26, 0x05	; 5
	fs->cdir = 0;		/* Initialize current directory */
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	53 cd       	rjmp	.-1370   	; 0x1a38 <find_volume+0x94>
		 /*while(1){
		 	// I LIKE PIE
            SPDR = 0xAC;
            while(!(SPSR && (1<<SPIF)));
        }*/
		return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	50 cd       	rjmp	.-1376   	; 0x1a38 <find_volume+0x94>
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    1f98:	da 01       	movw	r26, r20
    1f9a:	c9 01       	movw	r24, r18
    1f9c:	02 96       	adiw	r24, 0x02	; 2
    1f9e:	a1 1d       	adc	r26, r1
    1fa0:	b1 1d       	adc	r27, r1
    1fa2:	89 8b       	std	Y+17, r24	; 0x11
    1fa4:	9a 8b       	std	Y+18, r25	; 0x12
    1fa6:	ab 8b       	std	Y+19, r26	; 0x13
    1fa8:	bc 8b       	std	Y+20, r27	; 0x14
    1faa:	f6 01       	movw	r30, r12
    1fac:	83 8b       	std	Z+19, r24	; 0x13
    1fae:	94 8b       	std	Z+20, r25	; 0x14
    1fb0:	a5 8b       	std	Z+21, r26	; 0x15
    1fb2:	b6 8b       	std	Z+22, r27	; 0x16
		fs->volbase = bsect;								/* Volume start sector */
    1fb4:	83 8e       	std	Z+27, r8	; 0x1b
    1fb6:	94 8e       	std	Z+28, r9	; 0x1c
    1fb8:	a5 8e       	std	Z+29, r10	; 0x1d
    1fba:	b6 8e       	std	Z+30, r11	; 0x1e
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    1fbc:	4f 89       	ldd	r20, Y+23	; 0x17
    1fbe:	58 8d       	ldd	r21, Y+24	; 0x18
    1fc0:	69 8d       	ldd	r22, Y+25	; 0x19
    1fc2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fc4:	48 0d       	add	r20, r8
    1fc6:	59 1d       	adc	r21, r9
    1fc8:	6a 1d       	adc	r22, r10
    1fca:	7b 1d       	adc	r23, r11
    1fcc:	47 8f       	std	Z+31, r20	; 0x1f
    1fce:	50 a3       	lds	r21, 0x50
    1fd0:	61 a3       	lds	r22, 0x51
    1fd2:	72 a3       	lds	r23, 0x52
		fs->database = bsect + sysect;						/* Data start sector */
    1fd4:	d3 01       	movw	r26, r6
    1fd6:	c2 01       	movw	r24, r4
    1fd8:	88 0d       	add	r24, r8
    1fda:	99 1d       	adc	r25, r9
    1fdc:	aa 1d       	adc	r26, r10
    1fde:	bb 1d       	adc	r27, r11
    1fe0:	87 a3       	lds	r24, 0x57
    1fe2:	90 a7       	lds	r25, 0x70
    1fe4:	a1 a7       	lds	r26, 0x71
    1fe6:	b2 a7       	lds	r27, 0x72
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
    1fe8:	22 e0       	ldi	r18, 0x02	; 2
    1fea:	6f cf       	rjmp	.-290    	; 0x1eca <find_volume+0x526>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    1fec:	da 01       	movw	r26, r20
    1fee:	c9 01       	movw	r24, r18
    1ff0:	02 96       	adiw	r24, 0x02	; 2
    1ff2:	a1 1d       	adc	r26, r1
    1ff4:	b1 1d       	adc	r27, r1
    1ff6:	89 8b       	std	Y+17, r24	; 0x11
    1ff8:	9a 8b       	std	Y+18, r25	; 0x12
    1ffa:	ab 8b       	std	Y+19, r26	; 0x13
    1ffc:	bc 8b       	std	Y+20, r27	; 0x14
    1ffe:	f6 01       	movw	r30, r12
    2000:	83 8b       	std	Z+19, r24	; 0x13
    2002:	94 8b       	std	Z+20, r25	; 0x14
    2004:	a5 8b       	std	Z+21, r26	; 0x15
    2006:	b6 8b       	std	Z+22, r27	; 0x16
		fs->volbase = bsect;								/* Volume start sector */
    2008:	83 8e       	std	Z+27, r8	; 0x1b
    200a:	94 8e       	std	Z+28, r9	; 0x1c
    200c:	a5 8e       	std	Z+29, r10	; 0x1d
    200e:	b6 8e       	std	Z+30, r11	; 0x1e
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    2010:	8f 89       	ldd	r24, Y+23	; 0x17
    2012:	98 8d       	ldd	r25, Y+24	; 0x18
    2014:	a9 8d       	ldd	r26, Y+25	; 0x19
    2016:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2018:	88 0d       	add	r24, r8
    201a:	99 1d       	adc	r25, r9
    201c:	aa 1d       	adc	r26, r10
    201e:	bb 1d       	adc	r27, r11
    2020:	87 8f       	std	Z+31, r24	; 0x1f
    2022:	90 a3       	lds	r25, 0x50
    2024:	a1 a3       	lds	r26, 0x51
    2026:	b2 a3       	lds	r27, 0x52
		fs->database = bsect + sysect;						/* Data start sector */
    2028:	d3 01       	movw	r26, r6
    202a:	c2 01       	movw	r24, r4
    202c:	88 0d       	add	r24, r8
    202e:	99 1d       	adc	r25, r9
    2030:	aa 1d       	adc	r26, r10
    2032:	bb 1d       	adc	r27, r11
    2034:	87 a3       	lds	r24, 0x57
    2036:	90 a7       	lds	r25, 0x70
    2038:	a1 a7       	lds	r26, 0x71
    203a:	b2 a7       	lds	r27, 0x72
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    203c:	e6 5a       	subi	r30, 0xA6	; 166
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    2040:	30 81       	ld	r19, Z
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	f6 01       	movw	r30, r12
    2046:	e7 5a       	subi	r30, 0xA7	; 167
    2048:	ff 4f       	sbci	r31, 0xFF	; 255
    204a:	80 81       	ld	r24, Z
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	82 2b       	or	r24, r18
    2050:	93 2b       	or	r25, r19
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
		fs->volbase = bsect;								/* Volume start sector */
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
		fs->database = bsect + sysect;						/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
    2052:	00 97       	sbiw	r24, 0x00	; 0
    2054:	09 f0       	breq	.+2      	; 0x2058 <find_volume+0x6b4>
    2056:	2e cd       	rjmp	.-1444   	; 0x1ab4 <find_volume+0x110>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    2058:	21 14       	cp	r2, r1
    205a:	31 04       	cpc	r3, r1
    205c:	09 f0       	breq	.+2      	; 0x2060 <find_volume+0x6bc>
    205e:	2a cd       	rjmp	.-1452   	; 0x1ab4 <find_volume+0x110>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    2060:	f6 01       	movw	r30, r12
    2062:	e2 5a       	subi	r30, 0xA2	; 162
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	80 81       	ld	r24, Z
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	a0 e0       	ldi	r26, 0x00	; 0
    206c:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    206e:	44 27       	eor	r20, r20
    2070:	58 2f       	mov	r21, r24
    2072:	69 2f       	mov	r22, r25
    2074:	7a 2f       	mov	r23, r26
    2076:	f6 01       	movw	r30, r12
    2078:	e3 5a       	subi	r30, 0xA3	; 163
    207a:	ff 4f       	sbci	r31, 0xFF	; 255
    207c:	80 81       	ld	r24, Z
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a0 e0       	ldi	r26, 0x00	; 0
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	48 2b       	or	r20, r24
    2086:	59 2b       	or	r21, r25
    2088:	6a 2b       	or	r22, r26
    208a:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    208c:	76 2f       	mov	r23, r22
    208e:	65 2f       	mov	r22, r21
    2090:	54 2f       	mov	r21, r20
    2092:	44 27       	eor	r20, r20
    2094:	f6 01       	movw	r30, r12
    2096:	e4 5a       	subi	r30, 0xA4	; 164
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	80 81       	ld	r24, Z
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e0       	ldi	r26, 0x00	; 0
    20a0:	b0 e0       	ldi	r27, 0x00	; 0
    20a2:	48 2b       	or	r20, r24
    20a4:	59 2b       	or	r21, r25
    20a6:	6a 2b       	or	r22, r26
    20a8:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    20aa:	76 2f       	mov	r23, r22
    20ac:	65 2f       	mov	r22, r21
    20ae:	54 2f       	mov	r21, r20
    20b0:	44 27       	eor	r20, r20
    20b2:	f6 01       	movw	r30, r12
    20b4:	e5 5a       	subi	r30, 0xA5	; 165
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 81       	ld	r24, Z
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	a0 e0       	ldi	r26, 0x00	; 0
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	48 2b       	or	r20, r24
    20c2:	59 2b       	or	r21, r25
    20c4:	6a 2b       	or	r22, r26
    20c6:	7b 2b       	or	r23, r27
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
		fs->database = bsect + sysect;						/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
    20c8:	d6 01       	movw	r26, r12
    20ca:	93 96       	adiw	r26, 0x23	; 35
    20cc:	4d 93       	st	X+, r20
    20ce:	5d 93       	st	X+, r21
    20d0:	6d 93       	st	X+, r22
    20d2:	7c 93       	st	X, r23
    20d4:	96 97       	sbiw	r26, 0x26	; 38
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
    20d6:	49 89       	ldd	r20, Y+17	; 0x11
    20d8:	5a 89       	ldd	r21, Y+18	; 0x12
    20da:	6b 89       	ldd	r22, Y+19	; 0x13
    20dc:	7c 89       	ldd	r23, Y+20	; 0x14
    20de:	44 0f       	add	r20, r20
    20e0:	55 1f       	adc	r21, r21
    20e2:	66 1f       	adc	r22, r22
    20e4:	77 1f       	adc	r23, r23
    20e6:	44 0f       	add	r20, r20
    20e8:	55 1f       	adc	r21, r21
    20ea:	66 1f       	adc	r22, r22
    20ec:	77 1f       	adc	r23, r23
    20ee:	23 e0       	ldi	r18, 0x03	; 3
    20f0:	1c cf       	rjmp	.-456    	; 0x1f2a <find_volume+0x586>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    20f2:	e0 5a       	subi	r30, 0xA0	; 160
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    20f6:	50 81       	ld	r21, Z
    20f8:	40 e0       	ldi	r20, 0x00	; 0
    20fa:	f6 01       	movw	r30, r12
    20fc:	e1 5a       	subi	r30, 0xA1	; 161
    20fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2100:	80 81       	ld	r24, Z
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	84 2b       	or	r24, r20
    2106:	95 2b       	or	r25, r21
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
		fs->fsi_flag = 0x80;
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    2108:	81 30       	cpi	r24, 0x01	; 1
    210a:	91 05       	cpc	r25, r1
    210c:	09 f0       	breq	.+2      	; 0x2110 <find_volume+0x76c>
    210e:	2f cf       	rjmp	.-418    	; 0x1f6e <find_volume+0x5ca>
			&& move_window(fs, bsect + 1) == FR_OK)
    2110:	b5 01       	movw	r22, r10
    2112:	a4 01       	movw	r20, r8
    2114:	4f 5f       	subi	r20, 0xFF	; 255
    2116:	5f 4f       	sbci	r21, 0xFF	; 255
    2118:	6f 4f       	sbci	r22, 0xFF	; 255
    211a:	7f 4f       	sbci	r23, 0xFF	; 255
    211c:	c6 01       	movw	r24, r12
    211e:	2f 8f       	std	Y+31, r18	; 0x1f
    2120:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
    2124:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	09 f0       	breq	.+2      	; 0x212c <find_volume+0x788>
    212a:	21 cf       	rjmp	.-446    	; 0x1f6e <find_volume+0x5ca>
		{
			fs->fsi_flag = 0;
    212c:	d6 01       	movw	r26, r12
    212e:	14 96       	adiw	r26, 0x04	; 4
    2130:	1c 92       	st	X, r1
    2132:	14 97       	sbiw	r26, 0x04	; 4
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    2134:	f6 01       	movw	r30, r12
    2136:	e2 5d       	subi	r30, 0xD2	; 210
    2138:	fd 4f       	sbci	r31, 0xFD	; 253
	rv = rv << 8 | ptr[0];
    213a:	50 81       	ld	r21, Z
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	f6 01       	movw	r30, r12
    2140:	e3 5d       	subi	r30, 0xD3	; 211
    2142:	fd 4f       	sbci	r31, 0xFD	; 253
    2144:	80 81       	ld	r24, Z
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	84 2b       	or	r24, r20
    214a:	95 2b       	or	r25, r21
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    214c:	ba ea       	ldi	r27, 0xAA	; 170
    214e:	85 35       	cpi	r24, 0x55	; 85
    2150:	9b 07       	cpc	r25, r27
    2152:	09 f0       	breq	.+2      	; 0x2156 <find_volume+0x7b2>
    2154:	0c cf       	rjmp	.-488    	; 0x1f6e <find_volume+0x5ca>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    2156:	f6 01       	movw	r30, r12
    2158:	82 a9       	sts	0x42, r24
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	a0 e0       	ldi	r26, 0x00	; 0
    215e:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    2160:	ba 2f       	mov	r27, r26
    2162:	a9 2f       	mov	r26, r25
    2164:	98 2f       	mov	r25, r24
    2166:	88 27       	eor	r24, r24
    2168:	41 a9       	sts	0x41, r20
    216a:	50 e0       	ldi	r21, 0x00	; 0
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	70 e0       	ldi	r23, 0x00	; 0
    2170:	84 2b       	or	r24, r20
    2172:	95 2b       	or	r25, r21
    2174:	a6 2b       	or	r26, r22
    2176:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    2178:	ba 2f       	mov	r27, r26
    217a:	a9 2f       	mov	r26, r25
    217c:	98 2f       	mov	r25, r24
    217e:	88 27       	eor	r24, r24
    2180:	40 a9       	sts	0x40, r20
    2182:	50 e0       	ldi	r21, 0x00	; 0
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	70 e0       	ldi	r23, 0x00	; 0
    2188:	84 2b       	or	r24, r20
    218a:	95 2b       	or	r25, r21
    218c:	a6 2b       	or	r26, r22
    218e:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    2190:	ba 2f       	mov	r27, r26
    2192:	a9 2f       	mov	r26, r25
    2194:	98 2f       	mov	r25, r24
    2196:	88 27       	eor	r24, r24
    2198:	47 a5       	lds	r20, 0x67
    219a:	50 e0       	ldi	r21, 0x00	; 0
    219c:	60 e0       	ldi	r22, 0x00	; 0
    219e:	70 e0       	ldi	r23, 0x00	; 0
    21a0:	84 2b       	or	r24, r20
    21a2:	95 2b       	or	r25, r21
    21a4:	a6 2b       	or	r26, r22
    21a6:	b7 2b       	or	r27, r23
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    21a8:	82 35       	cpi	r24, 0x52	; 82
    21aa:	f2 e5       	ldi	r31, 0x52	; 82
    21ac:	9f 07       	cpc	r25, r31
    21ae:	f1 e6       	ldi	r31, 0x61	; 97
    21b0:	af 07       	cpc	r26, r31
    21b2:	f1 e4       	ldi	r31, 0x41	; 65
    21b4:	bf 07       	cpc	r27, r31
    21b6:	09 f0       	breq	.+2      	; 0x21ba <find_volume+0x816>
    21b8:	da ce       	rjmp	.-588    	; 0x1f6e <find_volume+0x5ca>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    21ba:	f6 01       	movw	r30, r12
    21bc:	ea 5e       	subi	r30, 0xEA	; 234
    21be:	fd 4f       	sbci	r31, 0xFD	; 253
    21c0:	80 81       	ld	r24, Z
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	a0 e0       	ldi	r26, 0x00	; 0
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    21c8:	ba 2f       	mov	r27, r26
    21ca:	a9 2f       	mov	r26, r25
    21cc:	98 2f       	mov	r25, r24
    21ce:	88 27       	eor	r24, r24
    21d0:	f6 01       	movw	r30, r12
    21d2:	eb 5e       	subi	r30, 0xEB	; 235
    21d4:	fd 4f       	sbci	r31, 0xFD	; 253
    21d6:	40 81       	ld	r20, Z
    21d8:	50 e0       	ldi	r21, 0x00	; 0
    21da:	60 e0       	ldi	r22, 0x00	; 0
    21dc:	70 e0       	ldi	r23, 0x00	; 0
    21de:	84 2b       	or	r24, r20
    21e0:	95 2b       	or	r25, r21
    21e2:	a6 2b       	or	r26, r22
    21e4:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    21e6:	ba 2f       	mov	r27, r26
    21e8:	a9 2f       	mov	r26, r25
    21ea:	98 2f       	mov	r25, r24
    21ec:	88 27       	eor	r24, r24
    21ee:	f6 01       	movw	r30, r12
    21f0:	ec 5e       	subi	r30, 0xEC	; 236
    21f2:	fd 4f       	sbci	r31, 0xFD	; 253
    21f4:	40 81       	ld	r20, Z
    21f6:	50 e0       	ldi	r21, 0x00	; 0
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	70 e0       	ldi	r23, 0x00	; 0
    21fc:	84 2b       	or	r24, r20
    21fe:	95 2b       	or	r25, r21
    2200:	a6 2b       	or	r26, r22
    2202:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    2204:	ba 2f       	mov	r27, r26
    2206:	a9 2f       	mov	r26, r25
    2208:	98 2f       	mov	r25, r24
    220a:	88 27       	eor	r24, r24
    220c:	f6 01       	movw	r30, r12
    220e:	ed 5e       	subi	r30, 0xED	; 237
    2210:	fd 4f       	sbci	r31, 0xFD	; 253
    2212:	40 81       	ld	r20, Z
    2214:	50 e0       	ldi	r21, 0x00	; 0
    2216:	60 e0       	ldi	r22, 0x00	; 0
    2218:	70 e0       	ldi	r23, 0x00	; 0
    221a:	84 2b       	or	r24, r20
    221c:	95 2b       	or	r25, r21
    221e:	a6 2b       	or	r26, r22
    2220:	b7 2b       	or	r27, r23
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    2222:	82 37       	cpi	r24, 0x72	; 114
    2224:	32 e7       	ldi	r19, 0x72	; 114
    2226:	93 07       	cpc	r25, r19
    2228:	31 e4       	ldi	r19, 0x41	; 65
    222a:	a3 07       	cpc	r26, r19
    222c:	31 e6       	ldi	r19, 0x61	; 97
    222e:	b3 07       	cpc	r27, r19
    2230:	09 f0       	breq	.+2      	; 0x2234 <find_volume+0x890>
    2232:	9d ce       	rjmp	.-710    	; 0x1f6e <find_volume+0x5ca>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    2234:	f6 01       	movw	r30, r12
    2236:	e6 5e       	subi	r30, 0xE6	; 230
    2238:	fd 4f       	sbci	r31, 0xFD	; 253
    223a:	80 81       	ld	r24, Z
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	a0 e0       	ldi	r26, 0x00	; 0
    2240:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    2242:	ba 2f       	mov	r27, r26
    2244:	a9 2f       	mov	r26, r25
    2246:	98 2f       	mov	r25, r24
    2248:	88 27       	eor	r24, r24
    224a:	f6 01       	movw	r30, r12
    224c:	e7 5e       	subi	r30, 0xE7	; 231
    224e:	fd 4f       	sbci	r31, 0xFD	; 253
    2250:	40 81       	ld	r20, Z
    2252:	50 e0       	ldi	r21, 0x00	; 0
    2254:	60 e0       	ldi	r22, 0x00	; 0
    2256:	70 e0       	ldi	r23, 0x00	; 0
    2258:	84 2b       	or	r24, r20
    225a:	95 2b       	or	r25, r21
    225c:	a6 2b       	or	r26, r22
    225e:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    2260:	ba 2f       	mov	r27, r26
    2262:	a9 2f       	mov	r26, r25
    2264:	98 2f       	mov	r25, r24
    2266:	88 27       	eor	r24, r24
    2268:	f6 01       	movw	r30, r12
    226a:	e8 5e       	subi	r30, 0xE8	; 232
    226c:	fd 4f       	sbci	r31, 0xFD	; 253
    226e:	40 81       	ld	r20, Z
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	70 e0       	ldi	r23, 0x00	; 0
    2276:	84 2b       	or	r24, r20
    2278:	95 2b       	or	r25, r21
    227a:	a6 2b       	or	r26, r22
    227c:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    227e:	ba 2f       	mov	r27, r26
    2280:	a9 2f       	mov	r26, r25
    2282:	98 2f       	mov	r25, r24
    2284:	88 27       	eor	r24, r24
    2286:	f6 01       	movw	r30, r12
    2288:	e9 5e       	subi	r30, 0xE9	; 233
    228a:	fd 4f       	sbci	r31, 0xFD	; 253
    228c:	40 81       	ld	r20, Z
    228e:	50 e0       	ldi	r21, 0x00	; 0
    2290:	60 e0       	ldi	r22, 0x00	; 0
    2292:	70 e0       	ldi	r23, 0x00	; 0
    2294:	84 2b       	or	r24, r20
    2296:	95 2b       	or	r25, r21
    2298:	a6 2b       	or	r26, r22
    229a:	b7 2b       	or	r27, r23
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    229c:	f6 01       	movw	r30, r12
    229e:	87 87       	std	Z+15, r24	; 0x0f
    22a0:	90 8b       	std	Z+16, r25	; 0x10
    22a2:	a1 8b       	std	Z+17, r26	; 0x11
    22a4:	b2 8b       	std	Z+18, r27	; 0x12
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    22a6:	e2 5e       	subi	r30, 0xE2	; 226
    22a8:	fd 4f       	sbci	r31, 0xFD	; 253
    22aa:	80 81       	ld	r24, Z
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	a0 e0       	ldi	r26, 0x00	; 0
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    22b2:	ba 2f       	mov	r27, r26
    22b4:	a9 2f       	mov	r26, r25
    22b6:	98 2f       	mov	r25, r24
    22b8:	88 27       	eor	r24, r24
    22ba:	f6 01       	movw	r30, r12
    22bc:	e3 5e       	subi	r30, 0xE3	; 227
    22be:	fd 4f       	sbci	r31, 0xFD	; 253
    22c0:	40 81       	ld	r20, Z
    22c2:	50 e0       	ldi	r21, 0x00	; 0
    22c4:	60 e0       	ldi	r22, 0x00	; 0
    22c6:	70 e0       	ldi	r23, 0x00	; 0
    22c8:	84 2b       	or	r24, r20
    22ca:	95 2b       	or	r25, r21
    22cc:	a6 2b       	or	r26, r22
    22ce:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    22d0:	ba 2f       	mov	r27, r26
    22d2:	a9 2f       	mov	r26, r25
    22d4:	98 2f       	mov	r25, r24
    22d6:	88 27       	eor	r24, r24
    22d8:	f6 01       	movw	r30, r12
    22da:	e4 5e       	subi	r30, 0xE4	; 228
    22dc:	fd 4f       	sbci	r31, 0xFD	; 253
    22de:	40 81       	ld	r20, Z
    22e0:	50 e0       	ldi	r21, 0x00	; 0
    22e2:	60 e0       	ldi	r22, 0x00	; 0
    22e4:	70 e0       	ldi	r23, 0x00	; 0
    22e6:	84 2b       	or	r24, r20
    22e8:	95 2b       	or	r25, r21
    22ea:	a6 2b       	or	r26, r22
    22ec:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    22ee:	ba 2f       	mov	r27, r26
    22f0:	a9 2f       	mov	r26, r25
    22f2:	98 2f       	mov	r25, r24
    22f4:	88 27       	eor	r24, r24
    22f6:	f6 01       	movw	r30, r12
    22f8:	e5 5e       	subi	r30, 0xE5	; 229
    22fa:	fd 4f       	sbci	r31, 0xFD	; 253
    22fc:	40 81       	ld	r20, Z
    22fe:	50 e0       	ldi	r21, 0x00	; 0
    2300:	60 e0       	ldi	r22, 0x00	; 0
    2302:	70 e0       	ldi	r23, 0x00	; 0
    2304:	84 2b       	or	r24, r20
    2306:	95 2b       	or	r25, r21
    2308:	a6 2b       	or	r26, r22
    230a:	b7 2b       	or	r27, r23
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    230c:	f6 01       	movw	r30, r12
    230e:	83 87       	std	Z+11, r24	; 0x0b
    2310:	94 87       	std	Z+12, r25	; 0x0c
    2312:	a5 87       	std	Z+13, r26	; 0x0d
    2314:	b6 87       	std	Z+14, r27	; 0x0e
    2316:	2b ce       	rjmp	.-938    	; 0x1f6e <find_volume+0x5ca>

00002318 <get_fat.isra.8>:
/*-----------------------------------------------------------------------*/
/* FAT access - Read value of a FAT entry                                */
/*-----------------------------------------------------------------------*/

static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
    2318:	bf 92       	push	r11
    231a:	cf 92       	push	r12
    231c:	df 92       	push	r13
    231e:	ef 92       	push	r14
    2320:	ff 92       	push	r15
    2322:	0f 93       	push	r16
    2324:	1f 93       	push	r17
    2326:	cf 93       	push	r28
    2328:	df 93       	push	r29
    232a:	ec 01       	movw	r28, r24
    232c:	6a 01       	movw	r12, r20
    232e:	7b 01       	movw	r14, r22
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    2330:	42 30       	cpi	r20, 0x02	; 2
    2332:	51 05       	cpc	r21, r1
    2334:	61 05       	cpc	r22, r1
    2336:	71 05       	cpc	r23, r1
    2338:	88 f0       	brcs	.+34     	; 0x235c <get_fat.isra.8+0x44>
    233a:	8b 89       	ldd	r24, Y+19	; 0x13
    233c:	9c 89       	ldd	r25, Y+20	; 0x14
    233e:	ad 89       	ldd	r26, Y+21	; 0x15
    2340:	be 89       	ldd	r27, Y+22	; 0x16
    2342:	48 17       	cp	r20, r24
    2344:	59 07       	cpc	r21, r25
    2346:	6a 07       	cpc	r22, r26
    2348:	7b 07       	cpc	r23, r27
    234a:	40 f4       	brcc	.+16     	; 0x235c <get_fat.isra.8+0x44>
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
    234c:	88 81       	ld	r24, Y
    234e:	82 30       	cpi	r24, 0x02	; 2
    2350:	09 f4       	brne	.+2      	; 0x2354 <get_fat.isra.8+0x3c>
    2352:	77 c0       	rjmp	.+238    	; 0x2442 <get_fat.isra.8+0x12a>
    2354:	83 30       	cpi	r24, 0x03	; 3
    2356:	79 f1       	breq	.+94     	; 0x23b6 <get_fat.isra.8+0x9e>
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	81 f0       	breq	.+32     	; 0x237c <get_fat.isra.8+0x64>
				}
			}
			/* go next */
#endif
		default:
			val = 1;	/* Internal error */
    235c:	01 e0       	ldi	r16, 0x01	; 1
    235e:	10 e0       	ldi	r17, 0x00	; 0
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return val;
}
    2364:	b8 01       	movw	r22, r16
    2366:	c9 01       	movw	r24, r18
    2368:	df 91       	pop	r29
    236a:	cf 91       	pop	r28
    236c:	1f 91       	pop	r17
    236e:	0f 91       	pop	r16
    2370:	ff 90       	pop	r15
    2372:	ef 90       	pop	r14
    2374:	df 90       	pop	r13
    2376:	cf 90       	pop	r12
    2378:	bf 90       	pop	r11
    237a:	08 95       	ret
	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    237c:	8a 01       	movw	r16, r20
    237e:	16 95       	lsr	r17
    2380:	07 95       	ror	r16
    2382:	04 0f       	add	r16, r20
    2384:	15 1f       	adc	r17, r21
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    2386:	a8 01       	movw	r20, r16
    2388:	45 2f       	mov	r20, r21
    238a:	55 27       	eor	r21, r21
    238c:	46 95       	lsr	r20
    238e:	60 e0       	ldi	r22, 0x00	; 0
    2390:	70 e0       	ldi	r23, 0x00	; 0
    2392:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2394:	98 a1       	lds	r25, 0x48
    2396:	a9 a1       	lds	r26, 0x49
    2398:	ba a1       	lds	r27, 0x4a
    239a:	48 0f       	add	r20, r24
    239c:	59 1f       	adc	r21, r25
    239e:	6a 1f       	adc	r22, r26
    23a0:	7b 1f       	adc	r23, r27
    23a2:	ce 01       	movw	r24, r28
    23a4:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	09 f4       	brne	.+2      	; 0x23ae <get_fat.isra.8+0x96>
    23ac:	6b c0       	rjmp	.+214    	; 0x2484 <get_fat.isra.8+0x16c>

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    23ae:	0f ef       	ldi	r16, 0xFF	; 255
    23b0:	1f ef       	ldi	r17, 0xFF	; 255
    23b2:	98 01       	movw	r18, r16
    23b4:	d7 cf       	rjmp	.-82     	; 0x2364 <get_fat.isra.8+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
			val = ld_word(fs->win + clst * 2 % SS(fs));
			break;

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    23b6:	e7 e0       	ldi	r30, 0x07	; 7
    23b8:	76 95       	lsr	r23
    23ba:	67 95       	ror	r22
    23bc:	57 95       	ror	r21
    23be:	47 95       	ror	r20
    23c0:	ea 95       	dec	r30
    23c2:	d1 f7       	brne	.-12     	; 0x23b8 <get_fat.isra.8+0xa0>
    23c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23c6:	98 a1       	lds	r25, 0x48
    23c8:	a9 a1       	lds	r26, 0x49
    23ca:	ba a1       	lds	r27, 0x4a
    23cc:	48 0f       	add	r20, r24
    23ce:	59 1f       	adc	r21, r25
    23d0:	6a 1f       	adc	r22, r26
    23d2:	7b 1f       	adc	r23, r27
    23d4:	ce 01       	movw	r24, r28
    23d6:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
    23da:	00 97       	sbiw	r24, 0x00	; 0
    23dc:	41 f7       	brne	.-48     	; 0x23ae <get_fat.isra.8+0x96>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
    23de:	f6 01       	movw	r30, r12
    23e0:	ee 0f       	add	r30, r30
    23e2:	ff 1f       	adc	r31, r31
    23e4:	ee 0f       	add	r30, r30
    23e6:	ff 1f       	adc	r31, r31
    23e8:	f1 70       	andi	r31, 0x01	; 1
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    23ea:	ec 0f       	add	r30, r28
    23ec:	fd 1f       	adc	r31, r29
    23ee:	02 a9       	sts	0x42, r16
    23f0:	10 e0       	ldi	r17, 0x00	; 0
    23f2:	20 e0       	ldi	r18, 0x00	; 0
    23f4:	30 e0       	ldi	r19, 0x00	; 0
	rv = rv << 8 | ptr[2];
    23f6:	32 2f       	mov	r19, r18
    23f8:	21 2f       	mov	r18, r17
    23fa:	10 2f       	mov	r17, r16
    23fc:	00 27       	eor	r16, r16
    23fe:	81 a9       	sts	0x41, r24
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	a0 e0       	ldi	r26, 0x00	; 0
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	08 2b       	or	r16, r24
    2408:	19 2b       	or	r17, r25
    240a:	2a 2b       	or	r18, r26
    240c:	3b 2b       	or	r19, r27
	rv = rv << 8 | ptr[1];
    240e:	32 2f       	mov	r19, r18
    2410:	21 2f       	mov	r18, r17
    2412:	10 2f       	mov	r17, r16
    2414:	00 27       	eor	r16, r16
    2416:	80 a9       	sts	0x40, r24
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	a0 e0       	ldi	r26, 0x00	; 0
    241c:	b0 e0       	ldi	r27, 0x00	; 0
    241e:	08 2b       	or	r16, r24
    2420:	19 2b       	or	r17, r25
    2422:	2a 2b       	or	r18, r26
    2424:	3b 2b       	or	r19, r27
	rv = rv << 8 | ptr[0];
    2426:	32 2f       	mov	r19, r18
    2428:	21 2f       	mov	r18, r17
    242a:	10 2f       	mov	r17, r16
    242c:	00 27       	eor	r16, r16
    242e:	87 a5       	lds	r24, 0x67
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a0 e0       	ldi	r26, 0x00	; 0
    2434:	b0 e0       	ldi	r27, 0x00	; 0
    2436:	08 2b       	or	r16, r24
    2438:	19 2b       	or	r17, r25
    243a:	2a 2b       	or	r18, r26
    243c:	3b 2b       	or	r19, r27
			val = ld_word(fs->win + clst * 2 % SS(fs));
			break;

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
    243e:	3f 70       	andi	r19, 0x0F	; 15
    2440:	91 cf       	rjmp	.-222    	; 0x2364 <get_fat.isra.8+0x4c>
			wc |= fs->win[bc % SS(fs)] << 8;
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    2442:	45 2f       	mov	r20, r21
    2444:	56 2f       	mov	r21, r22
    2446:	67 2f       	mov	r22, r23
    2448:	77 27       	eor	r23, r23
    244a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    244c:	98 a1       	lds	r25, 0x48
    244e:	a9 a1       	lds	r26, 0x49
    2450:	ba a1       	lds	r27, 0x4a
    2452:	48 0f       	add	r20, r24
    2454:	59 1f       	adc	r21, r25
    2456:	6a 1f       	adc	r22, r26
    2458:	7b 1f       	adc	r23, r27
    245a:	ce 01       	movw	r24, r28
    245c:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
    2460:	00 97       	sbiw	r24, 0x00	; 0
    2462:	09 f0       	breq	.+2      	; 0x2466 <get_fat.isra.8+0x14e>
    2464:	a4 cf       	rjmp	.-184    	; 0x23ae <get_fat.isra.8+0x96>
			val = ld_word(fs->win + clst * 2 % SS(fs));
    2466:	f6 01       	movw	r30, r12
    2468:	ee 0f       	add	r30, r30
    246a:	ff 1f       	adc	r31, r31
    246c:	f1 70       	andi	r31, 0x01	; 1
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    246e:	ec 0f       	add	r30, r28
    2470:	fd 1f       	adc	r31, r29
	rv = rv << 8 | ptr[0];
    2472:	90 a9       	sts	0x40, r25
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	07 a5       	lds	r16, 0x67
    2478:	10 e0       	ldi	r17, 0x00	; 0
    247a:	08 2b       	or	r16, r24
    247c:	19 2b       	or	r17, r25
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
			val = ld_word(fs->win + clst * 2 % SS(fs));
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	70 cf       	rjmp	.-288    	; 0x2364 <get_fat.isra.8+0x4c>

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc = fs->win[bc++ % SS(fs)];
    2484:	f8 01       	movw	r30, r16
    2486:	f1 70       	andi	r31, 0x01	; 1
    2488:	ec 0f       	add	r30, r28
    248a:	fd 1f       	adc	r31, r29
    248c:	b7 a4       	lds	r27, 0xa7
    248e:	0f 5f       	subi	r16, 0xFF	; 255
    2490:	1f 4f       	sbci	r17, 0xFF	; 255
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    2492:	a8 01       	movw	r20, r16
    2494:	45 2f       	mov	r20, r21
    2496:	55 27       	eor	r21, r21
    2498:	46 95       	lsr	r20
    249a:	60 e0       	ldi	r22, 0x00	; 0
    249c:	70 e0       	ldi	r23, 0x00	; 0
    249e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24a0:	98 a1       	lds	r25, 0x48
    24a2:	a9 a1       	lds	r26, 0x49
    24a4:	ba a1       	lds	r27, 0x4a
    24a6:	48 0f       	add	r20, r24
    24a8:	59 1f       	adc	r21, r25
    24aa:	6a 1f       	adc	r22, r26
    24ac:	7b 1f       	adc	r23, r27
    24ae:	ce 01       	movw	r24, r28
    24b0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
    24b4:	00 97       	sbiw	r24, 0x00	; 0
    24b6:	09 f0       	breq	.+2      	; 0x24ba <get_fat.isra.8+0x1a2>
    24b8:	7a cf       	rjmp	.-268    	; 0x23ae <get_fat.isra.8+0x96>

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc = fs->win[bc++ % SS(fs)];
    24ba:	2b 2d       	mov	r18, r11
    24bc:	30 e0       	ldi	r19, 0x00	; 0
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc |= fs->win[bc % SS(fs)] << 8;
    24be:	f8 01       	movw	r30, r16
    24c0:	f1 70       	andi	r31, 0x01	; 1
    24c2:	ec 0f       	add	r30, r28
    24c4:	fd 1f       	adc	r31, r29
    24c6:	97 a5       	lds	r25, 0x67
    24c8:	80 e0       	ldi	r24, 0x00	; 0
    24ca:	28 2b       	or	r18, r24
    24cc:	39 2b       	or	r19, r25
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	c8 22       	and	r12, r24
    24d2:	dd 24       	eor	r13, r13
    24d4:	c1 14       	cp	r12, r1
    24d6:	d1 04       	cpc	r13, r1
    24d8:	51 f0       	breq	.+20     	; 0x24ee <get_fat.isra.8+0x1d6>
    24da:	32 95       	swap	r19
    24dc:	22 95       	swap	r18
    24de:	2f 70       	andi	r18, 0x0F	; 15
    24e0:	23 27       	eor	r18, r19
    24e2:	3f 70       	andi	r19, 0x0F	; 15
    24e4:	23 27       	eor	r18, r19
    24e6:	89 01       	movw	r16, r18
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	3b cf       	rjmp	.-394    	; 0x2364 <get_fat.isra.8+0x4c>
    24ee:	89 01       	movw	r16, r18
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	1f 70       	andi	r17, 0x0F	; 15
    24f6:	20 70       	andi	r18, 0x00	; 0
    24f8:	30 70       	andi	r19, 0x00	; 0
    24fa:	34 cf       	rjmp	.-408    	; 0x2364 <get_fat.isra.8+0x4c>

000024fc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
    24fc:	8f 92       	push	r8
    24fe:	9f 92       	push	r9
    2500:	af 92       	push	r10
    2502:	bf 92       	push	r11
    2504:	cf 92       	push	r12
    2506:	df 92       	push	r13
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	ec 01       	movw	r28, r24
    2516:	6a 01       	movw	r12, r20
    2518:	7b 01       	movw	r14, r22
    251a:	48 01       	movw	r8, r16
    251c:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    251e:	42 30       	cpi	r20, 0x02	; 2
    2520:	51 05       	cpc	r21, r1
    2522:	61 05       	cpc	r22, r1
    2524:	71 05       	cpc	r23, r1
    2526:	48 f0       	brcs	.+18     	; 0x253a <put_fat+0x3e>
    2528:	8b 89       	ldd	r24, Y+19	; 0x13
    252a:	9c 89       	ldd	r25, Y+20	; 0x14
    252c:	ad 89       	ldd	r26, Y+21	; 0x15
    252e:	be 89       	ldd	r27, Y+22	; 0x16
    2530:	48 17       	cp	r20, r24
    2532:	59 07       	cpc	r21, r25
    2534:	6a 07       	cpc	r22, r26
    2536:	7b 07       	cpc	r23, r27
    2538:	78 f0       	brcs	.+30     	; 0x2558 <put_fat+0x5c>
	DWORD val		/* New value to be set to the entry */
)
{
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
    253a:	82 e0       	ldi	r24, 0x02	; 2
    253c:	90 e0       	ldi	r25, 0x00	; 0
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
    253e:	df 91       	pop	r29
    2540:	cf 91       	pop	r28
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	ff 90       	pop	r15
    2548:	ef 90       	pop	r14
    254a:	df 90       	pop	r13
    254c:	cf 90       	pop	r12
    254e:	bf 90       	pop	r11
    2550:	af 90       	pop	r10
    2552:	9f 90       	pop	r9
    2554:	8f 90       	pop	r8
    2556:	08 95       	ret
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
		switch (fs->fs_type) {
    2558:	88 81       	ld	r24, Y
    255a:	82 30       	cpi	r24, 0x02	; 2
    255c:	09 f4       	brne	.+2      	; 0x2560 <put_fat+0x64>
    255e:	93 c0       	rjmp	.+294    	; 0x2686 <put_fat+0x18a>
    2560:	83 30       	cpi	r24, 0x03	; 3
    2562:	09 f4       	brne	.+2      	; 0x2566 <put_fat+0x6a>
    2564:	59 c0       	rjmp	.+178    	; 0x2618 <put_fat+0x11c>
    2566:	81 30       	cpi	r24, 0x01	; 1
    2568:	41 f7       	brne	.-48     	; 0x253a <put_fat+0x3e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
    256a:	8a 01       	movw	r16, r20
    256c:	16 95       	lsr	r17
    256e:	07 95       	ror	r16
    2570:	0c 0d       	add	r16, r12
    2572:	1d 1d       	adc	r17, r13
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    2574:	a8 01       	movw	r20, r16
    2576:	45 2f       	mov	r20, r21
    2578:	55 27       	eor	r21, r21
    257a:	46 95       	lsr	r20
    257c:	60 e0       	ldi	r22, 0x00	; 0
    257e:	70 e0       	ldi	r23, 0x00	; 0
    2580:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2582:	98 a1       	lds	r25, 0x48
    2584:	a9 a1       	lds	r26, 0x49
    2586:	ba a1       	lds	r27, 0x4a
    2588:	48 0f       	add	r20, r24
    258a:	59 1f       	adc	r21, r25
    258c:	6a 1f       	adc	r22, r26
    258e:	7b 1f       	adc	r23, r27
    2590:	ce 01       	movw	r24, r28
    2592:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
			if (res != FR_OK) break;
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	91 f6       	brne	.-92     	; 0x253e <put_fat+0x42>
			p = fs->win + bc++ % SS(fs);
    259a:	f8 01       	movw	r30, r16
    259c:	f1 70       	andi	r31, 0x01	; 1
    259e:	0f 5f       	subi	r16, 0xFF	; 255
    25a0:	1f 4f       	sbci	r17, 0xFF	; 255
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	c8 22       	and	r12, r24
    25a6:	dd 24       	eor	r13, r13
    25a8:	c1 14       	cp	r12, r1
    25aa:	d1 04       	cpc	r13, r1
    25ac:	09 f4       	brne	.+2      	; 0x25b0 <put_fat+0xb4>
    25ae:	88 c0       	rjmp	.+272    	; 0x26c0 <put_fat+0x1c4>
    25b0:	ec 0f       	add	r30, r28
    25b2:	fd 1f       	adc	r31, r29
    25b4:	97 a5       	lds	r25, 0x67
    25b6:	9f 70       	andi	r25, 0x0F	; 15
    25b8:	88 2d       	mov	r24, r8
    25ba:	82 95       	swap	r24
    25bc:	80 7f       	andi	r24, 0xF0	; 240
    25be:	89 2b       	or	r24, r25
    25c0:	87 a7       	lds	r24, 0x77
			fs->wflag = 1;
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	8b 83       	std	Y+3, r24	; 0x03
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    25c6:	a8 01       	movw	r20, r16
    25c8:	45 2f       	mov	r20, r21
    25ca:	55 27       	eor	r21, r21
    25cc:	46 95       	lsr	r20
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	70 e0       	ldi	r23, 0x00	; 0
    25d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25d4:	98 a1       	lds	r25, 0x48
    25d6:	a9 a1       	lds	r26, 0x49
    25d8:	ba a1       	lds	r27, 0x4a
    25da:	48 0f       	add	r20, r24
    25dc:	59 1f       	adc	r21, r25
    25de:	6a 1f       	adc	r22, r26
    25e0:	7b 1f       	adc	r23, r27
    25e2:	ce 01       	movw	r24, r28
    25e4:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
			if (res != FR_OK) break;
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	09 f0       	breq	.+2      	; 0x25ee <put_fat+0xf2>
    25ec:	a8 cf       	rjmp	.-176    	; 0x253e <put_fat+0x42>
			p = fs->win + bc % SS(fs);
    25ee:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    25f0:	c1 14       	cp	r12, r1
    25f2:	d1 04       	cpc	r13, r1
    25f4:	09 f4       	brne	.+2      	; 0x25f8 <put_fat+0xfc>
    25f6:	68 c0       	rjmp	.+208    	; 0x26c8 <put_fat+0x1cc>
    25f8:	b5 01       	movw	r22, r10
    25fa:	a4 01       	movw	r20, r8
    25fc:	24 e0       	ldi	r18, 0x04	; 4
    25fe:	76 95       	lsr	r23
    2600:	67 95       	ror	r22
    2602:	57 95       	ror	r21
    2604:	47 95       	ror	r20
    2606:	2a 95       	dec	r18
    2608:	d1 f7       	brne	.-12     	; 0x25fe <put_fat+0x102>
    260a:	fe 01       	movw	r30, r28
    260c:	e0 0f       	add	r30, r16
    260e:	f1 1f       	adc	r31, r17
    2610:	47 a7       	lds	r20, 0x77
			fs->wflag = 1;
    2612:	21 e0       	ldi	r18, 0x01	; 1
    2614:	2b 83       	std	Y+3, r18	; 0x03
    2616:	93 cf       	rjmp	.-218    	; 0x253e <put_fat+0x42>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    2618:	b7 e0       	ldi	r27, 0x07	; 7
    261a:	76 95       	lsr	r23
    261c:	67 95       	ror	r22
    261e:	57 95       	ror	r21
    2620:	47 95       	ror	r20
    2622:	ba 95       	dec	r27
    2624:	d1 f7       	brne	.-12     	; 0x261a <put_fat+0x11e>
    2626:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2628:	98 a1       	lds	r25, 0x48
    262a:	a9 a1       	lds	r26, 0x49
    262c:	ba a1       	lds	r27, 0x4a
    262e:	48 0f       	add	r20, r24
    2630:	59 1f       	adc	r21, r25
    2632:	6a 1f       	adc	r22, r26
    2634:	7b 1f       	adc	r23, r27
    2636:	ce 01       	movw	r24, r28
    2638:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
			if (res != FR_OK) break;
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	09 f0       	breq	.+2      	; 0x2642 <put_fat+0x146>
    2640:	7e cf       	rjmp	.-260    	; 0x253e <put_fat+0x42>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    2642:	f6 01       	movw	r30, r12
    2644:	ee 0f       	add	r30, r30
    2646:	ff 1f       	adc	r31, r31
    2648:	ee 0f       	add	r30, r30
    264a:	ff 1f       	adc	r31, r31
    264c:	f1 70       	andi	r31, 0x01	; 1
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    264e:	ec 0f       	add	r30, r28
    2650:	fd 1f       	adc	r31, r29
    2652:	42 a9       	sts	0x42, r20
    2654:	50 e0       	ldi	r21, 0x00	; 0
    2656:	60 e0       	ldi	r22, 0x00	; 0
    2658:	70 e0       	ldi	r23, 0x00	; 0
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
    265a:	34 2f       	mov	r19, r20
    265c:	22 27       	eor	r18, r18
    265e:	11 27       	eor	r17, r17
    2660:	00 27       	eor	r16, r16
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    2662:	00 70       	andi	r16, 0x00	; 0
    2664:	10 70       	andi	r17, 0x00	; 0
    2666:	20 70       	andi	r18, 0x00	; 0
    2668:	30 7f       	andi	r19, 0xF0	; 240
    266a:	b5 01       	movw	r22, r10
    266c:	a4 01       	movw	r20, r8
    266e:	7f 70       	andi	r23, 0x0F	; 15
    2670:	04 2b       	or	r16, r20
    2672:	15 2b       	or	r17, r21
    2674:	26 2b       	or	r18, r22
    2676:	37 2b       	or	r19, r23
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2678:	07 a7       	lds	r16, 0x77
	*ptr++ = (BYTE)val; val >>= 8;
    267a:	10 ab       	sts	0x50, r17
	*ptr++ = (BYTE)val; val >>= 8;
    267c:	21 ab       	sts	0x51, r18
	*ptr++ = (BYTE)val;
    267e:	32 ab       	sts	0x52, r19
			if (res != FR_OK) break;
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
			fs->wflag = 1;
    2680:	21 e0       	ldi	r18, 0x01	; 1
    2682:	2b 83       	std	Y+3, r18	; 0x03
    2684:	5c cf       	rjmp	.-328    	; 0x253e <put_fat+0x42>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
			fs->wflag = 1;
			break;

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    2686:	45 2f       	mov	r20, r21
    2688:	56 2f       	mov	r21, r22
    268a:	67 2f       	mov	r22, r23
    268c:	77 27       	eor	r23, r23
    268e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2690:	98 a1       	lds	r25, 0x48
    2692:	a9 a1       	lds	r26, 0x49
    2694:	ba a1       	lds	r27, 0x4a
    2696:	48 0f       	add	r20, r24
    2698:	59 1f       	adc	r21, r25
    269a:	6a 1f       	adc	r22, r26
    269c:	7b 1f       	adc	r23, r27
    269e:	ce 01       	movw	r24, r28
    26a0:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
			if (res != FR_OK) break;
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	09 f0       	breq	.+2      	; 0x26aa <put_fat+0x1ae>
    26a8:	4a cf       	rjmp	.-364    	; 0x253e <put_fat+0x42>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
    26aa:	f6 01       	movw	r30, r12
    26ac:	ee 0f       	add	r30, r30
    26ae:	ff 1f       	adc	r31, r31
    26b0:	f1 70       	andi	r31, 0x01	; 1

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    26b2:	ec 0f       	add	r30, r28
    26b4:	fd 1f       	adc	r31, r29
    26b6:	87 a6       	lds	r24, 0xb7
	*ptr++ = (BYTE)val;
    26b8:	90 aa       	sts	0x90, r25

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
			fs->wflag = 1;
    26ba:	21 e0       	ldi	r18, 0x01	; 1
    26bc:	2b 83       	std	Y+3, r18	; 0x03
    26be:	3f cf       	rjmp	.-386    	; 0x253e <put_fat+0x42>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = fs->win + bc++ % SS(fs);
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    26c0:	88 2d       	mov	r24, r8
    26c2:	ec 0f       	add	r30, r28
    26c4:	fd 1f       	adc	r31, r29
    26c6:	7c cf       	rjmp	.-264    	; 0x25c0 <put_fat+0xc4>
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = fs->win + bc % SS(fs);
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    26c8:	fe 01       	movw	r30, r28
    26ca:	e0 0f       	add	r30, r16
    26cc:	f1 1f       	adc	r31, r17
    26ce:	47 a5       	lds	r20, 0x67
    26d0:	40 7f       	andi	r20, 0xF0	; 240
    26d2:	29 2d       	mov	r18, r9
    26d4:	2f 70       	andi	r18, 0x0F	; 15
    26d6:	42 2b       	or	r20, r18
    26d8:	9b cf       	rjmp	.-202    	; 0x2610 <put_fat+0x114>

000026da <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
    26da:	2f 92       	push	r2
    26dc:	3f 92       	push	r3
    26de:	4f 92       	push	r4
    26e0:	5f 92       	push	r5
    26e2:	6f 92       	push	r6
    26e4:	7f 92       	push	r7
    26e6:	8f 92       	push	r8
    26e8:	9f 92       	push	r9
    26ea:	af 92       	push	r10
    26ec:	bf 92       	push	r11
    26ee:	cf 92       	push	r12
    26f0:	df 92       	push	r13
    26f2:	ef 92       	push	r14
    26f4:	ff 92       	push	r15
    26f6:	0f 93       	push	r16
    26f8:	1f 93       	push	r17
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	ec 01       	movw	r28, r24
    2700:	1a 01       	movw	r2, r20
    2702:	2b 01       	movw	r4, r22
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
    2704:	68 80       	ld	r6, Y
    2706:	79 80       	ldd	r7, Y+1	; 0x01


	if (clst == 0) {	/* Create a new chain */
    2708:	41 15       	cp	r20, r1
    270a:	51 05       	cpc	r21, r1
    270c:	61 05       	cpc	r22, r1
    270e:	71 05       	cpc	r23, r1
    2710:	09 f0       	breq	.+2      	; 0x2714 <create_chain+0x3a>
    2712:	b6 c0       	rjmp	.+364    	; 0x2880 <create_chain+0x1a6>
		scl = fs->last_clst;				/* Get suggested cluster to start at */
    2714:	f3 01       	movw	r30, r6
    2716:	83 84       	ldd	r8, Z+11	; 0x0b
    2718:	94 84       	ldd	r9, Z+12	; 0x0c
    271a:	a5 84       	ldd	r10, Z+13	; 0x0d
    271c:	b6 84       	ldd	r11, Z+14	; 0x0e
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    271e:	81 14       	cp	r8, r1
    2720:	91 04       	cpc	r9, r1
    2722:	a1 04       	cpc	r10, r1
    2724:	b1 04       	cpc	r11, r1
    2726:	09 f0       	breq	.+2      	; 0x272a <create_chain+0x50>
    2728:	49 c0       	rjmp	.+146    	; 0x27bc <create_chain+0xe2>
    272a:	83 89       	ldd	r24, Z+19	; 0x13
    272c:	94 89       	ldd	r25, Z+20	; 0x14
    272e:	a5 89       	ldd	r26, Z+21	; 0x15
    2730:	b6 89       	ldd	r27, Z+22	; 0x16
    2732:	11 e0       	ldi	r17, 0x01	; 1
    2734:	81 2e       	mov	r8, r17
    2736:	91 2c       	mov	r9, r1
    2738:	a1 2c       	mov	r10, r1
    273a:	b1 2c       	mov	r11, r1
    273c:	75 01       	movw	r14, r10
    273e:	64 01       	movw	r12, r8
	} else
#endif
	{	/* At the FAT12/16/32 */
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
    2740:	08 94       	sec
    2742:	c1 1c       	adc	r12, r1
    2744:	d1 1c       	adc	r13, r1
    2746:	e1 1c       	adc	r14, r1
    2748:	f1 1c       	adc	r15, r1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    274a:	c8 16       	cp	r12, r24
    274c:	d9 06       	cpc	r13, r25
    274e:	ea 06       	cpc	r14, r26
    2750:	fb 06       	cpc	r15, r27
    2752:	60 f0       	brcs	.+24     	; 0x276c <create_chain+0x92>
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
    2754:	f2 e0       	ldi	r31, 0x02	; 2
    2756:	8f 16       	cp	r8, r31
    2758:	91 04       	cpc	r9, r1
    275a:	a1 04       	cpc	r10, r1
    275c:	b1 04       	cpc	r11, r1
    275e:	08 f4       	brcc	.+2      	; 0x2762 <create_chain+0x88>
    2760:	8b c0       	rjmp	.+278    	; 0x2878 <create_chain+0x19e>
	{	/* At the FAT12/16/32 */
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
    2762:	72 e0       	ldi	r23, 0x02	; 2
    2764:	c7 2e       	mov	r12, r23
    2766:	d1 2c       	mov	r13, r1
    2768:	e1 2c       	mov	r14, r1
    276a:	f1 2c       	mov	r15, r1
				if (ncl > scl) return 0;	/* No free cluster */
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
    276c:	88 81       	ld	r24, Y
    276e:	99 81       	ldd	r25, Y+1	; 0x01
    2770:	b7 01       	movw	r22, r14
    2772:	a6 01       	movw	r20, r12
    2774:	0e 94 8c 11 	call	0x2318	; 0x2318 <get_fat.isra.8>
    2778:	8b 01       	movw	r16, r22
    277a:	9c 01       	movw	r18, r24
			if (cs == 0) break;				/* Found a free cluster */
    277c:	61 15       	cp	r22, r1
    277e:	71 05       	cpc	r23, r1
    2780:	81 05       	cpc	r24, r1
    2782:	91 05       	cpc	r25, r1
    2784:	61 f1       	breq	.+88     	; 0x27de <create_chain+0x104>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
    2786:	61 30       	cpi	r22, 0x01	; 1
    2788:	71 05       	cpc	r23, r1
    278a:	81 05       	cpc	r24, r1
    278c:	91 05       	cpc	r25, r1
    278e:	09 f4       	brne	.+2      	; 0x2792 <create_chain+0xb8>
    2790:	5e c0       	rjmp	.+188    	; 0x284e <create_chain+0x174>
    2792:	0f 3f       	cpi	r16, 0xFF	; 255
    2794:	8f ef       	ldi	r24, 0xFF	; 255
    2796:	18 07       	cpc	r17, r24
    2798:	8f ef       	ldi	r24, 0xFF	; 255
    279a:	28 07       	cpc	r18, r24
    279c:	8f ef       	ldi	r24, 0xFF	; 255
    279e:	38 07       	cpc	r19, r24
    27a0:	09 f4       	brne	.+2      	; 0x27a4 <create_chain+0xca>
    27a2:	55 c0       	rjmp	.+170    	; 0x284e <create_chain+0x174>
			if (ncl == scl) return 0;		/* No free cluster */
    27a4:	c8 14       	cp	r12, r8
    27a6:	d9 04       	cpc	r13, r9
    27a8:	ea 04       	cpc	r14, r10
    27aa:	fb 04       	cpc	r15, r11
    27ac:	09 f4       	brne	.+2      	; 0x27b0 <create_chain+0xd6>
    27ae:	64 c0       	rjmp	.+200    	; 0x2878 <create_chain+0x19e>
    27b0:	f3 01       	movw	r30, r6
    27b2:	83 89       	ldd	r24, Z+19	; 0x13
    27b4:	94 89       	ldd	r25, Z+20	; 0x14
    27b6:	a5 89       	ldd	r26, Z+21	; 0x15
    27b8:	b6 89       	ldd	r27, Z+22	; 0x16
    27ba:	c2 cf       	rjmp	.-124    	; 0x2740 <create_chain+0x66>
	FATFS *fs = obj->fs;


	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Get suggested cluster to start at */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    27bc:	f3 01       	movw	r30, r6
    27be:	83 89       	ldd	r24, Z+19	; 0x13
    27c0:	94 89       	ldd	r25, Z+20	; 0x14
    27c2:	a5 89       	ldd	r26, Z+21	; 0x15
    27c4:	b6 89       	ldd	r27, Z+22	; 0x16
    27c6:	88 16       	cp	r8, r24
    27c8:	99 06       	cpc	r9, r25
    27ca:	aa 06       	cpc	r10, r26
    27cc:	bb 06       	cpc	r11, r27
    27ce:	08 f4       	brcc	.+2      	; 0x27d2 <create_chain+0xf8>
    27d0:	b5 cf       	rjmp	.-150    	; 0x273c <create_chain+0x62>
    27d2:	e1 e0       	ldi	r30, 0x01	; 1
    27d4:	8e 2e       	mov	r8, r30
    27d6:	91 2c       	mov	r9, r1
    27d8:	a1 2c       	mov	r10, r1
    27da:	b1 2c       	mov	r11, r1
    27dc:	af cf       	rjmp	.-162    	; 0x273c <create_chain+0x62>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
			if (cs == 0) break;				/* Found a free cluster */
    27de:	cc 2d       	mov	r28, r12
    27e0:	8d 2c       	mov	r8, r13
    27e2:	de 2d       	mov	r29, r14
    27e4:	bf 2c       	mov	r11, r15
	}

	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
		res = FR_OK;						/* FAT does not need to be written */
	} else {
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
    27e6:	c3 01       	movw	r24, r6
    27e8:	a6 01       	movw	r20, r12
    27ea:	b7 01       	movw	r22, r14
    27ec:	0f ef       	ldi	r16, 0xFF	; 255
    27ee:	1f ef       	ldi	r17, 0xFF	; 255
    27f0:	98 01       	movw	r18, r16
    27f2:	0e 94 7e 12 	call	0x24fc	; 0x24fc <put_fat>
		if (res == FR_OK && clst) {
    27f6:	00 97       	sbiw	r24, 0x00	; 0
    27f8:	09 f0       	breq	.+2      	; 0x27fc <create_chain+0x122>
    27fa:	70 c0       	rjmp	.+224    	; 0x28dc <create_chain+0x202>
    27fc:	21 14       	cp	r2, r1
    27fe:	31 04       	cpc	r3, r1
    2800:	41 04       	cpc	r4, r1
    2802:	51 04       	cpc	r5, r1
    2804:	09 f0       	breq	.+2      	; 0x2808 <create_chain+0x12e>
    2806:	60 c0       	rjmp	.+192    	; 0x28c8 <create_chain+0x1ee>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
    2808:	f3 01       	movw	r30, r6
    280a:	c3 87       	std	Z+11, r28	; 0x0b
    280c:	84 86       	std	Z+12, r8	; 0x0c
    280e:	d5 87       	std	Z+13, r29	; 0x0d
    2810:	b6 86       	std	Z+14, r11	; 0x0e
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
    2812:	47 85       	ldd	r20, Z+15	; 0x0f
    2814:	50 89       	ldd	r21, Z+16	; 0x10
    2816:	61 89       	ldd	r22, Z+17	; 0x11
    2818:	72 89       	ldd	r23, Z+18	; 0x12
    281a:	83 89       	ldd	r24, Z+19	; 0x13
    281c:	94 89       	ldd	r25, Z+20	; 0x14
    281e:	a5 89       	ldd	r26, Z+21	; 0x15
    2820:	b6 89       	ldd	r27, Z+22	; 0x16
    2822:	02 97       	sbiw	r24, 0x02	; 2
    2824:	a1 09       	sbc	r26, r1
    2826:	b1 09       	sbc	r27, r1
    2828:	48 17       	cp	r20, r24
    282a:	59 07       	cpc	r21, r25
    282c:	6a 07       	cpc	r22, r26
    282e:	7b 07       	cpc	r23, r27
    2830:	40 f4       	brcc	.+16     	; 0x2842 <create_chain+0x168>
    2832:	41 50       	subi	r20, 0x01	; 1
    2834:	50 40       	sbci	r21, 0x00	; 0
    2836:	60 40       	sbci	r22, 0x00	; 0
    2838:	70 40       	sbci	r23, 0x00	; 0
    283a:	47 87       	std	Z+15, r20	; 0x0f
    283c:	50 8b       	std	Z+16, r21	; 0x10
    283e:	61 8b       	std	Z+17, r22	; 0x11
    2840:	72 8b       	std	Z+18, r23	; 0x12
		fs->fsi_flag |= 1;
    2842:	f3 01       	movw	r30, r6
    2844:	84 81       	ldd	r24, Z+4	; 0x04
    2846:	81 60       	ori	r24, 0x01	; 1
    2848:	84 83       	std	Z+4, r24	; 0x04
    284a:	97 01       	movw	r18, r14
    284c:	86 01       	movw	r16, r12
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
	}

	return ncl;		/* Return new cluster number or error status */
}
    284e:	b8 01       	movw	r22, r16
    2850:	c9 01       	movw	r24, r18
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	ff 90       	pop	r15
    285c:	ef 90       	pop	r14
    285e:	df 90       	pop	r13
    2860:	cf 90       	pop	r12
    2862:	bf 90       	pop	r11
    2864:	af 90       	pop	r10
    2866:	9f 90       	pop	r9
    2868:	8f 90       	pop	r8
    286a:	7f 90       	pop	r7
    286c:	6f 90       	pop	r6
    286e:	5f 90       	pop	r5
    2870:	4f 90       	pop	r4
    2872:	3f 90       	pop	r3
    2874:	2f 90       	pop	r2
    2876:	08 95       	ret
				if (ncl > scl) return 0;	/* No free cluster */
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
			if (cs == 0) break;				/* Found a free cluster */
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
			if (ncl == scl) return 0;		/* No free cluster */
    2878:	00 e0       	ldi	r16, 0x00	; 0
    287a:	10 e0       	ldi	r17, 0x00	; 0
    287c:	98 01       	movw	r18, r16
    287e:	e7 cf       	rjmp	.-50     	; 0x284e <create_chain+0x174>
	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Get suggested cluster to start at */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
    2880:	c3 01       	movw	r24, r6
    2882:	0e 94 8c 11 	call	0x2318	; 0x2318 <get_fat.isra.8>
    2886:	8b 01       	movw	r16, r22
    2888:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;				/* Invalid value */
    288a:	62 30       	cpi	r22, 0x02	; 2
    288c:	71 05       	cpc	r23, r1
    288e:	81 05       	cpc	r24, r1
    2890:	91 05       	cpc	r25, r1
    2892:	a8 f0       	brcs	.+42     	; 0x28be <create_chain+0x1e4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    2894:	6f 3f       	cpi	r22, 0xFF	; 255
    2896:	ff ef       	ldi	r31, 0xFF	; 255
    2898:	7f 07       	cpc	r23, r31
    289a:	ff ef       	ldi	r31, 0xFF	; 255
    289c:	8f 07       	cpc	r24, r31
    289e:	ff ef       	ldi	r31, 0xFF	; 255
    28a0:	9f 07       	cpc	r25, r31
    28a2:	a9 f2       	breq	.-86     	; 0x284e <create_chain+0x174>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    28a4:	f3 01       	movw	r30, r6
    28a6:	83 89       	ldd	r24, Z+19	; 0x13
    28a8:	94 89       	ldd	r25, Z+20	; 0x14
    28aa:	a5 89       	ldd	r26, Z+21	; 0x15
    28ac:	b6 89       	ldd	r27, Z+22	; 0x16
    28ae:	08 17       	cp	r16, r24
    28b0:	19 07       	cpc	r17, r25
    28b2:	2a 07       	cpc	r18, r26
    28b4:	3b 07       	cpc	r19, r27
    28b6:	58 f2       	brcs	.-106    	; 0x284e <create_chain+0x174>
    28b8:	52 01       	movw	r10, r4
    28ba:	41 01       	movw	r8, r2
    28bc:	3f cf       	rjmp	.-386    	; 0x273c <create_chain+0x62>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
    28be:	01 e0       	ldi	r16, 0x01	; 1
    28c0:	10 e0       	ldi	r17, 0x00	; 0
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	c3 cf       	rjmp	.-122    	; 0x284e <create_chain+0x174>
	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
		res = FR_OK;						/* FAT does not need to be written */
	} else {
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
		if (res == FR_OK && clst) {
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
    28c8:	c3 01       	movw	r24, r6
    28ca:	b2 01       	movw	r22, r4
    28cc:	a1 01       	movw	r20, r2
    28ce:	86 01       	movw	r16, r12
    28d0:	97 01       	movw	r18, r14
    28d2:	0e 94 7e 12 	call	0x24fc	; 0x24fc <put_fat>
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	09 f4       	brne	.+2      	; 0x28dc <create_chain+0x202>
    28da:	96 cf       	rjmp	.-212    	; 0x2808 <create_chain+0x12e>
		fs->last_clst = ncl;
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
    28dc:	81 30       	cpi	r24, 0x01	; 1
    28de:	91 05       	cpc	r25, r1
    28e0:	71 f7       	brne	.-36     	; 0x28be <create_chain+0x1e4>
    28e2:	0f ef       	ldi	r16, 0xFF	; 255
    28e4:	1f ef       	ldi	r17, 0xFF	; 255
    28e6:	98 01       	movw	r18, r16
    28e8:	b2 cf       	rjmp	.-156    	; 0x284e <create_chain+0x174>

000028ea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    28ea:	4f 92       	push	r4
    28ec:	5f 92       	push	r5
    28ee:	6f 92       	push	r6
    28f0:	7f 92       	push	r7
    28f2:	8f 92       	push	r8
    28f4:	9f 92       	push	r9
    28f6:	af 92       	push	r10
    28f8:	bf 92       	push	r11
    28fa:	cf 92       	push	r12
    28fc:	df 92       	push	r13
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	0f 93       	push	r16
    2904:	1f 93       	push	r17
    2906:	cf 93       	push	r28
    2908:	df 93       	push	r29
    290a:	cd b7       	in	r28, 0x3d	; 61
    290c:	de b7       	in	r29, 0x3e	; 62
    290e:	27 97       	sbiw	r28, 0x07	; 7
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	4c 01       	movw	r8, r24
    291c:	8b 01       	movw	r16, r22
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
    291e:	dc 01       	movw	r26, r24
    2920:	ad 90       	ld	r10, X+
    2922:	bc 90       	ld	r11, X
    2924:	11 97       	sbiw	r26, 0x01	; 1
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
    2926:	1e 96       	adiw	r26, 0x0e	; 14
    2928:	8d 91       	ld	r24, X+
    292a:	9d 91       	ld	r25, X+
    292c:	0d 90       	ld	r0, X+
    292e:	bc 91       	ld	r27, X
    2930:	a0 2d       	mov	r26, r0
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
    2932:	f4 01       	movw	r30, r8
    2934:	46 89       	ldd	r20, Z+22	; 0x16
    2936:	57 89       	ldd	r21, Z+23	; 0x17
    2938:	60 8d       	ldd	r22, Z+24	; 0x18
    293a:	71 8d       	ldd	r23, Z+25	; 0x19
    293c:	41 15       	cp	r20, r1
    293e:	51 05       	cpc	r21, r1
    2940:	61 05       	cpc	r22, r1
    2942:	71 05       	cpc	r23, r1
    2944:	c9 f4       	brne	.+50     	; 0x2978 <dir_next+0x8e>
    2946:	84 e0       	ldi	r24, 0x04	; 4
    2948:	90 e0       	ldi	r25, 0x00	; 0
	}
	dp->dptr = ofs;						/* Current entry */
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */

	return FR_OK;
}
    294a:	27 96       	adiw	r28, 0x07	; 7
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	de bf       	out	0x3e, r29	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	cd bf       	out	0x3d, r28	; 61
    2956:	df 91       	pop	r29
    2958:	cf 91       	pop	r28
    295a:	1f 91       	pop	r17
    295c:	0f 91       	pop	r16
    295e:	ff 90       	pop	r15
    2960:	ef 90       	pop	r14
    2962:	df 90       	pop	r13
    2964:	cf 90       	pop	r12
    2966:	bf 90       	pop	r11
    2968:	af 90       	pop	r10
    296a:	9f 90       	pop	r9
    296c:	8f 90       	pop	r8
    296e:	7f 90       	pop	r7
    2970:	6f 90       	pop	r6
    2972:	5f 90       	pop	r5
    2974:	4f 90       	pop	r4
    2976:	08 95       	ret
	FATFS *fs = dp->obj.fs;
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
    2978:	e0 e2       	ldi	r30, 0x20	; 32
    297a:	ce 2e       	mov	r12, r30
    297c:	d1 2c       	mov	r13, r1
    297e:	e1 2c       	mov	r14, r1
    2980:	f1 2c       	mov	r15, r1
    2982:	c8 0e       	add	r12, r24
    2984:	d9 1e       	adc	r13, r25
    2986:	ea 1e       	adc	r14, r26
    2988:	fb 1e       	adc	r15, r27
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
    298a:	f0 e0       	ldi	r31, 0x00	; 0
    298c:	cf 16       	cp	r12, r31
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	df 06       	cpc	r13, r31
    2992:	f0 e2       	ldi	r31, 0x20	; 32
    2994:	ef 06       	cpc	r14, r31
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	ff 06       	cpc	r15, r31
    299a:	a8 f6       	brcc	.-86     	; 0x2946 <dir_next+0x5c>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    299c:	d7 01       	movw	r26, r14
    299e:	c6 01       	movw	r24, r12
    29a0:	91 70       	andi	r25, 0x01	; 1
    29a2:	a0 70       	andi	r26, 0x00	; 0
    29a4:	b0 70       	andi	r27, 0x00	; 0
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	a1 05       	cpc	r26, r1
    29aa:	b1 05       	cpc	r27, r1
    29ac:	09 f0       	breq	.+2      	; 0x29b0 <dir_next+0xc6>
    29ae:	89 c0       	rjmp	.+274    	; 0x2ac2 <dir_next+0x1d8>
		dp->sect++;				/* Next sector */
    29b0:	4f 5f       	subi	r20, 0xFF	; 255
    29b2:	5f 4f       	sbci	r21, 0xFF	; 255
    29b4:	6f 4f       	sbci	r22, 0xFF	; 255
    29b6:	7f 4f       	sbci	r23, 0xFF	; 255
    29b8:	d4 01       	movw	r26, r8
    29ba:	56 96       	adiw	r26, 0x16	; 22
    29bc:	4d 93       	st	X+, r20
    29be:	5d 93       	st	X+, r21
    29c0:	6d 93       	st	X+, r22
    29c2:	7c 93       	st	X, r23
    29c4:	59 97       	sbiw	r26, 0x19	; 25

		if (!dp->clust) {		/* Static table */
    29c6:	52 96       	adiw	r26, 0x12	; 18
    29c8:	4d 90       	ld	r4, X+
    29ca:	5d 90       	ld	r5, X+
    29cc:	6d 90       	ld	r6, X+
    29ce:	7c 90       	ld	r7, X
    29d0:	55 97       	sbiw	r26, 0x15	; 21
    29d2:	41 14       	cp	r4, r1
    29d4:	51 04       	cpc	r5, r1
    29d6:	61 04       	cpc	r6, r1
    29d8:	71 04       	cpc	r7, r1
    29da:	09 f4       	brne	.+2      	; 0x29de <dir_next+0xf4>
    29dc:	85 c0       	rjmp	.+266    	; 0x2ae8 <dir_next+0x1fe>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
				dp->sect = 0; return FR_NO_FILE;
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
    29de:	f5 01       	movw	r30, r10
    29e0:	81 85       	ldd	r24, Z+9	; 0x09
    29e2:	92 85       	ldd	r25, Z+10	; 0x0a
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	a0 e0       	ldi	r26, 0x00	; 0
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	b7 01       	movw	r22, r14
    29ec:	a6 01       	movw	r20, r12
    29ee:	29 e0       	ldi	r18, 0x09	; 9
    29f0:	76 95       	lsr	r23
    29f2:	67 95       	ror	r22
    29f4:	57 95       	ror	r21
    29f6:	47 95       	ror	r20
    29f8:	2a 95       	dec	r18
    29fa:	d1 f7       	brne	.-12     	; 0x29f0 <dir_next+0x106>
    29fc:	84 23       	and	r24, r20
    29fe:	95 23       	and	r25, r21
    2a00:	a6 23       	and	r26, r22
    2a02:	b7 23       	and	r27, r23
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	a1 05       	cpc	r26, r1
    2a08:	b1 05       	cpc	r27, r1
    2a0a:	09 f0       	breq	.+2      	; 0x2a0e <dir_next+0x124>
    2a0c:	5a c0       	rjmp	.+180    	; 0x2ac2 <dir_next+0x1d8>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
    2a0e:	c5 01       	movw	r24, r10
    2a10:	b3 01       	movw	r22, r6
    2a12:	a2 01       	movw	r20, r4
    2a14:	0e 94 8c 11 	call	0x2318	; 0x2318 <get_fat.isra.8>
    2a18:	2b 01       	movw	r4, r22
    2a1a:	3c 01       	movw	r6, r24
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
    2a1c:	62 30       	cpi	r22, 0x02	; 2
    2a1e:	71 05       	cpc	r23, r1
    2a20:	81 05       	cpc	r24, r1
    2a22:	91 05       	cpc	r25, r1
    2a24:	08 f4       	brcc	.+2      	; 0x2a28 <dir_next+0x13e>
    2a26:	7d c0       	rjmp	.+250    	; 0x2b22 <dir_next+0x238>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
    2a28:	6f 3f       	cpi	r22, 0xFF	; 255
    2a2a:	2f ef       	ldi	r18, 0xFF	; 255
    2a2c:	72 07       	cpc	r23, r18
    2a2e:	2f ef       	ldi	r18, 0xFF	; 255
    2a30:	82 07       	cpc	r24, r18
    2a32:	2f ef       	ldi	r18, 0xFF	; 255
    2a34:	92 07       	cpc	r25, r18
    2a36:	09 f4       	brne	.+2      	; 0x2a3a <dir_next+0x150>
    2a38:	8c c0       	rjmp	.+280    	; 0x2b52 <dir_next+0x268>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
    2a3a:	f5 01       	movw	r30, r10
    2a3c:	83 89       	ldd	r24, Z+19	; 0x13
    2a3e:	94 89       	ldd	r25, Z+20	; 0x14
    2a40:	a5 89       	ldd	r26, Z+21	; 0x15
    2a42:	b6 89       	ldd	r27, Z+22	; 0x16
    2a44:	48 16       	cp	r4, r24
    2a46:	59 06       	cpc	r5, r25
    2a48:	6a 06       	cpc	r6, r26
    2a4a:	7b 06       	cpc	r7, r27
    2a4c:	08 f0       	brcs	.+2      	; 0x2a50 <dir_next+0x166>
    2a4e:	6c c0       	rjmp	.+216    	; 0x2b28 <dir_next+0x23e>
    2a50:	a3 01       	movw	r20, r6
    2a52:	92 01       	movw	r18, r4
    2a54:	22 50       	subi	r18, 0x02	; 2
    2a56:	30 40       	sbci	r19, 0x00	; 0
    2a58:	40 40       	sbci	r20, 0x00	; 0
    2a5a:	50 40       	sbci	r21, 0x00	; 0
    2a5c:	29 83       	std	Y+1, r18	; 0x01
    2a5e:	3a 83       	std	Y+2, r19	; 0x02
    2a60:	4b 83       	std	Y+3, r20	; 0x03
    2a62:	5c 83       	std	Y+4, r21	; 0x04
#else
					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
    2a64:	f4 01       	movw	r30, r8
    2a66:	42 8a       	std	Z+18, r4	; 0x12
    2a68:	53 8a       	std	Z+19, r5	; 0x13
    2a6a:	64 8a       	std	Z+20, r6	; 0x14
    2a6c:	75 8a       	std	Z+21, r7	; 0x15
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2a6e:	02 97       	sbiw	r24, 0x02	; 2
    2a70:	a1 09       	sbc	r26, r1
    2a72:	b1 09       	sbc	r27, r1
    2a74:	29 81       	ldd	r18, Y+1	; 0x01
    2a76:	3a 81       	ldd	r19, Y+2	; 0x02
    2a78:	4b 81       	ldd	r20, Y+3	; 0x03
    2a7a:	5c 81       	ldd	r21, Y+4	; 0x04
    2a7c:	28 17       	cp	r18, r24
    2a7e:	39 07       	cpc	r19, r25
    2a80:	4a 07       	cpc	r20, r26
    2a82:	5b 07       	cpc	r21, r27
    2a84:	08 f0       	brcs	.+2      	; 0x2a88 <dir_next+0x19e>
    2a86:	68 c0       	rjmp	.+208    	; 0x2b58 <dir_next+0x26e>
	return clst * fs->csize + fs->database;
    2a88:	d5 01       	movw	r26, r10
    2a8a:	19 96       	adiw	r26, 0x09	; 9
    2a8c:	2d 91       	ld	r18, X+
    2a8e:	3c 91       	ld	r19, X
    2a90:	1a 97       	sbiw	r26, 0x0a	; 10
    2a92:	40 e0       	ldi	r20, 0x00	; 0
    2a94:	50 e0       	ldi	r21, 0x00	; 0
    2a96:	69 81       	ldd	r22, Y+1	; 0x01
    2a98:	7a 81       	ldd	r23, Y+2	; 0x02
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9e:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__mulsi3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	f5 01       	movw	r30, r10
    2aa8:	47 a1       	lds	r20, 0x47
    2aaa:	50 a5       	lds	r21, 0x60
    2aac:	61 a5       	lds	r22, 0x61
    2aae:	72 a5       	lds	r23, 0x62
    2ab0:	84 0f       	add	r24, r20
    2ab2:	95 1f       	adc	r25, r21
    2ab4:	a6 1f       	adc	r26, r22
    2ab6:	b7 1f       	adc	r27, r23
					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
				dp->sect = clust2sect(fs, clst);
    2ab8:	f4 01       	movw	r30, r8
    2aba:	86 8b       	std	Z+22, r24	; 0x16
    2abc:	97 8b       	std	Z+23, r25	; 0x17
    2abe:	a0 8f       	std	Z+24, r26	; 0x18
    2ac0:	b1 8f       	std	Z+25, r27	; 0x19
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
    2ac2:	d4 01       	movw	r26, r8
    2ac4:	1e 96       	adiw	r26, 0x0e	; 14
    2ac6:	cd 92       	st	X+, r12
    2ac8:	dd 92       	st	X+, r13
    2aca:	ed 92       	st	X+, r14
    2acc:	fc 92       	st	X, r15
    2ace:	51 97       	sbiw	r26, 0x11	; 17
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    2ad0:	c6 01       	movw	r24, r12
    2ad2:	91 70       	andi	r25, 0x01	; 1
    2ad4:	8f 96       	adiw	r24, 0x2f	; 47
    2ad6:	8a 0d       	add	r24, r10
    2ad8:	9b 1d       	adc	r25, r11
    2ada:	5b 96       	adiw	r26, 0x1b	; 27
    2adc:	9c 93       	st	X, r25
    2ade:	8e 93       	st	-X, r24
    2ae0:	5a 97       	sbiw	r26, 0x1a	; 26

	return FR_OK;
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	31 cf       	rjmp	.-414    	; 0x294a <dir_next+0x60>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
		dp->sect++;				/* Next sector */

		if (!dp->clust) {		/* Static table */
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    2ae8:	b7 01       	movw	r22, r14
    2aea:	a6 01       	movw	r20, r12
    2aec:	35 e0       	ldi	r19, 0x05	; 5
    2aee:	76 95       	lsr	r23
    2af0:	67 95       	ror	r22
    2af2:	57 95       	ror	r21
    2af4:	47 95       	ror	r20
    2af6:	3a 95       	dec	r19
    2af8:	d1 f7       	brne	.-12     	; 0x2aee <dir_next+0x204>
    2afa:	f5 01       	movw	r30, r10
    2afc:	87 81       	ldd	r24, Z+7	; 0x07
    2afe:	90 85       	ldd	r25, Z+8	; 0x08
    2b00:	a0 e0       	ldi	r26, 0x00	; 0
    2b02:	b0 e0       	ldi	r27, 0x00	; 0
    2b04:	48 17       	cp	r20, r24
    2b06:	59 07       	cpc	r21, r25
    2b08:	6a 07       	cpc	r22, r26
    2b0a:	7b 07       	cpc	r23, r27
    2b0c:	d0 f2       	brcs	.-76     	; 0x2ac2 <dir_next+0x1d8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
						dp->sect = 0; return FR_NO_FILE;
    2b0e:	d4 01       	movw	r26, r8
    2b10:	56 96       	adiw	r26, 0x16	; 22
    2b12:	1d 92       	st	X+, r1
    2b14:	1d 92       	st	X+, r1
    2b16:	1d 92       	st	X+, r1
    2b18:	1c 92       	st	X, r1
    2b1a:	59 97       	sbiw	r26, 0x19	; 25
    2b1c:	84 e0       	ldi	r24, 0x04	; 4
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	14 cf       	rjmp	.-472    	; 0x294a <dir_next+0x60>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    2b22:	82 e0       	ldi	r24, 0x02	; 2
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	11 cf       	rjmp	.-478    	; 0x294a <dir_next+0x60>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
    2b28:	01 15       	cp	r16, r1
    2b2a:	11 05       	cpc	r17, r1
    2b2c:	81 f3       	breq	.-32     	; 0x2b0e <dir_next+0x224>
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    2b2e:	f4 01       	movw	r30, r8
    2b30:	42 89       	ldd	r20, Z+18	; 0x12
    2b32:	53 89       	ldd	r21, Z+19	; 0x13
    2b34:	64 89       	ldd	r22, Z+20	; 0x14
    2b36:	75 89       	ldd	r23, Z+21	; 0x15
    2b38:	c4 01       	movw	r24, r8
    2b3a:	0e 94 6d 13 	call	0x26da	; 0x26da <create_chain>
    2b3e:	2b 01       	movw	r4, r22
    2b40:	3c 01       	movw	r6, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    2b42:	61 15       	cp	r22, r1
    2b44:	71 05       	cpc	r23, r1
    2b46:	81 05       	cpc	r24, r1
    2b48:	91 05       	cpc	r25, r1
    2b4a:	51 f4       	brne	.+20     	; 0x2b60 <dir_next+0x276>
    2b4c:	87 e0       	ldi	r24, 0x07	; 7
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	fc ce       	rjmp	.-520    	; 0x294a <dir_next+0x60>
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	f9 ce       	rjmp	.-526    	; 0x294a <dir_next+0x60>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2b58:	80 e0       	ldi	r24, 0x00	; 0
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	ac cf       	rjmp	.-168    	; 0x2ab8 <dir_next+0x1ce>
					if (!stretch) {								/* If no stretch, report EOT */
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    2b60:	61 30       	cpi	r22, 0x01	; 1
    2b62:	71 05       	cpc	r23, r1
    2b64:	81 05       	cpc	r24, r1
    2b66:	91 05       	cpc	r25, r1
    2b68:	e1 f2       	breq	.-72     	; 0x2b22 <dir_next+0x238>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2b6a:	6f 3f       	cpi	r22, 0xFF	; 255
    2b6c:	2f ef       	ldi	r18, 0xFF	; 255
    2b6e:	72 07       	cpc	r23, r18
    2b70:	2f ef       	ldi	r18, 0xFF	; 255
    2b72:	82 07       	cpc	r24, r18
    2b74:	2f ef       	ldi	r18, 0xFF	; 255
    2b76:	92 07       	cpc	r25, r18
    2b78:	61 f3       	breq	.-40     	; 0x2b52 <dir_next+0x268>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
    2b7a:	c5 01       	movw	r24, r10
    2b7c:	0e 94 ed 0a 	call	0x15da	; 0x15da <sync_window>
    2b80:	00 97       	sbiw	r24, 0x00	; 0
    2b82:	39 f7       	brne	.-50     	; 0x2b52 <dir_next+0x268>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
    2b84:	f5 01       	movw	r30, r10
    2b86:	bf 96       	adiw	r30, 0x2f	; 47
/*-----------------------------------------------------------------------*/
/* Directory handling - Move directory table index next                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
    2b88:	c5 01       	movw	r24, r10
    2b8a:	81 5d       	subi	r24, 0xD1	; 209
    2b8c:	9d 4f       	sbci	r25, 0xFD	; 253
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    2b8e:	11 92       	st	Z+, r1
    2b90:	e8 17       	cp	r30, r24
    2b92:	f9 07       	cpc	r31, r25
    2b94:	e1 f7       	brne	.-8      	; 0x2b8e <dir_next+0x2a4>
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2b96:	d3 01       	movw	r26, r6
    2b98:	c2 01       	movw	r24, r4
    2b9a:	02 97       	sbiw	r24, 0x02	; 2
    2b9c:	a1 09       	sbc	r26, r1
    2b9e:	b1 09       	sbc	r27, r1
    2ba0:	89 83       	std	Y+1, r24	; 0x01
    2ba2:	9a 83       	std	Y+2, r25	; 0x02
    2ba4:	ab 83       	std	Y+3, r26	; 0x03
    2ba6:	bc 83       	std	Y+4, r27	; 0x04
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2ba8:	f5 01       	movw	r30, r10
    2baa:	83 89       	ldd	r24, Z+19	; 0x13
    2bac:	94 89       	ldd	r25, Z+20	; 0x14
    2bae:	a5 89       	ldd	r26, Z+21	; 0x15
    2bb0:	b6 89       	ldd	r27, Z+22	; 0x16
    2bb2:	02 97       	sbiw	r24, 0x02	; 2
    2bb4:	a1 09       	sbc	r26, r1
    2bb6:	b1 09       	sbc	r27, r1
    2bb8:	29 81       	ldd	r18, Y+1	; 0x01
    2bba:	3a 81       	ldd	r19, Y+2	; 0x02
    2bbc:	4b 81       	ldd	r20, Y+3	; 0x03
    2bbe:	5c 81       	ldd	r21, Y+4	; 0x04
    2bc0:	28 17       	cp	r18, r24
    2bc2:	39 07       	cpc	r19, r25
    2bc4:	4a 07       	cpc	r20, r26
    2bc6:	5b 07       	cpc	r21, r27
    2bc8:	08 f0       	brcs	.+2      	; 0x2bcc <dir_next+0x2e2>
    2bca:	55 c0       	rjmp	.+170    	; 0x2c76 <dir_next+0x38c>
	return clst * fs->csize + fs->database;
    2bcc:	01 85       	ldd	r16, Z+9	; 0x09
    2bce:	12 85       	ldd	r17, Z+10	; 0x0a
    2bd0:	98 01       	movw	r18, r16
    2bd2:	40 e0       	ldi	r20, 0x00	; 0
    2bd4:	50 e0       	ldi	r21, 0x00	; 0
    2bd6:	69 81       	ldd	r22, Y+1	; 0x01
    2bd8:	7a 81       	ldd	r23, Y+2	; 0x02
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    2bde:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__mulsi3>
    2be2:	dc 01       	movw	r26, r24
    2be4:	cb 01       	movw	r24, r22
    2be6:	f5 01       	movw	r30, r10
    2be8:	47 a1       	lds	r20, 0x47
    2bea:	50 a5       	lds	r21, 0x60
    2bec:	61 a5       	lds	r22, 0x61
    2bee:	72 a5       	lds	r23, 0x62
    2bf0:	84 0f       	add	r24, r20
    2bf2:	95 1f       	adc	r25, r21
    2bf4:	a6 1f       	adc	r26, r22
    2bf6:	b7 1f       	adc	r27, r23
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
    2bf8:	f5 01       	movw	r30, r10
    2bfa:	83 a7       	lds	r24, 0x73
    2bfc:	94 a7       	lds	r25, 0x74
    2bfe:	a5 a7       	lds	r26, 0x75
    2c00:	b6 a7       	lds	r27, 0x76
    2c02:	40 e0       	ldi	r20, 0x00	; 0
    2c04:	50 e0       	ldi	r21, 0x00	; 0
						fs->wflag = 1;
    2c06:	21 e0       	ldi	r18, 0x01	; 1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
    2c08:	1f c0       	rjmp	.+62     	; 0x2c48 <dir_next+0x35e>
						fs->wflag = 1;
    2c0a:	d5 01       	movw	r26, r10
    2c0c:	13 96       	adiw	r26, 0x03	; 3
    2c0e:	2c 93       	st	X, r18
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
    2c10:	c5 01       	movw	r24, r10
    2c12:	2f 83       	std	Y+7, r18	; 0x07
    2c14:	4d 83       	std	Y+5, r20	; 0x05
    2c16:	5e 83       	std	Y+6, r21	; 0x06
    2c18:	0e 94 ed 0a 	call	0x15da	; 0x15da <sync_window>
    2c1c:	2f 81       	ldd	r18, Y+7	; 0x07
    2c1e:	4d 81       	ldd	r20, Y+5	; 0x05
    2c20:	5e 81       	ldd	r21, Y+6	; 0x06
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	09 f0       	breq	.+2      	; 0x2c28 <dir_next+0x33e>
    2c26:	95 cf       	rjmp	.-214    	; 0x2b52 <dir_next+0x268>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
    2c28:	4f 5f       	subi	r20, 0xFF	; 255
    2c2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2c2c:	f5 01       	movw	r30, r10
    2c2e:	83 a5       	lds	r24, 0x63
    2c30:	94 a5       	lds	r25, 0x64
    2c32:	a5 a5       	lds	r26, 0x65
    2c34:	b6 a5       	lds	r27, 0x66
    2c36:	01 96       	adiw	r24, 0x01	; 1
    2c38:	a1 1d       	adc	r26, r1
    2c3a:	b1 1d       	adc	r27, r1
    2c3c:	83 a7       	lds	r24, 0x73
    2c3e:	94 a7       	lds	r25, 0x74
    2c40:	a5 a7       	lds	r26, 0x75
    2c42:	b6 a7       	lds	r27, 0x76
    2c44:	01 85       	ldd	r16, Z+9	; 0x09
    2c46:	12 85       	ldd	r17, Z+10	; 0x0a
    2c48:	40 17       	cp	r20, r16
    2c4a:	51 07       	cpc	r21, r17
    2c4c:	f0 f2       	brcs	.-68     	; 0x2c0a <dir_next+0x320>
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
					}
					fs->winsect -= n;							/* Restore window offset */
    2c4e:	60 e0       	ldi	r22, 0x00	; 0
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	f5 01       	movw	r30, r10
    2c54:	83 a5       	lds	r24, 0x63
    2c56:	94 a5       	lds	r25, 0x64
    2c58:	a5 a5       	lds	r26, 0x65
    2c5a:	b6 a5       	lds	r27, 0x66
    2c5c:	84 1b       	sub	r24, r20
    2c5e:	95 0b       	sbc	r25, r21
    2c60:	a6 0b       	sbc	r26, r22
    2c62:	b7 0b       	sbc	r27, r23
    2c64:	83 a7       	lds	r24, 0x73
    2c66:	94 a7       	lds	r25, 0x74
    2c68:	a5 a7       	lds	r26, 0x75
    2c6a:	b6 a7       	lds	r27, 0x76
    2c6c:	83 89       	ldd	r24, Z+19	; 0x13
    2c6e:	94 89       	ldd	r25, Z+20	; 0x14
    2c70:	a5 89       	ldd	r26, Z+21	; 0x15
    2c72:	b6 89       	ldd	r27, Z+22	; 0x16
    2c74:	f7 ce       	rjmp	.-530    	; 0x2a64 <dir_next+0x17a>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	f5 01       	movw	r30, r10
    2c7e:	01 85       	ldd	r16, Z+9	; 0x09
    2c80:	12 85       	ldd	r17, Z+10	; 0x0a
    2c82:	ba cf       	rjmp	.-140    	; 0x2bf8 <dir_next+0x30e>

00002c84 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
    2c84:	6f 92       	push	r6
    2c86:	7f 92       	push	r7
    2c88:	8f 92       	push	r8
    2c8a:	9f 92       	push	r9
    2c8c:	af 92       	push	r10
    2c8e:	bf 92       	push	r11
    2c90:	cf 92       	push	r12
    2c92:	df 92       	push	r13
    2c94:	ef 92       	push	r14
    2c96:	ff 92       	push	r15
    2c98:	0f 93       	push	r16
    2c9a:	1f 93       	push	r17
    2c9c:	cf 93       	push	r28
    2c9e:	df 93       	push	r29
    2ca0:	3c 01       	movw	r6, r24
    2ca2:	6a 01       	movw	r12, r20
    2ca4:	7b 01       	movw	r14, r22
	FRESULT res = FR_OK;
	DWORD nxt;
	FATFS *fs = obj->fs;
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	c0 81       	ld	r28, Z
    2caa:	d1 81       	ldd	r29, Z+1	; 0x01
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    2cac:	42 30       	cpi	r20, 0x02	; 2
    2cae:	51 05       	cpc	r21, r1
    2cb0:	61 05       	cpc	r22, r1
    2cb2:	71 05       	cpc	r23, r1
    2cb4:	48 f0       	brcs	.+18     	; 0x2cc8 <remove_chain+0x44>
    2cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cba:	ad 89       	ldd	r26, Y+21	; 0x15
    2cbc:	be 89       	ldd	r27, Y+22	; 0x16
    2cbe:	48 17       	cp	r20, r24
    2cc0:	59 07       	cpc	r21, r25
    2cc2:	6a 07       	cpc	r22, r26
    2cc4:	7b 07       	cpc	r23, r27
    2cc6:	90 f0       	brcs	.+36     	; 0x2cec <remove_chain+0x68>

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    2cc8:	e2 e0       	ldi	r30, 0x02	; 2
    2cca:	f0 e0       	ldi	r31, 0x00	; 0
			}
		}
	}
#endif
	return FR_OK;
}
    2ccc:	cf 01       	movw	r24, r30
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	1f 91       	pop	r17
    2cd4:	0f 91       	pop	r16
    2cd6:	ff 90       	pop	r15
    2cd8:	ef 90       	pop	r14
    2cda:	df 90       	pop	r13
    2cdc:	cf 90       	pop	r12
    2cde:	bf 90       	pop	r11
    2ce0:	af 90       	pop	r10
    2ce2:	9f 90       	pop	r9
    2ce4:	8f 90       	pop	r8
    2ce6:	7f 90       	pop	r7
    2ce8:	6f 90       	pop	r6
    2cea:	08 95       	ret
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    2cec:	01 15       	cp	r16, r1
    2cee:	11 05       	cpc	r17, r1
    2cf0:	21 05       	cpc	r18, r1
    2cf2:	31 05       	cpc	r19, r1
    2cf4:	09 f0       	breq	.+2      	; 0x2cf8 <remove_chain+0x74>
    2cf6:	50 c0       	rjmp	.+160    	; 0x2d98 <remove_chain+0x114>
    2cf8:	ce 01       	movw	r24, r28
		if (res != FR_OK) return res;
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
    2cfa:	b7 01       	movw	r22, r14
    2cfc:	a6 01       	movw	r20, r12
    2cfe:	0e 94 8c 11 	call	0x2318	; 0x2318 <get_fat.isra.8>
    2d02:	4b 01       	movw	r8, r22
    2d04:	5c 01       	movw	r10, r24
		if (nxt == 0) break;				/* Empty cluster? */
    2d06:	61 15       	cp	r22, r1
    2d08:	71 05       	cpc	r23, r1
    2d0a:	81 05       	cpc	r24, r1
    2d0c:	91 05       	cpc	r25, r1
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <remove_chain+0x8e>
    2d10:	53 c0       	rjmp	.+166    	; 0x2db8 <remove_chain+0x134>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    2d12:	61 30       	cpi	r22, 0x01	; 1
    2d14:	71 05       	cpc	r23, r1
    2d16:	81 05       	cpc	r24, r1
    2d18:	91 05       	cpc	r25, r1
    2d1a:	b1 f2       	breq	.-84     	; 0x2cc8 <remove_chain+0x44>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    2d1c:	8f ef       	ldi	r24, 0xFF	; 255
    2d1e:	88 16       	cp	r8, r24
    2d20:	8f ef       	ldi	r24, 0xFF	; 255
    2d22:	98 06       	cpc	r9, r24
    2d24:	8f ef       	ldi	r24, 0xFF	; 255
    2d26:	a8 06       	cpc	r10, r24
    2d28:	8f ef       	ldi	r24, 0xFF	; 255
    2d2a:	b8 06       	cpc	r11, r24
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <remove_chain+0xac>
    2d2e:	47 c0       	rjmp	.+142    	; 0x2dbe <remove_chain+0x13a>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    2d30:	ce 01       	movw	r24, r28
    2d32:	b7 01       	movw	r22, r14
    2d34:	a6 01       	movw	r20, r12
    2d36:	00 e0       	ldi	r16, 0x00	; 0
    2d38:	10 e0       	ldi	r17, 0x00	; 0
    2d3a:	98 01       	movw	r18, r16
    2d3c:	0e 94 7e 12 	call	0x24fc	; 0x24fc <put_fat>
    2d40:	fc 01       	movw	r30, r24
			if (res != FR_OK) return res;
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	19 f6       	brne	.-122    	; 0x2ccc <remove_chain+0x48>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    2d46:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d48:	98 89       	ldd	r25, Y+16	; 0x10
    2d4a:	a9 89       	ldd	r26, Y+17	; 0x11
    2d4c:	ba 89       	ldd	r27, Y+18	; 0x12
    2d4e:	0b 89       	ldd	r16, Y+19	; 0x13
    2d50:	1c 89       	ldd	r17, Y+20	; 0x14
    2d52:	2d 89       	ldd	r18, Y+21	; 0x15
    2d54:	3e 89       	ldd	r19, Y+22	; 0x16
    2d56:	b9 01       	movw	r22, r18
    2d58:	a8 01       	movw	r20, r16
    2d5a:	42 50       	subi	r20, 0x02	; 2
    2d5c:	50 40       	sbci	r21, 0x00	; 0
    2d5e:	60 40       	sbci	r22, 0x00	; 0
    2d60:	70 40       	sbci	r23, 0x00	; 0
    2d62:	84 17       	cp	r24, r20
    2d64:	95 07       	cpc	r25, r21
    2d66:	a6 07       	cpc	r26, r22
    2d68:	b7 07       	cpc	r27, r23
    2d6a:	50 f4       	brcc	.+20     	; 0x2d80 <remove_chain+0xfc>
			fs->free_clst++;
    2d6c:	01 96       	adiw	r24, 0x01	; 1
    2d6e:	a1 1d       	adc	r26, r1
    2d70:	b1 1d       	adc	r27, r1
    2d72:	8f 87       	std	Y+15, r24	; 0x0f
    2d74:	98 8b       	std	Y+16, r25	; 0x10
    2d76:	a9 8b       	std	Y+17, r26	; 0x11
    2d78:	ba 8b       	std	Y+18, r27	; 0x12
			fs->fsi_flag |= 1;
    2d7a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7c:	81 60       	ori	r24, 0x01	; 1
    2d7e:	8c 83       	std	Y+4, r24	; 0x04
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    2d80:	80 16       	cp	r8, r16
    2d82:	91 06       	cpc	r9, r17
    2d84:	a2 06       	cpc	r10, r18
    2d86:	b3 06       	cpc	r11, r19
    2d88:	08 f0       	brcs	.+2      	; 0x2d8c <remove_chain+0x108>
    2d8a:	a0 cf       	rjmp	.-192    	; 0x2ccc <remove_chain+0x48>
    2d8c:	f3 01       	movw	r30, r6
    2d8e:	80 81       	ld	r24, Z
    2d90:	91 81       	ldd	r25, Z+1	; 0x01
    2d92:	75 01       	movw	r14, r10
    2d94:	64 01       	movw	r12, r8
    2d96:	b1 cf       	rjmp	.-158    	; 0x2cfa <remove_chain+0x76>

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
		res = put_fat(fs, pclst, 0xFFFFFFFF);
    2d98:	ce 01       	movw	r24, r28
    2d9a:	b9 01       	movw	r22, r18
    2d9c:	a8 01       	movw	r20, r16
    2d9e:	0f ef       	ldi	r16, 0xFF	; 255
    2da0:	1f ef       	ldi	r17, 0xFF	; 255
    2da2:	98 01       	movw	r18, r16
    2da4:	0e 94 7e 12 	call	0x24fc	; 0x24fc <put_fat>
    2da8:	fc 01       	movw	r30, r24
		if (res != FR_OK) return res;
    2daa:	00 97       	sbiw	r24, 0x00	; 0
    2dac:	09 f0       	breq	.+2      	; 0x2db0 <remove_chain+0x12c>
    2dae:	8e cf       	rjmp	.-228    	; 0x2ccc <remove_chain+0x48>
    2db0:	f3 01       	movw	r30, r6
    2db2:	80 81       	ld	r24, Z
    2db4:	91 81       	ldd	r25, Z+1	; 0x01
    2db6:	a1 cf       	rjmp	.-190    	; 0x2cfa <remove_chain+0x76>
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
    2db8:	e0 e0       	ldi	r30, 0x00	; 0
    2dba:	f0 e0       	ldi	r31, 0x00	; 0
    2dbc:	87 cf       	rjmp	.-242    	; 0x2ccc <remove_chain+0x48>
	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    2dbe:	e1 e0       	ldi	r30, 0x01	; 1
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	84 cf       	rjmp	.-248    	; 0x2ccc <remove_chain+0x48>

00002dc4 <dir_read.constprop.10>:
/*-----------------------------------------------------------------------*/
/* Read an object from the directory                                     */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_read (
    2dc4:	0f 93       	push	r16
    2dc6:	1f 93       	push	r17
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	ec 01       	movw	r28, r24
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
	FATFS *fs = dp->obj.fs;
    2dce:	08 81       	ld	r16, Y
    2dd0:	19 81       	ldd	r17, Y+1	; 0x01
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
    2dd2:	84 e0       	ldi	r24, 0x04	; 4
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	1d c0       	rjmp	.+58     	; 0x2e12 <dir_read.constprop.10+0x4e>
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
		res = move_window(fs, dp->sect);
    2dd8:	c8 01       	movw	r24, r16
    2dda:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
		if (res != FR_OK) break;
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	51 f5       	brne	.+84     	; 0x2e36 <dir_read.constprop.10+0x72>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
    2de2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2de4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2de6:	30 81       	ld	r19, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
    2de8:	33 23       	and	r19, r19
    2dea:	19 f1       	breq	.+70     	; 0x2e32 <dir_read.constprop.10+0x6e>
				}
			}
		} else
#endif
		{	/* At the FAT12/16/32 */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    2dec:	23 85       	ldd	r18, Z+11	; 0x0b
    2dee:	2f 73       	andi	r18, 0x3F	; 63
    2df0:	2c 83       	std	Y+4, r18	; 0x04
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
    2df2:	35 3e       	cpi	r19, 0xE5	; 229
    2df4:	39 f0       	breq	.+14     	; 0x2e04 <dir_read.constprop.10+0x40>
    2df6:	3e 32       	cpi	r19, 0x2E	; 46
    2df8:	29 f0       	breq	.+10     	; 0x2e04 <dir_read.constprop.10+0x40>
    2dfa:	2f 30       	cpi	r18, 0x0F	; 15
    2dfc:	19 f0       	breq	.+6      	; 0x2e04 <dir_read.constprop.10+0x40>
    2dfe:	2f 71       	andi	r18, 0x1F	; 31
    2e00:	28 30       	cpi	r18, 0x08	; 8
    2e02:	91 f4       	brne	.+36     	; 0x2e28 <dir_read.constprop.10+0x64>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
    2e04:	ce 01       	movw	r24, r28
    2e06:	60 e0       	ldi	r22, 0x00	; 0
    2e08:	70 e0       	ldi	r23, 0x00	; 0
    2e0a:	0e 94 75 14 	call	0x28ea	; 0x28ea <dir_next>
		if (res != FR_OK) break;
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	91 f4       	brne	.+36     	; 0x2e36 <dir_read.constprop.10+0x72>
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
    2e12:	4e 89       	ldd	r20, Y+22	; 0x16
    2e14:	5f 89       	ldd	r21, Y+23	; 0x17
    2e16:	68 8d       	ldd	r22, Y+24	; 0x18
    2e18:	79 8d       	ldd	r23, Y+25	; 0x19
    2e1a:	41 15       	cp	r20, r1
    2e1c:	51 05       	cpc	r21, r1
    2e1e:	61 05       	cpc	r22, r1
    2e20:	71 05       	cpc	r23, r1
    2e22:	d1 f6       	brne	.-76     	; 0x2dd8 <dir_read.constprop.10+0x14>
		}
		res = dir_next(dp, 0);		/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	39 f4       	brne	.+14     	; 0x2e36 <dir_read.constprop.10+0x72>
	return res;
}
    2e28:	df 91       	pop	r29
    2e2a:	cf 91       	pop	r28
    2e2c:	1f 91       	pop	r17
    2e2e:	0f 91       	pop	r16
    2e30:	08 95       	ret

	while (dp->sect) {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		c = dp->dir[DIR_Name];	/* Test for the entry type */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
    2e32:	84 e0       	ldi	r24, 0x04	; 4
    2e34:	90 e0       	ldi	r25, 0x00	; 0
		}
		res = dir_next(dp, 0);		/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    2e36:	1e 8a       	std	Y+22, r1	; 0x16
    2e38:	1f 8a       	std	Y+23, r1	; 0x17
    2e3a:	18 8e       	std	Y+24, r1	; 0x18
    2e3c:	19 8e       	std	Y+25, r1	; 0x19
	return res;
}
    2e3e:	df 91       	pop	r29
    2e40:	cf 91       	pop	r28
    2e42:	1f 91       	pop	r17
    2e44:	0f 91       	pop	r16
    2e46:	08 95       	ret

00002e48 <dir_sdi.constprop.11>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
    2e48:	af 92       	push	r10
    2e4a:	bf 92       	push	r11
    2e4c:	cf 92       	push	r12
    2e4e:	df 92       	push	r13
    2e50:	ef 92       	push	r14
    2e52:	ff 92       	push	r15
    2e54:	0f 93       	push	r16
    2e56:	1f 93       	push	r17
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	ec 01       	movw	r28, r24
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
    2e5e:	a8 80       	ld	r10, Y
    2e60:	b9 80       	ldd	r11, Y+1	; 0x01


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
    2e62:	1e 86       	std	Y+14, r1	; 0x0e
    2e64:	1f 86       	std	Y+15, r1	; 0x0f
    2e66:	18 8a       	std	Y+16, r1	; 0x10
    2e68:	19 8a       	std	Y+17, r1	; 0x11
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
    2e6a:	ce 80       	ldd	r12, Y+6	; 0x06
    2e6c:	df 80       	ldd	r13, Y+7	; 0x07
    2e6e:	e8 84       	ldd	r14, Y+8	; 0x08
    2e70:	f9 84       	ldd	r15, Y+9	; 0x09
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
    2e72:	c1 14       	cp	r12, r1
    2e74:	d1 04       	cpc	r13, r1
    2e76:	e1 04       	cpc	r14, r1
    2e78:	f1 04       	cpc	r15, r1
    2e7a:	71 f4       	brne	.+28     	; 0x2e98 <dir_sdi.constprop.11+0x50>
    2e7c:	f5 01       	movw	r30, r10
    2e7e:	80 81       	ld	r24, Z
    2e80:	83 30       	cpi	r24, 0x03	; 3
    2e82:	b8 f0       	brcs	.+46     	; 0x2eb2 <dir_sdi.constprop.11+0x6a>
		clst = fs->dirbase;
    2e84:	83 a1       	lds	r24, 0x43
    2e86:	94 a1       	lds	r25, 0x44
    2e88:	a5 a1       	lds	r26, 0x45
    2e8a:	b6 a1       	lds	r27, 0x46
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    2e8c:	00 97       	sbiw	r24, 0x00	; 0
    2e8e:	a1 05       	cpc	r26, r1
    2e90:	b1 05       	cpc	r27, r1
    2e92:	79 f0       	breq	.+30     	; 0x2eb2 <dir_sdi.constprop.11+0x6a>
    2e94:	6c 01       	movw	r12, r24
    2e96:	7d 01       	movw	r14, r26
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
    2e98:	f5 01       	movw	r30, r10
    2e9a:	01 85       	ldd	r16, Z+9	; 0x09
    2e9c:	12 85       	ldd	r17, Z+10	; 0x0a
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
		while (ofs >= csz) {				/* Follow cluster chain */
    2ea2:	01 15       	cp	r16, r1
    2ea4:	11 05       	cpc	r17, r1
    2ea6:	21 05       	cpc	r18, r1
    2ea8:	31 05       	cpc	r19, r1
    2eaa:	09 f0       	breq	.+2      	; 0x2eae <dir_sdi.constprop.11+0x66>
    2eac:	4f c0       	rjmp	.+158    	; 0x2f4c <dir_sdi.constprop.11+0x104>
    2eae:	c5 01       	movw	r24, r10
    2eb0:	24 c0       	rjmp	.+72     	; 0x2efa <dir_sdi.constprop.11+0xb2>
		clst = fs->dirbase;
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
    2eb2:	f5 01       	movw	r30, r10
    2eb4:	87 81       	ldd	r24, Z+7	; 0x07
    2eb6:	90 85       	ldd	r25, Z+8	; 0x08
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	81 f5       	brne	.+96     	; 0x2f1c <dir_sdi.constprop.11+0xd4>
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
	}
	dp->clust = clst;					/* Current cluster# */
	if (!dp->sect) return FR_INT_ERR;
    2ebc:	82 e0       	ldi	r24, 0x02	; 2
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */

	return FR_OK;
}
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	ff 90       	pop	r15
    2eca:	ef 90       	pop	r14
    2ecc:	df 90       	pop	r13
    2ece:	cf 90       	pop	r12
    2ed0:	bf 90       	pop	r11
    2ed2:	af 90       	pop	r10
    2ed4:	08 95       	ret
	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    2ed6:	82 e0       	ldi	r24, 0x02	; 2
    2ed8:	c8 16       	cp	r12, r24
    2eda:	d1 04       	cpc	r13, r1
    2edc:	e1 04       	cpc	r14, r1
    2ede:	f1 04       	cpc	r15, r1
    2ee0:	68 f3       	brcs	.-38     	; 0x2ebc <dir_sdi.constprop.11+0x74>
    2ee2:	f5 01       	movw	r30, r10
    2ee4:	83 89       	ldd	r24, Z+19	; 0x13
    2ee6:	94 89       	ldd	r25, Z+20	; 0x14
    2ee8:	a5 89       	ldd	r26, Z+21	; 0x15
    2eea:	b6 89       	ldd	r27, Z+22	; 0x16
    2eec:	c8 16       	cp	r12, r24
    2eee:	d9 06       	cpc	r13, r25
    2ef0:	ea 06       	cpc	r14, r26
    2ef2:	fb 06       	cpc	r15, r27
    2ef4:	18 f7       	brcc	.-58     	; 0x2ebc <dir_sdi.constprop.11+0x74>
    2ef6:	88 81       	ld	r24, Y
    2ef8:	99 81       	ldd	r25, Y+1	; 0x01
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
    2efa:	b7 01       	movw	r22, r14
    2efc:	a6 01       	movw	r20, r12
    2efe:	0e 94 8c 11 	call	0x2318	; 0x2318 <get_fat.isra.8>
    2f02:	6b 01       	movw	r12, r22
    2f04:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    2f06:	6f 3f       	cpi	r22, 0xFF	; 255
    2f08:	ff ef       	ldi	r31, 0xFF	; 255
    2f0a:	7f 07       	cpc	r23, r31
    2f0c:	ff ef       	ldi	r31, 0xFF	; 255
    2f0e:	8f 07       	cpc	r24, r31
    2f10:	ff ef       	ldi	r31, 0xFF	; 255
    2f12:	9f 07       	cpc	r25, r31
    2f14:	01 f7       	brne	.-64     	; 0x2ed6 <dir_sdi.constprop.11+0x8e>
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	90 e0       	ldi	r25, 0x00	; 0
    2f1a:	d2 cf       	rjmp	.-92     	; 0x2ec0 <dir_sdi.constprop.11+0x78>
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;
    2f1c:	83 a1       	lds	r24, 0x43
    2f1e:	94 a1       	lds	r25, 0x44
    2f20:	a5 a1       	lds	r26, 0x45
    2f22:	b6 a1       	lds	r27, 0x46
    2f24:	8e 8b       	std	Y+22, r24	; 0x16
    2f26:	9f 8b       	std	Y+23, r25	; 0x17
    2f28:	a8 8f       	std	Y+24, r26	; 0x18
    2f2a:	b9 8f       	std	Y+25, r27	; 0x19
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
	}
	dp->clust = clst;					/* Current cluster# */
    2f2c:	ca 8a       	std	Y+18, r12	; 0x12
    2f2e:	db 8a       	std	Y+19, r13	; 0x13
    2f30:	ec 8a       	std	Y+20, r14	; 0x14
    2f32:	fd 8a       	std	Y+21, r15	; 0x15
	if (!dp->sect) return FR_INT_ERR;
    2f34:	00 97       	sbiw	r24, 0x00	; 0
    2f36:	a1 05       	cpc	r26, r1
    2f38:	b1 05       	cpc	r27, r1
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <dir_sdi.constprop.11+0xf6>
    2f3c:	bf cf       	rjmp	.-130    	; 0x2ebc <dir_sdi.constprop.11+0x74>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
    2f3e:	c5 01       	movw	r24, r10
    2f40:	8f 96       	adiw	r24, 0x2f	; 47
    2f42:	9b 8f       	std	Y+27, r25	; 0x1b
    2f44:	8a 8f       	std	Y+26, r24	; 0x1a

	return FR_OK;
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	ba cf       	rjmp	.-140    	; 0x2ec0 <dir_sdi.constprop.11+0x78>
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2f4c:	b7 01       	movw	r22, r14
    2f4e:	a6 01       	movw	r20, r12
    2f50:	42 50       	subi	r20, 0x02	; 2
    2f52:	50 40       	sbci	r21, 0x00	; 0
    2f54:	60 40       	sbci	r22, 0x00	; 0
    2f56:	70 40       	sbci	r23, 0x00	; 0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2f58:	f5 01       	movw	r30, r10
    2f5a:	83 89       	ldd	r24, Z+19	; 0x13
    2f5c:	94 89       	ldd	r25, Z+20	; 0x14
    2f5e:	a5 89       	ldd	r26, Z+21	; 0x15
    2f60:	b6 89       	ldd	r27, Z+22	; 0x16
    2f62:	02 97       	sbiw	r24, 0x02	; 2
    2f64:	a1 09       	sbc	r26, r1
    2f66:	b1 09       	sbc	r27, r1
    2f68:	48 17       	cp	r20, r24
    2f6a:	59 07       	cpc	r21, r25
    2f6c:	6a 07       	cpc	r22, r26
    2f6e:	7b 07       	cpc	r23, r27
    2f70:	b0 f4       	brcc	.+44     	; 0x2f9e <dir_sdi.constprop.11+0x156>
	return clst * fs->csize + fs->database;
    2f72:	cb 01       	movw	r24, r22
    2f74:	ba 01       	movw	r22, r20
    2f76:	a9 01       	movw	r20, r18
    2f78:	98 01       	movw	r18, r16
    2f7a:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__mulsi3>
    2f7e:	dc 01       	movw	r26, r24
    2f80:	cb 01       	movw	r24, r22
    2f82:	f5 01       	movw	r30, r10
    2f84:	47 a1       	lds	r20, 0x47
    2f86:	50 a5       	lds	r21, 0x60
    2f88:	61 a5       	lds	r22, 0x61
    2f8a:	72 a5       	lds	r23, 0x62
    2f8c:	84 0f       	add	r24, r20
    2f8e:	95 1f       	adc	r25, r21
    2f90:	a6 1f       	adc	r26, r22
    2f92:	b7 1f       	adc	r27, r23
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
    2f94:	8e 8b       	std	Y+22, r24	; 0x16
    2f96:	9f 8b       	std	Y+23, r25	; 0x17
    2f98:	a8 8f       	std	Y+24, r26	; 0x18
    2f9a:	b9 8f       	std	Y+25, r27	; 0x19
    2f9c:	c7 cf       	rjmp	.-114    	; 0x2f2c <dir_sdi.constprop.11+0xe4>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2f9e:	80 e0       	ldi	r24, 0x00	; 0
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	f7 cf       	rjmp	.-18     	; 0x2f94 <dir_sdi.constprop.11+0x14c>

00002fa6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
    2fa6:	ef 92       	push	r14
    2fa8:	ff 92       	push	r15
    2faa:	0f 93       	push	r16
    2fac:	1f 93       	push	r17
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
    2fb2:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    2fb4:	dc 01       	movw	r26, r24
    2fb6:	ed 90       	ld	r14, X+
    2fb8:	fc 90       	ld	r15, X
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;


	res = dir_sdi(dp, 0);
    2fba:	0e 94 24 17 	call	0x2e48	; 0x2e48 <dir_sdi.constprop.11>
    2fbe:	ec 01       	movw	r28, r24
	if (res == FR_OK) {
    2fc0:	00 97       	sbiw	r24, 0x00	; 0
    2fc2:	b1 f0       	breq	.+44     	; 0x2ff0 <dir_register+0x4a>
			}
			res = dir_next(dp, 1);
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    2fc4:	c4 30       	cpi	r28, 0x04	; 4
    2fc6:	d1 05       	cpc	r29, r1
    2fc8:	09 f4       	brne	.+2      	; 0x2fcc <dir_register+0x26>
    2fca:	52 c0       	rjmp	.+164    	; 0x3070 <dir_register+0xca>
			fs->wflag = 1;
		}
	}

	return res;
}
    2fcc:	ce 01       	movw	r24, r28
    2fce:	df 91       	pop	r29
    2fd0:	cf 91       	pop	r28
    2fd2:	1f 91       	pop	r17
    2fd4:	0f 91       	pop	r16
    2fd6:	ff 90       	pop	r15
    2fd8:	ef 90       	pop	r14
    2fda:	08 95       	ret
			res = move_window(fs, dp->sect);
			if (res != FR_OK) break;
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
    2fdc:	88 23       	and	r24, r24
    2fde:	d9 f0       	breq	.+54     	; 0x3016 <dir_register+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);
    2fe0:	c8 01       	movw	r24, r16
    2fe2:	61 e0       	ldi	r22, 0x01	; 1
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	0e 94 75 14 	call	0x28ea	; 0x28ea <dir_next>
    2fea:	ec 01       	movw	r28, r24
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
    2fec:	00 97       	sbiw	r24, 0x00	; 0
    2fee:	51 f7       	brne	.-44     	; 0x2fc4 <dir_register+0x1e>

	res = dir_sdi(dp, 0);
	if (res == FR_OK) {
		n = 0;
		do {
			res = move_window(fs, dp->sect);
    2ff0:	f8 01       	movw	r30, r16
    2ff2:	46 89       	ldd	r20, Z+22	; 0x16
    2ff4:	57 89       	ldd	r21, Z+23	; 0x17
    2ff6:	60 8d       	ldd	r22, Z+24	; 0x18
    2ff8:	71 8d       	ldd	r23, Z+25	; 0x19
    2ffa:	c7 01       	movw	r24, r14
    2ffc:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
    3000:	ec 01       	movw	r28, r24
			if (res != FR_OK) break;
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	f9 f6       	brne	.-66     	; 0x2fc4 <dir_register+0x1e>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
    3006:	d8 01       	movw	r26, r16
    3008:	5a 96       	adiw	r26, 0x1a	; 26
    300a:	ed 91       	ld	r30, X+
    300c:	fc 91       	ld	r31, X
    300e:	5b 97       	sbiw	r26, 0x1b	; 27
    3010:	80 81       	ld	r24, Z
    3012:	85 3e       	cpi	r24, 0xE5	; 229
    3014:	19 f7       	brne	.-58     	; 0x2fdc <dir_register+0x36>

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
    3016:	f8 01       	movw	r30, r16
    3018:	46 89       	ldd	r20, Z+22	; 0x16
    301a:	57 89       	ldd	r21, Z+23	; 0x17
    301c:	60 8d       	ldd	r22, Z+24	; 0x18
    301e:	71 8d       	ldd	r23, Z+25	; 0x19
    3020:	c7 01       	movw	r24, r14
    3022:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
    3026:	ec 01       	movw	r28, r24
		if (res == FR_OK) {
    3028:	00 97       	sbiw	r24, 0x00	; 0
    302a:	81 f6       	brne	.-96     	; 0x2fcc <dir_register+0x26>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
    302c:	d8 01       	movw	r26, r16
    302e:	5a 96       	adiw	r26, 0x1a	; 26
    3030:	ed 91       	ld	r30, X+
    3032:	fc 91       	ld	r31, X
    3034:	5b 97       	sbiw	r26, 0x1b	; 27
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
    3036:	cf 01       	movw	r24, r30
    3038:	80 96       	adiw	r24, 0x20	; 32
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    303a:	11 92       	st	Z+, r1
    303c:	e8 17       	cp	r30, r24
    303e:	f9 07       	cpc	r31, r25
    3040:	e1 f7       	brne	.-8      	; 0x303a <dir_register+0x94>
	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    3042:	b8 01       	movw	r22, r16
    3044:	64 5e       	subi	r22, 0xE4	; 228
    3046:	7f 4f       	sbci	r23, 0xFF	; 255
    3048:	f8 01       	movw	r30, r16
    304a:	82 8d       	ldd	r24, Z+26	; 0x1a
    304c:	93 8d       	ldd	r25, Z+27	; 0x1b
    304e:	4b e0       	ldi	r20, 0x0B	; 11
    3050:	50 e0       	ldi	r21, 0x00	; 0
    3052:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
    3056:	81 e0       	ldi	r24, 0x01	; 1
    3058:	d7 01       	movw	r26, r14
    305a:	13 96       	adiw	r26, 0x03	; 3
    305c:	8c 93       	st	X, r24
    305e:	13 97       	sbiw	r26, 0x03	; 3
		}
	}

	return res;
}
    3060:	ce 01       	movw	r24, r28
    3062:	df 91       	pop	r29
    3064:	cf 91       	pop	r28
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	ff 90       	pop	r15
    306c:	ef 90       	pop	r14
    306e:	08 95       	ret
			}
			res = dir_next(dp, 1);
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    3070:	c7 e0       	ldi	r28, 0x07	; 7
    3072:	d0 e0       	ldi	r29, 0x00	; 0
			fs->wflag = 1;
		}
	}

	return res;
}
    3074:	ce 01       	movw	r24, r28
    3076:	df 91       	pop	r29
    3078:	cf 91       	pop	r28
    307a:	1f 91       	pop	r17
    307c:	0f 91       	pop	r16
    307e:	ff 90       	pop	r15
    3080:	ef 90       	pop	r14
    3082:	08 95       	ret

00003084 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
    3084:	2f 92       	push	r2
    3086:	3f 92       	push	r3
    3088:	4f 92       	push	r4
    308a:	5f 92       	push	r5
    308c:	6f 92       	push	r6
    308e:	7f 92       	push	r7
    3090:	8f 92       	push	r8
    3092:	9f 92       	push	r9
    3094:	af 92       	push	r10
    3096:	bf 92       	push	r11
    3098:	cf 92       	push	r12
    309a:	df 92       	push	r13
    309c:	ef 92       	push	r14
    309e:	ff 92       	push	r15
    30a0:	0f 93       	push	r16
    30a2:	1f 93       	push	r17
    30a4:	cf 93       	push	r28
    30a6:	df 93       	push	r29
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <follow_path+0x26>
    30aa:	00 d0       	rcall	.+0      	; 0x30ac <follow_path+0x28>
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	7c 01       	movw	r14, r24
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
	FATFS *fs = obj->fs;
    30b2:	dc 01       	movw	r26, r24
    30b4:	4d 90       	ld	r4, X+
    30b6:	5c 90       	ld	r5, X
    30b8:	11 97       	sbiw	r26, 0x01	; 1
    30ba:	cb 01       	movw	r24, r22
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from the current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    30bc:	fc 01       	movw	r30, r24
    30be:	20 81       	ld	r18, Z
    30c0:	01 96       	adiw	r24, 0x01	; 1
    30c2:	2f 32       	cpi	r18, 0x2F	; 47
    30c4:	d9 f3       	breq	.-10     	; 0x30bc <follow_path+0x38>
    30c6:	2c 35       	cpi	r18, 0x5C	; 92
    30c8:	c9 f3       	breq	.-14     	; 0x30bc <follow_path+0x38>
    30ca:	6f 01       	movw	r12, r30
		obj->sclust = 0;					/* Start from the root directory */
    30cc:	f7 01       	movw	r30, r14
    30ce:	16 82       	std	Z+6, r1	; 0x06
    30d0:	17 82       	std	Z+7, r1	; 0x07
    30d2:	10 86       	std	Z+8, r1	; 0x08
    30d4:	11 86       	std	Z+9, r1	; 0x09
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    30d6:	d6 01       	movw	r26, r12
    30d8:	8c 91       	ld	r24, X
    30da:	80 32       	cpi	r24, 0x20	; 32
    30dc:	08 f4       	brcc	.+2      	; 0x30e0 <follow_path+0x5c>
    30de:	16 c1       	rjmp	.+556    	; 0x330c <follow_path+0x288>
    30e0:	8c e1       	ldi	r24, 0x1C	; 28
    30e2:	88 2e       	mov	r8, r24
    30e4:	91 2c       	mov	r9, r1
    30e6:	8e 0c       	add	r8, r14
    30e8:	9f 1c       	adc	r9, r15
    30ea:	c7 01       	movw	r24, r14
    30ec:	87 96       	adiw	r24, 0x27	; 39
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    30ee:	10 e2       	ldi	r17, 0x20	; 32
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    30f0:	05 e0       	ldi	r16, 0x05	; 5
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    30f2:	2d e1       	ldi	r18, 0x1D	; 29
    30f4:	62 2e       	mov	r6, r18
    30f6:	71 2c       	mov	r7, r1
    30f8:	6e 0c       	add	r6, r14
    30fa:	7f 1c       	adc	r7, r15
    30fc:	56 01       	movw	r10, r12
    30fe:	9c 83       	std	Y+4, r25	; 0x04
    3100:	8b 83       	std	Y+3, r24	; 0x03
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    3102:	f4 01       	movw	r30, r8
    3104:	8b 81       	ldd	r24, Y+3	; 0x03
    3106:	9c 81       	ldd	r25, Y+4	; 0x04

	do *d++ = (BYTE)val; while (--cnt);
    3108:	11 93       	st	Z+, r17
    310a:	e8 17       	cp	r30, r24
    310c:	f9 07       	cpc	r31, r25
    310e:	e1 f7       	brne	.-8      	; 0x3108 <follow_path+0x84>
    3110:	9c 83       	std	Y+4, r25	; 0x04
    3112:	8b 83       	std	Y+3, r24	; 0x03
    3114:	60 e0       	ldi	r22, 0x00	; 0
    3116:	70 e0       	ldi	r23, 0x00	; 0
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	50 e0       	ldi	r21, 0x00	; 0
    311c:	a8 e0       	ldi	r26, 0x08	; 8
    311e:	b0 e0       	ldi	r27, 0x00	; 0
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    3120:	f5 01       	movw	r30, r10
    3122:	e4 0f       	add	r30, r20
    3124:	f5 1f       	adc	r31, r21
    3126:	20 81       	ld	r18, Z
    3128:	6a 01       	movw	r12, r20
    312a:	08 94       	sec
    312c:	c1 1c       	adc	r12, r1
    312e:	d1 1c       	adc	r13, r1
		if (c <= ' ') break; 			/* Break if end of the path name */
    3130:	21 32       	cpi	r18, 0x21	; 33
    3132:	08 f4       	brcc	.+2      	; 0x3136 <follow_path+0xb2>
    3134:	e8 c0       	rjmp	.+464    	; 0x3306 <follow_path+0x282>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
    3136:	2f 32       	cpi	r18, 0x2F	; 47
    3138:	09 f4       	brne	.+2      	; 0x313c <follow_path+0xb8>
    313a:	6d c0       	rjmp	.+218    	; 0x3216 <follow_path+0x192>
    313c:	2c 35       	cpi	r18, 0x5C	; 92
    313e:	09 f4       	brne	.+2      	; 0x3142 <follow_path+0xbe>
    3140:	6a c0       	rjmp	.+212    	; 0x3216 <follow_path+0x192>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
    3142:	2e 32       	cpi	r18, 0x2E	; 46
    3144:	49 f1       	breq	.+82     	; 0x3198 <follow_path+0x114>
    3146:	6a 17       	cp	r22, r26
    3148:	7b 07       	cpc	r23, r27
    314a:	30 f5       	brcc	.+76     	; 0x3198 <follow_path+0x114>
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
    314c:	82 2f       	mov	r24, r18
    314e:	81 58       	subi	r24, 0x81	; 129
    3150:	8f 31       	cpi	r24, 0x1F	; 31
    3152:	08 f4       	brcc	.+2      	; 0x3156 <follow_path+0xd2>
    3154:	40 c0       	rjmp	.+128    	; 0x31d6 <follow_path+0x152>
    3156:	8f 55       	subi	r24, 0x5F	; 95
    3158:	8d 31       	cpi	r24, 0x1D	; 29
    315a:	e8 f1       	brcs	.+122    	; 0x31d6 <follow_path+0x152>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    315c:	42 2f       	mov	r20, r18
    315e:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
    3160:	42 32       	cpi	r20, 0x22	; 34
    3162:	51 05       	cpc	r21, r1
    3164:	f1 f0       	breq	.+60     	; 0x31a2 <follow_path+0x11e>
    3166:	e2 e1       	ldi	r30, 0x12	; 18
    3168:	f1 e0       	ldi	r31, 0x01	; 1
    316a:	06 c0       	rjmp	.+12     	; 0x3178 <follow_path+0xf4>
    316c:	99 27       	eor	r25, r25
    316e:	87 fd       	sbrc	r24, 7
    3170:	90 95       	com	r25
    3172:	48 17       	cp	r20, r24
    3174:	59 07       	cpc	r21, r25
    3176:	a9 f0       	breq	.+42     	; 0x31a2 <follow_path+0x11e>
    3178:	81 91       	ld	r24, Z+
    317a:	88 23       	and	r24, r24
    317c:	b9 f7       	brne	.-18     	; 0x316c <follow_path+0xe8>
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
    317e:	82 2f       	mov	r24, r18
    3180:	81 56       	subi	r24, 0x61	; 97
    3182:	8a 31       	cpi	r24, 0x1A	; 26
    3184:	08 f4       	brcc	.+2      	; 0x3188 <follow_path+0x104>
    3186:	20 52       	subi	r18, 0x20	; 32
			sfn[i++] = c;
    3188:	f7 01       	movw	r30, r14
    318a:	e6 0f       	add	r30, r22
    318c:	f7 1f       	adc	r31, r23
    318e:	24 8f       	std	Z+28, r18	; 0x1c
    3190:	6f 5f       	subi	r22, 0xFF	; 255
    3192:	7f 4f       	sbci	r23, 0xFF	; 255
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    3194:	a6 01       	movw	r20, r12
    3196:	c4 cf       	rjmp	.-120    	; 0x3120 <follow_path+0x9c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
    3198:	ab 30       	cpi	r26, 0x0B	; 11
    319a:	b1 05       	cpc	r27, r1
    319c:	11 f0       	breq	.+4      	; 0x31a2 <follow_path+0x11e>
    319e:	2e 32       	cpi	r18, 0x2E	; 46
    31a0:	a1 f1       	breq	.+104    	; 0x320a <follow_path+0x186>
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    31a2:	46 e0       	ldi	r20, 0x06	; 6
    31a4:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}

	return res;
}
    31a6:	ca 01       	movw	r24, r20
    31a8:	0f 90       	pop	r0
    31aa:	0f 90       	pop	r0
    31ac:	0f 90       	pop	r0
    31ae:	0f 90       	pop	r0
    31b0:	df 91       	pop	r29
    31b2:	cf 91       	pop	r28
    31b4:	1f 91       	pop	r17
    31b6:	0f 91       	pop	r16
    31b8:	ff 90       	pop	r15
    31ba:	ef 90       	pop	r14
    31bc:	df 90       	pop	r13
    31be:	cf 90       	pop	r12
    31c0:	bf 90       	pop	r11
    31c2:	af 90       	pop	r10
    31c4:	9f 90       	pop	r9
    31c6:	8f 90       	pop	r8
    31c8:	7f 90       	pop	r7
    31ca:	6f 90       	pop	r6
    31cc:	5f 90       	pop	r5
    31ce:	4f 90       	pop	r4
    31d0:	3f 90       	pop	r3
    31d2:	2f 90       	pop	r2
    31d4:	08 95       	ret
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    31d6:	f5 01       	movw	r30, r10
    31d8:	ec 0d       	add	r30, r12
    31da:	fd 1d       	adc	r31, r13
    31dc:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
    31de:	83 2f       	mov	r24, r19
    31e0:	80 54       	subi	r24, 0x40	; 64
    31e2:	8f 33       	cpi	r24, 0x3F	; 63
    31e4:	18 f0       	brcs	.+6      	; 0x31ec <follow_path+0x168>
    31e6:	80 54       	subi	r24, 0x40	; 64
    31e8:	8d 37       	cpi	r24, 0x7D	; 125
    31ea:	d8 f6       	brcc	.-74     	; 0x31a2 <follow_path+0x11e>
    31ec:	cd 01       	movw	r24, r26
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	68 17       	cp	r22, r24
    31f2:	79 07       	cpc	r23, r25
    31f4:	b0 f6       	brcc	.-84     	; 0x31a2 <follow_path+0x11e>
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    31f6:	4e 5f       	subi	r20, 0xFE	; 254
    31f8:	5f 4f       	sbci	r21, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
    31fa:	f7 01       	movw	r30, r14
    31fc:	e6 0f       	add	r30, r22
    31fe:	f7 1f       	adc	r31, r23
    3200:	24 8f       	std	Z+28, r18	; 0x1c
			sfn[i++] = d;
    3202:	35 8f       	std	Z+29, r19	; 0x1d
    3204:	6e 5f       	subi	r22, 0xFE	; 254
    3206:	7f 4f       	sbci	r23, 0xFF	; 255
    3208:	8b cf       	rjmp	.-234    	; 0x3120 <follow_path+0x9c>
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    320a:	a6 01       	movw	r20, r12
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
			i = 8; ni = 11;				/* Goto extension */
    320c:	68 e0       	ldi	r22, 0x08	; 8
    320e:	70 e0       	ldi	r23, 0x00	; 0
    3210:	ab e0       	ldi	r26, 0x0B	; 11
    3212:	b0 e0       	ldi	r27, 0x00	; 0
    3214:	85 cf       	rjmp	.-246    	; 0x3120 <follow_path+0x9c>
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    3216:	f5 01       	movw	r30, r10
    3218:	ec 0d       	add	r30, r12
    321a:	fd 1d       	adc	r31, r13
    321c:	4b 81       	ldd	r20, Y+3	; 0x03
    321e:	5c 81       	ldd	r21, Y+4	; 0x04
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    3220:	5f 01       	movw	r10, r30
    3222:	81 91       	ld	r24, Z+
    3224:	8f 32       	cpi	r24, 0x2F	; 47
    3226:	e1 f3       	breq	.-8      	; 0x3220 <follow_path+0x19c>
    3228:	8c 35       	cpi	r24, 0x5C	; 92
    322a:	d1 f3       	breq	.-12     	; 0x3220 <follow_path+0x19c>
    322c:	5c 83       	std	Y+4, r21	; 0x04
    322e:	4b 83       	std	Y+3, r20	; 0x03
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    3230:	61 15       	cp	r22, r1
    3232:	71 05       	cpc	r23, r1
    3234:	09 f4       	brne	.+2      	; 0x3238 <follow_path+0x1b4>
    3236:	b5 cf       	rjmp	.-150    	; 0x31a2 <follow_path+0x11e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    3238:	d7 01       	movw	r26, r14
    323a:	5c 96       	adiw	r26, 0x1c	; 28
    323c:	8c 91       	ld	r24, X
    323e:	5c 97       	sbiw	r26, 0x1c	; 28
    3240:	85 3e       	cpi	r24, 0xE5	; 229
    3242:	09 f4       	brne	.+2      	; 0x3246 <follow_path+0x1c2>
    3244:	bb c0       	rjmp	.+374    	; 0x33bc <follow_path+0x338>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    3246:	21 32       	cpi	r18, 0x21	; 33
    3248:	08 f4       	brcc	.+2      	; 0x324c <follow_path+0x1c8>
    324a:	68 c0       	rjmp	.+208    	; 0x331c <follow_path+0x298>
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	f7 01       	movw	r30, r14
    3250:	87 a3       	lds	r24, 0x57
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    3252:	c0 80       	ld	r12, Z
    3254:	d1 80       	ldd	r13, Z+1	; 0x01
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    3256:	c7 01       	movw	r24, r14
    3258:	0e 94 24 17 	call	0x2e48	; 0x2e48 <dir_sdi.constprop.11>
    325c:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    325e:	00 97       	sbiw	r24, 0x00	; 0
    3260:	09 f0       	breq	.+2      	; 0x3264 <follow_path+0x1e0>
    3262:	46 c0       	rjmp	.+140    	; 0x32f0 <follow_path+0x26c>
    3264:	8b 81       	ldd	r24, Y+3	; 0x03
    3266:	9c 81       	ldd	r25, Y+4	; 0x04
    3268:	fc 82       	std	Y+4, r15	; 0x04
    326a:	eb 82       	std	Y+3, r14	; 0x03
    326c:	7c 01       	movw	r14, r24
	/* At the FAT12/16/32 */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
    326e:	ab 81       	ldd	r26, Y+3	; 0x03
    3270:	bc 81       	ldd	r27, Y+4	; 0x04
    3272:	56 96       	adiw	r26, 0x16	; 22
    3274:	4d 91       	ld	r20, X+
    3276:	5d 91       	ld	r21, X+
    3278:	6d 91       	ld	r22, X+
    327a:	7c 91       	ld	r23, X
    327c:	59 97       	sbiw	r26, 0x19	; 25
    327e:	c6 01       	movw	r24, r12
    3280:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
    3284:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    3286:	00 97       	sbiw	r24, 0x00	; 0
    3288:	89 f5       	brne	.+98     	; 0x32ec <follow_path+0x268>
		c = dp->dir[DIR_Name];
    328a:	ab 81       	ldd	r26, Y+3	; 0x03
    328c:	bc 81       	ldd	r27, Y+4	; 0x04
    328e:	5a 96       	adiw	r26, 0x1a	; 26
    3290:	ed 91       	ld	r30, X+
    3292:	fc 91       	ld	r31, X
    3294:	5b 97       	sbiw	r26, 0x1b	; 27
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    3296:	80 81       	ld	r24, Z
    3298:	88 23       	and	r24, r24
    329a:	09 f4       	brne	.+2      	; 0x329e <follow_path+0x21a>
    329c:	41 c0       	rjmp	.+130    	; 0x3320 <follow_path+0x29c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    329e:	93 85       	ldd	r25, Z+11	; 0x0b
    32a0:	9f 73       	andi	r25, 0x3F	; 63
    32a2:	14 96       	adiw	r26, 0x04	; 4
    32a4:	9c 93       	st	X, r25
    32a6:	14 97       	sbiw	r26, 0x04	; 4
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    32a8:	83 85       	ldd	r24, Z+11	; 0x0b
    32aa:	83 fd       	sbrc	r24, 3
    32ac:	16 c0       	rjmp	.+44     	; 0x32da <follow_path+0x256>
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    32ae:	df 01       	movw	r26, r30
    32b0:	2d 91       	ld	r18, X+
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	f4 01       	movw	r30, r8
    32b6:	80 81       	ld	r24, Z
    32b8:	28 1b       	sub	r18, r24
    32ba:	31 09       	sbc	r19, r1
    32bc:	f3 01       	movw	r30, r6
	} while (--cnt && r == 0);
    32be:	21 15       	cp	r18, r1
    32c0:	31 05       	cpc	r19, r1
    32c2:	59 f4       	brne	.+22     	; 0x32da <follow_path+0x256>
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    32c4:	2d 91       	ld	r18, X+
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	81 91       	ld	r24, Z+
    32ca:	28 1b       	sub	r18, r24
    32cc:	31 09       	sbc	r19, r1
	} while (--cnt && r == 0);
    32ce:	ee 15       	cp	r30, r14
    32d0:	ff 05       	cpc	r31, r15
    32d2:	a9 f7       	brne	.-22     	; 0x32be <follow_path+0x23a>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    32d4:	21 15       	cp	r18, r1
    32d6:	31 05       	cpc	r19, r1
    32d8:	51 f1       	breq	.+84     	; 0x332e <follow_path+0x2aa>
#endif
		res = dir_next(dp, 0);	/* Next entry */
    32da:	8b 81       	ldd	r24, Y+3	; 0x03
    32dc:	9c 81       	ldd	r25, Y+4	; 0x04
    32de:	60 e0       	ldi	r22, 0x00	; 0
    32e0:	70 e0       	ldi	r23, 0x00	; 0
    32e2:	0e 94 75 14 	call	0x28ea	; 0x28ea <dir_next>
    32e6:	ac 01       	movw	r20, r24
	} while (res == FR_OK);
    32e8:	00 97       	sbiw	r24, 0x00	; 0
    32ea:	09 f2       	breq	.-126    	; 0x326e <follow_path+0x1ea>
    32ec:	eb 80       	ldd	r14, Y+3	; 0x03
    32ee:	fc 80       	ldd	r15, Y+4	; 0x04
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    32f0:	f7 01       	movw	r30, r14
    32f2:	87 a1       	lds	r24, 0x47
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    32f4:	44 30       	cpi	r20, 0x04	; 4
    32f6:	51 05       	cpc	r21, r1
    32f8:	09 f0       	breq	.+2      	; 0x32fc <follow_path+0x278>
    32fa:	55 cf       	rjmp	.-342    	; 0x31a6 <follow_path+0x122>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    32fc:	82 fd       	sbrc	r24, 2
    32fe:	62 c0       	rjmp	.+196    	; 0x33c4 <follow_path+0x340>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    3300:	45 e0       	ldi	r20, 0x05	; 5
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	50 cf       	rjmp	.-352    	; 0x31a6 <follow_path+0x122>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
    3306:	ac 0c       	add	r10, r12
    3308:	bd 1c       	adc	r11, r13
    330a:	92 cf       	rjmp	.-220    	; 0x3230 <follow_path+0x1ac>
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
		dp->fn[NSFLAG] = NS_NONAME;
    330c:	80 e8       	ldi	r24, 0x80	; 128
    330e:	f7 01       	movw	r30, r14
    3310:	87 a3       	lds	r24, 0x57
		res = dir_sdi(dp, 0);
    3312:	c7 01       	movw	r24, r14
    3314:	0e 94 24 17 	call	0x2e48	; 0x2e48 <dir_sdi.constprop.11>
    3318:	ac 01       	movw	r20, r24
    331a:	45 cf       	rjmp	.-374    	; 0x31a6 <follow_path+0x122>
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    331c:	84 e0       	ldi	r24, 0x04	; 4
    331e:	97 cf       	rjmp	.-210    	; 0x324e <follow_path+0x1ca>
    3320:	eb 80       	ldd	r14, Y+3	; 0x03
    3322:	fc 80       	ldd	r15, Y+4	; 0x04
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    3324:	d7 01       	movw	r26, r14
    3326:	97 96       	adiw	r26, 0x27	; 39
    3328:	8c 91       	ld	r24, X
    332a:	97 97       	sbiw	r26, 0x27	; 39
    332c:	e7 cf       	rjmp	.-50     	; 0x32fc <follow_path+0x278>
    332e:	97 01       	movw	r18, r14
    3330:	eb 80       	ldd	r14, Y+3	; 0x03
    3332:	fc 80       	ldd	r15, Y+4	; 0x04
    3334:	3c 83       	std	Y+4, r19	; 0x04
    3336:	2b 83       	std	Y+3, r18	; 0x03
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    3338:	f7 01       	movw	r30, r14
    333a:	87 a1       	lds	r24, 0x47
    333c:	82 fd       	sbrc	r24, 2
    333e:	33 cf       	rjmp	.-410    	; 0x31a6 <follow_path+0x122>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    3340:	94 ff       	sbrs	r25, 4
    3342:	de cf       	rjmp	.-68     	; 0x3300 <follow_path+0x27c>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    3344:	d7 01       	movw	r26, r14
    3346:	1e 96       	adiw	r26, 0x0e	; 14
    3348:	2d 91       	ld	r18, X+
    334a:	3c 91       	ld	r19, X
    334c:	1f 97       	sbiw	r26, 0x0f	; 15
    334e:	31 70       	andi	r19, 0x01	; 1
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    3350:	24 0d       	add	r18, r4
    3352:	35 1d       	adc	r19, r5
    3354:	f9 01       	movw	r30, r18
    3356:	e6 5b       	subi	r30, 0xB6	; 182
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    335a:	30 80       	ld	r3, Z
    335c:	22 24       	eor	r2, r2
    335e:	f9 01       	movw	r30, r18
    3360:	e7 5b       	subi	r30, 0xB7	; 183
    3362:	ff 4f       	sbci	r31, 0xFF	; 255
    3364:	80 81       	ld	r24, Z
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	82 29       	or	r24, r2
    336a:	93 29       	or	r25, r3
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    336c:	ac 01       	movw	r20, r24
    336e:	60 e0       	ldi	r22, 0x00	; 0
    3370:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    3372:	f2 01       	movw	r30, r4
    3374:	80 81       	ld	r24, Z
    3376:	83 30       	cpi	r24, 0x03	; 3
    3378:	41 f0       	breq	.+16     	; 0x338a <follow_path+0x306>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    337a:	d7 01       	movw	r26, r14
    337c:	16 96       	adiw	r26, 0x06	; 6
    337e:	4d 93       	st	X+, r20
    3380:	5d 93       	st	X+, r21
    3382:	6d 93       	st	X+, r22
    3384:	7c 93       	st	X, r23
    3386:	19 97       	sbiw	r26, 0x09	; 9
			}
		}
    3388:	bc ce       	rjmp	.-648    	; 0x3102 <follow_path+0x7e>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    338a:	f9 01       	movw	r30, r18
    338c:	ec 5b       	subi	r30, 0xBC	; 188
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    3390:	80 81       	ld	r24, Z
    3392:	8a 83       	std	Y+2, r24	; 0x02
    3394:	19 82       	std	Y+1, r1	; 0x01
    3396:	f9 01       	movw	r30, r18
    3398:	ed 5b       	subi	r30, 0xBD	; 189
    339a:	ff 4f       	sbci	r31, 0xFF	; 255
    339c:	80 81       	ld	r24, Z
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	29 81       	ldd	r18, Y+1	; 0x01
    33a2:	3a 81       	ldd	r19, Y+2	; 0x02
    33a4:	82 2b       	or	r24, r18
    33a6:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    33a8:	a0 e0       	ldi	r26, 0x00	; 0
    33aa:	b0 e0       	ldi	r27, 0x00	; 0
    33ac:	dc 01       	movw	r26, r24
    33ae:	99 27       	eor	r25, r25
    33b0:	88 27       	eor	r24, r24
    33b2:	48 2b       	or	r20, r24
    33b4:	59 2b       	or	r21, r25
    33b6:	6a 2b       	or	r22, r26
    33b8:	7b 2b       	or	r23, r27
    33ba:	df cf       	rjmp	.-66     	; 0x337a <follow_path+0x2f6>
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    33bc:	5c 96       	adiw	r26, 0x1c	; 28
    33be:	0c 93       	st	X, r16
    33c0:	5c 97       	sbiw	r26, 0x1c	; 28
    33c2:	41 cf       	rjmp	.-382    	; 0x3246 <follow_path+0x1c2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    33c4:	44 e0       	ldi	r20, 0x04	; 4
    33c6:	50 e0       	ldi	r21, 0x00	; 0
    33c8:	ee ce       	rjmp	.-548    	; 0x31a6 <follow_path+0x122>

000033ca <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62
    33d2:	27 97       	sbiw	r28, 0x07	; 7
    33d4:	0f b6       	in	r0, 0x3f	; 63
    33d6:	f8 94       	cli
    33d8:	de bf       	out	0x3e, r29	; 62
    33da:	0f be       	out	0x3f, r0	; 63
    33dc:	cd bf       	out	0x3d, r28	; 61
    33de:	9c 83       	std	Y+4, r25	; 0x04
    33e0:	8b 83       	std	Y+3, r24	; 0x03
    33e2:	7e 83       	std	Y+6, r23	; 0x06
    33e4:	6d 83       	std	Y+5, r22	; 0x05
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    33e6:	7a 83       	std	Y+2, r23	; 0x02
    33e8:	69 83       	std	Y+1, r22	; 0x01


	vol = get_ldnumber(&rp);
    33ea:	ce 01       	movw	r24, r28
    33ec:	01 96       	adiw	r24, 0x01	; 1
    33ee:	4f 83       	std	Y+7, r20	; 0x07
    33f0:	0e 94 df 09 	call	0x13be	; 0x13be <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    33f4:	4f 81       	ldd	r20, Y+7	; 0x07
    33f6:	97 fd       	sbrc	r25, 7
    33f8:	23 c0       	rjmp	.+70     	; 0x3440 <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
    33fa:	88 0f       	add	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	fc 01       	movw	r30, r24
    3400:	e7 5d       	subi	r30, 0xD7	; 215
    3402:	fe 4f       	sbci	r31, 0xFE	; 254
    3404:	01 90       	ld	r0, Z+
    3406:	f0 81       	ld	r31, Z
    3408:	e0 2d       	mov	r30, r0

	//if(!cfs){ // cfs is 0
		
	//}
	if (cfs) {
    340a:	30 97       	sbiw	r30, 0x00	; 0
    340c:	09 f0       	breq	.+2      	; 0x3410 <f_mount+0x46>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    340e:	10 82       	st	Z, r1
	}

	if (fs) {
    3410:	eb 81       	ldd	r30, Y+3	; 0x03
    3412:	fc 81       	ldd	r31, Y+4	; 0x04
    3414:	30 97       	sbiw	r30, 0x00	; 0
    3416:	b9 f0       	breq	.+46     	; 0x3446 <f_mount+0x7c>
		fs->fs_type = 0;				/* Clear new fs object */
    3418:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    341a:	87 5d       	subi	r24, 0xD7	; 215
    341c:	9e 4f       	sbci	r25, 0xFE	; 254
    341e:	dc 01       	movw	r26, r24
    3420:	11 96       	adiw	r26, 0x01	; 1
    3422:	fc 93       	st	X, r31
    3424:	ee 93       	st	-X, r30

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    3426:	41 30       	cpi	r20, 0x01	; 1
    3428:	b1 f0       	breq	.+44     	; 0x3456 <f_mount+0x8c>
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	90 e0       	ldi	r25, 0x00	; 0
	// this function is okay - fs exists
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    342e:	27 96       	adiw	r28, 0x07	; 7
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	df 91       	pop	r29
    343c:	cf 91       	pop	r28
    343e:	08 95       	ret
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    3440:	8b e0       	ldi	r24, 0x0B	; 11
    3442:	90 e0       	ldi	r25, 0x00	; 0
    3444:	f4 cf       	rjmp	.-24     	; 0x342e <f_mount+0x64>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    3446:	87 5d       	subi	r24, 0xD7	; 215
    3448:	9e 4f       	sbci	r25, 0xFE	; 254
    344a:	fc 01       	movw	r30, r24
    344c:	11 82       	std	Z+1, r1	; 0x01
    344e:	10 82       	st	Z, r1

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	ec cf       	rjmp	.-40     	; 0x342e <f_mount+0x64>
	// this function is okay - fs exists
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
    3456:	ce 01       	movw	r24, r28
    3458:	05 96       	adiw	r24, 0x05	; 5
    345a:	be 01       	movw	r22, r28
    345c:	6d 5f       	subi	r22, 0xFD	; 253
    345e:	7f 4f       	sbci	r23, 0xFF	; 255
    3460:	40 e0       	ldi	r20, 0x00	; 0
    3462:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <find_volume>
	LEAVE_FF(fs, res);
    3466:	e3 cf       	rjmp	.-58     	; 0x342e <f_mount+0x64>

00003468 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    3468:	2f 92       	push	r2
    346a:	3f 92       	push	r3
    346c:	4f 92       	push	r4
    346e:	5f 92       	push	r5
    3470:	6f 92       	push	r6
    3472:	7f 92       	push	r7
    3474:	8f 92       	push	r8
    3476:	9f 92       	push	r9
    3478:	af 92       	push	r10
    347a:	bf 92       	push	r11
    347c:	cf 92       	push	r12
    347e:	df 92       	push	r13
    3480:	ef 92       	push	r14
    3482:	ff 92       	push	r15
    3484:	0f 93       	push	r16
    3486:	1f 93       	push	r17
    3488:	cf 93       	push	r28
    348a:	df 93       	push	r29
    348c:	cd b7       	in	r28, 0x3d	; 61
    348e:	de b7       	in	r29, 0x3e	; 62
    3490:	e0 97       	sbiw	r28, 0x30	; 48
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	f8 94       	cli
    3496:	de bf       	out	0x3e, r29	; 62
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	cd bf       	out	0x3d, r28	; 61
    349c:	7c 01       	movw	r14, r24
    349e:	7c a7       	lds	r23, 0x7c
    34a0:	6b a7       	lds	r22, 0x7b
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    34a2:	00 97       	sbiw	r24, 0x00	; 0
    34a4:	59 f1       	breq	.+86     	; 0x34fc <f_open+0x94>

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
    34a6:	8f e3       	ldi	r24, 0x3F	; 63
    34a8:	b8 2e       	mov	r11, r24
    34aa:	b4 22       	and	r11, r20
	res = find_volume(&path, &fs, mode);
    34ac:	ce 01       	movw	r24, r28
    34ae:	8b 96       	adiw	r24, 0x2b	; 43
    34b0:	be 01       	movw	r22, r28
    34b2:	6f 5f       	subi	r22, 0xFF	; 255
    34b4:	7f 4f       	sbci	r23, 0xFF	; 255
    34b6:	4b 2d       	mov	r20, r11
    34b8:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <find_volume>
    34bc:	6c 01       	movw	r12, r24
	if (res == FR_OK) {
    34be:	00 97       	sbiw	r24, 0x00	; 0
    34c0:	09 f1       	breq	.+66     	; 0x3504 <f_open+0x9c>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    34c2:	f7 01       	movw	r30, r14
    34c4:	11 82       	std	Z+1, r1	; 0x01
    34c6:	10 82       	st	Z, r1

	LEAVE_FF(fs, res);
}
    34c8:	c6 01       	movw	r24, r12
    34ca:	e0 96       	adiw	r28, 0x30	; 48
    34cc:	0f b6       	in	r0, 0x3f	; 63
    34ce:	f8 94       	cli
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	cd bf       	out	0x3d, r28	; 61
    34d6:	df 91       	pop	r29
    34d8:	cf 91       	pop	r28
    34da:	1f 91       	pop	r17
    34dc:	0f 91       	pop	r16
    34de:	ff 90       	pop	r15
    34e0:	ef 90       	pop	r14
    34e2:	df 90       	pop	r13
    34e4:	cf 90       	pop	r12
    34e6:	bf 90       	pop	r11
    34e8:	af 90       	pop	r10
    34ea:	9f 90       	pop	r9
    34ec:	8f 90       	pop	r8
    34ee:	7f 90       	pop	r7
    34f0:	6f 90       	pop	r6
    34f2:	5f 90       	pop	r5
    34f4:	4f 90       	pop	r4
    34f6:	3f 90       	pop	r3
    34f8:	2f 90       	pop	r2
    34fa:	08 95       	ret
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    34fc:	a9 e0       	ldi	r26, 0x09	; 9
    34fe:	ca 2e       	mov	r12, r26
    3500:	d1 2c       	mov	r13, r1
    3502:	e2 cf       	rjmp	.-60     	; 0x34c8 <f_open+0x60>

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
	res = find_volume(&path, &fs, mode);
	if (res == FR_OK) {
		dj.obj.fs = fs;
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	9a 81       	ldd	r25, Y+2	; 0x02
    3508:	9c 83       	std	Y+4, r25	; 0x04
    350a:	8b 83       	std	Y+3, r24	; 0x03
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    350c:	6b a5       	lds	r22, 0x6b
    350e:	7c a5       	lds	r23, 0x6c
    3510:	ce 01       	movw	r24, r28
    3512:	03 96       	adiw	r24, 0x03	; 3
    3514:	0e 94 42 18 	call	0x3084	; 0x3084 <follow_path>
    3518:	9c 01       	movw	r18, r24
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    351a:	00 97       	sbiw	r24, 0x00	; 0
    351c:	19 f4       	brne	.+6      	; 0x3524 <f_open+0xbc>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    351e:	8a a5       	lds	r24, 0x6a
    3520:	87 fd       	sbrc	r24, 7
    3522:	f5 c1       	rjmp	.+1002   	; 0x390e <f_open+0x4a6>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    3524:	0b 2d       	mov	r16, r11
    3526:	10 e0       	ldi	r17, 0x00	; 0
    3528:	c8 01       	movw	r24, r16
    352a:	8c 71       	andi	r24, 0x1C	; 28
    352c:	90 70       	andi	r25, 0x00	; 0
    352e:	00 97       	sbiw	r24, 0x00	; 0
    3530:	09 f4       	brne	.+2      	; 0x3534 <f_open+0xcc>
    3532:	84 c0       	rjmp	.+264    	; 0x363c <f_open+0x1d4>
			if (res != FR_OK) {					/* No file, create new */
    3534:	21 15       	cp	r18, r1
    3536:	31 05       	cpc	r19, r1
    3538:	09 f4       	brne	.+2      	; 0x353c <f_open+0xd4>
    353a:	bf c1       	rjmp	.+894    	; 0x38ba <f_open+0x452>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    353c:	24 30       	cpi	r18, 0x04	; 4
    353e:	31 05       	cpc	r19, r1
    3540:	09 f0       	breq	.+2      	; 0x3544 <f_open+0xdc>
    3542:	c2 c1       	rjmp	.+900    	; 0x38c8 <f_open+0x460>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    3544:	ce 01       	movw	r24, r28
    3546:	03 96       	adiw	r24, 0x03	; 3
    3548:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <dir_register>
    354c:	9c 01       	movw	r18, r24
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	09 f0       	breq	.+2      	; 0x3554 <f_open+0xec>
    3552:	ba c1       	rjmp	.+884    	; 0x38c8 <f_open+0x460>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    3554:	88 e0       	ldi	r24, 0x08	; 8
    3556:	b8 2a       	or	r11, r24
    3558:	0b 2d       	mov	r16, r11
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    355a:	03 ff       	sbrs	r16, 3
    355c:	db c1       	rjmp	.+950    	; 0x3914 <f_open+0x4ac>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
    355e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3560:	fe 8d       	ldd	r31, Y+30	; 0x1e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3562:	16 86       	std	Z+14, r1	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    3564:	17 86       	std	Z+15, r1	; 0x0f
	*ptr++ = (BYTE)val; val >>= 8;
    3566:	91 e2       	ldi	r25, 0x21	; 33
    3568:	90 8b       	std	Z+16, r25	; 0x10
	*ptr++ = (BYTE)val;
    356a:	88 e4       	ldi	r24, 0x48	; 72
    356c:	81 8b       	std	Z+17, r24	; 0x11
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
    356e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3570:	fe 8d       	ldd	r31, Y+30	; 0x1e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3572:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    3574:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    3576:	90 8f       	std	Z+24, r25	; 0x18
	*ptr++ = (BYTE)val;
    3578:	81 8f       	std	Z+25, r24	; 0x19
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    357a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    357c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    357e:	80 e2       	ldi	r24, 0x20	; 32
    3580:	83 87       	std	Z+11, r24	; 0x0b
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
    3582:	89 80       	ldd	r8, Y+1	; 0x01
    3584:	9a 80       	ldd	r9, Y+2	; 0x02
    3586:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3588:	fe 8d       	ldd	r31, Y+30	; 0x1e
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    358a:	33 8d       	ldd	r19, Z+27	; 0x1b
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	82 2b       	or	r24, r18
    3594:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    3596:	2c 01       	movw	r4, r24
    3598:	66 24       	eor	r6, r6
    359a:	77 24       	eor	r7, r7
	if (fs->fs_type == FS_FAT32) {
    359c:	d4 01       	movw	r26, r8
    359e:	8c 91       	ld	r24, X
    35a0:	83 30       	cpi	r24, 0x03	; 3
    35a2:	09 f4       	brne	.+2      	; 0x35a6 <f_open+0x13e>
    35a4:	c3 c1       	rjmp	.+902    	; 0x392c <f_open+0x4c4>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    35a6:	12 8e       	std	Z+26, r1	; 0x1a
	*ptr++ = (BYTE)val;
    35a8:	13 8e       	std	Z+27, r1	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    35aa:	d4 01       	movw	r26, r8
    35ac:	8c 91       	ld	r24, X
    35ae:	83 30       	cpi	r24, 0x03	; 3
    35b0:	09 f4       	brne	.+2      	; 0x35b4 <f_open+0x14c>
    35b2:	b9 c1       	rjmp	.+882    	; 0x3926 <f_open+0x4be>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
    35b4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    35b6:	fe 8d       	ldd	r31, Y+30	; 0x1e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    35b8:	14 8e       	std	Z+28, r1	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    35ba:	15 8e       	std	Z+29, r1	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    35bc:	16 8e       	std	Z+30, r1	; 0x1e
	*ptr++ = (BYTE)val;
    35be:	17 8e       	std	Z+31, r1	; 0x1f
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	d4 01       	movw	r26, r8
    35c4:	13 96       	adiw	r26, 0x03	; 3
    35c6:	8c 93       	st	X, r24
    35c8:	13 97       	sbiw	r26, 0x03	; 3

					if (cl) {							/* Remove the cluster chain if exist */
    35ca:	41 14       	cp	r4, r1
    35cc:	51 04       	cpc	r5, r1
    35ce:	61 04       	cpc	r6, r1
    35d0:	71 04       	cpc	r7, r1
    35d2:	09 f4       	brne	.+2      	; 0x35d6 <f_open+0x16e>
    35d4:	47 c0       	rjmp	.+142    	; 0x3664 <f_open+0x1fc>
						dw = fs->winsect;
    35d6:	9b 96       	adiw	r26, 0x2b	; 43
    35d8:	8d 91       	ld	r24, X+
    35da:	9d 91       	ld	r25, X+
    35dc:	0d 90       	ld	r0, X+
    35de:	bc 91       	ld	r27, X
    35e0:	a0 2d       	mov	r26, r0
    35e2:	8d a7       	lds	r24, 0x7d
    35e4:	9e a7       	lds	r25, 0x7e
    35e6:	af a7       	lds	r26, 0x7f
    35e8:	b8 ab       	sts	0x58, r27
						res = remove_chain(&dj.obj, cl, 0);
    35ea:	ce 01       	movw	r24, r28
    35ec:	03 96       	adiw	r24, 0x03	; 3
    35ee:	b3 01       	movw	r22, r6
    35f0:	a2 01       	movw	r20, r4
    35f2:	00 e0       	ldi	r16, 0x00	; 0
    35f4:	10 e0       	ldi	r17, 0x00	; 0
    35f6:	98 01       	movw	r18, r16
    35f8:	0e 94 42 16 	call	0x2c84	; 0x2c84 <remove_chain>
    35fc:	9c 01       	movw	r18, r24
						if (res == FR_OK) {
    35fe:	00 97       	sbiw	r24, 0x00	; 0
    3600:	09 f0       	breq	.+2      	; 0x3604 <f_open+0x19c>
    3602:	62 c1       	rjmp	.+708    	; 0x38c8 <f_open+0x460>
							res = move_window(fs, dw);
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	9a 81       	ldd	r25, Y+2	; 0x02
    3608:	4d a5       	lds	r20, 0x6d
    360a:	5e a5       	lds	r21, 0x6e
    360c:	6f a5       	lds	r22, 0x6f
    360e:	78 a9       	sts	0x48, r23
    3610:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
    3614:	9c 01       	movw	r18, r24
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    3616:	89 80       	ldd	r8, Y+1	; 0x01
    3618:	9a 80       	ldd	r9, Y+2	; 0x02
    361a:	d3 01       	movw	r26, r6
    361c:	c2 01       	movw	r24, r4
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	a1 09       	sbc	r26, r1
    3622:	b1 09       	sbc	r27, r1
    3624:	f4 01       	movw	r30, r8
    3626:	83 87       	std	Z+11, r24	; 0x0b
    3628:	94 87       	std	Z+12, r25	; 0x0c
    362a:	a5 87       	std	Z+13, r26	; 0x0d
    362c:	b6 87       	std	Z+14, r27	; 0x0e
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    362e:	21 15       	cp	r18, r1
    3630:	31 05       	cpc	r19, r1
    3632:	09 f0       	breq	.+2      	; 0x3636 <f_open+0x1ce>
    3634:	49 c1       	rjmp	.+658    	; 0x38c8 <f_open+0x460>
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
    3636:	ed 8d       	ldd	r30, Y+29	; 0x1d
    3638:	fe 8d       	ldd	r31, Y+30	; 0x1e
    363a:	14 c0       	rjmp	.+40     	; 0x3664 <f_open+0x1fc>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
    363c:	21 15       	cp	r18, r1
    363e:	31 05       	cpc	r19, r1
    3640:	09 f0       	breq	.+2      	; 0x3644 <f_open+0x1dc>
    3642:	42 c1       	rjmp	.+644    	; 0x38c8 <f_open+0x460>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
    3644:	8f 81       	ldd	r24, Y+7	; 0x07
    3646:	84 fd       	sbrc	r24, 4
    3648:	6a c1       	rjmp	.+724    	; 0x391e <f_open+0x4b6>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
    364a:	b1 fe       	sbrs	r11, 1
    364c:	02 c0       	rjmp	.+4      	; 0x3652 <f_open+0x1ea>
    364e:	80 fd       	sbrc	r24, 0
    3650:	4a c1       	rjmp	.+660    	; 0x38e6 <f_open+0x47e>
    3652:	c8 01       	movw	r24, r16
    3654:	88 70       	andi	r24, 0x08	; 8
    3656:	90 70       	andi	r25, 0x00	; 0
    3658:	89 80       	ldd	r8, Y+1	; 0x01
    365a:	9a 80       	ldd	r9, Y+2	; 0x02
    365c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    365e:	fe 8d       	ldd	r31, Y+30	; 0x1e
					}
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    3660:	00 97       	sbiw	r24, 0x00	; 0
    3662:	19 f0       	breq	.+6      	; 0x366a <f_open+0x202>
				mode |= FA_MODIFIED;
    3664:	80 e4       	ldi	r24, 0x40	; 64
    3666:	b8 2a       	or	r11, r24
    3668:	0b 2d       	mov	r16, r11
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    366a:	d4 01       	movw	r26, r8
    366c:	9b 96       	adiw	r26, 0x2b	; 43
    366e:	4d 91       	ld	r20, X+
    3670:	5d 91       	ld	r21, X+
    3672:	6d 91       	ld	r22, X+
    3674:	7c 91       	ld	r23, X
    3676:	9e 97       	sbiw	r26, 0x2e	; 46
    3678:	d7 01       	movw	r26, r14
    367a:	5c 96       	adiw	r26, 0x1c	; 28
    367c:	4d 93       	st	X+, r20
    367e:	5d 93       	st	X+, r21
    3680:	6d 93       	st	X+, r22
    3682:	7c 93       	st	X, r23
    3684:	5f 97       	sbiw	r26, 0x1f	; 31
			fp->dir_ptr = dj.dir;
    3686:	91 96       	adiw	r26, 0x21	; 33
    3688:	fc 93       	st	X, r31
    368a:	ee 93       	st	-X, r30
    368c:	90 97       	sbiw	r26, 0x20	; 32
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    368e:	33 8d       	ldd	r19, Z+27	; 0x1b
    3690:	20 e0       	ldi	r18, 0x00	; 0
    3692:	82 8d       	ldd	r24, Z+26	; 0x1a
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	82 2b       	or	r24, r18
    3698:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    369a:	ac 01       	movw	r20, r24
    369c:	60 e0       	ldi	r22, 0x00	; 0
    369e:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    36a0:	d4 01       	movw	r26, r8
    36a2:	8c 91       	ld	r24, X
    36a4:	83 30       	cpi	r24, 0x03	; 3
    36a6:	09 f4       	brne	.+2      	; 0x36aa <f_open+0x242>
    36a8:	22 c1       	rjmp	.+580    	; 0x38ee <f_open+0x486>
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
				fp->obj.c_ofs = dj.blk_ofs;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
    36aa:	d7 01       	movw	r26, r14
    36ac:	16 96       	adiw	r26, 0x06	; 6
    36ae:	4d 93       	st	X+, r20
    36b0:	5d 93       	st	X+, r21
    36b2:	6d 93       	st	X+, r22
    36b4:	7c 93       	st	X, r23
    36b6:	19 97       	sbiw	r26, 0x09	; 9
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    36b8:	87 8d       	ldd	r24, Z+31	; 0x1f
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	a0 e0       	ldi	r26, 0x00	; 0
    36be:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    36c0:	44 27       	eor	r20, r20
    36c2:	58 2f       	mov	r21, r24
    36c4:	69 2f       	mov	r22, r25
    36c6:	7a 2f       	mov	r23, r26
    36c8:	86 8d       	ldd	r24, Z+30	; 0x1e
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	a0 e0       	ldi	r26, 0x00	; 0
    36ce:	b0 e0       	ldi	r27, 0x00	; 0
    36d0:	48 2b       	or	r20, r24
    36d2:	59 2b       	or	r21, r25
    36d4:	6a 2b       	or	r22, r26
    36d6:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    36d8:	76 2f       	mov	r23, r22
    36da:	65 2f       	mov	r22, r21
    36dc:	54 2f       	mov	r21, r20
    36de:	44 27       	eor	r20, r20
    36e0:	85 8d       	ldd	r24, Z+29	; 0x1d
    36e2:	90 e0       	ldi	r25, 0x00	; 0
    36e4:	a0 e0       	ldi	r26, 0x00	; 0
    36e6:	b0 e0       	ldi	r27, 0x00	; 0
    36e8:	48 2b       	or	r20, r24
    36ea:	59 2b       	or	r21, r25
    36ec:	6a 2b       	or	r22, r26
    36ee:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    36f0:	76 2f       	mov	r23, r22
    36f2:	65 2f       	mov	r22, r21
    36f4:	54 2f       	mov	r21, r20
    36f6:	44 27       	eor	r20, r20
    36f8:	84 8d       	ldd	r24, Z+28	; 0x1c
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	a0 e0       	ldi	r26, 0x00	; 0
    36fe:	b0 e0       	ldi	r27, 0x00	; 0
    3700:	48 2b       	or	r20, r24
    3702:	59 2b       	or	r21, r25
    3704:	6a 2b       	or	r22, r26
    3706:	7b 2b       	or	r23, r27
				fp->obj.c_ofs = dj.blk_ofs;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    3708:	f7 01       	movw	r30, r14
    370a:	42 87       	std	Z+10, r20	; 0x0a
    370c:	53 87       	std	Z+11, r21	; 0x0b
    370e:	64 87       	std	Z+12, r22	; 0x0c
    3710:	75 87       	std	Z+13, r23	; 0x0d
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
    3712:	91 82       	std	Z+1, r9	; 0x01
    3714:	80 82       	st	Z, r8
			fp->obj.id = fs->id;
    3716:	d4 01       	movw	r26, r8
    3718:	15 96       	adiw	r26, 0x05	; 5
    371a:	8d 91       	ld	r24, X+
    371c:	9c 91       	ld	r25, X
    371e:	16 97       	sbiw	r26, 0x06	; 6
    3720:	93 83       	std	Z+3, r25	; 0x03
    3722:	82 83       	std	Z+2, r24	; 0x02
			fp->flag = mode;		/* Set file access mode */
    3724:	b6 86       	std	Z+14, r11	; 0x0e
			fp->err = 0;			/* Clear error flag */
    3726:	17 86       	std	Z+15, r1	; 0x0f
			fp->sect = 0;			/* Invalidate current data sector */
    3728:	10 8e       	std	Z+24, r1	; 0x18
    372a:	11 8e       	std	Z+25, r1	; 0x19
    372c:	12 8e       	std	Z+26, r1	; 0x1a
    372e:	13 8e       	std	Z+27, r1	; 0x1b
			fp->fptr = 0;			/* Set file pointer top of the file */
    3730:	10 8a       	std	Z+16, r1	; 0x10
    3732:	11 8a       	std	Z+17, r1	; 0x11
    3734:	12 8a       	std	Z+18, r1	; 0x12
    3736:	13 8a       	std	Z+19, r1	; 0x13
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
    3738:	32 e2       	ldi	r19, 0x22	; 34
    373a:	23 2e       	mov	r2, r19
    373c:	31 2c       	mov	r3, r1
    373e:	2e 0c       	add	r2, r14
    3740:	3f 1c       	adc	r3, r15

/*-----------------------------------------------------------------------*/
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_open (
    3742:	c7 01       	movw	r24, r14
    3744:	8e 5d       	subi	r24, 0xDE	; 222
    3746:	9d 4f       	sbci	r25, 0xFD	; 253
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    3748:	f1 01       	movw	r30, r2

	do *d++ = (BYTE)val; while (--cnt);
    374a:	11 92       	st	Z+, r1
    374c:	e8 17       	cp	r30, r24
    374e:	f9 07       	cpc	r31, r25
    3750:	e1 f7       	brne	.-8      	; 0x374a <f_open+0x2e2>
			fp->fptr = 0;			/* Set file pointer top of the file */
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    3752:	05 ff       	sbrs	r16, 5
    3754:	b9 ce       	rjmp	.-654    	; 0x34c8 <f_open+0x60>
    3756:	f7 01       	movw	r30, r14
    3758:	42 84       	ldd	r4, Z+10	; 0x0a
    375a:	53 84       	ldd	r5, Z+11	; 0x0b
    375c:	64 84       	ldd	r6, Z+12	; 0x0c
    375e:	75 84       	ldd	r7, Z+13	; 0x0d
    3760:	41 14       	cp	r4, r1
    3762:	51 04       	cpc	r5, r1
    3764:	61 04       	cpc	r6, r1
    3766:	71 04       	cpc	r7, r1
    3768:	09 f4       	brne	.+2      	; 0x376c <f_open+0x304>
    376a:	ae ce       	rjmp	.-676    	; 0x34c8 <f_open+0x60>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    376c:	d7 01       	movw	r26, r14
    376e:	40 8a       	std	Z+16, r4	; 0x10
    3770:	51 8a       	std	Z+17, r5	; 0x11
    3772:	62 8a       	std	Z+18, r6	; 0x12
    3774:	73 8a       	std	Z+19, r7	; 0x13
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    3776:	f4 01       	movw	r30, r8
    3778:	81 85       	ldd	r24, Z+9	; 0x09
    377a:	92 85       	ldd	r25, Z+10	; 0x0a
    377c:	4c 01       	movw	r8, r24
    377e:	aa 24       	eor	r10, r10
    3780:	bb 24       	eor	r11, r11
    3782:	29 e0       	ldi	r18, 0x09	; 9
    3784:	88 0c       	add	r8, r8
    3786:	99 1c       	adc	r9, r9
    3788:	aa 1c       	adc	r10, r10
    378a:	bb 1c       	adc	r11, r11
    378c:	2a 95       	dec	r18
    378e:	d1 f7       	brne	.-12     	; 0x3784 <f_open+0x31c>
				clst = fp->obj.sclust;				/* Follow the cluster chain */
    3790:	16 96       	adiw	r26, 0x06	; 6
    3792:	4d 91       	ld	r20, X+
    3794:	5d 91       	ld	r21, X+
    3796:	6d 91       	ld	r22, X+
    3798:	7c 91       	ld	r23, X
    379a:	19 97       	sbiw	r26, 0x09	; 9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    379c:	84 14       	cp	r8, r4
    379e:	95 04       	cpc	r9, r5
    37a0:	a6 04       	cpc	r10, r6
    37a2:	b7 04       	cpc	r11, r7
    37a4:	f8 f4       	brcc	.+62     	; 0x37e4 <f_open+0x37c>
					clst = get_fat(&fp->obj, clst);
    37a6:	d7 01       	movw	r26, r14
    37a8:	8d 91       	ld	r24, X+
    37aa:	9c 91       	ld	r25, X
    37ac:	0e 94 8c 11 	call	0x2318	; 0x2318 <get_fat.isra.8>
    37b0:	ab 01       	movw	r20, r22
    37b2:	bc 01       	movw	r22, r24
					if (clst <= 1) res = FR_INT_ERR;
    37b4:	42 30       	cpi	r20, 0x02	; 2
    37b6:	51 05       	cpc	r21, r1
    37b8:	61 05       	cpc	r22, r1
    37ba:	71 05       	cpc	r23, r1
    37bc:	08 f4       	brcc	.+2      	; 0x37c0 <f_open+0x358>
    37be:	8f c0       	rjmp	.+286    	; 0x38de <f_open+0x476>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    37c0:	4f 3f       	cpi	r20, 0xFF	; 255
    37c2:	bf ef       	ldi	r27, 0xFF	; 255
    37c4:	5b 07       	cpc	r21, r27
    37c6:	bf ef       	ldi	r27, 0xFF	; 255
    37c8:	6b 07       	cpc	r22, r27
    37ca:	bf ef       	ldi	r27, 0xFF	; 255
    37cc:	7b 07       	cpc	r23, r27
    37ce:	09 f4       	brne	.+2      	; 0x37d2 <f_open+0x36a>
    37d0:	7d c0       	rjmp	.+250    	; 0x38cc <f_open+0x464>

/*-----------------------------------------------------------------------*/
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_open (
    37d2:	48 18       	sub	r4, r8
    37d4:	59 08       	sbc	r5, r9
    37d6:	6a 08       	sbc	r6, r10
    37d8:	7b 08       	sbc	r7, r11
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    37da:	84 14       	cp	r8, r4
    37dc:	95 04       	cpc	r9, r5
    37de:	a6 04       	cpc	r10, r6
    37e0:	b7 04       	cpc	r11, r7
    37e2:	08 f3       	brcs	.-62     	; 0x37a6 <f_open+0x33e>
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    37e4:	d7 01       	movw	r26, r14
    37e6:	54 96       	adiw	r26, 0x14	; 20
    37e8:	4d 93       	st	X+, r20
    37ea:	5d 93       	st	X+, r21
    37ec:	6d 93       	st	X+, r22
    37ee:	7c 93       	st	X, r23
    37f0:	57 97       	sbiw	r26, 0x17	; 23
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    37f2:	d3 01       	movw	r26, r6
    37f4:	c2 01       	movw	r24, r4
    37f6:	91 70       	andi	r25, 0x01	; 1
    37f8:	a0 70       	andi	r26, 0x00	; 0
    37fa:	b0 70       	andi	r27, 0x00	; 0
    37fc:	00 97       	sbiw	r24, 0x00	; 0
    37fe:	a1 05       	cpc	r26, r1
    3800:	b1 05       	cpc	r27, r1
    3802:	09 f4       	brne	.+2      	; 0x3806 <f_open+0x39e>
    3804:	61 ce       	rjmp	.-830    	; 0x34c8 <f_open+0x60>
					if ((sc = clust2sect(fs, clst)) == 0) {
    3806:	e9 81       	ldd	r30, Y+1	; 0x01
    3808:	fa 81       	ldd	r31, Y+2	; 0x02
    380a:	fe a7       	lds	r31, 0x7e
    380c:	ed a7       	lds	r30, 0x7d
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    380e:	9e ef       	ldi	r25, 0xFE	; 254
    3810:	89 2e       	mov	r8, r25
    3812:	9f ef       	ldi	r25, 0xFF	; 255
    3814:	99 2e       	mov	r9, r25
    3816:	9f ef       	ldi	r25, 0xFF	; 255
    3818:	a9 2e       	mov	r10, r25
    381a:	9f ef       	ldi	r25, 0xFF	; 255
    381c:	b9 2e       	mov	r11, r25
    381e:	84 0e       	add	r8, r20
    3820:	95 1e       	adc	r9, r21
    3822:	a6 1e       	adc	r10, r22
    3824:	b7 1e       	adc	r11, r23
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    3826:	83 89       	ldd	r24, Z+19	; 0x13
    3828:	94 89       	ldd	r25, Z+20	; 0x14
    382a:	a5 89       	ldd	r26, Z+21	; 0x15
    382c:	b6 89       	ldd	r27, Z+22	; 0x16
    382e:	02 97       	sbiw	r24, 0x02	; 2
    3830:	a1 09       	sbc	r26, r1
    3832:	b1 09       	sbc	r27, r1
    3834:	88 16       	cp	r8, r24
    3836:	99 06       	cpc	r9, r25
    3838:	aa 06       	cpc	r10, r26
    383a:	bb 06       	cpc	r11, r27
    383c:	08 f0       	brcs	.+2      	; 0x3840 <f_open+0x3d8>
    383e:	86 c0       	rjmp	.+268    	; 0x394c <f_open+0x4e4>
	return clst * fs->csize + fs->database;
    3840:	21 85       	ldd	r18, Z+9	; 0x09
    3842:	32 85       	ldd	r19, Z+10	; 0x0a
    3844:	40 e0       	ldi	r20, 0x00	; 0
    3846:	50 e0       	ldi	r21, 0x00	; 0
    3848:	c5 01       	movw	r24, r10
    384a:	b4 01       	movw	r22, r8
    384c:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__mulsi3>
    3850:	ab 01       	movw	r20, r22
    3852:	bc 01       	movw	r22, r24
    3854:	ed a5       	lds	r30, 0x6d
    3856:	fe a5       	lds	r31, 0x6e
    3858:	87 a1       	lds	r24, 0x47
    385a:	90 a5       	lds	r25, 0x60
    385c:	a1 a5       	lds	r26, 0x61
    385e:	b2 a5       	lds	r27, 0x62
    3860:	48 0f       	add	r20, r24
    3862:	59 1f       	adc	r21, r25
    3864:	6a 1f       	adc	r22, r26
    3866:	7b 1f       	adc	r23, r27
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
    3868:	41 15       	cp	r20, r1
    386a:	51 05       	cpc	r21, r1
    386c:	61 05       	cpc	r22, r1
    386e:	71 05       	cpc	r23, r1
    3870:	09 f4       	brne	.+2      	; 0x3874 <f_open+0x40c>
    3872:	6c c0       	rjmp	.+216    	; 0x394c <f_open+0x4e4>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    3874:	93 01       	movw	r18, r6
    3876:	82 01       	movw	r16, r4
    3878:	89 e0       	ldi	r24, 0x09	; 9
    387a:	36 95       	lsr	r19
    387c:	27 95       	ror	r18
    387e:	17 95       	ror	r17
    3880:	07 95       	ror	r16
    3882:	8a 95       	dec	r24
    3884:	d1 f7       	brne	.-12     	; 0x387a <f_open+0x412>
    3886:	04 0f       	add	r16, r20
    3888:	15 1f       	adc	r17, r21
    388a:	26 1f       	adc	r18, r22
    388c:	37 1f       	adc	r19, r23
    388e:	d7 01       	movw	r26, r14
    3890:	58 96       	adiw	r26, 0x18	; 24
    3892:	0d 93       	st	X+, r16
    3894:	1d 93       	st	X+, r17
    3896:	2d 93       	st	X+, r18
    3898:	3c 93       	st	X, r19
    389a:	5b 97       	sbiw	r26, 0x1b	; 27
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
    389c:	81 81       	ldd	r24, Z+1	; 0x01
    389e:	b1 01       	movw	r22, r2
    38a0:	a9 01       	movw	r20, r18
    38a2:	98 01       	movw	r18, r16
    38a4:	01 e0       	ldi	r16, 0x01	; 1
    38a6:	10 e0       	ldi	r17, 0x00	; 0
    38a8:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <disk_read>
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	09 f4       	brne	.+2      	; 0x38b2 <f_open+0x44a>
    38b0:	0b ce       	rjmp	.-1002   	; 0x34c8 <f_open+0x60>
    38b2:	11 e0       	ldi	r17, 0x01	; 1
    38b4:	c1 2e       	mov	r12, r17
    38b6:	d1 2c       	mov	r13, r1
    38b8:	04 ce       	rjmp	.-1016   	; 0x34c2 <f_open+0x5a>
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    38ba:	8f 81       	ldd	r24, Y+7	; 0x07
    38bc:	81 71       	andi	r24, 0x11	; 17
    38be:	99 f4       	brne	.+38     	; 0x38e6 <f_open+0x47e>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    38c0:	b2 fe       	sbrs	r11, 2
    38c2:	4b ce       	rjmp	.-874    	; 0x355a <f_open+0xf2>
    38c4:	28 e0       	ldi	r18, 0x08	; 8
    38c6:	30 e0       	ldi	r19, 0x00	; 0
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    38c8:	69 01       	movw	r12, r18
    38ca:	fb cd       	rjmp	.-1034   	; 0x34c2 <f_open+0x5a>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    38cc:	e1 e0       	ldi	r30, 0x01	; 1
    38ce:	ce 2e       	mov	r12, r30
    38d0:	d1 2c       	mov	r13, r1
				}
				fp->clust = clst;
    38d2:	f7 01       	movw	r30, r14
    38d4:	44 8b       	std	Z+20, r20	; 0x14
    38d6:	55 8b       	std	Z+21, r21	; 0x15
    38d8:	66 8b       	std	Z+22, r22	; 0x16
    38da:	77 8b       	std	Z+23, r23	; 0x17
    38dc:	f2 cd       	rjmp	.-1052   	; 0x34c2 <f_open+0x5a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
    38de:	f2 e0       	ldi	r31, 0x02	; 2
    38e0:	cf 2e       	mov	r12, r31
    38e2:	d1 2c       	mov	r13, r1
    38e4:	f6 cf       	rjmp	.-20     	; 0x38d2 <f_open+0x46a>
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
						res = FR_DENIED;
    38e6:	27 e0       	ldi	r18, 0x07	; 7
    38e8:	30 e0       	ldi	r19, 0x00	; 0
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    38ea:	69 01       	movw	r12, r18
    38ec:	ea cd       	rjmp	.-1068   	; 0x34c2 <f_open+0x5a>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    38ee:	35 89       	ldd	r19, Z+21	; 0x15
    38f0:	20 e0       	ldi	r18, 0x00	; 0
    38f2:	84 89       	ldd	r24, Z+20	; 0x14
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	82 2b       	or	r24, r18
    38f8:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    38fa:	a0 e0       	ldi	r26, 0x00	; 0
    38fc:	b0 e0       	ldi	r27, 0x00	; 0
    38fe:	dc 01       	movw	r26, r24
    3900:	99 27       	eor	r25, r25
    3902:	88 27       	eor	r24, r24
    3904:	48 2b       	or	r20, r24
    3906:	59 2b       	or	r21, r25
    3908:	6a 2b       	or	r22, r26
    390a:	7b 2b       	or	r23, r27
    390c:	ce ce       	rjmp	.-612    	; 0x36aa <f_open+0x242>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
				res = FR_INVALID_NAME;
    390e:	26 e0       	ldi	r18, 0x06	; 6
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	08 ce       	rjmp	.-1008   	; 0x3524 <f_open+0xbc>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    3914:	89 80       	ldd	r8, Y+1	; 0x01
    3916:	9a 80       	ldd	r9, Y+2	; 0x02
    3918:	ed 8d       	ldd	r30, Y+29	; 0x1d
    391a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    391c:	a6 ce       	rjmp	.-692    	; 0x366a <f_open+0x202>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
    391e:	24 e0       	ldi	r18, 0x04	; 4
    3920:	30 e0       	ldi	r19, 0x00	; 0
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    3922:	69 01       	movw	r12, r18
    3924:	ce cd       	rjmp	.-1124   	; 0x34c2 <f_open+0x5a>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3926:	14 8a       	std	Z+20, r1	; 0x14
	*ptr++ = (BYTE)val;
    3928:	15 8a       	std	Z+21, r1	; 0x15
    392a:	44 ce       	rjmp	.-888    	; 0x35b4 <f_open+0x14c>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    392c:	35 89       	ldd	r19, Z+21	; 0x15
    392e:	20 e0       	ldi	r18, 0x00	; 0
    3930:	84 89       	ldd	r24, Z+20	; 0x14
    3932:	90 e0       	ldi	r25, 0x00	; 0
    3934:	82 2b       	or	r24, r18
    3936:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    3938:	a0 e0       	ldi	r26, 0x00	; 0
    393a:	b0 e0       	ldi	r27, 0x00	; 0
    393c:	dc 01       	movw	r26, r24
    393e:	99 27       	eor	r25, r25
    3940:	88 27       	eor	r24, r24
    3942:	48 2a       	or	r4, r24
    3944:	59 2a       	or	r5, r25
    3946:	6a 2a       	or	r6, r26
    3948:	7b 2a       	or	r7, r27
    394a:	2d ce       	rjmp	.-934    	; 0x35a6 <f_open+0x13e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
						res = FR_INT_ERR;
    394c:	b2 e0       	ldi	r27, 0x02	; 2
    394e:	cb 2e       	mov	r12, r27
    3950:	d1 2c       	mov	r13, r1
    3952:	b7 cd       	rjmp	.-1170   	; 0x34c2 <f_open+0x5a>

00003954 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
    3954:	2f 92       	push	r2
    3956:	3f 92       	push	r3
    3958:	4f 92       	push	r4
    395a:	5f 92       	push	r5
    395c:	6f 92       	push	r6
    395e:	7f 92       	push	r7
    3960:	8f 92       	push	r8
    3962:	9f 92       	push	r9
    3964:	af 92       	push	r10
    3966:	bf 92       	push	r11
    3968:	cf 92       	push	r12
    396a:	df 92       	push	r13
    396c:	ef 92       	push	r14
    396e:	ff 92       	push	r15
    3970:	0f 93       	push	r16
    3972:	1f 93       	push	r17
    3974:	cf 93       	push	r28
    3976:	df 93       	push	r29
    3978:	cd b7       	in	r28, 0x3d	; 61
    397a:	de b7       	in	r29, 0x3e	; 62
    397c:	2a 97       	sbiw	r28, 0x0a	; 10
    397e:	0f b6       	in	r0, 0x3f	; 63
    3980:	f8 94       	cli
    3982:	de bf       	out	0x3e, r29	; 62
    3984:	0f be       	out	0x3f, r0	; 63
    3986:	cd bf       	out	0x3d, r28	; 61
    3988:	5c 01       	movw	r10, r24
    398a:	e6 2e       	mov	r14, r22
    398c:	c7 2e       	mov	r12, r23
    398e:	3a 01       	movw	r6, r20
    3990:	3c 83       	std	Y+4, r19	; 0x04
    3992:	2b 83       	std	Y+3, r18	; 0x03
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    3994:	f9 01       	movw	r30, r18
    3996:	11 82       	std	Z+1, r1	; 0x01
    3998:	10 82       	st	Z, r1
	res = validate(fp, &fs);
    399a:	be 01       	movw	r22, r28
    399c:	6f 5f       	subi	r22, 0xFF	; 255
    399e:	7f 4f       	sbci	r23, 0xFF	; 255
    39a0:	0e 94 15 0a 	call	0x142a	; 0x142a <validate>
    39a4:	2c 01       	movw	r4, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    39a6:	00 97       	sbiw	r24, 0x00	; 0
    39a8:	61 f4       	brne	.+24     	; 0x39c2 <f_read+0x6e>
    39aa:	f5 01       	movw	r30, r10
    39ac:	47 84       	ldd	r4, Z+15	; 0x0f
    39ae:	55 24       	eor	r5, r5
    39b0:	41 14       	cp	r4, r1
    39b2:	51 04       	cpc	r5, r1
    39b4:	31 f4       	brne	.+12     	; 0x39c2 <f_read+0x6e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    39b6:	86 85       	ldd	r24, Z+14	; 0x0e
    39b8:	80 fd       	sbrc	r24, 0
    39ba:	1d c0       	rjmp	.+58     	; 0x39f6 <f_read+0xa2>
    39bc:	97 e0       	ldi	r25, 0x07	; 7
    39be:	49 2e       	mov	r4, r25
    39c0:	51 2c       	mov	r5, r1
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
    39c2:	c2 01       	movw	r24, r4
    39c4:	2a 96       	adiw	r28, 0x0a	; 10
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	f8 94       	cli
    39ca:	de bf       	out	0x3e, r29	; 62
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	cd bf       	out	0x3d, r28	; 61
    39d0:	df 91       	pop	r29
    39d2:	cf 91       	pop	r28
    39d4:	1f 91       	pop	r17
    39d6:	0f 91       	pop	r16
    39d8:	ff 90       	pop	r15
    39da:	ef 90       	pop	r14
    39dc:	df 90       	pop	r13
    39de:	cf 90       	pop	r12
    39e0:	bf 90       	pop	r11
    39e2:	af 90       	pop	r10
    39e4:	9f 90       	pop	r9
    39e6:	8f 90       	pop	r8
    39e8:	7f 90       	pop	r7
    39ea:	6f 90       	pop	r6
    39ec:	5f 90       	pop	r5
    39ee:	4f 90       	pop	r4
    39f0:	3f 90       	pop	r3
    39f2:	2f 90       	pop	r2
    39f4:	08 95       	ret

	*br = 0;	/* Clear read byte counter */
	res = validate(fp, &fs);
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
    39f6:	00 89       	ldd	r16, Z+16	; 0x10
    39f8:	11 89       	ldd	r17, Z+17	; 0x11
    39fa:	22 89       	ldd	r18, Z+18	; 0x12
    39fc:	33 89       	ldd	r19, Z+19	; 0x13
    39fe:	82 85       	ldd	r24, Z+10	; 0x0a
    3a00:	93 85       	ldd	r25, Z+11	; 0x0b
    3a02:	a4 85       	ldd	r26, Z+12	; 0x0c
    3a04:	b5 85       	ldd	r27, Z+13	; 0x0d
    3a06:	80 1b       	sub	r24, r16
    3a08:	91 0b       	sbc	r25, r17
    3a0a:	a2 0b       	sbc	r26, r18
    3a0c:	b3 0b       	sbc	r27, r19
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    3a0e:	a3 01       	movw	r20, r6
    3a10:	60 e0       	ldi	r22, 0x00	; 0
    3a12:	70 e0       	ldi	r23, 0x00	; 0
    3a14:	84 17       	cp	r24, r20
    3a16:	95 07       	cpc	r25, r21
    3a18:	a6 07       	cpc	r26, r22
    3a1a:	b7 07       	cpc	r27, r23
    3a1c:	08 f4       	brcc	.+2      	; 0x3a20 <f_read+0xcc>
    3a1e:	3c 01       	movw	r6, r24

	for ( ;  btr;								/* Repeat until all data read */
    3a20:	61 14       	cp	r6, r1
    3a22:	71 04       	cpc	r7, r1
    3a24:	71 f2       	breq	.-100    	; 0x39c2 <f_read+0x6e>
    3a26:	ed 82       	std	Y+5, r14	; 0x05
    3a28:	ce 82       	std	Y+6, r12	; 0x06
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    3a2a:	c5 01       	movw	r24, r10
    3a2c:	82 96       	adiw	r24, 0x22	; 34
    3a2e:	98 87       	std	Y+8, r25	; 0x08
    3a30:	8f 83       	std	Y+7, r24	; 0x07
    3a32:	5a 86       	std	Y+10, r5	; 0x0a
    3a34:	49 86       	std	Y+9, r4	; 0x09
    3a36:	45 01       	movw	r8, r10
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    3a38:	d9 01       	movw	r26, r18
    3a3a:	c8 01       	movw	r24, r16
    3a3c:	91 70       	andi	r25, 0x01	; 1
    3a3e:	a0 70       	andi	r26, 0x00	; 0
    3a40:	b0 70       	andi	r27, 0x00	; 0
    3a42:	00 97       	sbiw	r24, 0x00	; 0
    3a44:	a1 05       	cpc	r26, r1
    3a46:	b1 05       	cpc	r27, r1
    3a48:	09 f0       	breq	.+2      	; 0x3a4c <f_read+0xf8>
    3a4a:	60 c0       	rjmp	.+192    	; 0x3b0c <f_read+0x1b8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    3a4c:	29 80       	ldd	r2, Y+1	; 0x01
    3a4e:	3a 80       	ldd	r3, Y+2	; 0x02
    3a50:	d9 01       	movw	r26, r18
    3a52:	c8 01       	movw	r24, r16
    3a54:	49 e0       	ldi	r20, 0x09	; 9
    3a56:	b6 95       	lsr	r27
    3a58:	a7 95       	ror	r26
    3a5a:	97 95       	ror	r25
    3a5c:	87 95       	ror	r24
    3a5e:	4a 95       	dec	r20
    3a60:	d1 f7       	brne	.-12     	; 0x3a56 <f_read+0x102>
    3a62:	f1 01       	movw	r30, r2
    3a64:	a1 84       	ldd	r10, Z+9	; 0x09
    3a66:	b2 84       	ldd	r11, Z+10	; 0x0a
    3a68:	08 94       	sec
    3a6a:	a1 08       	sbc	r10, r1
    3a6c:	b1 08       	sbc	r11, r1
    3a6e:	a8 22       	and	r10, r24
    3a70:	b9 22       	and	r11, r25
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    3a72:	f4 01       	movw	r30, r8

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
			if (csect == 0) {					/* On the cluster boundary? */
    3a74:	a1 14       	cp	r10, r1
    3a76:	b1 04       	cpc	r11, r1
    3a78:	09 f4       	brne	.+2      	; 0x3a7c <f_read+0x128>
    3a7a:	81 c0       	rjmp	.+258    	; 0x3b7e <f_read+0x22a>
    3a7c:	84 89       	ldd	r24, Z+20	; 0x14
    3a7e:	95 89       	ldd	r25, Z+21	; 0x15
    3a80:	a6 89       	ldd	r26, Z+22	; 0x16
    3a82:	b7 89       	ldd	r27, Z+23	; 0x17
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3a84:	1e ef       	ldi	r17, 0xFE	; 254
    3a86:	c1 2e       	mov	r12, r17
    3a88:	1f ef       	ldi	r17, 0xFF	; 255
    3a8a:	d1 2e       	mov	r13, r17
    3a8c:	1f ef       	ldi	r17, 0xFF	; 255
    3a8e:	e1 2e       	mov	r14, r17
    3a90:	1f ef       	ldi	r17, 0xFF	; 255
    3a92:	f1 2e       	mov	r15, r17
    3a94:	c8 0e       	add	r12, r24
    3a96:	d9 1e       	adc	r13, r25
    3a98:	ea 1e       	adc	r14, r26
    3a9a:	fb 1e       	adc	r15, r27
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    3a9c:	f1 01       	movw	r30, r2
    3a9e:	83 89       	ldd	r24, Z+19	; 0x13
    3aa0:	94 89       	ldd	r25, Z+20	; 0x14
    3aa2:	a5 89       	ldd	r26, Z+21	; 0x15
    3aa4:	b6 89       	ldd	r27, Z+22	; 0x16
    3aa6:	02 97       	sbiw	r24, 0x02	; 2
    3aa8:	a1 09       	sbc	r26, r1
    3aaa:	b1 09       	sbc	r27, r1
    3aac:	c8 16       	cp	r12, r24
    3aae:	d9 06       	cpc	r13, r25
    3ab0:	ea 06       	cpc	r14, r26
    3ab2:	fb 06       	cpc	r15, r27
    3ab4:	08 f4       	brcc	.+2      	; 0x3ab8 <f_read+0x164>
    3ab6:	84 c0       	rjmp	.+264    	; 0x3bc0 <f_read+0x26c>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
    3ab8:	82 e0       	ldi	r24, 0x02	; 2
    3aba:	f4 01       	movw	r30, r8
    3abc:	87 87       	std	Z+15, r24	; 0x0f
    3abe:	a2 e0       	ldi	r26, 0x02	; 2
    3ac0:	4a 2e       	mov	r4, r26
    3ac2:	51 2c       	mov	r5, r1
    3ac4:	7e cf       	rjmp	.-260    	; 0x39c2 <f_read+0x6e>
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
				continue;
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
    3ac6:	f4 01       	movw	r30, r8
    3ac8:	00 8d       	ldd	r16, Z+24	; 0x18
    3aca:	11 8d       	ldd	r17, Z+25	; 0x19
    3acc:	22 8d       	ldd	r18, Z+26	; 0x1a
    3ace:	33 8d       	ldd	r19, Z+27	; 0x1b
    3ad0:	0c 15       	cp	r16, r12
    3ad2:	1d 05       	cpc	r17, r13
    3ad4:	2e 05       	cpc	r18, r14
    3ad6:	3f 05       	cpc	r19, r15
    3ad8:	81 f0       	breq	.+32     	; 0x3afa <f_read+0x1a6>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
    3ada:	86 85       	ldd	r24, Z+14	; 0x0e
    3adc:	87 fd       	sbrc	r24, 7
    3ade:	c8 c0       	rjmp	.+400    	; 0x3c70 <f_read+0x31c>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= ~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    3ae0:	f1 01       	movw	r30, r2
    3ae2:	81 81       	ldd	r24, Z+1	; 0x01
    3ae4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ae6:	78 85       	ldd	r23, Y+8	; 0x08
    3ae8:	a7 01       	movw	r20, r14
    3aea:	96 01       	movw	r18, r12
    3aec:	01 e0       	ldi	r16, 0x01	; 1
    3aee:	10 e0       	ldi	r17, 0x00	; 0
    3af0:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <disk_read>
    3af4:	00 97       	sbiw	r24, 0x00	; 0
    3af6:	09 f0       	breq	.+2      	; 0x3afa <f_read+0x1a6>
    3af8:	a9 c0       	rjmp	.+338    	; 0x3c4c <f_read+0x2f8>
			}
#endif
			fp->sect = sect;
    3afa:	f4 01       	movw	r30, r8
    3afc:	c0 8e       	std	Z+24, r12	; 0x18
    3afe:	d1 8e       	std	Z+25, r13	; 0x19
    3b00:	e2 8e       	std	Z+26, r14	; 0x1a
    3b02:	f3 8e       	std	Z+27, r15	; 0x1b
    3b04:	00 89       	ldd	r16, Z+16	; 0x10
    3b06:	11 89       	ldd	r17, Z+17	; 0x11
    3b08:	22 89       	ldd	r18, Z+18	; 0x12
    3b0a:	33 89       	ldd	r19, Z+19	; 0x13
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
    3b0c:	b8 01       	movw	r22, r16
    3b0e:	71 70       	andi	r23, 0x01	; 1
    3b10:	e1 2c       	mov	r14, r1
    3b12:	22 e0       	ldi	r18, 0x02	; 2
    3b14:	f2 2e       	mov	r15, r18
    3b16:	e6 1a       	sub	r14, r22
    3b18:	f7 0a       	sbc	r15, r23
    3b1a:	6e 14       	cp	r6, r14
    3b1c:	7f 04       	cpc	r7, r15
    3b1e:	08 f4       	brcc	.+2      	; 0x3b22 <f_read+0x1ce>
    3b20:	73 01       	movw	r14, r6
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    3b22:	6e 5d       	subi	r22, 0xDE	; 222
    3b24:	7f 4f       	sbci	r23, 0xFF	; 255
    3b26:	68 0d       	add	r22, r8
    3b28:	79 1d       	adc	r23, r9
    3b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b2e:	a7 01       	movw	r20, r14
    3b30:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <mem_cpy>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    3b34:	2d 81       	ldd	r18, Y+5	; 0x05
    3b36:	3e 81       	ldd	r19, Y+6	; 0x06
    3b38:	2e 0d       	add	r18, r14
    3b3a:	3f 1d       	adc	r19, r15
    3b3c:	3e 83       	std	Y+6, r19	; 0x06
    3b3e:	2d 83       	std	Y+5, r18	; 0x05
    3b40:	87 01       	movw	r16, r14
    3b42:	20 e0       	ldi	r18, 0x00	; 0
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	f4 01       	movw	r30, r8
    3b48:	80 89       	ldd	r24, Z+16	; 0x10
    3b4a:	91 89       	ldd	r25, Z+17	; 0x11
    3b4c:	a2 89       	ldd	r26, Z+18	; 0x12
    3b4e:	b3 89       	ldd	r27, Z+19	; 0x13
    3b50:	08 0f       	add	r16, r24
    3b52:	19 1f       	adc	r17, r25
    3b54:	2a 1f       	adc	r18, r26
    3b56:	3b 1f       	adc	r19, r27
    3b58:	00 8b       	std	Z+16, r16	; 0x10
    3b5a:	11 8b       	std	Z+17, r17	; 0x11
    3b5c:	22 8b       	std	Z+18, r18	; 0x12
    3b5e:	33 8b       	std	Z+19, r19	; 0x13
    3b60:	eb 81       	ldd	r30, Y+3	; 0x03
    3b62:	fc 81       	ldd	r31, Y+4	; 0x04
    3b64:	80 81       	ld	r24, Z
    3b66:	91 81       	ldd	r25, Z+1	; 0x01
    3b68:	8e 0d       	add	r24, r14
    3b6a:	9f 1d       	adc	r25, r15
    3b6c:	91 83       	std	Z+1, r25	; 0x01
    3b6e:	80 83       	st	Z, r24
    3b70:	6e 18       	sub	r6, r14
    3b72:	7f 08       	sbc	r7, r15
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    3b74:	09 f0       	breq	.+2      	; 0x3b78 <f_read+0x224>
    3b76:	60 cf       	rjmp	.-320    	; 0x3a38 <f_read+0xe4>
    3b78:	49 84       	ldd	r4, Y+9	; 0x09
    3b7a:	5a 84       	ldd	r5, Y+10	; 0x0a
    3b7c:	22 cf       	rjmp	.-444    	; 0x39c2 <f_read+0x6e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
    3b7e:	01 15       	cp	r16, r1
    3b80:	11 05       	cpc	r17, r1
    3b82:	21 05       	cpc	r18, r1
    3b84:	31 05       	cpc	r19, r1
    3b86:	09 f0       	breq	.+2      	; 0x3b8a <f_read+0x236>
    3b88:	68 c0       	rjmp	.+208    	; 0x3c5a <f_read+0x306>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    3b8a:	86 81       	ldd	r24, Z+6	; 0x06
    3b8c:	97 81       	ldd	r25, Z+7	; 0x07
    3b8e:	a0 85       	ldd	r26, Z+8	; 0x08
    3b90:	b1 85       	ldd	r27, Z+9	; 0x09
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    3b92:	82 30       	cpi	r24, 0x02	; 2
    3b94:	91 05       	cpc	r25, r1
    3b96:	a1 05       	cpc	r26, r1
    3b98:	b1 05       	cpc	r27, r1
    3b9a:	08 f4       	brcc	.+2      	; 0x3b9e <f_read+0x24a>
    3b9c:	8d cf       	rjmp	.-230    	; 0x3ab8 <f_read+0x164>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    3b9e:	8f 3f       	cpi	r24, 0xFF	; 255
    3ba0:	ff ef       	ldi	r31, 0xFF	; 255
    3ba2:	9f 07       	cpc	r25, r31
    3ba4:	ff ef       	ldi	r31, 0xFF	; 255
    3ba6:	af 07       	cpc	r26, r31
    3ba8:	ff ef       	ldi	r31, 0xFF	; 255
    3baa:	bf 07       	cpc	r27, r31
    3bac:	09 f4       	brne	.+2      	; 0x3bb0 <f_read+0x25c>
    3bae:	4e c0       	rjmp	.+156    	; 0x3c4c <f_read+0x2f8>
				fp->clust = clst;				/* Update current cluster */
    3bb0:	f4 01       	movw	r30, r8
    3bb2:	84 8b       	std	Z+20, r24	; 0x14
    3bb4:	95 8b       	std	Z+21, r25	; 0x15
    3bb6:	a6 8b       	std	Z+22, r26	; 0x16
    3bb8:	b7 8b       	std	Z+23, r27	; 0x17
    3bba:	29 80       	ldd	r2, Y+1	; 0x01
    3bbc:	3a 80       	ldd	r3, Y+2	; 0x02
    3bbe:	62 cf       	rjmp	.-316    	; 0x3a84 <f_read+0x130>
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
	return clst * fs->csize + fs->database;
    3bc0:	01 85       	ldd	r16, Z+9	; 0x09
    3bc2:	12 85       	ldd	r17, Z+10	; 0x0a
    3bc4:	98 01       	movw	r18, r16
    3bc6:	40 e0       	ldi	r20, 0x00	; 0
    3bc8:	50 e0       	ldi	r21, 0x00	; 0
    3bca:	c7 01       	movw	r24, r14
    3bcc:	b6 01       	movw	r22, r12
    3bce:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__mulsi3>
    3bd2:	ab 01       	movw	r20, r22
    3bd4:	bc 01       	movw	r22, r24
    3bd6:	f1 01       	movw	r30, r2
    3bd8:	87 a1       	lds	r24, 0x47
    3bda:	90 a5       	lds	r25, 0x60
    3bdc:	a1 a5       	lds	r26, 0x61
    3bde:	b2 a5       	lds	r27, 0x62
    3be0:	48 0f       	add	r20, r24
    3be2:	59 1f       	adc	r21, r25
    3be4:	6a 1f       	adc	r22, r26
    3be6:	7b 1f       	adc	r23, r27
				if (clst < 2) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
    3be8:	41 15       	cp	r20, r1
    3bea:	51 05       	cpc	r21, r1
    3bec:	61 05       	cpc	r22, r1
    3bee:	71 05       	cpc	r23, r1
    3bf0:	09 f4       	brne	.+2      	; 0x3bf4 <f_read+0x2a0>
    3bf2:	62 cf       	rjmp	.-316    	; 0x3ab8 <f_read+0x164>
			sect += csect;
    3bf4:	65 01       	movw	r12, r10
    3bf6:	ee 24       	eor	r14, r14
    3bf8:	ff 24       	eor	r15, r15
    3bfa:	c4 0e       	add	r12, r20
    3bfc:	d5 1e       	adc	r13, r21
    3bfe:	e6 1e       	adc	r14, r22
    3c00:	f7 1e       	adc	r15, r23
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    3c02:	23 01       	movw	r4, r6
    3c04:	45 2c       	mov	r4, r5
    3c06:	55 24       	eor	r5, r5
    3c08:	46 94       	lsr	r4
			if (cc) {							/* Read maximum contiguous sectors directly */
    3c0a:	41 14       	cp	r4, r1
    3c0c:	51 04       	cpc	r5, r1
    3c0e:	09 f4       	brne	.+2      	; 0x3c12 <f_read+0x2be>
    3c10:	5a cf       	rjmp	.-332    	; 0x3ac6 <f_read+0x172>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    3c12:	c5 01       	movw	r24, r10
    3c14:	84 0d       	add	r24, r4
    3c16:	95 1d       	adc	r25, r5
    3c18:	08 17       	cp	r16, r24
    3c1a:	19 07       	cpc	r17, r25
    3c1c:	18 f4       	brcc	.+6      	; 0x3c24 <f_read+0x2d0>
					cc = fs->csize - csect;
    3c1e:	28 01       	movw	r4, r16
    3c20:	4a 18       	sub	r4, r10
    3c22:	5b 08       	sbc	r5, r11
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    3c24:	f1 01       	movw	r30, r2
    3c26:	81 81       	ldd	r24, Z+1	; 0x01
    3c28:	6d 81       	ldd	r22, Y+5	; 0x05
    3c2a:	7e 81       	ldd	r23, Y+6	; 0x06
    3c2c:	a7 01       	movw	r20, r14
    3c2e:	96 01       	movw	r18, r12
    3c30:	82 01       	movw	r16, r4
    3c32:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <disk_read>
    3c36:	00 97       	sbiw	r24, 0x00	; 0
    3c38:	49 f4       	brne	.+18     	; 0x3c4c <f_read+0x2f8>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
    3c3a:	f4 01       	movw	r30, r8
    3c3c:	86 85       	ldd	r24, Z+14	; 0x0e
    3c3e:	87 fd       	sbrc	r24, 7
    3c40:	2a c0       	rjmp	.+84     	; 0x3c96 <f_read+0x342>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    3c42:	72 01       	movw	r14, r4
    3c44:	fe 2c       	mov	r15, r14
    3c46:	ee 24       	eor	r14, r14
    3c48:	ff 0c       	add	r15, r15
				continue;
    3c4a:	74 cf       	rjmp	.-280    	; 0x3b34 <f_read+0x1e0>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= ~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    3c4c:	81 e0       	ldi	r24, 0x01	; 1
    3c4e:	f4 01       	movw	r30, r8
    3c50:	87 87       	std	Z+15, r24	; 0x0f
    3c52:	31 e0       	ldi	r19, 0x01	; 1
    3c54:	43 2e       	mov	r4, r19
    3c56:	51 2c       	mov	r5, r1
    3c58:	b4 ce       	rjmp	.-664    	; 0x39c2 <f_read+0x6e>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    3c5a:	44 89       	ldd	r20, Z+20	; 0x14
    3c5c:	55 89       	ldd	r21, Z+21	; 0x15
    3c5e:	66 89       	ldd	r22, Z+22	; 0x16
    3c60:	77 89       	ldd	r23, Z+23	; 0x17
    3c62:	80 81       	ld	r24, Z
    3c64:	91 81       	ldd	r25, Z+1	; 0x01
    3c66:	0e 94 8c 11 	call	0x2318	; 0x2318 <get_fat.isra.8>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	91 cf       	rjmp	.-222    	; 0x3b92 <f_read+0x23e>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    3c70:	f1 01       	movw	r30, r2
    3c72:	81 81       	ldd	r24, Z+1	; 0x01
    3c74:	6f 81       	ldd	r22, Y+7	; 0x07
    3c76:	78 85       	ldd	r23, Y+8	; 0x08
    3c78:	a9 01       	movw	r20, r18
    3c7a:	98 01       	movw	r18, r16
    3c7c:	01 e0       	ldi	r16, 0x01	; 1
    3c7e:	10 e0       	ldi	r17, 0x00	; 0
    3c80:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <disk_write>
    3c84:	00 97       	sbiw	r24, 0x00	; 0
    3c86:	11 f7       	brne	.-60     	; 0x3c4c <f_read+0x2f8>
					fp->flag &= ~FA_DIRTY;
    3c88:	f4 01       	movw	r30, r8
    3c8a:	86 85       	ldd	r24, Z+14	; 0x0e
    3c8c:	8f 77       	andi	r24, 0x7F	; 127
    3c8e:	86 87       	std	Z+14, r24	; 0x0e
    3c90:	29 80       	ldd	r2, Y+1	; 0x01
    3c92:	3a 80       	ldd	r3, Y+2	; 0x02
    3c94:	25 cf       	rjmp	.-438    	; 0x3ae0 <f_read+0x18c>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
    3c96:	40 8d       	ldd	r20, Z+24	; 0x18
    3c98:	51 8d       	ldd	r21, Z+25	; 0x19
    3c9a:	62 8d       	ldd	r22, Z+26	; 0x1a
    3c9c:	73 8d       	ldd	r23, Z+27	; 0x1b
    3c9e:	4c 19       	sub	r20, r12
    3ca0:	5d 09       	sbc	r21, r13
    3ca2:	6e 09       	sbc	r22, r14
    3ca4:	7f 09       	sbc	r23, r15
    3ca6:	c2 01       	movw	r24, r4
    3ca8:	a0 e0       	ldi	r26, 0x00	; 0
    3caa:	b0 e0       	ldi	r27, 0x00	; 0
    3cac:	48 17       	cp	r20, r24
    3cae:	59 07       	cpc	r21, r25
    3cb0:	6a 07       	cpc	r22, r26
    3cb2:	7b 07       	cpc	r23, r27
    3cb4:	30 f6       	brcc	.-116    	; 0x3c42 <f_read+0x2ee>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
    3cb6:	ca 01       	movw	r24, r20
    3cb8:	98 2f       	mov	r25, r24
    3cba:	88 27       	eor	r24, r24
    3cbc:	99 0f       	add	r25, r25
    3cbe:	2d 81       	ldd	r18, Y+5	; 0x05
    3cc0:	3e 81       	ldd	r19, Y+6	; 0x06
    3cc2:	82 0f       	add	r24, r18
    3cc4:	93 1f       	adc	r25, r19
    3cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc8:	78 85       	ldd	r23, Y+8	; 0x08
    3cca:	40 e0       	ldi	r20, 0x00	; 0
    3ccc:	52 e0       	ldi	r21, 0x02	; 2
    3cce:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <mem_cpy>
    3cd2:	b7 cf       	rjmp	.-146    	; 0x3c42 <f_read+0x2ee>

00003cd4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    3cd4:	2f 92       	push	r2
    3cd6:	3f 92       	push	r3
    3cd8:	4f 92       	push	r4
    3cda:	5f 92       	push	r5
    3cdc:	6f 92       	push	r6
    3cde:	7f 92       	push	r7
    3ce0:	8f 92       	push	r8
    3ce2:	9f 92       	push	r9
    3ce4:	af 92       	push	r10
    3ce6:	bf 92       	push	r11
    3ce8:	cf 92       	push	r12
    3cea:	df 92       	push	r13
    3cec:	ef 92       	push	r14
    3cee:	ff 92       	push	r15
    3cf0:	0f 93       	push	r16
    3cf2:	1f 93       	push	r17
    3cf4:	cf 93       	push	r28
    3cf6:	df 93       	push	r29
    3cf8:	cd b7       	in	r28, 0x3d	; 61
    3cfa:	de b7       	in	r29, 0x3e	; 62
    3cfc:	2c 97       	sbiw	r28, 0x0c	; 12
    3cfe:	0f b6       	in	r0, 0x3f	; 63
    3d00:	f8 94       	cli
    3d02:	de bf       	out	0x3e, r29	; 62
    3d04:	0f be       	out	0x3f, r0	; 63
    3d06:	cd bf       	out	0x3d, r28	; 61
    3d08:	7c 01       	movw	r14, r24
    3d0a:	06 2f       	mov	r16, r22
    3d0c:	87 2e       	mov	r8, r23
    3d0e:	3a 01       	movw	r6, r20
    3d10:	3c 83       	std	Y+4, r19	; 0x04
    3d12:	2b 83       	std	Y+3, r18	; 0x03
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    3d14:	d9 01       	movw	r26, r18
    3d16:	1d 92       	st	X+, r1
    3d18:	1c 92       	st	X, r1
	res = validate(fp, &fs);
    3d1a:	be 01       	movw	r22, r28
    3d1c:	6f 5f       	subi	r22, 0xFF	; 255
    3d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d20:	0e 94 15 0a 	call	0x142a	; 0x142a <validate>
    3d24:	1c 01       	movw	r2, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    3d26:	00 97       	sbiw	r24, 0x00	; 0
    3d28:	61 f4       	brne	.+24     	; 0x3d42 <f_write+0x6e>
    3d2a:	f7 01       	movw	r30, r14
    3d2c:	27 84       	ldd	r2, Z+15	; 0x0f
    3d2e:	33 24       	eor	r3, r3
    3d30:	21 14       	cp	r2, r1
    3d32:	31 04       	cpc	r3, r1
    3d34:	31 f4       	brne	.+12     	; 0x3d42 <f_write+0x6e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    3d36:	26 85       	ldd	r18, Z+14	; 0x0e
    3d38:	21 fd       	sbrc	r18, 1
    3d3a:	1d c0       	rjmp	.+58     	; 0x3d76 <f_write+0xa2>
    3d3c:	57 e0       	ldi	r21, 0x07	; 7
    3d3e:	25 2e       	mov	r2, r21
    3d40:	31 2c       	mov	r3, r1
	}

	fp->flag |= FA_MODIFIED;						/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    3d42:	c1 01       	movw	r24, r2
    3d44:	2c 96       	adiw	r28, 0x0c	; 12
    3d46:	0f b6       	in	r0, 0x3f	; 63
    3d48:	f8 94       	cli
    3d4a:	de bf       	out	0x3e, r29	; 62
    3d4c:	0f be       	out	0x3f, r0	; 63
    3d4e:	cd bf       	out	0x3d, r28	; 61
    3d50:	df 91       	pop	r29
    3d52:	cf 91       	pop	r28
    3d54:	1f 91       	pop	r17
    3d56:	0f 91       	pop	r16
    3d58:	ff 90       	pop	r15
    3d5a:	ef 90       	pop	r14
    3d5c:	df 90       	pop	r13
    3d5e:	cf 90       	pop	r12
    3d60:	bf 90       	pop	r11
    3d62:	af 90       	pop	r10
    3d64:	9f 90       	pop	r9
    3d66:	8f 90       	pop	r8
    3d68:	7f 90       	pop	r7
    3d6a:	6f 90       	pop	r6
    3d6c:	5f 90       	pop	r5
    3d6e:	4f 90       	pop	r4
    3d70:	3f 90       	pop	r3
    3d72:	2f 90       	pop	r2
    3d74:	08 95       	ret
	res = validate(fp, &fs);
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    3d76:	40 89       	ldd	r20, Z+16	; 0x10
    3d78:	51 89       	ldd	r21, Z+17	; 0x11
    3d7a:	62 89       	ldd	r22, Z+18	; 0x12
    3d7c:	73 89       	ldd	r23, Z+19	; 0x13
    3d7e:	c3 01       	movw	r24, r6
    3d80:	a0 e0       	ldi	r26, 0x00	; 0
    3d82:	b0 e0       	ldi	r27, 0x00	; 0
    3d84:	84 0f       	add	r24, r20
    3d86:	95 1f       	adc	r25, r21
    3d88:	a6 1f       	adc	r26, r22
    3d8a:	b7 1f       	adc	r27, r23
    3d8c:	84 17       	cp	r24, r20
    3d8e:	95 07       	cpc	r25, r21
    3d90:	a6 07       	cpc	r26, r22
    3d92:	b7 07       	cpc	r27, r23
    3d94:	18 f4       	brcc	.+6      	; 0x3d9c <f_write+0xc8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    3d96:	3a 01       	movw	r6, r20
    3d98:	60 94       	com	r6
    3d9a:	70 94       	com	r7
	}

	for ( ;  btw;							/* Repeat until all data written */
    3d9c:	61 14       	cp	r6, r1
    3d9e:	71 04       	cpc	r7, r1
    3da0:	09 f4       	brne	.+2      	; 0x3da4 <f_write+0xd0>
    3da2:	00 c1       	rjmp	.+512    	; 0x3fa4 <f_write+0x2d0>
    3da4:	0d 83       	std	Y+5, r16	; 0x05
    3da6:	8e 82       	std	Y+6, r8	; 0x06
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
    3da8:	97 01       	movw	r18, r14
    3daa:	2e 5d       	subi	r18, 0xDE	; 222
    3dac:	3f 4f       	sbci	r19, 0xFF	; 255
    3dae:	3a 87       	std	Y+10, r19	; 0x0a
    3db0:	29 87       	std	Y+9, r18	; 0x09
    3db2:	3c 86       	std	Y+12, r3	; 0x0c
    3db4:	2b 86       	std	Y+11, r2	; 0x0b
    3db6:	23 01       	movw	r4, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    3db8:	db 01       	movw	r26, r22
    3dba:	ca 01       	movw	r24, r20
    3dbc:	91 70       	andi	r25, 0x01	; 1
    3dbe:	a0 70       	andi	r26, 0x00	; 0
    3dc0:	b0 70       	andi	r27, 0x00	; 0
    3dc2:	00 97       	sbiw	r24, 0x00	; 0
    3dc4:	a1 05       	cpc	r26, r1
    3dc6:	b1 05       	cpc	r27, r1
    3dc8:	09 f0       	breq	.+2      	; 0x3dcc <f_write+0xf8>
    3dca:	91 c0       	rjmp	.+290    	; 0x3eee <f_write+0x21a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    3dcc:	29 80       	ldd	r2, Y+1	; 0x01
    3dce:	3a 80       	ldd	r3, Y+2	; 0x02
    3dd0:	db 01       	movw	r26, r22
    3dd2:	ca 01       	movw	r24, r20
    3dd4:	09 e0       	ldi	r16, 0x09	; 9
    3dd6:	b6 95       	lsr	r27
    3dd8:	a7 95       	ror	r26
    3dda:	97 95       	ror	r25
    3ddc:	87 95       	ror	r24
    3dde:	0a 95       	dec	r16
    3de0:	d1 f7       	brne	.-12     	; 0x3dd6 <f_write+0x102>
    3de2:	f1 01       	movw	r30, r2
    3de4:	c1 84       	ldd	r12, Z+9	; 0x09
    3de6:	d2 84       	ldd	r13, Z+10	; 0x0a
    3de8:	08 94       	sec
    3dea:	c1 08       	sbc	r12, r1
    3dec:	d1 08       	sbc	r13, r1
    3dee:	c8 22       	and	r12, r24
    3df0:	d9 22       	and	r13, r25
			if (csect == 0) {				/* On the cluster boundary? */
    3df2:	c1 14       	cp	r12, r1
    3df4:	d1 04       	cpc	r13, r1
    3df6:	99 f5       	brne	.+102    	; 0x3e5e <f_write+0x18a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    3df8:	41 15       	cp	r20, r1
    3dfa:	51 05       	cpc	r21, r1
    3dfc:	61 05       	cpc	r22, r1
    3dfe:	71 05       	cpc	r23, r1
    3e00:	09 f0       	breq	.+2      	; 0x3e04 <f_write+0x130>
    3e02:	3c c1       	rjmp	.+632    	; 0x407c <f_write+0x3a8>
					clst = fp->obj.sclust;	/* Follow from the origin */
    3e04:	f7 01       	movw	r30, r14
    3e06:	86 81       	ldd	r24, Z+6	; 0x06
    3e08:	97 81       	ldd	r25, Z+7	; 0x07
    3e0a:	a0 85       	ldd	r26, Z+8	; 0x08
    3e0c:	b1 85       	ldd	r27, Z+9	; 0x09
					if (clst == 0) {		/* If no cluster is allocated, */
    3e0e:	00 97       	sbiw	r24, 0x00	; 0
    3e10:	a1 05       	cpc	r26, r1
    3e12:	b1 05       	cpc	r27, r1
    3e14:	09 f4       	brne	.+2      	; 0x3e18 <f_write+0x144>
    3e16:	5f c1       	rjmp	.+702    	; 0x40d6 <f_write+0x402>
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    3e18:	81 30       	cpi	r24, 0x01	; 1
    3e1a:	91 05       	cpc	r25, r1
    3e1c:	a1 05       	cpc	r26, r1
    3e1e:	b1 05       	cpc	r27, r1
    3e20:	e9 f1       	breq	.+122    	; 0x3e9c <f_write+0x1c8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    3e22:	8f 3f       	cpi	r24, 0xFF	; 255
    3e24:	ef ef       	ldi	r30, 0xFF	; 255
    3e26:	9e 07       	cpc	r25, r30
    3e28:	ef ef       	ldi	r30, 0xFF	; 255
    3e2a:	ae 07       	cpc	r26, r30
    3e2c:	ef ef       	ldi	r30, 0xFF	; 255
    3e2e:	be 07       	cpc	r27, r30
    3e30:	09 f4       	brne	.+2      	; 0x3e34 <f_write+0x160>
    3e32:	68 c1       	rjmp	.+720    	; 0x4104 <f_write+0x430>
				fp->clust = clst;			/* Update current cluster */
    3e34:	f7 01       	movw	r30, r14
    3e36:	84 8b       	std	Z+20, r24	; 0x14
    3e38:	95 8b       	std	Z+21, r25	; 0x15
    3e3a:	a6 8b       	std	Z+22, r26	; 0x16
    3e3c:	b7 8b       	std	Z+23, r27	; 0x17
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    3e3e:	46 81       	ldd	r20, Z+6	; 0x06
    3e40:	57 81       	ldd	r21, Z+7	; 0x07
    3e42:	60 85       	ldd	r22, Z+8	; 0x08
    3e44:	71 85       	ldd	r23, Z+9	; 0x09
    3e46:	41 15       	cp	r20, r1
    3e48:	51 05       	cpc	r21, r1
    3e4a:	61 05       	cpc	r22, r1
    3e4c:	71 05       	cpc	r23, r1
    3e4e:	29 f4       	brne	.+10     	; 0x3e5a <f_write+0x186>
    3e50:	f7 01       	movw	r30, r14
    3e52:	86 83       	std	Z+6, r24	; 0x06
    3e54:	97 83       	std	Z+7, r25	; 0x07
    3e56:	a0 87       	std	Z+8, r26	; 0x08
    3e58:	b1 87       	std	Z+9, r27	; 0x09
    3e5a:	29 80       	ldd	r2, Y+1	; 0x01
    3e5c:	3a 80       	ldd	r3, Y+2	; 0x02
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
    3e5e:	d7 01       	movw	r26, r14
    3e60:	1e 96       	adiw	r26, 0x0e	; 14
    3e62:	8c 91       	ld	r24, X
    3e64:	1e 97       	sbiw	r26, 0x0e	; 14
    3e66:	87 fd       	sbrc	r24, 7
    3e68:	1f c1       	rjmp	.+574    	; 0x40a8 <f_write+0x3d4>
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    3e6a:	d7 01       	movw	r26, r14
    3e6c:	54 96       	adiw	r26, 0x14	; 20
    3e6e:	0d 91       	ld	r16, X+
    3e70:	1d 91       	ld	r17, X+
    3e72:	2d 91       	ld	r18, X+
    3e74:	3c 91       	ld	r19, X
    3e76:	57 97       	sbiw	r26, 0x17	; 23
    3e78:	02 50       	subi	r16, 0x02	; 2
    3e7a:	10 40       	sbci	r17, 0x00	; 0
    3e7c:	20 40       	sbci	r18, 0x00	; 0
    3e7e:	30 40       	sbci	r19, 0x00	; 0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    3e80:	f1 01       	movw	r30, r2
    3e82:	83 89       	ldd	r24, Z+19	; 0x13
    3e84:	94 89       	ldd	r25, Z+20	; 0x14
    3e86:	a5 89       	ldd	r26, Z+21	; 0x15
    3e88:	b6 89       	ldd	r27, Z+22	; 0x16
    3e8a:	02 97       	sbiw	r24, 0x02	; 2
    3e8c:	a1 09       	sbc	r26, r1
    3e8e:	b1 09       	sbc	r27, r1
    3e90:	08 17       	cp	r16, r24
    3e92:	19 07       	cpc	r17, r25
    3e94:	2a 07       	cpc	r18, r26
    3e96:	3b 07       	cpc	r19, r27
    3e98:	08 f4       	brcc	.+2      	; 0x3e9c <f_write+0x1c8>
    3e9a:	88 c0       	rjmp	.+272    	; 0x3fac <f_write+0x2d8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= ~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
    3e9c:	82 e0       	ldi	r24, 0x02	; 2
    3e9e:	d7 01       	movw	r26, r14
    3ea0:	1f 96       	adiw	r26, 0x0f	; 15
    3ea2:	8c 93       	st	X, r24
    3ea4:	1f 97       	sbiw	r26, 0x0f	; 15
    3ea6:	12 e0       	ldi	r17, 0x02	; 2
    3ea8:	21 2e       	mov	r2, r17
    3eaa:	31 2c       	mov	r3, r1
    3eac:	4a cf       	rjmp	.-364    	; 0x3d42 <f_write+0x6e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
    3eae:	f7 01       	movw	r30, r14
    3eb0:	80 8d       	ldd	r24, Z+24	; 0x18
    3eb2:	91 8d       	ldd	r25, Z+25	; 0x19
    3eb4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3eb6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3eb8:	88 15       	cp	r24, r8
    3eba:	99 05       	cpc	r25, r9
    3ebc:	aa 05       	cpc	r26, r10
    3ebe:	bb 05       	cpc	r27, r11
    3ec0:	09 f4       	brne	.+2      	; 0x3ec4 <f_write+0x1f0>
    3ec2:	cf c0       	rjmp	.+414    	; 0x4062 <f_write+0x38e>
				fp->fptr < fp->obj.objsize &&
    3ec4:	40 89       	ldd	r20, Z+16	; 0x10
    3ec6:	51 89       	ldd	r21, Z+17	; 0x11
    3ec8:	62 89       	ldd	r22, Z+18	; 0x12
    3eca:	73 89       	ldd	r23, Z+19	; 0x13
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
    3ecc:	82 85       	ldd	r24, Z+10	; 0x0a
    3ece:	93 85       	ldd	r25, Z+11	; 0x0b
    3ed0:	a4 85       	ldd	r26, Z+12	; 0x0c
    3ed2:	b5 85       	ldd	r27, Z+13	; 0x0d
    3ed4:	48 17       	cp	r20, r24
    3ed6:	59 07       	cpc	r21, r25
    3ed8:	6a 07       	cpc	r22, r26
    3eda:	7b 07       	cpc	r23, r27
    3edc:	08 f4       	brcc	.+2      	; 0x3ee0 <f_write+0x20c>
    3ede:	04 c1       	rjmp	.+520    	; 0x40e8 <f_write+0x414>
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
    3ee0:	d7 01       	movw	r26, r14
    3ee2:	58 96       	adiw	r26, 0x18	; 24
    3ee4:	8d 92       	st	X+, r8
    3ee6:	9d 92       	st	X+, r9
    3ee8:	ad 92       	st	X+, r10
    3eea:	bc 92       	st	X, r11
    3eec:	5b 97       	sbiw	r26, 0x1b	; 27
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
    3eee:	ca 01       	movw	r24, r20
    3ef0:	91 70       	andi	r25, 0x01	; 1
    3ef2:	00 e0       	ldi	r16, 0x00	; 0
    3ef4:	12 e0       	ldi	r17, 0x02	; 2
    3ef6:	08 1b       	sub	r16, r24
    3ef8:	19 0b       	sbc	r17, r25
    3efa:	40 16       	cp	r4, r16
    3efc:	51 06       	cpc	r5, r17
    3efe:	08 f4       	brcc	.+2      	; 0x3f02 <f_write+0x22e>
    3f00:	82 01       	movw	r16, r4
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    3f02:	82 96       	adiw	r24, 0x22	; 34
    3f04:	8e 0d       	add	r24, r14
    3f06:	9f 1d       	adc	r25, r15
    3f08:	6d 81       	ldd	r22, Y+5	; 0x05
    3f0a:	7e 81       	ldd	r23, Y+6	; 0x06
    3f0c:	a8 01       	movw	r20, r16
    3f0e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <mem_cpy>
		fp->flag |= FA_DIRTY;
    3f12:	f7 01       	movw	r30, r14
    3f14:	86 85       	ldd	r24, Z+14	; 0x0e
    3f16:	80 68       	ori	r24, 0x80	; 128
    3f18:	86 87       	std	Z+14, r24	; 0x0e
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
    3f1a:	2d 81       	ldd	r18, Y+5	; 0x05
    3f1c:	3e 81       	ldd	r19, Y+6	; 0x06
    3f1e:	20 0f       	add	r18, r16
    3f20:	31 1f       	adc	r19, r17
    3f22:	3e 83       	std	Y+6, r19	; 0x06
    3f24:	2d 83       	std	Y+5, r18	; 0x05
    3f26:	a8 01       	movw	r20, r16
    3f28:	60 e0       	ldi	r22, 0x00	; 0
    3f2a:	70 e0       	ldi	r23, 0x00	; 0
    3f2c:	f7 01       	movw	r30, r14
    3f2e:	80 89       	ldd	r24, Z+16	; 0x10
    3f30:	91 89       	ldd	r25, Z+17	; 0x11
    3f32:	a2 89       	ldd	r26, Z+18	; 0x12
    3f34:	b3 89       	ldd	r27, Z+19	; 0x13
    3f36:	48 0f       	add	r20, r24
    3f38:	59 1f       	adc	r21, r25
    3f3a:	6a 1f       	adc	r22, r26
    3f3c:	7b 1f       	adc	r23, r27
    3f3e:	40 8b       	std	Z+16, r20	; 0x10
    3f40:	51 8b       	std	Z+17, r21	; 0x11
    3f42:	62 8b       	std	Z+18, r22	; 0x12
    3f44:	73 8b       	std	Z+19, r23	; 0x13
    3f46:	82 85       	ldd	r24, Z+10	; 0x0a
    3f48:	93 85       	ldd	r25, Z+11	; 0x0b
    3f4a:	a4 85       	ldd	r26, Z+12	; 0x0c
    3f4c:	b5 85       	ldd	r27, Z+13	; 0x0d
    3f4e:	f4 2f       	mov	r31, r20
    3f50:	e5 2f       	mov	r30, r21
    3f52:	36 2f       	mov	r19, r22
    3f54:	27 2f       	mov	r18, r23
    3f56:	48 17       	cp	r20, r24
    3f58:	59 07       	cpc	r21, r25
    3f5a:	6a 07       	cpc	r22, r26
    3f5c:	7b 07       	cpc	r23, r27
    3f5e:	20 f4       	brcc	.+8      	; 0x3f68 <f_write+0x294>
    3f60:	f8 2f       	mov	r31, r24
    3f62:	e9 2f       	mov	r30, r25
    3f64:	3a 2f       	mov	r19, r26
    3f66:	2b 2f       	mov	r18, r27
    3f68:	d7 01       	movw	r26, r14
    3f6a:	1a 96       	adiw	r26, 0x0a	; 10
    3f6c:	fc 93       	st	X, r31
    3f6e:	1a 97       	sbiw	r26, 0x0a	; 10
    3f70:	1b 96       	adiw	r26, 0x0b	; 11
    3f72:	ec 93       	st	X, r30
    3f74:	1b 97       	sbiw	r26, 0x0b	; 11
    3f76:	1c 96       	adiw	r26, 0x0c	; 12
    3f78:	3c 93       	st	X, r19
    3f7a:	1c 97       	sbiw	r26, 0x0c	; 12
    3f7c:	1d 96       	adiw	r26, 0x0d	; 13
    3f7e:	2c 93       	st	X, r18
    3f80:	1d 97       	sbiw	r26, 0x0d	; 13
    3f82:	eb 81       	ldd	r30, Y+3	; 0x03
    3f84:	fc 81       	ldd	r31, Y+4	; 0x04
    3f86:	80 81       	ld	r24, Z
    3f88:	91 81       	ldd	r25, Z+1	; 0x01
    3f8a:	80 0f       	add	r24, r16
    3f8c:	91 1f       	adc	r25, r17
    3f8e:	91 83       	std	Z+1, r25	; 0x01
    3f90:	80 83       	st	Z, r24
    3f92:	40 1a       	sub	r4, r16
    3f94:	51 0a       	sbc	r5, r17
	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
    3f96:	09 f0       	breq	.+2      	; 0x3f9a <f_write+0x2c6>
    3f98:	0f cf       	rjmp	.-482    	; 0x3db8 <f_write+0xe4>
    3f9a:	2b 84       	ldd	r2, Y+11	; 0x0b
    3f9c:	3c 84       	ldd	r3, Y+12	; 0x0c
    3f9e:	1e 96       	adiw	r26, 0x0e	; 14
    3fa0:	2c 91       	ld	r18, X
    3fa2:	1e 97       	sbiw	r26, 0x0e	; 14
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;						/* Set file change flag */
    3fa4:	20 64       	ori	r18, 0x40	; 64
    3fa6:	f7 01       	movw	r30, r14
    3fa8:	26 87       	std	Z+14, r18	; 0x0e

	LEAVE_FF(fs, FR_OK);
    3faa:	cb ce       	rjmp	.-618    	; 0x3d42 <f_write+0x6e>
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
	return clst * fs->csize + fs->database;
    3fac:	41 85       	ldd	r20, Z+9	; 0x09
    3fae:	52 85       	ldd	r21, Z+10	; 0x0a
    3fb0:	58 87       	std	Y+8, r21	; 0x08
    3fb2:	4f 83       	std	Y+7, r20	; 0x07
    3fb4:	ba 01       	movw	r22, r20
    3fb6:	80 e0       	ldi	r24, 0x00	; 0
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	a9 01       	movw	r20, r18
    3fbc:	98 01       	movw	r18, r16
    3fbe:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__mulsi3>
    3fc2:	ab 01       	movw	r20, r22
    3fc4:	bc 01       	movw	r22, r24
    3fc6:	f1 01       	movw	r30, r2
    3fc8:	87 a1       	lds	r24, 0x47
    3fca:	90 a5       	lds	r25, 0x60
    3fcc:	a1 a5       	lds	r26, 0x61
    3fce:	b2 a5       	lds	r27, 0x62
    3fd0:	48 0f       	add	r20, r24
    3fd2:	59 1f       	adc	r21, r25
    3fd4:	6a 1f       	adc	r22, r26
    3fd6:	7b 1f       	adc	r23, r27
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= ~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
    3fd8:	41 15       	cp	r20, r1
    3fda:	51 05       	cpc	r21, r1
    3fdc:	61 05       	cpc	r22, r1
    3fde:	71 05       	cpc	r23, r1
    3fe0:	09 f4       	brne	.+2      	; 0x3fe4 <f_write+0x310>
    3fe2:	5c cf       	rjmp	.-328    	; 0x3e9c <f_write+0x1c8>
			sect += csect;
    3fe4:	46 01       	movw	r8, r12
    3fe6:	aa 24       	eor	r10, r10
    3fe8:	bb 24       	eor	r11, r11
    3fea:	84 0e       	add	r8, r20
    3fec:	95 1e       	adc	r9, r21
    3fee:	a6 1e       	adc	r10, r22
    3ff0:	b7 1e       	adc	r11, r23
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    3ff2:	32 01       	movw	r6, r4
    3ff4:	67 2c       	mov	r6, r7
    3ff6:	77 24       	eor	r7, r7
    3ff8:	66 94       	lsr	r6
			if (cc) {						/* Write maximum contiguous sectors directly */
    3ffa:	61 14       	cp	r6, r1
    3ffc:	71 04       	cpc	r7, r1
    3ffe:	09 f4       	brne	.+2      	; 0x4002 <f_write+0x32e>
    4000:	56 cf       	rjmp	.-340    	; 0x3eae <f_write+0x1da>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    4002:	c6 01       	movw	r24, r12
    4004:	86 0d       	add	r24, r6
    4006:	97 1d       	adc	r25, r7
    4008:	ef 81       	ldd	r30, Y+7	; 0x07
    400a:	f8 85       	ldd	r31, Y+8	; 0x08
    400c:	e8 17       	cp	r30, r24
    400e:	f9 07       	cpc	r31, r25
    4010:	18 f4       	brcc	.+6      	; 0x4018 <f_write+0x344>
					cc = fs->csize - csect;
    4012:	3f 01       	movw	r6, r30
    4014:	6c 18       	sub	r6, r12
    4016:	7d 08       	sbc	r7, r13
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    4018:	d1 01       	movw	r26, r2
    401a:	11 96       	adiw	r26, 0x01	; 1
    401c:	8c 91       	ld	r24, X
    401e:	6d 81       	ldd	r22, Y+5	; 0x05
    4020:	7e 81       	ldd	r23, Y+6	; 0x06
    4022:	a5 01       	movw	r20, r10
    4024:	94 01       	movw	r18, r8
    4026:	83 01       	movw	r16, r6
    4028:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <disk_write>
    402c:	00 97       	sbiw	r24, 0x00	; 0
    402e:	f9 f4       	brne	.+62     	; 0x406e <f_write+0x39a>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    4030:	d7 01       	movw	r26, r14
    4032:	58 96       	adiw	r26, 0x18	; 24
    4034:	4d 91       	ld	r20, X+
    4036:	5d 91       	ld	r21, X+
    4038:	6d 91       	ld	r22, X+
    403a:	7c 91       	ld	r23, X
    403c:	5b 97       	sbiw	r26, 0x1b	; 27
    403e:	48 19       	sub	r20, r8
    4040:	59 09       	sbc	r21, r9
    4042:	6a 09       	sbc	r22, r10
    4044:	7b 09       	sbc	r23, r11
    4046:	c3 01       	movw	r24, r6
    4048:	a0 e0       	ldi	r26, 0x00	; 0
    404a:	b0 e0       	ldi	r27, 0x00	; 0
    404c:	48 17       	cp	r20, r24
    404e:	59 07       	cpc	r21, r25
    4050:	6a 07       	cpc	r22, r26
    4052:	7b 07       	cpc	r23, r27
    4054:	08 f4       	brcc	.+2      	; 0x4058 <f_write+0x384>
    4056:	5f c0       	rjmp	.+190    	; 0x4116 <f_write+0x442>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= ~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    4058:	83 01       	movw	r16, r6
    405a:	10 2f       	mov	r17, r16
    405c:	00 27       	eor	r16, r16
    405e:	11 0f       	add	r17, r17
				continue;
    4060:	5c cf       	rjmp	.-328    	; 0x3f1a <f_write+0x246>
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
    4062:	f7 01       	movw	r30, r14
    4064:	40 89       	ldd	r20, Z+16	; 0x10
    4066:	51 89       	ldd	r21, Z+17	; 0x11
    4068:	62 89       	ldd	r22, Z+18	; 0x12
    406a:	73 89       	ldd	r23, Z+19	; 0x13
    406c:	39 cf       	rjmp	.-398    	; 0x3ee0 <f_write+0x20c>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
					cc = fs->csize - csect;
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	f7 01       	movw	r30, r14
    4072:	87 87       	std	Z+15, r24	; 0x0f
    4074:	a1 e0       	ldi	r26, 0x01	; 1
    4076:	2a 2e       	mov	r2, r26
    4078:	31 2c       	mov	r3, r1
    407a:	63 ce       	rjmp	.-826    	; 0x3d42 <f_write+0x6e>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    407c:	d7 01       	movw	r26, r14
    407e:	54 96       	adiw	r26, 0x14	; 20
    4080:	4d 91       	ld	r20, X+
    4082:	5d 91       	ld	r21, X+
    4084:	6d 91       	ld	r22, X+
    4086:	7c 91       	ld	r23, X
    4088:	57 97       	sbiw	r26, 0x17	; 23
    408a:	c7 01       	movw	r24, r14
    408c:	0e 94 6d 13 	call	0x26da	; 0x26da <create_chain>
    4090:	dc 01       	movw	r26, r24
    4092:	cb 01       	movw	r24, r22
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    4094:	00 97       	sbiw	r24, 0x00	; 0
    4096:	a1 05       	cpc	r26, r1
    4098:	b1 05       	cpc	r27, r1
    409a:	09 f0       	breq	.+2      	; 0x409e <f_write+0x3ca>
    409c:	bd ce       	rjmp	.-646    	; 0x3e18 <f_write+0x144>
    409e:	2b 84       	ldd	r2, Y+11	; 0x0b
    40a0:	3c 84       	ldd	r3, Y+12	; 0x0c
    40a2:	f7 01       	movw	r30, r14
    40a4:	26 85       	ldd	r18, Z+14	; 0x0e
    40a6:	7e cf       	rjmp	.-260    	; 0x3fa4 <f_write+0x2d0>
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    40a8:	58 96       	adiw	r26, 0x18	; 24
    40aa:	2d 91       	ld	r18, X+
    40ac:	3d 91       	ld	r19, X+
    40ae:	4d 91       	ld	r20, X+
    40b0:	5c 91       	ld	r21, X
    40b2:	5b 97       	sbiw	r26, 0x1b	; 27
    40b4:	f1 01       	movw	r30, r2
    40b6:	81 81       	ldd	r24, Z+1	; 0x01
    40b8:	69 85       	ldd	r22, Y+9	; 0x09
    40ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    40bc:	01 e0       	ldi	r16, 0x01	; 1
    40be:	10 e0       	ldi	r17, 0x00	; 0
    40c0:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <disk_write>
    40c4:	00 97       	sbiw	r24, 0x00	; 0
    40c6:	f1 f4       	brne	.+60     	; 0x4104 <f_write+0x430>
				fp->flag &= ~FA_DIRTY;
    40c8:	f7 01       	movw	r30, r14
    40ca:	86 85       	ldd	r24, Z+14	; 0x0e
    40cc:	8f 77       	andi	r24, 0x7F	; 127
    40ce:	86 87       	std	Z+14, r24	; 0x0e
    40d0:	29 80       	ldd	r2, Y+1	; 0x01
    40d2:	3a 80       	ldd	r3, Y+2	; 0x02
    40d4:	ca ce       	rjmp	.-620    	; 0x3e6a <f_write+0x196>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    40d6:	c7 01       	movw	r24, r14
    40d8:	40 e0       	ldi	r20, 0x00	; 0
    40da:	50 e0       	ldi	r21, 0x00	; 0
    40dc:	ba 01       	movw	r22, r20
    40de:	0e 94 6d 13 	call	0x26da	; 0x26da <create_chain>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	d6 cf       	rjmp	.-84     	; 0x4094 <f_write+0x3c0>
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
    40e8:	d1 01       	movw	r26, r2
    40ea:	11 96       	adiw	r26, 0x01	; 1
    40ec:	8c 91       	ld	r24, X
    40ee:	69 85       	ldd	r22, Y+9	; 0x09
    40f0:	7a 85       	ldd	r23, Y+10	; 0x0a
    40f2:	a5 01       	movw	r20, r10
    40f4:	94 01       	movw	r18, r8
    40f6:	01 e0       	ldi	r16, 0x01	; 1
    40f8:	10 e0       	ldi	r17, 0x00	; 0
    40fa:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <disk_read>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
    40fe:	00 97       	sbiw	r24, 0x00	; 0
    4100:	09 f4       	brne	.+2      	; 0x4104 <f_write+0x430>
    4102:	af cf       	rjmp	.-162    	; 0x4062 <f_write+0x38e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	d7 01       	movw	r26, r14
    4108:	1f 96       	adiw	r26, 0x0f	; 15
    410a:	8c 93       	st	X, r24
    410c:	1f 97       	sbiw	r26, 0x0f	; 15
    410e:	61 e0       	ldi	r22, 0x01	; 1
    4110:	26 2e       	mov	r2, r22
    4112:	31 2c       	mov	r3, r1
    4114:	16 ce       	rjmp	.-980    	; 0x3d42 <f_write+0x6e>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
    4116:	ba 01       	movw	r22, r20
    4118:	76 2f       	mov	r23, r22
    411a:	66 27       	eor	r22, r22
    411c:	77 0f       	add	r23, r23
    411e:	ed 81       	ldd	r30, Y+5	; 0x05
    4120:	fe 81       	ldd	r31, Y+6	; 0x06
    4122:	6e 0f       	add	r22, r30
    4124:	7f 1f       	adc	r23, r31
    4126:	89 85       	ldd	r24, Y+9	; 0x09
    4128:	9a 85       	ldd	r25, Y+10	; 0x0a
    412a:	40 e0       	ldi	r20, 0x00	; 0
    412c:	52 e0       	ldi	r21, 0x02	; 2
    412e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <mem_cpy>
					fp->flag &= ~FA_DIRTY;
    4132:	d7 01       	movw	r26, r14
    4134:	1e 96       	adiw	r26, 0x0e	; 14
    4136:	8c 91       	ld	r24, X
    4138:	1e 97       	sbiw	r26, 0x0e	; 14
    413a:	8f 77       	andi	r24, 0x7F	; 127
    413c:	1e 96       	adiw	r26, 0x0e	; 14
    413e:	8c 93       	st	X, r24
    4140:	1e 97       	sbiw	r26, 0x0e	; 14
    4142:	8a cf       	rjmp	.-236    	; 0x4058 <f_write+0x384>

00004144 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
    4144:	ef 92       	push	r14
    4146:	ff 92       	push	r15
    4148:	0f 93       	push	r16
    414a:	1f 93       	push	r17
    414c:	cf 93       	push	r28
    414e:	df 93       	push	r29
    4150:	00 d0       	rcall	.+0      	; 0x4152 <putc_bfd+0xe>
    4152:	cd b7       	in	r28, 0x3d	; 61
    4154:	de b7       	in	r29, 0x3e	; 62
    4156:	8c 01       	movw	r16, r24

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
    4158:	fc 01       	movw	r30, r24
    415a:	e2 80       	ldd	r14, Z+2	; 0x02
    415c:	f3 80       	ldd	r15, Z+3	; 0x03
	if (i < 0) return;
    415e:	f7 fc       	sbrc	r15, 7
    4160:	12 c0       	rjmp	.+36     	; 0x4186 <putc_bfd+0x42>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
    4162:	ee 0d       	add	r30, r14
    4164:	ff 1d       	adc	r31, r15
    4166:	66 83       	std	Z+6, r22	; 0x06
    4168:	08 94       	sec
    416a:	e1 1c       	adc	r14, r1
    416c:	f1 1c       	adc	r15, r1
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
    416e:	fd e3       	ldi	r31, 0x3D	; 61
    4170:	ef 16       	cp	r14, r31
    4172:	f1 04       	cpc	r15, r1
    4174:	8c f4       	brge	.+34     	; 0x4198 <putc_bfd+0x54>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
    4176:	f8 01       	movw	r30, r16
    4178:	f3 82       	std	Z+3, r15	; 0x03
    417a:	e2 82       	std	Z+2, r14	; 0x02
	pb->nchr++;
    417c:	84 81       	ldd	r24, Z+4	; 0x04
    417e:	95 81       	ldd	r25, Z+5	; 0x05
    4180:	01 96       	adiw	r24, 0x01	; 1
    4182:	95 83       	std	Z+5, r25	; 0x05
    4184:	84 83       	std	Z+4, r24	; 0x04
}
    4186:	0f 90       	pop	r0
    4188:	0f 90       	pop	r0
    418a:	df 91       	pop	r29
    418c:	cf 91       	pop	r28
    418e:	1f 91       	pop	r17
    4190:	0f 91       	pop	r16
    4192:	ff 90       	pop	r15
    4194:	ef 90       	pop	r14
    4196:	08 95       	ret
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
    4198:	bc 01       	movw	r22, r24
    419a:	6a 5f       	subi	r22, 0xFA	; 250
    419c:	7f 4f       	sbci	r23, 0xFF	; 255
    419e:	fc 01       	movw	r30, r24
    41a0:	80 81       	ld	r24, Z
    41a2:	91 81       	ldd	r25, Z+1	; 0x01
    41a4:	a7 01       	movw	r20, r14
    41a6:	9e 01       	movw	r18, r28
    41a8:	2f 5f       	subi	r18, 0xFF	; 255
    41aa:	3f 4f       	sbci	r19, 0xFF	; 255
    41ac:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
    41b0:	89 81       	ldd	r24, Y+1	; 0x01
    41b2:	9a 81       	ldd	r25, Y+2	; 0x02
    41b4:	e8 16       	cp	r14, r24
    41b6:	f9 06       	cpc	r15, r25
    41b8:	21 f0       	breq	.+8      	; 0x41c2 <putc_bfd+0x7e>
    41ba:	ee 24       	eor	r14, r14
    41bc:	ea 94       	dec	r14
    41be:	fe 2c       	mov	r15, r14
    41c0:	da cf       	rjmp	.-76     	; 0x4176 <putc_bfd+0x32>
    41c2:	ee 24       	eor	r14, r14
    41c4:	ff 24       	eor	r15, r15
    41c6:	d7 cf       	rjmp	.-82     	; 0x4176 <putc_bfd+0x32>

000041c8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
    41c8:	0f 93       	push	r16
    41ca:	1f 93       	push	r17
    41cc:	cf 93       	push	r28
    41ce:	df 93       	push	r29
    41d0:	00 d0       	rcall	.+0      	; 0x41d2 <putc_flush+0xa>
    41d2:	cd b7       	in	r28, 0x3d	; 61
    41d4:	de b7       	in	r29, 0x3e	; 62
    41d6:	8c 01       	movw	r16, r24
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
    41d8:	fc 01       	movw	r30, r24
    41da:	42 81       	ldd	r20, Z+2	; 0x02
    41dc:	53 81       	ldd	r21, Z+3	; 0x03
    41de:	57 fd       	sbrc	r21, 7
    41e0:	1d c0       	rjmp	.+58     	; 0x421c <putc_flush+0x54>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
    41e2:	bc 01       	movw	r22, r24
    41e4:	6a 5f       	subi	r22, 0xFA	; 250
    41e6:	7f 4f       	sbci	r23, 0xFF	; 255
    41e8:	80 81       	ld	r24, Z
    41ea:	91 81       	ldd	r25, Z+1	; 0x01
    41ec:	9e 01       	movw	r18, r28
    41ee:	2f 5f       	subi	r18, 0xFF	; 255
    41f0:	3f 4f       	sbci	r19, 0xFF	; 255
    41f2:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <f_write>
    41f6:	00 97       	sbiw	r24, 0x00	; 0
    41f8:	89 f4       	brne	.+34     	; 0x421c <putc_flush+0x54>
		&& (UINT)pb->idx == nw) return pb->nchr;
    41fa:	f8 01       	movw	r30, r16
    41fc:	22 81       	ldd	r18, Z+2	; 0x02
    41fe:	33 81       	ldd	r19, Z+3	; 0x03
    4200:	89 81       	ldd	r24, Y+1	; 0x01
    4202:	9a 81       	ldd	r25, Y+2	; 0x02
    4204:	28 17       	cp	r18, r24
    4206:	39 07       	cpc	r19, r25
    4208:	49 f4       	brne	.+18     	; 0x421c <putc_flush+0x54>
    420a:	84 81       	ldd	r24, Z+4	; 0x04
    420c:	95 81       	ldd	r25, Z+5	; 0x05
	return EOF;
}
    420e:	0f 90       	pop	r0
    4210:	0f 90       	pop	r0
    4212:	df 91       	pop	r29
    4214:	cf 91       	pop	r28
    4216:	1f 91       	pop	r17
    4218:	0f 91       	pop	r16
    421a:	08 95       	ret
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
		&& (UINT)pb->idx == nw) return pb->nchr;
	return EOF;
    421c:	8f ef       	ldi	r24, 0xFF	; 255
    421e:	9f ef       	ldi	r25, 0xFF	; 255
}
    4220:	0f 90       	pop	r0
    4222:	0f 90       	pop	r0
    4224:	df 91       	pop	r29
    4226:	cf 91       	pop	r28
    4228:	1f 91       	pop	r17
    422a:	0f 91       	pop	r16
    422c:	08 95       	ret

0000422e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    422e:	ef 92       	push	r14
    4230:	ff 92       	push	r15
    4232:	0f 93       	push	r16
    4234:	1f 93       	push	r17
    4236:	cf 93       	push	r28
    4238:	df 93       	push	r29
    423a:	00 d0       	rcall	.+0      	; 0x423c <f_sync+0xe>
    423c:	cd b7       	in	r28, 0x3d	; 61
    423e:	de b7       	in	r29, 0x3e	; 62
    4240:	7c 01       	movw	r14, r24
	DWORD tm;
	BYTE *dir;
	DEF_NAMBUF


	res = validate(fp, &fs);	/* Check validity of the object */
    4242:	be 01       	movw	r22, r28
    4244:	6f 5f       	subi	r22, 0xFF	; 255
    4246:	7f 4f       	sbci	r23, 0xFF	; 255
    4248:	0e 94 15 0a 	call	0x142a	; 0x142a <validate>
	if (res == FR_OK) {
    424c:	00 97       	sbiw	r24, 0x00	; 0
    424e:	09 f0       	breq	.+2      	; 0x4252 <f_sync+0x24>
    4250:	55 c0       	rjmp	.+170    	; 0x42fc <f_sync+0xce>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    4252:	d7 01       	movw	r26, r14
    4254:	1e 96       	adiw	r26, 0x0e	; 14
    4256:	2c 91       	ld	r18, X
    4258:	1e 97       	sbiw	r26, 0x0e	; 14
    425a:	26 ff       	sbrs	r18, 6
    425c:	4f c0       	rjmp	.+158    	; 0x42fc <f_sync+0xce>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
    425e:	27 fd       	sbrc	r18, 7
    4260:	56 c0       	rjmp	.+172    	; 0x430e <f_sync+0xe0>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    4262:	d7 01       	movw	r26, r14
    4264:	5c 96       	adiw	r26, 0x1c	; 28
    4266:	4d 91       	ld	r20, X+
    4268:	5d 91       	ld	r21, X+
    426a:	6d 91       	ld	r22, X+
    426c:	7c 91       	ld	r23, X
    426e:	5f 97       	sbiw	r26, 0x1f	; 31
    4270:	89 81       	ldd	r24, Y+1	; 0x01
    4272:	9a 81       	ldd	r25, Y+2	; 0x02
    4274:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
				if (res == FR_OK) {
    4278:	00 97       	sbiw	r24, 0x00	; 0
    427a:	09 f0       	breq	.+2      	; 0x427e <f_sync+0x50>
    427c:	3f c0       	rjmp	.+126    	; 0x42fc <f_sync+0xce>
					dir = fp->dir_ptr;
    427e:	d7 01       	movw	r26, r14
    4280:	90 96       	adiw	r26, 0x20	; 32
    4282:	ed 91       	ld	r30, X+
    4284:	fc 91       	ld	r31, X
    4286:	91 97       	sbiw	r26, 0x21	; 33
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
    4288:	83 85       	ldd	r24, Z+11	; 0x0b
    428a:	80 62       	ori	r24, 0x20	; 32
    428c:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
    428e:	8d 91       	ld	r24, X+
    4290:	9c 91       	ld	r25, X
    4292:	11 97       	sbiw	r26, 0x01	; 1
    4294:	16 96       	adiw	r26, 0x06	; 6
    4296:	4d 91       	ld	r20, X+
    4298:	5d 91       	ld	r21, X+
    429a:	6d 91       	ld	r22, X+
    429c:	7c 91       	ld	r23, X
    429e:	19 97       	sbiw	r26, 0x09	; 9

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    42a0:	42 8f       	std	Z+26, r20	; 0x1a
	*ptr++ = (BYTE)val;
    42a2:	53 8f       	std	Z+27, r21	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    42a4:	dc 01       	movw	r26, r24
    42a6:	8c 91       	ld	r24, X
    42a8:	83 30       	cpi	r24, 0x03	; 3
    42aa:	09 f4       	brne	.+2      	; 0x42ae <f_sync+0x80>
    42ac:	4a c0       	rjmp	.+148    	; 0x4342 <f_sync+0x114>
				res = move_window(fs, fp->dir_sect);
				if (res == FR_OK) {
					dir = fp->dir_ptr;
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    42ae:	d7 01       	movw	r26, r14
    42b0:	1a 96       	adiw	r26, 0x0a	; 10
    42b2:	3c 91       	ld	r19, X
    42b4:	1a 97       	sbiw	r26, 0x0a	; 10
    42b6:	1b 96       	adiw	r26, 0x0b	; 11
    42b8:	2c 91       	ld	r18, X
    42ba:	1b 97       	sbiw	r26, 0x0b	; 11
    42bc:	1c 96       	adiw	r26, 0x0c	; 12
    42be:	9c 91       	ld	r25, X
    42c0:	1c 97       	sbiw	r26, 0x0c	; 12
    42c2:	1d 96       	adiw	r26, 0x0d	; 13
    42c4:	8c 91       	ld	r24, X
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    42c6:	34 8f       	std	Z+28, r19	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    42c8:	25 8f       	std	Z+29, r18	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    42ca:	96 8f       	std	Z+30, r25	; 0x1e
	*ptr++ = (BYTE)val;
    42cc:	87 8f       	std	Z+31, r24	; 0x1f
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    42ce:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    42d0:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    42d2:	81 e2       	ldi	r24, 0x21	; 33
    42d4:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    42d6:	88 e4       	ldi	r24, 0x48	; 72
    42d8:	81 8f       	std	Z+25, r24	; 0x19

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    42da:	12 8a       	std	Z+18, r1	; 0x12
	*ptr++ = (BYTE)val;
    42dc:	13 8a       	std	Z+19, r1	; 0x13
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
    42de:	89 81       	ldd	r24, Y+1	; 0x01
    42e0:	9a 81       	ldd	r25, Y+2	; 0x02
    42e2:	21 e0       	ldi	r18, 0x01	; 1
    42e4:	fc 01       	movw	r30, r24
    42e6:	23 83       	std	Z+3, r18	; 0x03
					res = sync_fs(fs);					/* Restore it to the directory */
    42e8:	0e 94 55 0b 	call	0x16aa	; 0x16aa <sync_fs>
					fp->flag &= ~FA_MODIFIED;
    42ec:	d7 01       	movw	r26, r14
    42ee:	1e 96       	adiw	r26, 0x0e	; 14
    42f0:	2c 91       	ld	r18, X
    42f2:	1e 97       	sbiw	r26, 0x0e	; 14
    42f4:	2f 7b       	andi	r18, 0xBF	; 191
    42f6:	1e 96       	adiw	r26, 0x0e	; 14
    42f8:	2c 93       	st	X, r18
    42fa:	1e 97       	sbiw	r26, 0x0e	; 14
			}
		}
	}

	LEAVE_FF(fs, res);
}
    42fc:	0f 90       	pop	r0
    42fe:	0f 90       	pop	r0
    4300:	df 91       	pop	r29
    4302:	cf 91       	pop	r28
    4304:	1f 91       	pop	r17
    4306:	0f 91       	pop	r16
    4308:	ff 90       	pop	r15
    430a:	ef 90       	pop	r14
    430c:	08 95       	ret
	res = validate(fp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    430e:	e9 81       	ldd	r30, Y+1	; 0x01
    4310:	fa 81       	ldd	r31, Y+2	; 0x02
    4312:	b7 01       	movw	r22, r14
    4314:	6e 5d       	subi	r22, 0xDE	; 222
    4316:	7f 4f       	sbci	r23, 0xFF	; 255
    4318:	58 96       	adiw	r26, 0x18	; 24
    431a:	2d 91       	ld	r18, X+
    431c:	3d 91       	ld	r19, X+
    431e:	4d 91       	ld	r20, X+
    4320:	5c 91       	ld	r21, X
    4322:	5b 97       	sbiw	r26, 0x1b	; 27
    4324:	81 81       	ldd	r24, Z+1	; 0x01
    4326:	01 e0       	ldi	r16, 0x01	; 1
    4328:	10 e0       	ldi	r17, 0x00	; 0
    432a:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <disk_write>
    432e:	00 97       	sbiw	r24, 0x00	; 0
    4330:	29 f4       	brne	.+10     	; 0x433c <f_sync+0x10e>
				fp->flag &= ~FA_DIRTY;
    4332:	f7 01       	movw	r30, r14
    4334:	86 85       	ldd	r24, Z+14	; 0x0e
    4336:	8f 77       	andi	r24, 0x7F	; 127
    4338:	86 87       	std	Z+14, r24	; 0x0e
    433a:	93 cf       	rjmp	.-218    	; 0x4262 <f_sync+0x34>
	res = validate(fp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    433c:	81 e0       	ldi	r24, 0x01	; 1
    433e:	90 e0       	ldi	r25, 0x00	; 0
    4340:	dd cf       	rjmp	.-70     	; 0x42fc <f_sync+0xce>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    4342:	ab 01       	movw	r20, r22
    4344:	66 27       	eor	r22, r22
    4346:	77 27       	eor	r23, r23

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    4348:	44 8b       	std	Z+20, r20	; 0x14
	*ptr++ = (BYTE)val;
    434a:	55 8b       	std	Z+21, r21	; 0x15
    434c:	b0 cf       	rjmp	.-160    	; 0x42ae <f_sync+0x80>

0000434e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    434e:	0f 93       	push	r16
    4350:	1f 93       	push	r17
    4352:	cf 93       	push	r28
    4354:	df 93       	push	r29
    4356:	00 d0       	rcall	.+0      	; 0x4358 <f_close+0xa>
    4358:	cd b7       	in	r28, 0x3d	; 61
    435a:	de b7       	in	r29, 0x3e	; 62
    435c:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    435e:	0e 94 17 21 	call	0x422e	; 0x422e <f_sync>
	if (res == FR_OK)
    4362:	00 97       	sbiw	r24, 0x00	; 0
    4364:	39 f0       	breq	.+14     	; 0x4374 <f_close+0x26>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    4366:	0f 90       	pop	r0
    4368:	0f 90       	pop	r0
    436a:	df 91       	pop	r29
    436c:	cf 91       	pop	r28
    436e:	1f 91       	pop	r17
    4370:	0f 91       	pop	r16
    4372:	08 95       	ret
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(fp, &fs);	/* Lock volume */
    4374:	c8 01       	movw	r24, r16
    4376:	be 01       	movw	r22, r28
    4378:	6f 5f       	subi	r22, 0xFF	; 255
    437a:	7f 4f       	sbci	r23, 0xFF	; 255
    437c:	0e 94 15 0a 	call	0x142a	; 0x142a <validate>
		if (res == FR_OK) {
    4380:	00 97       	sbiw	r24, 0x00	; 0
    4382:	89 f7       	brne	.-30     	; 0x4366 <f_close+0x18>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
    4384:	f8 01       	movw	r30, r16
    4386:	11 82       	std	Z+1, r1	; 0x01
    4388:	10 82       	st	Z, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    438a:	0f 90       	pop	r0
    438c:	0f 90       	pop	r0
    438e:	df 91       	pop	r29
    4390:	cf 91       	pop	r28
    4392:	1f 91       	pop	r17
    4394:	0f 91       	pop	r16
    4396:	08 95       	ret

00004398 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
    4398:	4f 92       	push	r4
    439a:	5f 92       	push	r5
    439c:	6f 92       	push	r6
    439e:	7f 92       	push	r7
    43a0:	8f 92       	push	r8
    43a2:	9f 92       	push	r9
    43a4:	af 92       	push	r10
    43a6:	bf 92       	push	r11
    43a8:	cf 92       	push	r12
    43aa:	df 92       	push	r13
    43ac:	ef 92       	push	r14
    43ae:	ff 92       	push	r15
    43b0:	0f 93       	push	r16
    43b2:	1f 93       	push	r17
    43b4:	cf 93       	push	r28
    43b6:	df 93       	push	r29
    43b8:	cd b7       	in	r28, 0x3d	; 61
    43ba:	de b7       	in	r29, 0x3e	; 62
    43bc:	2a 97       	sbiw	r28, 0x0a	; 10
    43be:	0f b6       	in	r0, 0x3f	; 63
    43c0:	f8 94       	cli
    43c2:	de bf       	out	0x3e, r29	; 62
    43c4:	0f be       	out	0x3f, r0	; 63
    43c6:	cd bf       	out	0x3d, r28	; 61
    43c8:	5c 01       	movw	r10, r24
    43ca:	2a 01       	movw	r4, r20
    43cc:	3b 01       	movw	r6, r22
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(fp, &fs);		/* Check validity of the object */
    43ce:	be 01       	movw	r22, r28
    43d0:	6f 5f       	subi	r22, 0xFF	; 255
    43d2:	7f 4f       	sbci	r23, 0xFF	; 255
    43d4:	0e 94 15 0a 	call	0x142a	; 0x142a <validate>
    43d8:	4c 01       	movw	r8, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    43da:	00 97       	sbiw	r24, 0x00	; 0
    43dc:	09 f0       	breq	.+2      	; 0x43e0 <f_lseek+0x48>
    43de:	2c c1       	rjmp	.+600    	; 0x4638 <f_lseek+0x2a0>
    43e0:	d5 01       	movw	r26, r10
    43e2:	1f 96       	adiw	r26, 0x0f	; 15
    43e4:	8c 90       	ld	r8, X
    43e6:	1f 97       	sbiw	r26, 0x0f	; 15
    43e8:	99 24       	eor	r9, r9
    43ea:	81 14       	cp	r8, r1
    43ec:	91 04       	cpc	r9, r1
    43ee:	09 f0       	breq	.+2      	; 0x43f2 <f_lseek+0x5a>
    43f0:	23 c1       	rjmp	.+582    	; 0x4638 <f_lseek+0x2a0>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
    43f2:	1a 96       	adiw	r26, 0x0a	; 10
    43f4:	8d 91       	ld	r24, X+
    43f6:	9d 91       	ld	r25, X+
    43f8:	0d 90       	ld	r0, X+
    43fa:	bc 91       	ld	r27, X
    43fc:	a0 2d       	mov	r26, r0
    43fe:	84 15       	cp	r24, r4
    4400:	95 05       	cpc	r25, r5
    4402:	a6 05       	cpc	r26, r6
    4404:	b7 05       	cpc	r27, r7
    4406:	30 f4       	brcc	.+12     	; 0x4414 <f_lseek+0x7c>
    4408:	f5 01       	movw	r30, r10
    440a:	26 85       	ldd	r18, Z+14	; 0x0e
    440c:	21 fd       	sbrc	r18, 1
    440e:	02 c0       	rjmp	.+4      	; 0x4414 <f_lseek+0x7c>
    4410:	2c 01       	movw	r4, r24
    4412:	3d 01       	movw	r6, r26
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
    4414:	f5 01       	movw	r30, r10
    4416:	80 89       	ldd	r24, Z+16	; 0x10
    4418:	91 89       	ldd	r25, Z+17	; 0x11
    441a:	a2 89       	ldd	r26, Z+18	; 0x12
    441c:	b3 89       	ldd	r27, Z+19	; 0x13
		fp->fptr = nsect = 0;
    441e:	10 8a       	std	Z+16, r1	; 0x10
    4420:	11 8a       	std	Z+17, r1	; 0x11
    4422:	12 8a       	std	Z+18, r1	; 0x12
    4424:	13 8a       	std	Z+19, r1	; 0x13
		if (ofs) {
    4426:	41 14       	cp	r4, r1
    4428:	51 04       	cpc	r5, r1
    442a:	61 04       	cpc	r6, r1
    442c:	71 04       	cpc	r7, r1
    442e:	09 f4       	brne	.+2      	; 0x4432 <f_lseek+0x9a>
    4430:	03 c1       	rjmp	.+518    	; 0x4638 <f_lseek+0x2a0>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
    4432:	e9 81       	ldd	r30, Y+1	; 0x01
    4434:	fa 81       	ldd	r31, Y+2	; 0x02
    4436:	c1 84       	ldd	r12, Z+9	; 0x09
    4438:	d2 84       	ldd	r13, Z+10	; 0x0a
    443a:	ee 24       	eor	r14, r14
    443c:	ff 24       	eor	r15, r15
    443e:	09 e0       	ldi	r16, 0x09	; 9
    4440:	cc 0c       	add	r12, r12
    4442:	dd 1c       	adc	r13, r13
    4444:	ee 1c       	adc	r14, r14
    4446:	ff 1c       	adc	r15, r15
    4448:	0a 95       	dec	r16
    444a:	d1 f7       	brne	.-12     	; 0x4440 <f_lseek+0xa8>
			if (ifptr > 0 &&
    444c:	00 97       	sbiw	r24, 0x00	; 0
    444e:	a1 05       	cpc	r26, r1
    4450:	b1 05       	cpc	r27, r1
    4452:	51 f1       	breq	.+84     	; 0x44a8 <f_lseek+0x110>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    4454:	9c 01       	movw	r18, r24
    4456:	ad 01       	movw	r20, r26
    4458:	21 50       	subi	r18, 0x01	; 1
    445a:	30 40       	sbci	r19, 0x00	; 0
    445c:	40 40       	sbci	r20, 0x00	; 0
    445e:	50 40       	sbci	r21, 0x00	; 0
    4460:	2f 83       	std	Y+7, r18	; 0x07
    4462:	38 87       	std	Y+8, r19	; 0x08
    4464:	49 87       	std	Y+9, r20	; 0x09
    4466:	5a 87       	std	Y+10, r21	; 0x0a
    4468:	c3 01       	movw	r24, r6
    446a:	b2 01       	movw	r22, r4
    446c:	61 50       	subi	r22, 0x01	; 1
    446e:	70 40       	sbci	r23, 0x00	; 0
    4470:	80 40       	sbci	r24, 0x00	; 0
    4472:	90 40       	sbci	r25, 0x00	; 0
    4474:	a7 01       	movw	r20, r14
    4476:	96 01       	movw	r18, r12
    4478:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <__udivmodsi4>
    447c:	2b 83       	std	Y+3, r18	; 0x03
    447e:	3c 83       	std	Y+4, r19	; 0x04
    4480:	4d 83       	std	Y+5, r20	; 0x05
    4482:	5e 83       	std	Y+6, r21	; 0x06
    4484:	6f 81       	ldd	r22, Y+7	; 0x07
    4486:	78 85       	ldd	r23, Y+8	; 0x08
    4488:	89 85       	ldd	r24, Y+9	; 0x09
    448a:	9a 85       	ldd	r25, Y+10	; 0x0a
    448c:	a7 01       	movw	r20, r14
    448e:	96 01       	movw	r18, r12
    4490:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <__udivmodsi4>
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    4494:	8b 81       	ldd	r24, Y+3	; 0x03
    4496:	9c 81       	ldd	r25, Y+4	; 0x04
    4498:	ad 81       	ldd	r26, Y+5	; 0x05
    449a:	be 81       	ldd	r27, Y+6	; 0x06
    449c:	82 17       	cp	r24, r18
    449e:	93 07       	cpc	r25, r19
    44a0:	a4 07       	cpc	r26, r20
    44a2:	b5 07       	cpc	r27, r21
    44a4:	08 f0       	brcs	.+2      	; 0x44a8 <f_lseek+0x110>
    44a6:	e7 c0       	rjmp	.+462    	; 0x4676 <f_lseek+0x2de>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(QWORD)(bcs - 1);	/* start from the current cluster */
				ofs -= fp->fptr;
				clst = fp->clust;
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
    44a8:	f5 01       	movw	r30, r10
    44aa:	46 81       	ldd	r20, Z+6	; 0x06
    44ac:	57 81       	ldd	r21, Z+7	; 0x07
    44ae:	60 85       	ldd	r22, Z+8	; 0x08
    44b0:	71 85       	ldd	r23, Z+9	; 0x09
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    44b2:	41 15       	cp	r20, r1
    44b4:	51 05       	cpc	r21, r1
    44b6:	61 05       	cpc	r22, r1
    44b8:	71 05       	cpc	r23, r1
    44ba:	09 f4       	brne	.+2      	; 0x44be <f_lseek+0x126>
    44bc:	01 c1       	rjmp	.+514    	; 0x46c0 <f_lseek+0x328>
    44be:	1b 82       	std	Y+3, r1	; 0x03
    44c0:	1c 82       	std	Y+4, r1	; 0x04
    44c2:	1d 82       	std	Y+5, r1	; 0x05
    44c4:	1e 82       	std	Y+6, r1	; 0x06
					if (clst == 1) ABORT(fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					fp->obj.sclust = clst;
				}
#endif
				fp->clust = clst;
    44c6:	f5 01       	movw	r30, r10
    44c8:	44 8b       	std	Z+20, r20	; 0x14
    44ca:	55 8b       	std	Z+21, r21	; 0x15
    44cc:	66 8b       	std	Z+22, r22	; 0x16
    44ce:	77 8b       	std	Z+23, r23	; 0x17
			}
			if (clst != 0) {
    44d0:	41 15       	cp	r20, r1
    44d2:	51 05       	cpc	r21, r1
    44d4:	61 05       	cpc	r22, r1
    44d6:	71 05       	cpc	r23, r1
    44d8:	09 f4       	brne	.+2      	; 0x44dc <f_lseek+0x144>
    44da:	5c c0       	rjmp	.+184    	; 0x4594 <f_lseek+0x1fc>
				while (ofs > bcs) {						/* Cluster following loop */
    44dc:	c4 14       	cp	r12, r4
    44de:	d5 04       	cpc	r13, r5
    44e0:	e6 04       	cpc	r14, r6
    44e2:	f7 04       	cpc	r15, r7
    44e4:	08 f0       	brcs	.+2      	; 0x44e8 <f_lseek+0x150>
    44e6:	4a c1       	rjmp	.+660    	; 0x477c <f_lseek+0x3e4>
    44e8:	8b 81       	ldd	r24, Y+3	; 0x03
    44ea:	9c 81       	ldd	r25, Y+4	; 0x04
    44ec:	ad 81       	ldd	r26, Y+5	; 0x05
    44ee:	be 81       	ldd	r27, Y+6	; 0x06
    44f0:	3d c0       	rjmp	.+122    	; 0x456c <f_lseek+0x1d4>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
    44f2:	c5 01       	movw	r24, r10
    44f4:	0e 94 6d 13 	call	0x26da	; 0x26da <create_chain>
    44f8:	ab 01       	movw	r20, r22
    44fa:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* Clip file size in case of disk full */
    44fc:	41 15       	cp	r20, r1
    44fe:	51 05       	cpc	r21, r1
    4500:	61 05       	cpc	r22, r1
    4502:	71 05       	cpc	r23, r1
    4504:	09 f4       	brne	.+2      	; 0x4508 <f_lseek+0x170>
    4506:	9f c1       	rjmp	.+830    	; 0x4846 <f_lseek+0x4ae>
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    4508:	4f 3f       	cpi	r20, 0xFF	; 255
    450a:	ff ef       	ldi	r31, 0xFF	; 255
    450c:	5f 07       	cpc	r21, r31
    450e:	ff ef       	ldi	r31, 0xFF	; 255
    4510:	6f 07       	cpc	r22, r31
    4512:	ff ef       	ldi	r31, 0xFF	; 255
    4514:	7f 07       	cpc	r23, r31
    4516:	09 f4       	brne	.+2      	; 0x451a <f_lseek+0x182>
    4518:	8d c1       	rjmp	.+794    	; 0x4834 <f_lseek+0x49c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    451a:	42 30       	cpi	r20, 0x02	; 2
    451c:	51 05       	cpc	r21, r1
    451e:	61 05       	cpc	r22, r1
    4520:	71 05       	cpc	r23, r1
    4522:	08 f4       	brcc	.+2      	; 0x4526 <f_lseek+0x18e>
    4524:	10 c1       	rjmp	.+544    	; 0x4746 <f_lseek+0x3ae>
    4526:	e9 81       	ldd	r30, Y+1	; 0x01
    4528:	fa 81       	ldd	r31, Y+2	; 0x02
    452a:	83 89       	ldd	r24, Z+19	; 0x13
    452c:	94 89       	ldd	r25, Z+20	; 0x14
    452e:	a5 89       	ldd	r26, Z+21	; 0x15
    4530:	b6 89       	ldd	r27, Z+22	; 0x16
    4532:	48 17       	cp	r20, r24
    4534:	59 07       	cpc	r21, r25
    4536:	6a 07       	cpc	r22, r26
    4538:	7b 07       	cpc	r23, r27
    453a:	08 f0       	brcs	.+2      	; 0x453e <f_lseek+0x1a6>
    453c:	04 c1       	rjmp	.+520    	; 0x4746 <f_lseek+0x3ae>
#if _FS_MINIMIZE <= 2
/*-----------------------------------------------------------------------*/
/* Seek File R/W Pointer                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_lseek (
    453e:	4c 18       	sub	r4, r12
    4540:	5d 08       	sbc	r5, r13
    4542:	6e 08       	sbc	r6, r14
    4544:	7f 08       	sbc	r7, r15
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
    4546:	d5 01       	movw	r26, r10
    4548:	54 96       	adiw	r26, 0x14	; 20
    454a:	4d 93       	st	X+, r20
    454c:	5d 93       	st	X+, r21
    454e:	6d 93       	st	X+, r22
    4550:	7c 93       	st	X, r23
    4552:	57 97       	sbiw	r26, 0x17	; 23
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    4554:	c4 14       	cp	r12, r4
    4556:	d5 04       	cpc	r13, r5
    4558:	e6 04       	cpc	r14, r6
    455a:	f7 04       	cpc	r15, r7
    455c:	08 f0       	brcs	.+2      	; 0x4560 <f_lseek+0x1c8>
    455e:	03 c1       	rjmp	.+518    	; 0x4766 <f_lseek+0x3ce>
    4560:	50 96       	adiw	r26, 0x10	; 16
    4562:	8d 91       	ld	r24, X+
    4564:	9d 91       	ld	r25, X+
    4566:	0d 90       	ld	r0, X+
    4568:	bc 91       	ld	r27, X
    456a:	a0 2d       	mov	r26, r0
					ofs -= bcs; fp->fptr += bcs;
    456c:	8c 0d       	add	r24, r12
    456e:	9d 1d       	adc	r25, r13
    4570:	ae 1d       	adc	r26, r14
    4572:	bf 1d       	adc	r27, r15
    4574:	f5 01       	movw	r30, r10
    4576:	80 8b       	std	Z+16, r24	; 0x10
    4578:	91 8b       	std	Z+17, r25	; 0x11
    457a:	a2 8b       	std	Z+18, r26	; 0x12
    457c:	b3 8b       	std	Z+19, r27	; 0x13
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    457e:	86 85       	ldd	r24, Z+14	; 0x0e
    4580:	81 fd       	sbrc	r24, 1
    4582:	b7 cf       	rjmp	.-146    	; 0x44f2 <f_lseek+0x15a>
							ofs = 0; break;
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
    4584:	f5 01       	movw	r30, r10
    4586:	80 81       	ld	r24, Z
    4588:	91 81       	ldd	r25, Z+1	; 0x01
    458a:	0e 94 8c 11 	call	0x2318	; 0x2318 <get_fat.isra.8>
    458e:	ab 01       	movw	r20, r22
    4590:	bc 01       	movw	r22, r24
    4592:	ba cf       	rjmp	.-140    	; 0x4508 <f_lseek+0x170>
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    4594:	44 24       	eor	r4, r4
    4596:	55 24       	eor	r5, r5
    4598:	32 01       	movw	r6, r4
					if (!nsect) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
    459a:	f5 01       	movw	r30, r10
    459c:	82 85       	ldd	r24, Z+10	; 0x0a
    459e:	93 85       	ldd	r25, Z+11	; 0x0b
    45a0:	a4 85       	ldd	r26, Z+12	; 0x0c
    45a2:	b5 85       	ldd	r27, Z+13	; 0x0d
    45a4:	2b 81       	ldd	r18, Y+3	; 0x03
    45a6:	3c 81       	ldd	r19, Y+4	; 0x04
    45a8:	4d 81       	ldd	r20, Y+5	; 0x05
    45aa:	5e 81       	ldd	r21, Y+6	; 0x06
    45ac:	82 17       	cp	r24, r18
    45ae:	93 07       	cpc	r25, r19
    45b0:	a4 07       	cpc	r26, r20
    45b2:	b5 07       	cpc	r27, r21
    45b4:	08 f0       	brcs	.+2      	; 0x45b8 <f_lseek+0x220>
    45b6:	56 c1       	rjmp	.+684    	; 0x4864 <f_lseek+0x4cc>
			fp->obj.objsize = fp->fptr;
    45b8:	8b 81       	ldd	r24, Y+3	; 0x03
    45ba:	9c 81       	ldd	r25, Y+4	; 0x04
    45bc:	ad 81       	ldd	r26, Y+5	; 0x05
    45be:	be 81       	ldd	r27, Y+6	; 0x06
    45c0:	f5 01       	movw	r30, r10
    45c2:	82 87       	std	Z+10, r24	; 0x0a
    45c4:	93 87       	std	Z+11, r25	; 0x0b
    45c6:	a4 87       	std	Z+12, r26	; 0x0c
    45c8:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA_MODIFIED;
    45ca:	86 85       	ldd	r24, Z+14	; 0x0e
    45cc:	80 64       	ori	r24, 0x40	; 64
    45ce:	86 87       	std	Z+14, r24	; 0x0e
    45d0:	8b 81       	ldd	r24, Y+3	; 0x03
    45d2:	9c 81       	ldd	r25, Y+4	; 0x04
    45d4:	ad 81       	ldd	r26, Y+5	; 0x05
    45d6:	be 81       	ldd	r27, Y+6	; 0x06
    45d8:	91 70       	andi	r25, 0x01	; 1
    45da:	a0 70       	andi	r26, 0x00	; 0
    45dc:	b0 70       	andi	r27, 0x00	; 0
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
    45de:	00 97       	sbiw	r24, 0x00	; 0
    45e0:	a1 05       	cpc	r26, r1
    45e2:	b1 05       	cpc	r27, r1
    45e4:	49 f1       	breq	.+82     	; 0x4638 <f_lseek+0x2a0>
    45e6:	d5 01       	movw	r26, r10
    45e8:	58 96       	adiw	r26, 0x18	; 24
    45ea:	0d 91       	ld	r16, X+
    45ec:	1d 91       	ld	r17, X+
    45ee:	2d 91       	ld	r18, X+
    45f0:	3c 91       	ld	r19, X
    45f2:	5b 97       	sbiw	r26, 0x1b	; 27
    45f4:	40 16       	cp	r4, r16
    45f6:	51 06       	cpc	r5, r17
    45f8:	62 06       	cpc	r6, r18
    45fa:	73 06       	cpc	r7, r19
    45fc:	e9 f0       	breq	.+58     	; 0x4638 <f_lseek+0x2a0>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
    45fe:	1e 96       	adiw	r26, 0x0e	; 14
    4600:	8c 91       	ld	r24, X
    4602:	1e 97       	sbiw	r26, 0x0e	; 14
    4604:	87 fd       	sbrc	r24, 7
    4606:	84 c0       	rjmp	.+264    	; 0x4710 <f_lseek+0x378>
    4608:	52 e2       	ldi	r21, 0x22	; 34
    460a:	c5 2e       	mov	r12, r21
    460c:	d1 2c       	mov	r13, r1
    460e:	ca 0c       	add	r12, r10
    4610:	db 1c       	adc	r13, r11
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= ~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    4612:	e9 81       	ldd	r30, Y+1	; 0x01
    4614:	fa 81       	ldd	r31, Y+2	; 0x02
    4616:	81 81       	ldd	r24, Z+1	; 0x01
    4618:	b6 01       	movw	r22, r12
    461a:	a3 01       	movw	r20, r6
    461c:	92 01       	movw	r18, r4
    461e:	01 e0       	ldi	r16, 0x01	; 1
    4620:	10 e0       	ldi	r17, 0x00	; 0
    4622:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <disk_read>
    4626:	00 97       	sbiw	r24, 0x00	; 0
    4628:	f9 f4       	brne	.+62     	; 0x4668 <f_lseek+0x2d0>
#endif
			fp->sect = nsect;
    462a:	d5 01       	movw	r26, r10
    462c:	58 96       	adiw	r26, 0x18	; 24
    462e:	4d 92       	st	X+, r4
    4630:	5d 92       	st	X+, r5
    4632:	6d 92       	st	X+, r6
    4634:	7c 92       	st	X, r7
    4636:	5b 97       	sbiw	r26, 0x1b	; 27
		}
	}

	LEAVE_FF(fs, res);
}
    4638:	c4 01       	movw	r24, r8
    463a:	2a 96       	adiw	r28, 0x0a	; 10
    463c:	0f b6       	in	r0, 0x3f	; 63
    463e:	f8 94       	cli
    4640:	de bf       	out	0x3e, r29	; 62
    4642:	0f be       	out	0x3f, r0	; 63
    4644:	cd bf       	out	0x3d, r28	; 61
    4646:	df 91       	pop	r29
    4648:	cf 91       	pop	r28
    464a:	1f 91       	pop	r17
    464c:	0f 91       	pop	r16
    464e:	ff 90       	pop	r15
    4650:	ef 90       	pop	r14
    4652:	df 90       	pop	r13
    4654:	cf 90       	pop	r12
    4656:	bf 90       	pop	r11
    4658:	af 90       	pop	r10
    465a:	9f 90       	pop	r9
    465c:	8f 90       	pop	r8
    465e:	7f 90       	pop	r7
    4660:	6f 90       	pop	r6
    4662:	5f 90       	pop	r5
    4664:	4f 90       	pop	r4
    4666:	08 95       	ret
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= ~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    4668:	81 e0       	ldi	r24, 0x01	; 1
    466a:	f5 01       	movw	r30, r10
    466c:	87 87       	std	Z+15, r24	; 0x0f
    466e:	91 e0       	ldi	r25, 0x01	; 1
    4670:	89 2e       	mov	r8, r25
    4672:	91 2c       	mov	r9, r1
    4674:	e1 cf       	rjmp	.-62     	; 0x4638 <f_lseek+0x2a0>
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(QWORD)(bcs - 1);	/* start from the current cluster */
    4676:	22 27       	eor	r18, r18
    4678:	33 27       	eor	r19, r19
    467a:	a9 01       	movw	r20, r18
    467c:	2c 19       	sub	r18, r12
    467e:	3d 09       	sbc	r19, r13
    4680:	4e 09       	sbc	r20, r14
    4682:	5f 09       	sbc	r21, r15
    4684:	8f 81       	ldd	r24, Y+7	; 0x07
    4686:	98 85       	ldd	r25, Y+8	; 0x08
    4688:	a9 85       	ldd	r26, Y+9	; 0x09
    468a:	ba 85       	ldd	r27, Y+10	; 0x0a
    468c:	28 23       	and	r18, r24
    468e:	39 23       	and	r19, r25
    4690:	4a 23       	and	r20, r26
    4692:	5b 23       	and	r21, r27
    4694:	2b 83       	std	Y+3, r18	; 0x03
    4696:	3c 83       	std	Y+4, r19	; 0x04
    4698:	4d 83       	std	Y+5, r20	; 0x05
    469a:	5e 83       	std	Y+6, r21	; 0x06
    469c:	d5 01       	movw	r26, r10
    469e:	50 96       	adiw	r26, 0x10	; 16
    46a0:	2d 93       	st	X+, r18
    46a2:	3d 93       	st	X+, r19
    46a4:	4d 93       	st	X+, r20
    46a6:	5c 93       	st	X, r21
    46a8:	53 97       	sbiw	r26, 0x13	; 19
				ofs -= fp->fptr;
    46aa:	42 1a       	sub	r4, r18
    46ac:	53 0a       	sbc	r5, r19
    46ae:	64 0a       	sbc	r6, r20
    46b0:	75 0a       	sbc	r7, r21
				clst = fp->clust;
    46b2:	54 96       	adiw	r26, 0x14	; 20
    46b4:	4d 91       	ld	r20, X+
    46b6:	5d 91       	ld	r21, X+
    46b8:	6d 91       	ld	r22, X+
    46ba:	7c 91       	ld	r23, X
    46bc:	57 97       	sbiw	r26, 0x17	; 23
    46be:	08 cf       	rjmp	.-496    	; 0x44d0 <f_lseek+0x138>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
					clst = create_chain(&fp->obj, 0);
    46c0:	c5 01       	movw	r24, r10
    46c2:	40 e0       	ldi	r20, 0x00	; 0
    46c4:	50 e0       	ldi	r21, 0x00	; 0
    46c6:	ba 01       	movw	r22, r20
    46c8:	0e 94 6d 13 	call	0x26da	; 0x26da <create_chain>
    46cc:	ab 01       	movw	r20, r22
    46ce:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fs, FR_INT_ERR);
    46d0:	41 30       	cpi	r20, 0x01	; 1
    46d2:	51 05       	cpc	r21, r1
    46d4:	61 05       	cpc	r22, r1
    46d6:	71 05       	cpc	r23, r1
    46d8:	e9 f1       	breq	.+122    	; 0x4754 <f_lseek+0x3bc>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    46da:	4f 3f       	cpi	r20, 0xFF	; 255
    46dc:	bf ef       	ldi	r27, 0xFF	; 255
    46de:	5b 07       	cpc	r21, r27
    46e0:	bf ef       	ldi	r27, 0xFF	; 255
    46e2:	6b 07       	cpc	r22, r27
    46e4:	bf ef       	ldi	r27, 0xFF	; 255
    46e6:	7b 07       	cpc	r23, r27
    46e8:	09 f4       	brne	.+2      	; 0x46ec <f_lseek+0x354>
    46ea:	be cf       	rjmp	.-132    	; 0x4668 <f_lseek+0x2d0>
					fp->obj.sclust = clst;
    46ec:	d5 01       	movw	r26, r10
    46ee:	16 96       	adiw	r26, 0x06	; 6
    46f0:	4d 93       	st	X+, r20
    46f2:	5d 93       	st	X+, r21
    46f4:	6d 93       	st	X+, r22
    46f6:	7c 93       	st	X, r23
    46f8:	19 97       	sbiw	r26, 0x09	; 9
    46fa:	50 96       	adiw	r26, 0x10	; 16
    46fc:	8d 91       	ld	r24, X+
    46fe:	9d 91       	ld	r25, X+
    4700:	0d 90       	ld	r0, X+
    4702:	bc 91       	ld	r27, X
    4704:	a0 2d       	mov	r26, r0
    4706:	8b 83       	std	Y+3, r24	; 0x03
    4708:	9c 83       	std	Y+4, r25	; 0x04
    470a:	ad 83       	std	Y+5, r26	; 0x05
    470c:	be 83       	std	Y+6, r27	; 0x06
    470e:	db ce       	rjmp	.-586    	; 0x44c6 <f_lseek+0x12e>
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    4710:	e9 81       	ldd	r30, Y+1	; 0x01
    4712:	fa 81       	ldd	r31, Y+2	; 0x02
    4714:	42 e2       	ldi	r20, 0x22	; 34
    4716:	c4 2e       	mov	r12, r20
    4718:	d1 2c       	mov	r13, r1
    471a:	ca 0c       	add	r12, r10
    471c:	db 1c       	adc	r13, r11
    471e:	81 81       	ldd	r24, Z+1	; 0x01
    4720:	b6 01       	movw	r22, r12
    4722:	a9 01       	movw	r20, r18
    4724:	98 01       	movw	r18, r16
    4726:	01 e0       	ldi	r16, 0x01	; 1
    4728:	10 e0       	ldi	r17, 0x00	; 0
    472a:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <disk_write>
    472e:	00 97       	sbiw	r24, 0x00	; 0
    4730:	09 f0       	breq	.+2      	; 0x4734 <f_lseek+0x39c>
    4732:	9a cf       	rjmp	.-204    	; 0x4668 <f_lseek+0x2d0>
				fp->flag &= ~FA_DIRTY;
    4734:	d5 01       	movw	r26, r10
    4736:	1e 96       	adiw	r26, 0x0e	; 14
    4738:	8c 91       	ld	r24, X
    473a:	1e 97       	sbiw	r26, 0x0e	; 14
    473c:	8f 77       	andi	r24, 0x7F	; 127
    473e:	1e 96       	adiw	r26, 0x0e	; 14
    4740:	8c 93       	st	X, r24
    4742:	1e 97       	sbiw	r26, 0x0e	; 14
    4744:	66 cf       	rjmp	.-308    	; 0x4612 <f_lseek+0x27a>
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    4746:	82 e0       	ldi	r24, 0x02	; 2
    4748:	f5 01       	movw	r30, r10
    474a:	87 87       	std	Z+15, r24	; 0x0f
    474c:	b2 e0       	ldi	r27, 0x02	; 2
    474e:	8b 2e       	mov	r8, r27
    4750:	91 2c       	mov	r9, r1
    4752:	72 cf       	rjmp	.-284    	; 0x4638 <f_lseek+0x2a0>
					fp->clust = clst;
				}
				fp->fptr += ofs;
				if (ofs % SS(fs)) {
					nsect = clust2sect(fs, clst);	/* Current sector */
					if (!nsect) ABORT(fs, FR_INT_ERR);
    4754:	82 e0       	ldi	r24, 0x02	; 2
    4756:	d5 01       	movw	r26, r10
    4758:	1f 96       	adiw	r26, 0x0f	; 15
    475a:	8c 93       	st	X, r24
    475c:	1f 97       	sbiw	r26, 0x0f	; 15
    475e:	f2 e0       	ldi	r31, 0x02	; 2
    4760:	8f 2e       	mov	r8, r31
    4762:	91 2c       	mov	r9, r1
    4764:	69 cf       	rjmp	.-302    	; 0x4638 <f_lseek+0x2a0>
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    4766:	d5 01       	movw	r26, r10
    4768:	50 96       	adiw	r26, 0x10	; 16
    476a:	8d 91       	ld	r24, X+
    476c:	9d 91       	ld	r25, X+
    476e:	0d 90       	ld	r0, X+
    4770:	bc 91       	ld	r27, X
    4772:	a0 2d       	mov	r26, r0
    4774:	8b 83       	std	Y+3, r24	; 0x03
    4776:	9c 83       	std	Y+4, r25	; 0x04
    4778:	ad 83       	std	Y+5, r26	; 0x05
    477a:	be 83       	std	Y+6, r27	; 0x06
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
				}
				fp->fptr += ofs;
    477c:	8b 81       	ldd	r24, Y+3	; 0x03
    477e:	9c 81       	ldd	r25, Y+4	; 0x04
    4780:	ad 81       	ldd	r26, Y+5	; 0x05
    4782:	be 81       	ldd	r27, Y+6	; 0x06
    4784:	84 0d       	add	r24, r4
    4786:	95 1d       	adc	r25, r5
    4788:	a6 1d       	adc	r26, r6
    478a:	b7 1d       	adc	r27, r7
    478c:	8b 83       	std	Y+3, r24	; 0x03
    478e:	9c 83       	std	Y+4, r25	; 0x04
    4790:	ad 83       	std	Y+5, r26	; 0x05
    4792:	be 83       	std	Y+6, r27	; 0x06
    4794:	f5 01       	movw	r30, r10
    4796:	80 8b       	std	Z+16, r24	; 0x10
    4798:	91 8b       	std	Z+17, r25	; 0x11
    479a:	a2 8b       	std	Z+18, r26	; 0x12
    479c:	b3 8b       	std	Z+19, r27	; 0x13
				if (ofs % SS(fs)) {
    479e:	d3 01       	movw	r26, r6
    47a0:	c2 01       	movw	r24, r4
    47a2:	91 70       	andi	r25, 0x01	; 1
    47a4:	a0 70       	andi	r26, 0x00	; 0
    47a6:	b0 70       	andi	r27, 0x00	; 0
    47a8:	00 97       	sbiw	r24, 0x00	; 0
    47aa:	a1 05       	cpc	r26, r1
    47ac:	b1 05       	cpc	r27, r1
    47ae:	09 f4       	brne	.+2      	; 0x47b2 <f_lseek+0x41a>
    47b0:	f1 ce       	rjmp	.-542    	; 0x4594 <f_lseek+0x1fc>
					nsect = clust2sect(fs, clst);	/* Current sector */
    47b2:	09 81       	ldd	r16, Y+1	; 0x01
    47b4:	1a 81       	ldd	r17, Y+2	; 0x02
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    47b6:	ae ef       	ldi	r26, 0xFE	; 254
    47b8:	ca 2e       	mov	r12, r26
    47ba:	af ef       	ldi	r26, 0xFF	; 255
    47bc:	da 2e       	mov	r13, r26
    47be:	af ef       	ldi	r26, 0xFF	; 255
    47c0:	ea 2e       	mov	r14, r26
    47c2:	af ef       	ldi	r26, 0xFF	; 255
    47c4:	fa 2e       	mov	r15, r26
    47c6:	c4 0e       	add	r12, r20
    47c8:	d5 1e       	adc	r13, r21
    47ca:	e6 1e       	adc	r14, r22
    47cc:	f7 1e       	adc	r15, r23
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    47ce:	f8 01       	movw	r30, r16
    47d0:	83 89       	ldd	r24, Z+19	; 0x13
    47d2:	94 89       	ldd	r25, Z+20	; 0x14
    47d4:	a5 89       	ldd	r26, Z+21	; 0x15
    47d6:	b6 89       	ldd	r27, Z+22	; 0x16
    47d8:	02 97       	sbiw	r24, 0x02	; 2
    47da:	a1 09       	sbc	r26, r1
    47dc:	b1 09       	sbc	r27, r1
    47de:	c8 16       	cp	r12, r24
    47e0:	d9 06       	cpc	r13, r25
    47e2:	ea 06       	cpc	r14, r26
    47e4:	fb 06       	cpc	r15, r27
    47e6:	08 f0       	brcs	.+2      	; 0x47ea <f_lseek+0x452>
    47e8:	b5 cf       	rjmp	.-150    	; 0x4754 <f_lseek+0x3bc>
	return clst * fs->csize + fs->database;
    47ea:	21 85       	ldd	r18, Z+9	; 0x09
    47ec:	32 85       	ldd	r19, Z+10	; 0x0a
    47ee:	40 e0       	ldi	r20, 0x00	; 0
    47f0:	50 e0       	ldi	r21, 0x00	; 0
    47f2:	c7 01       	movw	r24, r14
    47f4:	b6 01       	movw	r22, r12
    47f6:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__mulsi3>
    47fa:	ab 01       	movw	r20, r22
    47fc:	bc 01       	movw	r22, r24
    47fe:	f8 01       	movw	r30, r16
    4800:	87 a1       	lds	r24, 0x47
    4802:	90 a5       	lds	r25, 0x60
    4804:	a1 a5       	lds	r26, 0x61
    4806:	b2 a5       	lds	r27, 0x62
    4808:	48 0f       	add	r20, r24
    480a:	59 1f       	adc	r21, r25
    480c:	6a 1f       	adc	r22, r26
    480e:	7b 1f       	adc	r23, r27
					fp->clust = clst;
				}
				fp->fptr += ofs;
				if (ofs % SS(fs)) {
					nsect = clust2sect(fs, clst);	/* Current sector */
					if (!nsect) ABORT(fs, FR_INT_ERR);
    4810:	41 15       	cp	r20, r1
    4812:	51 05       	cpc	r21, r1
    4814:	61 05       	cpc	r22, r1
    4816:	71 05       	cpc	r23, r1
    4818:	09 f4       	brne	.+2      	; 0x481c <f_lseek+0x484>
    481a:	9c cf       	rjmp	.-200    	; 0x4754 <f_lseek+0x3bc>
					nsect += (DWORD)(ofs / SS(fs));
    481c:	e9 e0       	ldi	r30, 0x09	; 9
    481e:	76 94       	lsr	r7
    4820:	67 94       	ror	r6
    4822:	57 94       	ror	r5
    4824:	47 94       	ror	r4
    4826:	ea 95       	dec	r30
    4828:	d1 f7       	brne	.-12     	; 0x481e <f_lseek+0x486>
    482a:	44 0e       	add	r4, r20
    482c:	55 1e       	adc	r5, r21
    482e:	66 1e       	adc	r6, r22
    4830:	77 1e       	adc	r7, r23
    4832:	b3 ce       	rjmp	.-666    	; 0x459a <f_lseek+0x202>
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    4834:	81 e0       	ldi	r24, 0x01	; 1
    4836:	d5 01       	movw	r26, r10
    4838:	1f 96       	adiw	r26, 0x0f	; 15
    483a:	8c 93       	st	X, r24
    483c:	1f 97       	sbiw	r26, 0x0f	; 15
    483e:	11 e0       	ldi	r17, 0x01	; 1
    4840:	81 2e       	mov	r8, r17
    4842:	91 2c       	mov	r9, r1
    4844:	f9 ce       	rjmp	.-526    	; 0x4638 <f_lseek+0x2a0>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
						if (clst == 0) {				/* Clip file size in case of disk full */
    4846:	d5 01       	movw	r26, r10
    4848:	50 96       	adiw	r26, 0x10	; 16
    484a:	2d 91       	ld	r18, X+
    484c:	3d 91       	ld	r19, X+
    484e:	4d 91       	ld	r20, X+
    4850:	5c 91       	ld	r21, X
    4852:	53 97       	sbiw	r26, 0x13	; 19
    4854:	2b 83       	std	Y+3, r18	; 0x03
    4856:	3c 83       	std	Y+4, r19	; 0x04
    4858:	4d 83       	std	Y+5, r20	; 0x05
    485a:	5e 83       	std	Y+6, r21	; 0x06
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    485c:	44 24       	eor	r4, r4
    485e:	55 24       	eor	r5, r5
    4860:	32 01       	movw	r6, r4
    4862:	9b ce       	rjmp	.-714    	; 0x459a <f_lseek+0x202>
					if (!nsect) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
    4864:	da 01       	movw	r26, r20
    4866:	c9 01       	movw	r24, r18
    4868:	91 70       	andi	r25, 0x01	; 1
    486a:	a0 70       	andi	r26, 0x00	; 0
    486c:	b0 70       	andi	r27, 0x00	; 0
    486e:	b7 ce       	rjmp	.-658    	; 0x45de <f_lseek+0x246>

00004870 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    4870:	0f 93       	push	r16
    4872:	1f 93       	push	r17
    4874:	cf 93       	push	r28
    4876:	df 93       	push	r29
    4878:	00 d0       	rcall	.+0      	; 0x487a <f_opendir+0xa>
    487a:	00 d0       	rcall	.+0      	; 0x487c <f_opendir+0xc>
    487c:	cd b7       	in	r28, 0x3d	; 61
    487e:	de b7       	in	r29, 0x3e	; 62
    4880:	8c 01       	movw	r16, r24
    4882:	7c 83       	std	Y+4, r23	; 0x04
    4884:	6b 83       	std	Y+3, r22	; 0x03
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    4886:	00 97       	sbiw	r24, 0x00	; 0
    4888:	b9 f0       	breq	.+46     	; 0x48b8 <f_opendir+0x48>

	/* Get logical drive number */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
    488a:	ce 01       	movw	r24, r28
    488c:	03 96       	adiw	r24, 0x03	; 3
    488e:	be 01       	movw	r22, r28
    4890:	6f 5f       	subi	r22, 0xFF	; 255
    4892:	7f 4f       	sbci	r23, 0xFF	; 255
    4894:	40 e0       	ldi	r20, 0x00	; 0
    4896:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <find_volume>
	if (res == FR_OK) {
    489a:	00 97       	sbiw	r24, 0x00	; 0
    489c:	81 f0       	breq	.+32     	; 0x48be <f_opendir+0x4e>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
    489e:	d8 01       	movw	r26, r16
    48a0:	11 96       	adiw	r26, 0x01	; 1
    48a2:	1c 92       	st	X, r1
    48a4:	1e 92       	st	-X, r1

	LEAVE_FF(fs, res);
}
    48a6:	0f 90       	pop	r0
    48a8:	0f 90       	pop	r0
    48aa:	0f 90       	pop	r0
    48ac:	0f 90       	pop	r0
    48ae:	df 91       	pop	r29
    48b0:	cf 91       	pop	r28
    48b2:	1f 91       	pop	r17
    48b4:	0f 91       	pop	r16
    48b6:	08 95       	ret
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    48b8:	89 e0       	ldi	r24, 0x09	; 9
    48ba:	90 e0       	ldi	r25, 0x00	; 0
    48bc:	f4 cf       	rjmp	.-24     	; 0x48a6 <f_opendir+0x36>

	/* Get logical drive number */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
	if (res == FR_OK) {
		obj->fs = fs;
    48be:	89 81       	ldd	r24, Y+1	; 0x01
    48c0:	9a 81       	ldd	r25, Y+2	; 0x02
    48c2:	d8 01       	movw	r26, r16
    48c4:	8d 93       	st	X+, r24
    48c6:	9c 93       	st	X, r25
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
    48c8:	6b 81       	ldd	r22, Y+3	; 0x03
    48ca:	7c 81       	ldd	r23, Y+4	; 0x04
    48cc:	c8 01       	movw	r24, r16
    48ce:	0e 94 42 18 	call	0x3084	; 0x3084 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    48d2:	00 97       	sbiw	r24, 0x00	; 0
    48d4:	49 f5       	brne	.+82     	; 0x4928 <f_opendir+0xb8>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
    48d6:	f8 01       	movw	r30, r16
    48d8:	87 a1       	lds	r24, 0x47
    48da:	87 fd       	sbrc	r24, 7
    48dc:	2f c0       	rjmp	.+94     	; 0x493c <f_opendir+0xcc>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
    48de:	84 81       	ldd	r24, Z+4	; 0x04
    48e0:	84 ff       	sbrs	r24, 4
    48e2:	29 c0       	rjmp	.+82     	; 0x4936 <f_opendir+0xc6>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
    48e4:	02 8c       	ldd	r0, Z+26	; 0x1a
    48e6:	f3 8d       	ldd	r31, Z+27	; 0x1b
    48e8:	e0 2d       	mov	r30, r0
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    48ea:	33 8d       	ldd	r19, Z+27	; 0x1b
    48ec:	20 e0       	ldi	r18, 0x00	; 0
    48ee:	82 8d       	ldd	r24, Z+26	; 0x1a
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	82 2b       	or	r24, r18
    48f4:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    48f6:	ac 01       	movw	r20, r24
    48f8:	60 e0       	ldi	r22, 0x00	; 0
    48fa:	70 e0       	ldi	r23, 0x00	; 0
	}

	va_end(arp);

	return putc_flush(&pb);
}
    48fc:	29 81       	ldd	r18, Y+1	; 0x01
    48fe:	3a 81       	ldd	r19, Y+2	; 0x02
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
    4900:	d9 01       	movw	r26, r18
    4902:	8c 91       	ld	r24, X
    4904:	83 30       	cpi	r24, 0x03	; 3
    4906:	e9 f0       	breq	.+58     	; 0x4942 <f_opendir+0xd2>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
    4908:	f8 01       	movw	r30, r16
    490a:	46 83       	std	Z+6, r20	; 0x06
    490c:	57 83       	std	Z+7, r21	; 0x07
    490e:	60 87       	std	Z+8, r22	; 0x08
    4910:	71 87       	std	Z+9, r23	; 0x09
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				obj->id = fs->id;
    4912:	d9 01       	movw	r26, r18
    4914:	15 96       	adiw	r26, 0x05	; 5
    4916:	8d 91       	ld	r24, X+
    4918:	9c 91       	ld	r25, X
    491a:	16 97       	sbiw	r26, 0x06	; 6
    491c:	f8 01       	movw	r30, r16
    491e:	93 83       	std	Z+3, r25	; 0x03
    4920:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dp, 0);			/* Rewind directory */
    4922:	c8 01       	movw	r24, r16
    4924:	0e 94 24 17 	call	0x2e48	; 0x2e48 <dir_sdi.constprop.11>
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    4928:	84 30       	cpi	r24, 0x04	; 4
    492a:	91 05       	cpc	r25, r1
    492c:	21 f0       	breq	.+8      	; 0x4936 <f_opendir+0xc6>
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
    492e:	00 97       	sbiw	r24, 0x00	; 0
    4930:	09 f4       	brne	.+2      	; 0x4934 <f_opendir+0xc4>
    4932:	b9 cf       	rjmp	.-142    	; 0x48a6 <f_opendir+0x36>
    4934:	b4 cf       	rjmp	.-152    	; 0x489e <f_opendir+0x2e>
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
    4936:	85 e0       	ldi	r24, 0x05	; 5
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	b1 cf       	rjmp	.-158    	; 0x489e <f_opendir+0x2e>
    493c:	29 81       	ldd	r18, Y+1	; 0x01
    493e:	3a 81       	ldd	r19, Y+2	; 0x02
    4940:	e8 cf       	rjmp	.-48     	; 0x4912 <f_opendir+0xa2>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4942:	b5 89       	ldd	r27, Z+21	; 0x15
    4944:	a0 e0       	ldi	r26, 0x00	; 0
    4946:	84 89       	ldd	r24, Z+20	; 0x14
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	8a 2b       	or	r24, r26
    494c:	9b 2b       	or	r25, r27
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    494e:	a0 e0       	ldi	r26, 0x00	; 0
    4950:	b0 e0       	ldi	r27, 0x00	; 0
    4952:	dc 01       	movw	r26, r24
    4954:	99 27       	eor	r25, r25
    4956:	88 27       	eor	r24, r24
    4958:	48 2b       	or	r20, r24
    495a:	59 2b       	or	r21, r25
    495c:	6a 2b       	or	r22, r26
    495e:	7b 2b       	or	r23, r27
    4960:	d3 cf       	rjmp	.-90     	; 0x4908 <f_opendir+0x98>

00004962 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    4962:	0f 93       	push	r16
    4964:	1f 93       	push	r17
    4966:	cf 93       	push	r28
    4968:	df 93       	push	r29
    496a:	00 d0       	rcall	.+0      	; 0x496c <f_closedir+0xa>
    496c:	cd b7       	in	r28, 0x3d	; 61
    496e:	de b7       	in	r29, 0x3e	; 62
    4970:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;


	res = validate(dp, &fs);
    4972:	be 01       	movw	r22, r28
    4974:	6f 5f       	subi	r22, 0xFF	; 255
    4976:	7f 4f       	sbci	r23, 0xFF	; 255
    4978:	0e 94 15 0a 	call	0x142a	; 0x142a <validate>
	if (res == FR_OK) {
    497c:	00 97       	sbiw	r24, 0x00	; 0
    497e:	19 f4       	brne	.+6      	; 0x4986 <f_closedir+0x24>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
    4980:	f8 01       	movw	r30, r16
    4982:	11 82       	std	Z+1, r1	; 0x01
    4984:	10 82       	st	Z, r1
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
    4986:	0f 90       	pop	r0
    4988:	0f 90       	pop	r0
    498a:	df 91       	pop	r29
    498c:	cf 91       	pop	r28
    498e:	1f 91       	pop	r17
    4990:	0f 91       	pop	r16
    4992:	08 95       	ret

00004994 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    4994:	cf 92       	push	r12
    4996:	df 92       	push	r13
    4998:	ef 92       	push	r14
    499a:	ff 92       	push	r15
    499c:	0f 93       	push	r16
    499e:	1f 93       	push	r17
    49a0:	cf 93       	push	r28
    49a2:	df 93       	push	r29
    49a4:	00 d0       	rcall	.+0      	; 0x49a6 <f_readdir+0x12>
    49a6:	cd b7       	in	r28, 0x3d	; 61
    49a8:	de b7       	in	r29, 0x3e	; 62
    49aa:	8c 01       	movw	r16, r24
    49ac:	6b 01       	movw	r12, r22
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(dp, &fs);	/* Check validity of the object */
    49ae:	be 01       	movw	r22, r28
    49b0:	6f 5f       	subi	r22, 0xFF	; 255
    49b2:	7f 4f       	sbci	r23, 0xFF	; 255
    49b4:	0e 94 15 0a 	call	0x142a	; 0x142a <validate>
    49b8:	7c 01       	movw	r14, r24
	if (res == FR_OK) {
    49ba:	00 97       	sbiw	r24, 0x00	; 0
    49bc:	61 f4       	brne	.+24     	; 0x49d6 <f_readdir+0x42>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    49be:	c8 01       	movw	r24, r16
	DEF_NAMBUF


	res = validate(dp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (!fno) {
    49c0:	c1 14       	cp	r12, r1
    49c2:	d1 04       	cpc	r13, r1
    49c4:	79 f1       	breq	.+94     	; 0x4a24 <f_readdir+0x90>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
    49c6:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <dir_read.constprop.10>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
    49ca:	84 30       	cpi	r24, 0x04	; 4
    49cc:	91 05       	cpc	r25, r1
    49ce:	79 f0       	breq	.+30     	; 0x49ee <f_readdir+0x5a>
			if (res == FR_OK) {				/* A valid entry is found */
    49d0:	00 97       	sbiw	r24, 0x00	; 0
    49d2:	69 f0       	breq	.+26     	; 0x49ee <f_readdir+0x5a>
    49d4:	7c 01       	movw	r14, r24
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
    49d6:	c7 01       	movw	r24, r14
    49d8:	0f 90       	pop	r0
    49da:	0f 90       	pop	r0
    49dc:	df 91       	pop	r29
    49de:	cf 91       	pop	r28
    49e0:	1f 91       	pop	r17
    49e2:	0f 91       	pop	r16
    49e4:	ff 90       	pop	r15
    49e6:	ef 90       	pop	r14
    49e8:	df 90       	pop	r13
    49ea:	cf 90       	pop	r12
    49ec:	08 95       	ret
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
    49ee:	f6 01       	movw	r30, r12
    49f0:	11 86       	std	Z+9, r1	; 0x09
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
    49f2:	f8 01       	movw	r30, r16
    49f4:	86 89       	ldd	r24, Z+22	; 0x16
    49f6:	97 89       	ldd	r25, Z+23	; 0x17
    49f8:	a0 8d       	ldd	r26, Z+24	; 0x18
    49fa:	b1 8d       	ldd	r27, Z+25	; 0x19
    49fc:	00 97       	sbiw	r24, 0x00	; 0
    49fe:	a1 05       	cpc	r26, r1
    4a00:	b1 05       	cpc	r27, r1
    4a02:	51 f4       	brne	.+20     	; 0x4a18 <f_readdir+0x84>
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
    4a04:	c8 01       	movw	r24, r16
    4a06:	60 e0       	ldi	r22, 0x00	; 0
    4a08:	70 e0       	ldi	r23, 0x00	; 0
    4a0a:	0e 94 75 14 	call	0x28ea	; 0x28ea <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    4a0e:	84 30       	cpi	r24, 0x04	; 4
    4a10:	91 05       	cpc	r25, r1
    4a12:	09 f3       	breq	.-62     	; 0x49d6 <f_readdir+0x42>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
    4a14:	7c 01       	movw	r14, r24
    4a16:	df cf       	rjmp	.-66     	; 0x49d6 <f_readdir+0x42>
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
    4a18:	c8 01       	movw	r24, r16
    4a1a:	4a 96       	adiw	r24, 0x1a	; 26
    4a1c:	b6 01       	movw	r22, r12
    4a1e:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <get_fileinfo.isra.3.part.4>
    4a22:	f0 cf       	rjmp	.-32     	; 0x4a04 <f_readdir+0x70>


	res = validate(dp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    4a24:	0e 94 24 17 	call	0x2e48	; 0x2e48 <dir_sdi.constprop.11>
    4a28:	7c 01       	movw	r14, r24
    4a2a:	d5 cf       	rjmp	.-86     	; 0x49d6 <f_readdir+0x42>

00004a2c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    4a2c:	ef 92       	push	r14
    4a2e:	ff 92       	push	r15
    4a30:	0f 93       	push	r16
    4a32:	1f 93       	push	r17
    4a34:	cf 93       	push	r28
    4a36:	df 93       	push	r29
    4a38:	cd b7       	in	r28, 0x3d	; 61
    4a3a:	de b7       	in	r29, 0x3e	; 62
    4a3c:	aa 97       	sbiw	r28, 0x2a	; 42
    4a3e:	0f b6       	in	r0, 0x3f	; 63
    4a40:	f8 94       	cli
    4a42:	de bf       	out	0x3e, r29	; 62
    4a44:	0f be       	out	0x3f, r0	; 63
    4a46:	cd bf       	out	0x3d, r28	; 61
    4a48:	9a a7       	lds	r25, 0x7a
    4a4a:	89 a7       	lds	r24, 0x79
    4a4c:	7b 01       	movw	r14, r22
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive number */
	res = find_volume(&path, &dj.obj.fs, 0);
    4a4e:	ce 01       	movw	r24, r28
    4a50:	89 96       	adiw	r24, 0x29	; 41
    4a52:	be 01       	movw	r22, r28
    4a54:	6f 5f       	subi	r22, 0xFF	; 255
    4a56:	7f 4f       	sbci	r23, 0xFF	; 255
    4a58:	40 e0       	ldi	r20, 0x00	; 0
    4a5a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <find_volume>
    4a5e:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    4a60:	00 97       	sbiw	r24, 0x00	; 0
    4a62:	71 f0       	breq	.+28     	; 0x4a80 <f_stat+0x54>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
    4a64:	c8 01       	movw	r24, r16
    4a66:	aa 96       	adiw	r28, 0x2a	; 42
    4a68:	0f b6       	in	r0, 0x3f	; 63
    4a6a:	f8 94       	cli
    4a6c:	de bf       	out	0x3e, r29	; 62
    4a6e:	0f be       	out	0x3f, r0	; 63
    4a70:	cd bf       	out	0x3d, r28	; 61
    4a72:	df 91       	pop	r29
    4a74:	cf 91       	pop	r28
    4a76:	1f 91       	pop	r17
    4a78:	0f 91       	pop	r16
    4a7a:	ff 90       	pop	r15
    4a7c:	ef 90       	pop	r14
    4a7e:	08 95       	ret

	/* Get logical drive number */
	res = find_volume(&path, &dj.obj.fs, 0);
	if (res == FR_OK) {
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    4a80:	69 a5       	lds	r22, 0x69
    4a82:	7a a5       	lds	r23, 0x6a
    4a84:	ce 01       	movw	r24, r28
    4a86:	01 96       	adiw	r24, 0x01	; 1
    4a88:	0e 94 42 18 	call	0x3084	; 0x3084 <follow_path>
    4a8c:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follow completed */
    4a8e:	00 97       	sbiw	r24, 0x00	; 0
    4a90:	49 f7       	brne	.-46     	; 0x4a64 <f_stat+0x38>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
    4a92:	88 a5       	lds	r24, 0x68
    4a94:	87 fd       	sbrc	r24, 7
    4a96:	13 c0       	rjmp	.+38     	; 0x4abe <f_stat+0x92>
				res = FR_INVALID_NAME;
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
    4a98:	e1 14       	cp	r14, r1
    4a9a:	f1 04       	cpc	r15, r1
    4a9c:	19 f3       	breq	.-58     	; 0x4a64 <f_stat+0x38>
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
    4a9e:	f7 01       	movw	r30, r14
    4aa0:	11 86       	std	Z+9, r1	; 0x09
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
    4aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    4aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    4aa6:	a9 8d       	ldd	r26, Y+25	; 0x19
    4aa8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4aaa:	00 97       	sbiw	r24, 0x00	; 0
    4aac:	a1 05       	cpc	r26, r1
    4aae:	b1 05       	cpc	r27, r1
    4ab0:	c9 f2       	breq	.-78     	; 0x4a64 <f_stat+0x38>
    4ab2:	ce 01       	movw	r24, r28
    4ab4:	4b 96       	adiw	r24, 0x1b	; 27
    4ab6:	b7 01       	movw	r22, r14
    4ab8:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <get_fileinfo.isra.3.part.4>
    4abc:	d3 cf       	rjmp	.-90     	; 0x4a64 <f_stat+0x38>
	if (res == FR_OK) {
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
		if (res == FR_OK) {				/* Follow completed */
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
				res = FR_INVALID_NAME;
    4abe:	06 e0       	ldi	r16, 0x06	; 6
    4ac0:	10 e0       	ldi	r17, 0x00	; 0
    4ac2:	d0 cf       	rjmp	.-96     	; 0x4a64 <f_stat+0x38>

00004ac4 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
    4ac4:	2f 92       	push	r2
    4ac6:	3f 92       	push	r3
    4ac8:	4f 92       	push	r4
    4aca:	5f 92       	push	r5
    4acc:	6f 92       	push	r6
    4ace:	7f 92       	push	r7
    4ad0:	8f 92       	push	r8
    4ad2:	9f 92       	push	r9
    4ad4:	af 92       	push	r10
    4ad6:	bf 92       	push	r11
    4ad8:	cf 92       	push	r12
    4ada:	df 92       	push	r13
    4adc:	ef 92       	push	r14
    4ade:	ff 92       	push	r15
    4ae0:	0f 93       	push	r16
    4ae2:	1f 93       	push	r17
    4ae4:	cf 93       	push	r28
    4ae6:	df 93       	push	r29
    4ae8:	cd b7       	in	r28, 0x3d	; 61
    4aea:	de b7       	in	r29, 0x3e	; 62
    4aec:	28 97       	sbiw	r28, 0x08	; 8
    4aee:	0f b6       	in	r0, 0x3f	; 63
    4af0:	f8 94       	cli
    4af2:	de bf       	out	0x3e, r29	; 62
    4af4:	0f be       	out	0x3f, r0	; 63
    4af6:	cd bf       	out	0x3d, r28	; 61
    4af8:	9c 83       	std	Y+4, r25	; 0x04
    4afa:	8b 83       	std	Y+3, r24	; 0x03
    4afc:	7e 83       	std	Y+6, r23	; 0x06
    4afe:	6d 83       	std	Y+5, r22	; 0x05
    4b00:	8a 01       	movw	r16, r20
	BYTE *p;
	_FDID obj;


	/* Get logical drive number */
	res = find_volume(&path, &fs, 0);
    4b02:	ce 01       	movw	r24, r28
    4b04:	03 96       	adiw	r24, 0x03	; 3
    4b06:	be 01       	movw	r22, r28
    4b08:	6f 5f       	subi	r22, 0xFF	; 255
    4b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b0c:	40 e0       	ldi	r20, 0x00	; 0
    4b0e:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <find_volume>
    4b12:	4c 01       	movw	r8, r24
	if (res == FR_OK) {
    4b14:	00 97       	sbiw	r24, 0x00	; 0
    4b16:	09 f0       	breq	.+2      	; 0x4b1a <f_getfree+0x56>
    4b18:	b8 c0       	rjmp	.+368    	; 0x4c8a <f_getfree+0x1c6>
		*fatfs = fs;				/* Return ptr to the fs object */
    4b1a:	a9 80       	ldd	r10, Y+1	; 0x01
    4b1c:	ba 80       	ldd	r11, Y+2	; 0x02
    4b1e:	d8 01       	movw	r26, r16
    4b20:	ad 92       	st	X+, r10
    4b22:	bc 92       	st	X, r11
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
    4b24:	f5 01       	movw	r30, r10
    4b26:	87 85       	ldd	r24, Z+15	; 0x0f
    4b28:	90 89       	ldd	r25, Z+16	; 0x10
    4b2a:	a1 89       	ldd	r26, Z+17	; 0x11
    4b2c:	b2 89       	ldd	r27, Z+18	; 0x12
    4b2e:	c3 88       	ldd	r12, Z+19	; 0x13
    4b30:	d4 88       	ldd	r13, Z+20	; 0x14
    4b32:	e5 88       	ldd	r14, Z+21	; 0x15
    4b34:	f6 88       	ldd	r15, Z+22	; 0x16
    4b36:	b7 01       	movw	r22, r14
    4b38:	a6 01       	movw	r20, r12
    4b3a:	42 50       	subi	r20, 0x02	; 2
    4b3c:	50 40       	sbci	r21, 0x00	; 0
    4b3e:	60 40       	sbci	r22, 0x00	; 0
    4b40:	70 40       	sbci	r23, 0x00	; 0
    4b42:	48 17       	cp	r20, r24
    4b44:	59 07       	cpc	r21, r25
    4b46:	6a 07       	cpc	r22, r26
    4b48:	7b 07       	cpc	r23, r27
    4b4a:	08 f0       	brcs	.+2      	; 0x4b4e <f_getfree+0x8a>
    4b4c:	b8 c0       	rjmp	.+368    	; 0x4cbe <f_getfree+0x1fa>
			*nclst = fs->free_clst;
		} else {
			/* Get number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
    4b4e:	80 81       	ld	r24, Z
    4b50:	81 30       	cpi	r24, 0x01	; 1
    4b52:	09 f4       	brne	.+2      	; 0x4b56 <f_getfree+0x92>
    4b54:	bb c0       	rjmp	.+374    	; 0x4ccc <f_getfree+0x208>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
    4b56:	47 8d       	ldd	r20, Z+31	; 0x1f
    4b58:	50 a1       	lds	r21, 0x40
    4b5a:	61 a1       	lds	r22, 0x41
    4b5c:	72 a1       	lds	r23, 0x42
					i = 0; p = 0;
    4b5e:	e0 e0       	ldi	r30, 0x00	; 0
    4b60:	f0 e0       	ldi	r31, 0x00	; 0
    4b62:	20 e0       	ldi	r18, 0x00	; 0
    4b64:	30 e0       	ldi	r19, 0x00	; 0
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
			*nclst = fs->free_clst;
		} else {
			/* Get number of free clusters */
			nfree = 0;
    4b66:	44 24       	eor	r4, r4
    4b68:	55 24       	eor	r5, r5
    4b6a:	32 01       	movw	r6, r4
    4b6c:	98 86       	std	Y+8, r9	; 0x08
    4b6e:	8f 82       	std	Y+7, r8	; 0x07
    4b70:	85 01       	movw	r16, r10
    4b72:	4a 01       	movw	r8, r20
    4b74:	5b 01       	movw	r10, r22
    4b76:	45 c0       	rjmp	.+138    	; 0x4c02 <f_getfree+0x13e>
							res = move_window(fs, sect++);
							if (res != FR_OK) break;
							p = fs->win;
							i = SS(fs);
						}
						if (fs->fs_type == FS_FAT16) {
    4b78:	d8 01       	movw	r26, r16
    4b7a:	8c 91       	ld	r24, X
    4b7c:	82 30       	cpi	r24, 0x02	; 2
    4b7e:	09 f4       	brne	.+2      	; 0x4b82 <f_getfree+0xbe>
    4b80:	5c c0       	rjmp	.+184    	; 0x4c3a <f_getfree+0x176>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    4b82:	83 81       	ldd	r24, Z+3	; 0x03
    4b84:	90 e0       	ldi	r25, 0x00	; 0
    4b86:	a0 e0       	ldi	r26, 0x00	; 0
    4b88:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    4b8a:	44 27       	eor	r20, r20
    4b8c:	58 2f       	mov	r21, r24
    4b8e:	69 2f       	mov	r22, r25
    4b90:	7a 2f       	mov	r23, r26
    4b92:	82 81       	ldd	r24, Z+2	; 0x02
    4b94:	90 e0       	ldi	r25, 0x00	; 0
    4b96:	a0 e0       	ldi	r26, 0x00	; 0
    4b98:	b0 e0       	ldi	r27, 0x00	; 0
    4b9a:	48 2b       	or	r20, r24
    4b9c:	59 2b       	or	r21, r25
    4b9e:	6a 2b       	or	r22, r26
    4ba0:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    4ba2:	76 2f       	mov	r23, r22
    4ba4:	65 2f       	mov	r22, r21
    4ba6:	54 2f       	mov	r21, r20
    4ba8:	44 27       	eor	r20, r20
    4baa:	81 81       	ldd	r24, Z+1	; 0x01
    4bac:	90 e0       	ldi	r25, 0x00	; 0
    4bae:	a0 e0       	ldi	r26, 0x00	; 0
    4bb0:	b0 e0       	ldi	r27, 0x00	; 0
    4bb2:	48 2b       	or	r20, r24
    4bb4:	59 2b       	or	r21, r25
    4bb6:	6a 2b       	or	r22, r26
    4bb8:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    4bba:	76 2f       	mov	r23, r22
    4bbc:	65 2f       	mov	r22, r21
    4bbe:	54 2f       	mov	r21, r20
    4bc0:	44 27       	eor	r20, r20
    4bc2:	80 81       	ld	r24, Z
    4bc4:	90 e0       	ldi	r25, 0x00	; 0
    4bc6:	a0 e0       	ldi	r26, 0x00	; 0
    4bc8:	b0 e0       	ldi	r27, 0x00	; 0
    4bca:	48 2b       	or	r20, r24
    4bcc:	59 2b       	or	r21, r25
    4bce:	6a 2b       	or	r22, r26
    4bd0:	7b 2b       	or	r23, r27
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(p) == 0) nfree++;
							p += 2; i -= 2;
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
    4bd2:	7f 70       	andi	r23, 0x0F	; 15
    4bd4:	41 15       	cp	r20, r1
    4bd6:	51 05       	cpc	r21, r1
    4bd8:	61 05       	cpc	r22, r1
    4bda:	71 05       	cpc	r23, r1
    4bdc:	29 f4       	brne	.+10     	; 0x4be8 <f_getfree+0x124>
    4bde:	08 94       	sec
    4be0:	41 1c       	adc	r4, r1
    4be2:	51 1c       	adc	r5, r1
    4be4:	61 1c       	adc	r6, r1
    4be6:	71 1c       	adc	r7, r1
							p += 4; i -= 4;
    4be8:	34 96       	adiw	r30, 0x04	; 4
    4bea:	24 50       	subi	r18, 0x04	; 4
    4bec:	30 40       	sbci	r19, 0x00	; 0
						}
					} while (--clst);
    4bee:	08 94       	sec
    4bf0:	c1 08       	sbc	r12, r1
    4bf2:	d1 08       	sbc	r13, r1
    4bf4:	e1 08       	sbc	r14, r1
    4bf6:	f1 08       	sbc	r15, r1
    4bf8:	c1 14       	cp	r12, r1
    4bfa:	d1 04       	cpc	r13, r1
    4bfc:	e1 04       	cpc	r14, r1
    4bfe:	f1 04       	cpc	r15, r1
    4c00:	69 f1       	breq	.+90     	; 0x4c5c <f_getfree+0x198>
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
					i = 0; p = 0;
					do {
						if (i == 0) {
    4c02:	21 15       	cp	r18, r1
    4c04:	31 05       	cpc	r19, r1
    4c06:	09 f0       	breq	.+2      	; 0x4c0a <f_getfree+0x146>
    4c08:	b7 cf       	rjmp	.-146    	; 0x4b78 <f_getfree+0xb4>
							res = move_window(fs, sect++);
    4c0a:	c8 01       	movw	r24, r16
    4c0c:	b5 01       	movw	r22, r10
    4c0e:	a4 01       	movw	r20, r8
    4c10:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
							if (res != FR_OK) break;
    4c14:	00 97       	sbiw	r24, 0x00	; 0
    4c16:	09 f0       	breq	.+2      	; 0x4c1a <f_getfree+0x156>
    4c18:	95 c0       	rjmp	.+298    	; 0x4d44 <f_getfree+0x280>
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
					i = 0; p = 0;
					do {
						if (i == 0) {
							res = move_window(fs, sect++);
    4c1a:	08 94       	sec
    4c1c:	81 1c       	adc	r8, r1
    4c1e:	91 1c       	adc	r9, r1
    4c20:	a1 1c       	adc	r10, r1
    4c22:	b1 1c       	adc	r11, r1
							if (res != FR_OK) break;
							p = fs->win;
    4c24:	09 81       	ldd	r16, Y+1	; 0x01
    4c26:	1a 81       	ldd	r17, Y+2	; 0x02
    4c28:	f8 01       	movw	r30, r16
    4c2a:	bf 96       	adiw	r30, 0x2f	; 47
							i = SS(fs);
    4c2c:	20 e0       	ldi	r18, 0x00	; 0
    4c2e:	32 e0       	ldi	r19, 0x02	; 2
						}
						if (fs->fs_type == FS_FAT16) {
    4c30:	d8 01       	movw	r26, r16
    4c32:	8c 91       	ld	r24, X
    4c34:	82 30       	cpi	r24, 0x02	; 2
    4c36:	09 f0       	breq	.+2      	; 0x4c3a <f_getfree+0x176>
    4c38:	a4 cf       	rjmp	.-184    	; 0x4b82 <f_getfree+0xbe>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4c3a:	31 80       	ldd	r3, Z+1	; 0x01
    4c3c:	22 24       	eor	r2, r2
    4c3e:	80 81       	ld	r24, Z
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	82 29       	or	r24, r2
    4c44:	93 29       	or	r25, r3
							if (res != FR_OK) break;
							p = fs->win;
							i = SS(fs);
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(p) == 0) nfree++;
    4c46:	00 97       	sbiw	r24, 0x00	; 0
    4c48:	29 f4       	brne	.+10     	; 0x4c54 <f_getfree+0x190>
    4c4a:	08 94       	sec
    4c4c:	41 1c       	adc	r4, r1
    4c4e:	51 1c       	adc	r5, r1
    4c50:	61 1c       	adc	r6, r1
    4c52:	71 1c       	adc	r7, r1
							p += 2; i -= 2;
    4c54:	32 96       	adiw	r30, 0x02	; 2
    4c56:	22 50       	subi	r18, 0x02	; 2
    4c58:	30 40       	sbci	r19, 0x00	; 0
    4c5a:	c9 cf       	rjmp	.-110    	; 0x4bee <f_getfree+0x12a>
    4c5c:	8f 80       	ldd	r8, Y+7	; 0x07
    4c5e:	98 84       	ldd	r9, Y+8	; 0x08
    4c60:	58 01       	movw	r10, r16
							p += 4; i -= 4;
						}
					} while (--clst);
				}
			}
			*nclst = nfree;			/* Return the free clusters */
    4c62:	ed 81       	ldd	r30, Y+5	; 0x05
    4c64:	fe 81       	ldd	r31, Y+6	; 0x06
    4c66:	40 82       	st	Z, r4
    4c68:	51 82       	std	Z+1, r5	; 0x01
    4c6a:	62 82       	std	Z+2, r6	; 0x02
    4c6c:	73 82       	std	Z+3, r7	; 0x03
			fs->free_clst = nfree;	/* Now free_clst is valid */
    4c6e:	d5 01       	movw	r26, r10
    4c70:	1f 96       	adiw	r26, 0x0f	; 15
    4c72:	4d 92       	st	X+, r4
    4c74:	5d 92       	st	X+, r5
    4c76:	6d 92       	st	X+, r6
    4c78:	7c 92       	st	X, r7
    4c7a:	52 97       	sbiw	r26, 0x12	; 18
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
    4c7c:	14 96       	adiw	r26, 0x04	; 4
    4c7e:	8c 91       	ld	r24, X
    4c80:	14 97       	sbiw	r26, 0x04	; 4
    4c82:	81 60       	ori	r24, 0x01	; 1
    4c84:	14 96       	adiw	r26, 0x04	; 4
    4c86:	8c 93       	st	X, r24
    4c88:	14 97       	sbiw	r26, 0x04	; 4
		}
	}

	LEAVE_FF(fs, res);
}
    4c8a:	c4 01       	movw	r24, r8
    4c8c:	28 96       	adiw	r28, 0x08	; 8
    4c8e:	0f b6       	in	r0, 0x3f	; 63
    4c90:	f8 94       	cli
    4c92:	de bf       	out	0x3e, r29	; 62
    4c94:	0f be       	out	0x3f, r0	; 63
    4c96:	cd bf       	out	0x3d, r28	; 61
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	1f 91       	pop	r17
    4c9e:	0f 91       	pop	r16
    4ca0:	ff 90       	pop	r15
    4ca2:	ef 90       	pop	r14
    4ca4:	df 90       	pop	r13
    4ca6:	cf 90       	pop	r12
    4ca8:	bf 90       	pop	r11
    4caa:	af 90       	pop	r10
    4cac:	9f 90       	pop	r9
    4cae:	8f 90       	pop	r8
    4cb0:	7f 90       	pop	r7
    4cb2:	6f 90       	pop	r6
    4cb4:	5f 90       	pop	r5
    4cb6:	4f 90       	pop	r4
    4cb8:	3f 90       	pop	r3
    4cba:	2f 90       	pop	r2
    4cbc:	08 95       	ret
	res = find_volume(&path, &fs, 0);
	if (res == FR_OK) {
		*fatfs = fs;				/* Return ptr to the fs object */
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
			*nclst = fs->free_clst;
    4cbe:	ed 81       	ldd	r30, Y+5	; 0x05
    4cc0:	fe 81       	ldd	r31, Y+6	; 0x06
    4cc2:	80 83       	st	Z, r24
    4cc4:	91 83       	std	Z+1, r25	; 0x01
    4cc6:	a2 83       	std	Z+2, r26	; 0x02
    4cc8:	b3 83       	std	Z+3, r27	; 0x03
    4cca:	df cf       	rjmp	.-66     	; 0x4c8a <f_getfree+0x1c6>
		} else {
			/* Get number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
    4ccc:	22 e0       	ldi	r18, 0x02	; 2
    4cce:	c2 2e       	mov	r12, r18
    4cd0:	d1 2c       	mov	r13, r1
    4cd2:	e1 2c       	mov	r14, r1
    4cd4:	f1 2c       	mov	r15, r1
    4cd6:	44 24       	eor	r4, r4
    4cd8:	55 24       	eor	r5, r5
    4cda:	32 01       	movw	r6, r4
    4cdc:	1e c0       	rjmp	.+60     	; 0x4d1a <f_getfree+0x256>
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
					if (stat == 1) { res = FR_INT_ERR; break; }
    4cde:	81 30       	cpi	r24, 0x01	; 1
    4ce0:	91 05       	cpc	r25, r1
    4ce2:	a1 05       	cpc	r26, r1
    4ce4:	b1 05       	cpc	r27, r1
    4ce6:	91 f1       	breq	.+100    	; 0x4d4c <f_getfree+0x288>
					if (stat == 0) nfree++;
    4ce8:	00 97       	sbiw	r24, 0x00	; 0
    4cea:	a1 05       	cpc	r26, r1
    4cec:	b1 05       	cpc	r27, r1
    4cee:	29 f4       	brne	.+10     	; 0x4cfa <f_getfree+0x236>
    4cf0:	08 94       	sec
    4cf2:	41 1c       	adc	r4, r1
    4cf4:	51 1c       	adc	r5, r1
    4cf6:	61 1c       	adc	r6, r1
    4cf8:	71 1c       	adc	r7, r1
				} while (++clst < fs->n_fatent);
    4cfa:	08 94       	sec
    4cfc:	c1 1c       	adc	r12, r1
    4cfe:	d1 1c       	adc	r13, r1
    4d00:	e1 1c       	adc	r14, r1
    4d02:	f1 1c       	adc	r15, r1
    4d04:	e9 81       	ldd	r30, Y+1	; 0x01
    4d06:	fa 81       	ldd	r31, Y+2	; 0x02
    4d08:	83 89       	ldd	r24, Z+19	; 0x13
    4d0a:	94 89       	ldd	r25, Z+20	; 0x14
    4d0c:	a5 89       	ldd	r26, Z+21	; 0x15
    4d0e:	b6 89       	ldd	r27, Z+22	; 0x16
    4d10:	c8 16       	cp	r12, r24
    4d12:	d9 06       	cpc	r13, r25
    4d14:	ea 06       	cpc	r14, r26
    4d16:	fb 06       	cpc	r15, r27
    4d18:	f8 f4       	brcc	.+62     	; 0x4d58 <f_getfree+0x294>
			/* Get number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
    4d1a:	c5 01       	movw	r24, r10
    4d1c:	b7 01       	movw	r22, r14
    4d1e:	a6 01       	movw	r20, r12
    4d20:	0e 94 8c 11 	call	0x2318	; 0x2318 <get_fat.isra.8>
    4d24:	dc 01       	movw	r26, r24
    4d26:	cb 01       	movw	r24, r22
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    4d28:	8f 3f       	cpi	r24, 0xFF	; 255
    4d2a:	ef ef       	ldi	r30, 0xFF	; 255
    4d2c:	9e 07       	cpc	r25, r30
    4d2e:	ef ef       	ldi	r30, 0xFF	; 255
    4d30:	ae 07       	cpc	r26, r30
    4d32:	ef ef       	ldi	r30, 0xFF	; 255
    4d34:	be 07       	cpc	r27, r30
    4d36:	99 f6       	brne	.-90     	; 0x4cde <f_getfree+0x21a>
    4d38:	a9 80       	ldd	r10, Y+1	; 0x01
    4d3a:	ba 80       	ldd	r11, Y+2	; 0x02
    4d3c:	91 e0       	ldi	r25, 0x01	; 1
    4d3e:	89 2e       	mov	r8, r25
    4d40:	91 2c       	mov	r9, r1
    4d42:	8f cf       	rjmp	.-226    	; 0x4c62 <f_getfree+0x19e>
					clst = fs->n_fatent; sect = fs->fatbase;
					i = 0; p = 0;
					do {
						if (i == 0) {
							res = move_window(fs, sect++);
							if (res != FR_OK) break;
    4d44:	a9 80       	ldd	r10, Y+1	; 0x01
    4d46:	ba 80       	ldd	r11, Y+2	; 0x02
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
					i = 0; p = 0;
					do {
						if (i == 0) {
							res = move_window(fs, sect++);
    4d48:	4c 01       	movw	r8, r24
    4d4a:	8b cf       	rjmp	.-234    	; 0x4c62 <f_getfree+0x19e>
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
					if (stat == 1) { res = FR_INT_ERR; break; }
    4d4c:	a9 80       	ldd	r10, Y+1	; 0x01
    4d4e:	ba 80       	ldd	r11, Y+2	; 0x02
    4d50:	82 e0       	ldi	r24, 0x02	; 2
    4d52:	88 2e       	mov	r8, r24
    4d54:	91 2c       	mov	r9, r1
    4d56:	85 cf       	rjmp	.-246    	; 0x4c62 <f_getfree+0x19e>
					if (stat == 0) nfree++;
				} while (++clst < fs->n_fatent);
    4d58:	5f 01       	movw	r10, r30
    4d5a:	83 cf       	rjmp	.-250    	; 0x4c62 <f_getfree+0x19e>

00004d5c <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
    4d5c:	cf 92       	push	r12
    4d5e:	df 92       	push	r13
    4d60:	ef 92       	push	r14
    4d62:	ff 92       	push	r15
    4d64:	0f 93       	push	r16
    4d66:	1f 93       	push	r17
    4d68:	cf 93       	push	r28
    4d6a:	df 93       	push	r29
    4d6c:	00 d0       	rcall	.+0      	; 0x4d6e <f_truncate+0x12>
    4d6e:	cd b7       	in	r28, 0x3d	; 61
    4d70:	de b7       	in	r29, 0x3e	; 62
    4d72:	6c 01       	movw	r12, r24
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(fp, &fs);	/* Check validity of the object */
    4d74:	be 01       	movw	r22, r28
    4d76:	6f 5f       	subi	r22, 0xFF	; 255
    4d78:	7f 4f       	sbci	r23, 0xFF	; 255
    4d7a:	0e 94 15 0a 	call	0x142a	; 0x142a <validate>
    4d7e:	7c 01       	movw	r14, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    4d80:	00 97       	sbiw	r24, 0x00	; 0
    4d82:	81 f4       	brne	.+32     	; 0x4da4 <f_truncate+0x48>
    4d84:	d6 01       	movw	r26, r12
    4d86:	1f 96       	adiw	r26, 0x0f	; 15
    4d88:	ec 90       	ld	r14, X
    4d8a:	1f 97       	sbiw	r26, 0x0f	; 15
    4d8c:	ff 24       	eor	r15, r15
    4d8e:	e1 14       	cp	r14, r1
    4d90:	f1 04       	cpc	r15, r1
    4d92:	41 f4       	brne	.+16     	; 0x4da4 <f_truncate+0x48>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    4d94:	1e 96       	adiw	r26, 0x0e	; 14
    4d96:	8c 91       	ld	r24, X
    4d98:	1e 97       	sbiw	r26, 0x0e	; 14
    4d9a:	81 fd       	sbrc	r24, 1
    4d9c:	0f c0       	rjmp	.+30     	; 0x4dbc <f_truncate+0x60>
    4d9e:	67 e0       	ldi	r22, 0x07	; 7
    4da0:	e6 2e       	mov	r14, r22
    4da2:	f1 2c       	mov	r15, r1
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    4da4:	c7 01       	movw	r24, r14
    4da6:	0f 90       	pop	r0
    4da8:	0f 90       	pop	r0
    4daa:	df 91       	pop	r29
    4dac:	cf 91       	pop	r28
    4dae:	1f 91       	pop	r17
    4db0:	0f 91       	pop	r16
    4db2:	ff 90       	pop	r15
    4db4:	ef 90       	pop	r14
    4db6:	df 90       	pop	r13
    4db8:	cf 90       	pop	r12
    4dba:	08 95       	ret

	res = validate(fp, &fs);	/* Check validity of the object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */

	if (fp->obj.objsize > fp->fptr) {
    4dbc:	50 96       	adiw	r26, 0x10	; 16
    4dbe:	8d 91       	ld	r24, X+
    4dc0:	9d 91       	ld	r25, X+
    4dc2:	0d 90       	ld	r0, X+
    4dc4:	bc 91       	ld	r27, X
    4dc6:	a0 2d       	mov	r26, r0
    4dc8:	f6 01       	movw	r30, r12
    4dca:	42 85       	ldd	r20, Z+10	; 0x0a
    4dcc:	53 85       	ldd	r21, Z+11	; 0x0b
    4dce:	64 85       	ldd	r22, Z+12	; 0x0c
    4dd0:	75 85       	ldd	r23, Z+13	; 0x0d
    4dd2:	84 17       	cp	r24, r20
    4dd4:	95 07       	cpc	r25, r21
    4dd6:	a6 07       	cpc	r26, r22
    4dd8:	b7 07       	cpc	r27, r23
    4dda:	20 f7       	brcc	.-56     	; 0x4da4 <f_truncate+0x48>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    4ddc:	00 97       	sbiw	r24, 0x00	; 0
    4dde:	a1 05       	cpc	r26, r1
    4de0:	b1 05       	cpc	r27, r1
    4de2:	09 f4       	brne	.+2      	; 0x4de6 <f_truncate+0x8a>
    4de4:	4d c0       	rjmp	.+154    	; 0x4e80 <f_truncate+0x124>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
			fp->obj.sclust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
    4de6:	f6 01       	movw	r30, r12
    4de8:	44 89       	ldd	r20, Z+20	; 0x14
    4dea:	55 89       	ldd	r21, Z+21	; 0x15
    4dec:	66 89       	ldd	r22, Z+22	; 0x16
    4dee:	77 89       	ldd	r23, Z+23	; 0x17
    4df0:	80 81       	ld	r24, Z
    4df2:	91 81       	ldd	r25, Z+1	; 0x01
    4df4:	0e 94 8c 11 	call	0x2318	; 0x2318 <get_fat.isra.8>
    4df8:	ab 01       	movw	r20, r22
    4dfa:	bc 01       	movw	r22, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    4dfc:	4f 3f       	cpi	r20, 0xFF	; 255
    4dfe:	ff ef       	ldi	r31, 0xFF	; 255
    4e00:	5f 07       	cpc	r21, r31
    4e02:	ff ef       	ldi	r31, 0xFF	; 255
    4e04:	6f 07       	cpc	r22, r31
    4e06:	ff ef       	ldi	r31, 0xFF	; 255
    4e08:	7f 07       	cpc	r23, r31
    4e0a:	09 f4       	brne	.+2      	; 0x4e0e <f_truncate+0xb2>
    4e0c:	72 c0       	rjmp	.+228    	; 0x4ef2 <f_truncate+0x196>
			if (ncl == 1) res = FR_INT_ERR;
    4e0e:	41 30       	cpi	r20, 0x01	; 1
    4e10:	51 05       	cpc	r21, r1
    4e12:	61 05       	cpc	r22, r1
    4e14:	71 05       	cpc	r23, r1
    4e16:	09 f4       	brne	.+2      	; 0x4e1a <f_truncate+0xbe>
    4e18:	5b c0       	rjmp	.+182    	; 0x4ed0 <f_truncate+0x174>
			if (res == FR_OK && ncl < fs->n_fatent) {
    4e1a:	e9 81       	ldd	r30, Y+1	; 0x01
    4e1c:	fa 81       	ldd	r31, Y+2	; 0x02
    4e1e:	83 89       	ldd	r24, Z+19	; 0x13
    4e20:	94 89       	ldd	r25, Z+20	; 0x14
    4e22:	a5 89       	ldd	r26, Z+21	; 0x15
    4e24:	b6 89       	ldd	r27, Z+22	; 0x16
    4e26:	48 17       	cp	r20, r24
    4e28:	59 07       	cpc	r21, r25
    4e2a:	6a 07       	cpc	r22, r26
    4e2c:	7b 07       	cpc	r23, r27
    4e2e:	08 f4       	brcc	.+2      	; 0x4e32 <f_truncate+0xd6>
    4e30:	65 c0       	rjmp	.+202    	; 0x4efc <f_truncate+0x1a0>
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
    4e32:	f6 01       	movw	r30, r12
    4e34:	80 89       	ldd	r24, Z+16	; 0x10
    4e36:	91 89       	ldd	r25, Z+17	; 0x11
    4e38:	a2 89       	ldd	r26, Z+18	; 0x12
    4e3a:	b3 89       	ldd	r27, Z+19	; 0x13
    4e3c:	82 87       	std	Z+10, r24	; 0x0a
    4e3e:	93 87       	std	Z+11, r25	; 0x0b
    4e40:	a4 87       	std	Z+12, r26	; 0x0c
    4e42:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA_MODIFIED;
    4e44:	86 85       	ldd	r24, Z+14	; 0x0e
    4e46:	80 64       	ori	r24, 0x40	; 64
    4e48:	86 87       	std	Z+14, r24	; 0x0e
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
    4e4a:	87 ff       	sbrs	r24, 7
    4e4c:	ab cf       	rjmp	.-170    	; 0x4da4 <f_truncate+0x48>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
    4e4e:	e9 81       	ldd	r30, Y+1	; 0x01
    4e50:	fa 81       	ldd	r31, Y+2	; 0x02
    4e52:	b6 01       	movw	r22, r12
    4e54:	6e 5d       	subi	r22, 0xDE	; 222
    4e56:	7f 4f       	sbci	r23, 0xFF	; 255
    4e58:	d6 01       	movw	r26, r12
    4e5a:	58 96       	adiw	r26, 0x18	; 24
    4e5c:	2d 91       	ld	r18, X+
    4e5e:	3d 91       	ld	r19, X+
    4e60:	4d 91       	ld	r20, X+
    4e62:	5c 91       	ld	r21, X
    4e64:	5b 97       	sbiw	r26, 0x1b	; 27
    4e66:	81 81       	ldd	r24, Z+1	; 0x01
    4e68:	01 e0       	ldi	r16, 0x01	; 1
    4e6a:	10 e0       	ldi	r17, 0x00	; 0
    4e6c:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <disk_write>
    4e70:	00 97       	sbiw	r24, 0x00	; 0
    4e72:	09 f0       	breq	.+2      	; 0x4e76 <f_truncate+0x11a>
    4e74:	4f c0       	rjmp	.+158    	; 0x4f14 <f_truncate+0x1b8>
				res = FR_DISK_ERR;
			} else {
				fp->flag &= ~FA_DIRTY;
    4e76:	f6 01       	movw	r30, r12
    4e78:	86 85       	ldd	r24, Z+14	; 0x0e
    4e7a:	8f 77       	andi	r24, 0x7F	; 127
    4e7c:	86 87       	std	Z+14, r24	; 0x0e
    4e7e:	92 cf       	rjmp	.-220    	; 0x4da4 <f_truncate+0x48>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */

	if (fp->obj.objsize > fp->fptr) {
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
    4e80:	46 81       	ldd	r20, Z+6	; 0x06
    4e82:	57 81       	ldd	r21, Z+7	; 0x07
    4e84:	60 85       	ldd	r22, Z+8	; 0x08
    4e86:	71 85       	ldd	r23, Z+9	; 0x09
    4e88:	c6 01       	movw	r24, r12
    4e8a:	00 e0       	ldi	r16, 0x00	; 0
    4e8c:	10 e0       	ldi	r17, 0x00	; 0
    4e8e:	98 01       	movw	r18, r16
    4e90:	0e 94 42 16 	call	0x2c84	; 0x2c84 <remove_chain>
    4e94:	9c 01       	movw	r18, r24
			fp->obj.sclust = 0;
    4e96:	d6 01       	movw	r26, r12
    4e98:	16 96       	adiw	r26, 0x06	; 6
    4e9a:	1d 92       	st	X+, r1
    4e9c:	1d 92       	st	X+, r1
    4e9e:	1d 92       	st	X+, r1
    4ea0:	1c 92       	st	X, r1
    4ea2:	19 97       	sbiw	r26, 0x09	; 9
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
    4ea4:	f6 01       	movw	r30, r12
    4ea6:	80 89       	ldd	r24, Z+16	; 0x10
    4ea8:	91 89       	ldd	r25, Z+17	; 0x11
    4eaa:	a2 89       	ldd	r26, Z+18	; 0x12
    4eac:	b3 89       	ldd	r27, Z+19	; 0x13
    4eae:	82 87       	std	Z+10, r24	; 0x0a
    4eb0:	93 87       	std	Z+11, r25	; 0x0b
    4eb2:	a4 87       	std	Z+12, r26	; 0x0c
    4eb4:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA_MODIFIED;
    4eb6:	86 85       	ldd	r24, Z+14	; 0x0e
    4eb8:	80 64       	ori	r24, 0x40	; 64
    4eba:	86 87       	std	Z+14, r24	; 0x0e
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
    4ebc:	21 15       	cp	r18, r1
    4ebe:	31 05       	cpc	r19, r1
    4ec0:	21 f2       	breq	.-120    	; 0x4e4a <f_truncate+0xee>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
				res = FR_DISK_ERR;
			} else {
				fp->flag &= ~FA_DIRTY;
    4ec2:	42 2f       	mov	r20, r18
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
		fp->flag |= FA_MODIFIED;
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
    4ec4:	79 01       	movw	r14, r18
			} else {
				fp->flag &= ~FA_DIRTY;
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
    4ec6:	d6 01       	movw	r26, r12
    4ec8:	1f 96       	adiw	r26, 0x0f	; 15
    4eca:	4c 93       	st	X, r20
    4ecc:	1f 97       	sbiw	r26, 0x0f	; 15
    4ece:	6a cf       	rjmp	.-300    	; 0x4da4 <f_truncate+0x48>
			fp->obj.sclust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (ncl == 1) res = FR_INT_ERR;
    4ed0:	42 e0       	ldi	r20, 0x02	; 2
    4ed2:	32 e0       	ldi	r19, 0x02	; 2
    4ed4:	e3 2e       	mov	r14, r19
    4ed6:	f1 2c       	mov	r15, r1
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
    4ed8:	f6 01       	movw	r30, r12
    4eda:	80 89       	ldd	r24, Z+16	; 0x10
    4edc:	91 89       	ldd	r25, Z+17	; 0x11
    4ede:	a2 89       	ldd	r26, Z+18	; 0x12
    4ee0:	b3 89       	ldd	r27, Z+19	; 0x13
    4ee2:	82 87       	std	Z+10, r24	; 0x0a
    4ee4:	93 87       	std	Z+11, r25	; 0x0b
    4ee6:	a4 87       	std	Z+12, r26	; 0x0c
    4ee8:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA_MODIFIED;
    4eea:	86 85       	ldd	r24, Z+14	; 0x0e
    4eec:	80 64       	ori	r24, 0x40	; 64
    4eee:	86 87       	std	Z+14, r24	; 0x0e
    4ef0:	ea cf       	rjmp	.-44     	; 0x4ec6 <f_truncate+0x16a>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
			fp->obj.sclust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    4ef2:	41 e0       	ldi	r20, 0x01	; 1
    4ef4:	51 e0       	ldi	r21, 0x01	; 1
    4ef6:	e5 2e       	mov	r14, r21
    4ef8:	f1 2c       	mov	r15, r1
    4efa:	ee cf       	rjmp	.-36     	; 0x4ed8 <f_truncate+0x17c>
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
    4efc:	d6 01       	movw	r26, r12
    4efe:	54 96       	adiw	r26, 0x14	; 20
    4f00:	0d 91       	ld	r16, X+
    4f02:	1d 91       	ld	r17, X+
    4f04:	2d 91       	ld	r18, X+
    4f06:	3c 91       	ld	r19, X
    4f08:	57 97       	sbiw	r26, 0x17	; 23
    4f0a:	c6 01       	movw	r24, r12
    4f0c:	0e 94 42 16 	call	0x2c84	; 0x2c84 <remove_chain>
    4f10:	9c 01       	movw	r18, r24
    4f12:	c8 cf       	rjmp	.-112    	; 0x4ea4 <f_truncate+0x148>
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
		fp->flag |= FA_MODIFIED;
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
    4f14:	41 e0       	ldi	r20, 0x01	; 1
				res = FR_DISK_ERR;
    4f16:	71 e0       	ldi	r23, 0x01	; 1
    4f18:	e7 2e       	mov	r14, r23
    4f1a:	f1 2c       	mov	r15, r1
    4f1c:	d4 cf       	rjmp	.-88     	; 0x4ec6 <f_truncate+0x16a>

00004f1e <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    4f1e:	cf 92       	push	r12
    4f20:	df 92       	push	r13
    4f22:	ef 92       	push	r14
    4f24:	ff 92       	push	r15
    4f26:	0f 93       	push	r16
    4f28:	1f 93       	push	r17
    4f2a:	cf 93       	push	r28
    4f2c:	df 93       	push	r29
    4f2e:	cd b7       	in	r28, 0x3d	; 61
    4f30:	de b7       	in	r29, 0x3e	; 62
    4f32:	c4 55       	subi	r28, 0x54	; 84
    4f34:	d0 40       	sbci	r29, 0x00	; 0
    4f36:	0f b6       	in	r0, 0x3f	; 63
    4f38:	f8 94       	cli
    4f3a:	de bf       	out	0x3e, r29	; 62
    4f3c:	0f be       	out	0x3f, r0	; 63
    4f3e:	cd bf       	out	0x3d, r28	; 61
    4f40:	65 96       	adiw	r28, 0x15	; 21
    4f42:	9f af       	sts	0x7f, r25
    4f44:	8e af       	sts	0x7e, r24
    4f46:	65 97       	sbiw	r28, 0x15	; 21
#endif
	DEF_NAMBUF


	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
    4f48:	ce 01       	movw	r24, r28
    4f4a:	8d 5a       	subi	r24, 0xAD	; 173
    4f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f4e:	be 01       	movw	r22, r28
    4f50:	6f 5f       	subi	r22, 0xFF	; 255
    4f52:	7f 4f       	sbci	r23, 0xFF	; 255
    4f54:	42 e0       	ldi	r20, 0x02	; 2
    4f56:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <find_volume>
	dj.obj.fs = fs;
    4f5a:	29 81       	ldd	r18, Y+1	; 0x01
    4f5c:	3a 81       	ldd	r19, Y+2	; 0x02
    4f5e:	3c a7       	lds	r19, 0x7c
    4f60:	2b a7       	lds	r18, 0x7b
	if (res == FR_OK) {
    4f62:	00 97       	sbiw	r24, 0x00	; 0
    4f64:	81 f0       	breq	.+32     	; 0x4f86 <f_unlink+0x68>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    4f66:	cc 5a       	subi	r28, 0xAC	; 172
    4f68:	df 4f       	sbci	r29, 0xFF	; 255
    4f6a:	0f b6       	in	r0, 0x3f	; 63
    4f6c:	f8 94       	cli
    4f6e:	de bf       	out	0x3e, r29	; 62
    4f70:	0f be       	out	0x3f, r0	; 63
    4f72:	cd bf       	out	0x3d, r28	; 61
    4f74:	df 91       	pop	r29
    4f76:	cf 91       	pop	r28
    4f78:	1f 91       	pop	r17
    4f7a:	0f 91       	pop	r16
    4f7c:	ff 90       	pop	r15
    4f7e:	ef 90       	pop	r14
    4f80:	df 90       	pop	r13
    4f82:	cf 90       	pop	r12
    4f84:	08 95       	ret
	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
    4f86:	65 96       	adiw	r28, 0x15	; 21
    4f88:	6e ad       	sts	0x6e, r22
    4f8a:	7f ad       	sts	0x6f, r23
    4f8c:	65 97       	sbiw	r28, 0x15	; 21
    4f8e:	ce 01       	movw	r24, r28
    4f90:	8b 96       	adiw	r24, 0x2b	; 43
    4f92:	0e 94 42 18 	call	0x3084	; 0x3084 <follow_path>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    4f96:	00 97       	sbiw	r24, 0x00	; 0
    4f98:	31 f7       	brne	.-52     	; 0x4f66 <f_unlink+0x48>
			if (dj.fn[NSFLAG] & NS_NONAME) {
    4f9a:	63 96       	adiw	r28, 0x13	; 19
    4f9c:	8f ad       	sts	0x6f, r24
    4f9e:	63 97       	sbiw	r28, 0x13	; 19
    4fa0:	87 fd       	sbrc	r24, 7
    4fa2:	06 c0       	rjmp	.+12     	; 0x4fb0 <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    4fa4:	4f a5       	lds	r20, 0x6f
    4fa6:	40 ff       	sbrs	r20, 0
    4fa8:	06 c0       	rjmp	.+12     	; 0x4fb6 <f_unlink+0x98>
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = dir_read(&sdj, 0);			/* Read an item */
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    4faa:	87 e0       	ldi	r24, 0x07	; 7
    4fac:	90 e0       	ldi	r25, 0x00	; 0
    4fae:	db cf       	rjmp	.-74     	; 0x4f66 <f_unlink+0x48>
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    4fb0:	86 e0       	ldi	r24, 0x06	; 6
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	d8 cf       	rjmp	.-80     	; 0x4f66 <f_unlink+0x48>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    4fb6:	69 81       	ldd	r22, Y+1	; 0x01
    4fb8:	7a 81       	ldd	r23, Y+2	; 0x02
    4fba:	27 96       	adiw	r28, 0x07	; 7
    4fbc:	ee ad       	sts	0x6e, r30
    4fbe:	ff ad       	sts	0x6f, r31
    4fc0:	27 97       	sbiw	r28, 0x07	; 7
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4fc2:	33 8d       	ldd	r19, Z+27	; 0x1b
    4fc4:	20 e0       	ldi	r18, 0x00	; 0
    4fc6:	82 8d       	ldd	r24, Z+26	; 0x1a
    4fc8:	90 e0       	ldi	r25, 0x00	; 0
    4fca:	82 2b       	or	r24, r18
    4fcc:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    4fce:	6c 01       	movw	r12, r24
    4fd0:	ee 24       	eor	r14, r14
    4fd2:	ff 24       	eor	r15, r15
	if (fs->fs_type == FS_FAT32) {
    4fd4:	db 01       	movw	r26, r22
    4fd6:	8c 91       	ld	r24, X
    4fd8:	83 30       	cpi	r24, 0x03	; 3
    4fda:	79 f4       	brne	.+30     	; 0x4ffa <f_unlink+0xdc>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    4fdc:	35 89       	ldd	r19, Z+21	; 0x15
    4fde:	20 e0       	ldi	r18, 0x00	; 0
    4fe0:	84 89       	ldd	r24, Z+20	; 0x14
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	82 2b       	or	r24, r18
    4fe6:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    4fe8:	a0 e0       	ldi	r26, 0x00	; 0
    4fea:	b0 e0       	ldi	r27, 0x00	; 0
    4fec:	dc 01       	movw	r26, r24
    4fee:	99 27       	eor	r25, r25
    4ff0:	88 27       	eor	r24, r24
    4ff2:	c8 2a       	or	r12, r24
    4ff4:	d9 2a       	or	r13, r25
    4ff6:	ea 2a       	or	r14, r26
    4ff8:	fb 2a       	or	r15, r27
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
    4ffa:	44 fd       	sbrc	r20, 4
    4ffc:	23 c0       	rjmp	.+70     	; 0x5044 <f_unlink+0x126>
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    4ffe:	0b a5       	lds	r16, 0x6b
    5000:	1c a5       	lds	r17, 0x6c
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
    5002:	25 96       	adiw	r28, 0x05	; 5
    5004:	4c ad       	sts	0x6c, r20
    5006:	5d ad       	sts	0x6d, r21
    5008:	6e ad       	sts	0x6e, r22
    500a:	7f ad       	sts	0x6f, r23
    500c:	25 97       	sbiw	r28, 0x05	; 5
    500e:	c8 01       	movw	r24, r16
    5010:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
	if (res == FR_OK) {
    5014:	00 97       	sbiw	r24, 0x00	; 0
    5016:	09 f0       	breq	.+2      	; 0x501a <f_unlink+0xfc>
    5018:	a6 cf       	rjmp	.-180    	; 0x4f66 <f_unlink+0x48>
		dp->dir[DIR_Name] = DDEM;
    501a:	27 96       	adiw	r28, 0x07	; 7
    501c:	ee ad       	sts	0x6e, r30
    501e:	ff ad       	sts	0x6f, r31
    5020:	27 97       	sbiw	r28, 0x07	; 7
    5022:	85 ee       	ldi	r24, 0xE5	; 229
    5024:	80 83       	st	Z, r24
		fs->wflag = 1;
    5026:	81 e0       	ldi	r24, 0x01	; 1
    5028:	d8 01       	movw	r26, r16
    502a:	13 96       	adiw	r26, 0x03	; 3
    502c:	8c 93       	st	X, r24
    502e:	13 97       	sbiw	r26, 0x03	; 3
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
    5030:	c1 14       	cp	r12, r1
    5032:	d1 04       	cpc	r13, r1
    5034:	e1 04       	cpc	r14, r1
    5036:	f1 04       	cpc	r15, r1
    5038:	e9 f4       	brne	.+58     	; 0x5074 <f_unlink+0x156>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    503a:	89 81       	ldd	r24, Y+1	; 0x01
    503c:	9a 81       	ldd	r25, Y+2	; 0x02
    503e:	0e 94 55 0b 	call	0x16aa	; 0x16aa <sync_fs>
    5042:	91 cf       	rjmp	.-222    	; 0x4f66 <f_unlink+0x48>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
    5044:	7c 83       	std	Y+4, r23	; 0x04
    5046:	6b 83       	std	Y+3, r22	; 0x03
						sdj.obj.sclust = dclst;
    5048:	c9 86       	std	Y+9, r12	; 0x09
    504a:	da 86       	std	Y+10, r13	; 0x0a
    504c:	eb 86       	std	Y+11, r14	; 0x0b
    504e:	fc 86       	std	Y+12, r15	; 0x0c
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    5050:	ce 01       	movw	r24, r28
    5052:	03 96       	adiw	r24, 0x03	; 3
    5054:	0e 94 24 17 	call	0x2e48	; 0x2e48 <dir_sdi.constprop.11>
						if (res == FR_OK) {
    5058:	00 97       	sbiw	r24, 0x00	; 0
    505a:	09 f0       	breq	.+2      	; 0x505e <f_unlink+0x140>
    505c:	84 cf       	rjmp	.-248    	; 0x4f66 <f_unlink+0x48>
							res = dir_read(&sdj, 0);			/* Read an item */
    505e:	ce 01       	movw	r24, r28
    5060:	03 96       	adiw	r24, 0x03	; 3
    5062:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <dir_read.constprop.10>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    5066:	00 97       	sbiw	r24, 0x00	; 0
    5068:	09 f4       	brne	.+2      	; 0x506c <f_unlink+0x14e>
    506a:	9f cf       	rjmp	.-194    	; 0x4faa <f_unlink+0x8c>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    506c:	84 30       	cpi	r24, 0x04	; 4
    506e:	91 05       	cpc	r25, r1
    5070:	31 f2       	breq	.-116    	; 0x4ffe <f_unlink+0xe0>
    5072:	79 cf       	rjmp	.-270    	; 0x4f66 <f_unlink+0x48>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    5074:	ce 01       	movw	r24, r28
    5076:	8b 96       	adiw	r24, 0x2b	; 43
    5078:	b7 01       	movw	r22, r14
    507a:	a6 01       	movw	r20, r12
    507c:	00 e0       	ldi	r16, 0x00	; 0
    507e:	10 e0       	ldi	r17, 0x00	; 0
    5080:	98 01       	movw	r18, r16
    5082:	0e 94 42 16 	call	0x2c84	; 0x2c84 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    5086:	00 97       	sbiw	r24, 0x00	; 0
    5088:	09 f0       	breq	.+2      	; 0x508c <f_unlink+0x16e>
    508a:	6d cf       	rjmp	.-294    	; 0x4f66 <f_unlink+0x48>
    508c:	d6 cf       	rjmp	.-84     	; 0x503a <f_unlink+0x11c>

0000508e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    508e:	2f 92       	push	r2
    5090:	3f 92       	push	r3
    5092:	4f 92       	push	r4
    5094:	5f 92       	push	r5
    5096:	6f 92       	push	r6
    5098:	7f 92       	push	r7
    509a:	8f 92       	push	r8
    509c:	9f 92       	push	r9
    509e:	af 92       	push	r10
    50a0:	bf 92       	push	r11
    50a2:	cf 92       	push	r12
    50a4:	df 92       	push	r13
    50a6:	ef 92       	push	r14
    50a8:	ff 92       	push	r15
    50aa:	0f 93       	push	r16
    50ac:	1f 93       	push	r17
    50ae:	cf 93       	push	r28
    50b0:	df 93       	push	r29
    50b2:	cd b7       	in	r28, 0x3d	; 61
    50b4:	de b7       	in	r29, 0x3e	; 62
    50b6:	e1 97       	sbiw	r28, 0x31	; 49
    50b8:	0f b6       	in	r0, 0x3f	; 63
    50ba:	f8 94       	cli
    50bc:	de bf       	out	0x3e, r29	; 62
    50be:	0f be       	out	0x3f, r0	; 63
    50c0:	cd bf       	out	0x3d, r28	; 61
    50c2:	9c a7       	lds	r25, 0x7c
    50c4:	8b a7       	lds	r24, 0x7b
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
    50c6:	ce 01       	movw	r24, r28
    50c8:	8b 96       	adiw	r24, 0x2b	; 43
    50ca:	be 01       	movw	r22, r28
    50cc:	6f 5f       	subi	r22, 0xFF	; 255
    50ce:	7f 4f       	sbci	r23, 0xFF	; 255
    50d0:	42 e0       	ldi	r20, 0x02	; 2
    50d2:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <find_volume>
    50d6:	7c 01       	movw	r14, r24
	dj.obj.fs = fs;
    50d8:	89 81       	ldd	r24, Y+1	; 0x01
    50da:	9a 81       	ldd	r25, Y+2	; 0x02
    50dc:	9c 83       	std	Y+4, r25	; 0x04
    50de:	8b 83       	std	Y+3, r24	; 0x03
	if (res == FR_OK) {
    50e0:	e1 14       	cp	r14, r1
    50e2:	f1 04       	cpc	r15, r1
    50e4:	d1 f0       	breq	.+52     	; 0x511a <f_mkdir+0x8c>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    50e6:	c7 01       	movw	r24, r14
    50e8:	e1 96       	adiw	r28, 0x31	; 49
    50ea:	0f b6       	in	r0, 0x3f	; 63
    50ec:	f8 94       	cli
    50ee:	de bf       	out	0x3e, r29	; 62
    50f0:	0f be       	out	0x3f, r0	; 63
    50f2:	cd bf       	out	0x3d, r28	; 61
    50f4:	df 91       	pop	r29
    50f6:	cf 91       	pop	r28
    50f8:	1f 91       	pop	r17
    50fa:	0f 91       	pop	r16
    50fc:	ff 90       	pop	r15
    50fe:	ef 90       	pop	r14
    5100:	df 90       	pop	r13
    5102:	cf 90       	pop	r12
    5104:	bf 90       	pop	r11
    5106:	af 90       	pop	r10
    5108:	9f 90       	pop	r9
    510a:	8f 90       	pop	r8
    510c:	7f 90       	pop	r7
    510e:	6f 90       	pop	r6
    5110:	5f 90       	pop	r5
    5112:	4f 90       	pop	r4
    5114:	3f 90       	pop	r3
    5116:	2f 90       	pop	r2
    5118:	08 95       	ret
	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
    511a:	6b a5       	lds	r22, 0x6b
    511c:	7c a5       	lds	r23, 0x6c
    511e:	ce 01       	movw	r24, r28
    5120:	03 96       	adiw	r24, 0x03	; 3
    5122:	0e 94 42 18 	call	0x3084	; 0x3084 <follow_path>
    5126:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    5128:	00 97       	sbiw	r24, 0x00	; 0
    512a:	b9 f1       	breq	.+110    	; 0x519a <f_mkdir+0x10c>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
    512c:	84 30       	cpi	r24, 0x04	; 4
    512e:	91 05       	cpc	r25, r1
    5130:	d1 f6       	brne	.-76     	; 0x50e6 <f_mkdir+0x58>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
    5132:	ce 01       	movw	r24, r28
    5134:	03 96       	adiw	r24, 0x03	; 3
    5136:	40 e0       	ldi	r20, 0x00	; 0
    5138:	50 e0       	ldi	r21, 0x00	; 0
    513a:	ba 01       	movw	r22, r20
    513c:	0e 94 6d 13 	call	0x26da	; 0x26da <create_chain>
    5140:	6d a7       	lds	r22, 0x7d
    5142:	7e a7       	lds	r23, 0x7e
    5144:	8f a7       	lds	r24, 0x7f
    5146:	98 ab       	sts	0x58, r25
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
    5148:	e9 81       	ldd	r30, Y+1	; 0x01
    514a:	fa 81       	ldd	r31, Y+2	; 0x02
    514c:	81 85       	ldd	r24, Z+9	; 0x09
    514e:	92 85       	ldd	r25, Z+10	; 0x0a
    5150:	a0 e0       	ldi	r26, 0x00	; 0
    5152:	b0 e0       	ldi	r27, 0x00	; 0
    5154:	19 e0       	ldi	r17, 0x09	; 9
    5156:	88 0f       	add	r24, r24
    5158:	99 1f       	adc	r25, r25
    515a:	aa 1f       	adc	r26, r26
    515c:	bb 1f       	adc	r27, r27
    515e:	1a 95       	dec	r17
    5160:	d1 f7       	brne	.-12     	; 0x5156 <f_mkdir+0xc8>
    5162:	8d 87       	std	Y+13, r24	; 0x0d
    5164:	9e 87       	std	Y+14, r25	; 0x0e
    5166:	af 87       	std	Y+15, r26	; 0x0f
    5168:	b8 8b       	std	Y+16, r27	; 0x10
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    516a:	0d a5       	lds	r16, 0x6d
    516c:	1e a5       	lds	r17, 0x6e
    516e:	2f a5       	lds	r18, 0x6f
    5170:	38 a9       	sts	0x48, r19
    5172:	01 15       	cp	r16, r1
    5174:	11 05       	cpc	r17, r1
    5176:	21 05       	cpc	r18, r1
    5178:	31 05       	cpc	r19, r1
    517a:	99 f4       	brne	.+38     	; 0x51a2 <f_mkdir+0x114>
    517c:	97 e0       	ldi	r25, 0x07	; 7
    517e:	e9 2e       	mov	r14, r25
    5180:	f1 2c       	mov	r15, r1
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
					fs->wflag = 1;
				}
				if (res == FR_OK) res = sync_fs(fs);
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
    5182:	ce 01       	movw	r24, r28
    5184:	03 96       	adiw	r24, 0x03	; 3
    5186:	4d a5       	lds	r20, 0x6d
    5188:	5e a5       	lds	r21, 0x6e
    518a:	6f a5       	lds	r22, 0x6f
    518c:	78 a9       	sts	0x48, r23
    518e:	00 e0       	ldi	r16, 0x00	; 0
    5190:	10 e0       	ldi	r17, 0x00	; 0
    5192:	98 01       	movw	r18, r16
    5194:	0e 94 42 16 	call	0x2c84	; 0x2c84 <remove_chain>
    5198:	a6 cf       	rjmp	.-180    	; 0x50e6 <f_mkdir+0x58>
	res = find_volume(&path, &fs, FA_WRITE);
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    519a:	28 e0       	ldi	r18, 0x08	; 8
    519c:	e2 2e       	mov	r14, r18
    519e:	f1 2c       	mov	r15, r1
    51a0:	a2 cf       	rjmp	.-188    	; 0x50e6 <f_mkdir+0x58>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    51a2:	01 30       	cpi	r16, 0x01	; 1
    51a4:	11 05       	cpc	r17, r1
    51a6:	21 05       	cpc	r18, r1
    51a8:	31 05       	cpc	r19, r1
    51aa:	21 f4       	brne	.+8      	; 0x51b4 <f_mkdir+0x126>
    51ac:	82 e0       	ldi	r24, 0x02	; 2
    51ae:	e8 2e       	mov	r14, r24
    51b0:	f1 2c       	mov	r15, r1
    51b2:	e7 cf       	rjmp	.-50     	; 0x5182 <f_mkdir+0xf4>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    51b4:	0f 3f       	cpi	r16, 0xFF	; 255
    51b6:	4f ef       	ldi	r20, 0xFF	; 255
    51b8:	14 07       	cpc	r17, r20
    51ba:	4f ef       	ldi	r20, 0xFF	; 255
    51bc:	24 07       	cpc	r18, r20
    51be:	4f ef       	ldi	r20, 0xFF	; 255
    51c0:	34 07       	cpc	r19, r20
    51c2:	21 f4       	brne	.+8      	; 0x51cc <f_mkdir+0x13e>
    51c4:	01 e0       	ldi	r16, 0x01	; 1
    51c6:	e0 2e       	mov	r14, r16
    51c8:	f1 2c       	mov	r15, r1
    51ca:	db cf       	rjmp	.-74     	; 0x5182 <f_mkdir+0xf4>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
    51cc:	cf 01       	movw	r24, r30
    51ce:	0e 94 ed 0a 	call	0x15da	; 0x15da <sync_window>
    51d2:	7c 01       	movw	r14, r24
			tm = GET_FATTIME();
			if (res == FR_OK) {					/* Initialize the new directory table */
    51d4:	00 97       	sbiw	r24, 0x00	; 0
    51d6:	a9 f6       	brne	.-86     	; 0x5182 <f_mkdir+0xf4>
				dsc = clust2sect(fs, dcl);
    51d8:	e9 80       	ldd	r14, Y+1	; 0x01
    51da:	fa 80       	ldd	r15, Y+2	; 0x02
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    51dc:	8d a4       	lds	r24, 0xad
    51de:	9e a4       	lds	r25, 0xae
    51e0:	af a4       	lds	r26, 0xaf
    51e2:	b8 a8       	sts	0x88, r27
    51e4:	8e ef       	ldi	r24, 0xFE	; 254
    51e6:	9f ef       	ldi	r25, 0xFF	; 255
    51e8:	af ef       	ldi	r26, 0xFF	; 255
    51ea:	bf ef       	ldi	r27, 0xFF	; 255
    51ec:	88 0e       	add	r8, r24
    51ee:	99 1e       	adc	r9, r25
    51f0:	aa 1e       	adc	r10, r26
    51f2:	bb 1e       	adc	r11, r27
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    51f4:	f7 01       	movw	r30, r14
    51f6:	83 89       	ldd	r24, Z+19	; 0x13
    51f8:	94 89       	ldd	r25, Z+20	; 0x14
    51fa:	a5 89       	ldd	r26, Z+21	; 0x15
    51fc:	b6 89       	ldd	r27, Z+22	; 0x16
    51fe:	02 97       	sbiw	r24, 0x02	; 2
    5200:	a1 09       	sbc	r26, r1
    5202:	b1 09       	sbc	r27, r1
    5204:	88 16       	cp	r8, r24
    5206:	99 06       	cpc	r9, r25
    5208:	aa 06       	cpc	r10, r26
    520a:	bb 06       	cpc	r11, r27
    520c:	08 f0       	brcs	.+2      	; 0x5210 <f_mkdir+0x182>
    520e:	e4 c0       	rjmp	.+456    	; 0x53d8 <f_mkdir+0x34a>
	return clst * fs->csize + fs->database;
    5210:	21 85       	ldd	r18, Z+9	; 0x09
    5212:	32 85       	ldd	r19, Z+10	; 0x0a
    5214:	40 e0       	ldi	r20, 0x00	; 0
    5216:	50 e0       	ldi	r21, 0x00	; 0
    5218:	c5 01       	movw	r24, r10
    521a:	b4 01       	movw	r22, r8
    521c:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__mulsi3>
    5220:	2b 01       	movw	r4, r22
    5222:	3c 01       	movw	r6, r24
    5224:	f7 01       	movw	r30, r14
    5226:	87 a1       	lds	r24, 0x47
    5228:	90 a5       	lds	r25, 0x60
    522a:	a1 a5       	lds	r26, 0x61
    522c:	b2 a5       	lds	r27, 0x62
    522e:	48 0e       	add	r4, r24
    5230:	59 1e       	adc	r5, r25
    5232:	6a 1e       	adc	r6, r26
    5234:	7b 1e       	adc	r7, r27
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
			tm = GET_FATTIME();
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(fs, dcl);
				dir = fs->win;
    5236:	af e2       	ldi	r26, 0x2F	; 47
    5238:	ca 2e       	mov	r12, r26
    523a:	d1 2c       	mov	r13, r1
    523c:	ce 0c       	add	r12, r14
    523e:	df 1c       	adc	r13, r15

/*-----------------------------------------------------------------------*/
/* Create a Directory                                                    */
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
    5240:	87 01       	movw	r16, r14
    5242:	01 5d       	subi	r16, 0xD1	; 209
    5244:	1d 4f       	sbci	r17, 0xFD	; 253
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    5246:	f6 01       	movw	r30, r12

	do *d++ = (BYTE)val; while (--cnt);
    5248:	11 92       	st	Z+, r1
    524a:	e0 17       	cp	r30, r16
    524c:	f1 07       	cpc	r31, r17
    524e:	e1 f7       	brne	.-8      	; 0x5248 <f_mkdir+0x1ba>

/*-----------------------------------------------------------------------*/
/* Create a Directory                                                    */
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
    5250:	c6 01       	movw	r24, r12
    5252:	0b 96       	adiw	r24, 0x0b	; 11
    5254:	f6 01       	movw	r30, r12
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    5256:	20 e2       	ldi	r18, 0x20	; 32
    5258:	21 93       	st	Z+, r18
    525a:	e8 17       	cp	r30, r24
    525c:	f9 07       	cpc	r31, r25
    525e:	e1 f7       	brne	.-8      	; 0x5258 <f_mkdir+0x1ca>
				dsc = clust2sect(fs, dcl);
				dir = fs->win;
				mem_set(dir, 0, SS(fs));
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
					dir[DIR_Name] = '.';
    5260:	8e e2       	ldi	r24, 0x2E	; 46
    5262:	d7 01       	movw	r26, r14
    5264:	9f 96       	adiw	r26, 0x2f	; 47
    5266:	8c 93       	st	X, r24
    5268:	9f 97       	sbiw	r26, 0x2f	; 47
					dir[DIR_Attr] = AM_DIR;
    526a:	80 e1       	ldi	r24, 0x10	; 16
    526c:	da 96       	adiw	r26, 0x3a	; 58
    526e:	8c 93       	st	X, r24
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    5270:	f7 01       	movw	r30, r14
    5272:	eb 5b       	subi	r30, 0xBB	; 187
    5274:	ff 4f       	sbci	r31, 0xFF	; 255
    5276:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    5278:	f7 01       	movw	r30, r14
    527a:	ea 5b       	subi	r30, 0xBA	; 186
    527c:	ff 4f       	sbci	r31, 0xFF	; 255
    527e:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    5280:	f7 01       	movw	r30, r14
    5282:	e9 5b       	subi	r30, 0xB9	; 185
    5284:	ff 4f       	sbci	r31, 0xFF	; 255
    5286:	81 e2       	ldi	r24, 0x21	; 33
    5288:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    528a:	f7 01       	movw	r30, r14
    528c:	e8 5b       	subi	r30, 0xB8	; 184
    528e:	ff 4f       	sbci	r31, 0xFF	; 255
    5290:	88 e4       	ldi	r24, 0x48	; 72
    5292:	80 83       	st	Z, r24
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
					dir[DIR_Name] = '.';
					dir[DIR_Attr] = AM_DIR;
					st_dword(dir + DIR_ModTime, tm);
					st_clust(fs, dir, dcl);
    5294:	a9 81       	ldd	r26, Y+1	; 0x01
    5296:	ba 81       	ldd	r27, Y+2	; 0x02

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    5298:	2d a4       	lds	r18, 0xad
    529a:	f7 01       	movw	r30, r14
    529c:	e7 5b       	subi	r30, 0xB7	; 183
    529e:	ff 4f       	sbci	r31, 0xFF	; 255
    52a0:	20 82       	st	Z, r2
	*ptr++ = (BYTE)val;
    52a2:	3e a5       	lds	r19, 0x6e
    52a4:	39 ab       	sts	0x59, r19
    52a6:	f7 01       	movw	r30, r14
    52a8:	e6 5b       	subi	r30, 0xB6	; 182
    52aa:	ff 4f       	sbci	r31, 0xFF	; 255
    52ac:	30 83       	st	Z, r19
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    52ae:	8c 91       	ld	r24, X
    52b0:	83 30       	cpi	r24, 0x03	; 3
    52b2:	09 f4       	brne	.+2      	; 0x52b6 <f_mkdir+0x228>
    52b4:	ab c0       	rjmp	.+342    	; 0x540c <f_mkdir+0x37e>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
					dir[DIR_Name] = '.';
					dir[DIR_Attr] = AM_DIR;
					st_dword(dir + DIR_ModTime, tm);
					st_clust(fs, dir, dcl);
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
    52b6:	c7 01       	movw	r24, r14
    52b8:	81 5b       	subi	r24, 0xB1	; 177
    52ba:	9f 4f       	sbci	r25, 0xFF	; 255
    52bc:	b6 01       	movw	r22, r12
    52be:	40 e2       	ldi	r20, 0x20	; 32
    52c0:	50 e0       	ldi	r21, 0x00	; 0
    52c2:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    52c6:	f7 01       	movw	r30, r14
    52c8:	e0 5b       	subi	r30, 0xB0	; 176
    52ca:	ff 4f       	sbci	r31, 0xFF	; 255
    52cc:	8e e2       	ldi	r24, 0x2E	; 46
    52ce:	80 83       	st	Z, r24
    52d0:	49 85       	ldd	r20, Y+9	; 0x09
    52d2:	5a 85       	ldd	r21, Y+10	; 0x0a
    52d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    52d6:	7c 85       	ldd	r23, Y+12	; 0x0c
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
    52d8:	29 81       	ldd	r18, Y+1	; 0x01
    52da:	3a 81       	ldd	r19, Y+2	; 0x02
    52dc:	d9 01       	movw	r26, r18
    52de:	8c 91       	ld	r24, X
    52e0:	83 30       	cpi	r24, 0x03	; 3
    52e2:	09 f4       	brne	.+2      	; 0x52e6 <f_mkdir+0x258>
    52e4:	45 c0       	rjmp	.+138    	; 0x5370 <f_mkdir+0x2e2>
    52e6:	ca 01       	movw	r24, r20

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    52e8:	f7 01       	movw	r30, r14
    52ea:	e7 59       	subi	r30, 0x97	; 151
    52ec:	ff 4f       	sbci	r31, 0xFF	; 255
    52ee:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    52f0:	f7 01       	movw	r30, r14
    52f2:	e6 59       	subi	r30, 0x96	; 150
    52f4:	ff 4f       	sbci	r31, 0xFF	; 255
    52f6:	90 83       	st	Z, r25
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    52f8:	d9 01       	movw	r26, r18
    52fa:	8c 91       	ld	r24, X
    52fc:	83 30       	cpi	r24, 0x03	; 3
    52fe:	09 f4       	brne	.+2      	; 0x5302 <f_mkdir+0x274>
    5300:	79 c0       	rjmp	.+242    	; 0x53f4 <f_mkdir+0x366>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    5302:	f9 01       	movw	r30, r18
    5304:	81 85       	ldd	r24, Z+9	; 0x09
    5306:	92 85       	ldd	r25, Z+10	; 0x0a
    5308:	00 97       	sbiw	r24, 0x00	; 0
    530a:	09 f4       	brne	.+2      	; 0x530e <f_mkdir+0x280>
    530c:	42 c0       	rjmp	.+132    	; 0x5392 <f_mkdir+0x304>

/*-----------------------------------------------------------------------*/
/* Create a Directory                                                    */
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
    530e:	01 97       	sbiw	r24, 0x01	; 1
    5310:	4c 01       	movw	r8, r24
    5312:	aa 24       	eor	r10, r10
    5314:	bb 24       	eor	r11, r11
    5316:	08 94       	sec
    5318:	81 1c       	adc	r8, r1
    531a:	91 1c       	adc	r9, r1
    531c:	a1 1c       	adc	r10, r1
    531e:	b1 1c       	adc	r11, r1
    5320:	84 0c       	add	r8, r4
    5322:	95 1c       	adc	r9, r5
    5324:	a6 1c       	adc	r10, r6
    5326:	b7 1c       	adc	r11, r7
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					fs->winsect = dsc++;
					fs->wflag = 1;
    5328:	33 24       	eor	r3, r3
    532a:	33 94       	inc	r3
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					fs->winsect = dsc++;
    532c:	d9 01       	movw	r26, r18
    532e:	9b 96       	adiw	r26, 0x2b	; 43
    5330:	4d 92       	st	X+, r4
    5332:	5d 92       	st	X+, r5
    5334:	6d 92       	st	X+, r6
    5336:	7c 92       	st	X, r7
    5338:	9e 97       	sbiw	r26, 0x2e	; 46
    533a:	08 94       	sec
    533c:	41 1c       	adc	r4, r1
    533e:	51 1c       	adc	r5, r1
    5340:	61 1c       	adc	r6, r1
    5342:	71 1c       	adc	r7, r1
					fs->wflag = 1;
    5344:	13 96       	adiw	r26, 0x03	; 3
    5346:	3c 92       	st	X, r3
					res = sync_window(fs);
    5348:	c9 01       	movw	r24, r18
    534a:	0e 94 ed 0a 	call	0x15da	; 0x15da <sync_window>
    534e:	7c 01       	movw	r14, r24
					if (res != FR_OK) break;
    5350:	00 97       	sbiw	r24, 0x00	; 0
    5352:	09 f0       	breq	.+2      	; 0x5356 <f_mkdir+0x2c8>
    5354:	16 cf       	rjmp	.-468    	; 0x5182 <f_mkdir+0xf4>
    5356:	f6 01       	movw	r30, r12
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    5358:	11 92       	st	Z+, r1
    535a:	0e 17       	cp	r16, r30
    535c:	1f 07       	cpc	r17, r31
    535e:	e1 f7       	brne	.-8      	; 0x5358 <f_mkdir+0x2ca>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    5360:	48 14       	cp	r4, r8
    5362:	59 04       	cpc	r5, r9
    5364:	6a 04       	cpc	r6, r10
    5366:	7b 04       	cpc	r7, r11
    5368:	a1 f0       	breq	.+40     	; 0x5392 <f_mkdir+0x304>
    536a:	29 81       	ldd	r18, Y+1	; 0x01
    536c:	3a 81       	ldd	r19, Y+2	; 0x02
    536e:	de cf       	rjmp	.-68     	; 0x532c <f_mkdir+0x29e>
					dir[DIR_Attr] = AM_DIR;
					st_dword(dir + DIR_ModTime, tm);
					st_clust(fs, dir, dcl);
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
    5370:	f9 01       	movw	r30, r18
    5372:	83 a1       	lds	r24, 0x43
    5374:	94 a1       	lds	r25, 0x44
    5376:	a5 a1       	lds	r26, 0x45
    5378:	b6 a1       	lds	r27, 0x46
    537a:	84 17       	cp	r24, r20
    537c:	95 07       	cpc	r25, r21
    537e:	a6 07       	cpc	r26, r22
    5380:	b7 07       	cpc	r27, r23
    5382:	09 f0       	breq	.+2      	; 0x5386 <f_mkdir+0x2f8>
    5384:	b0 cf       	rjmp	.-160    	; 0x52e6 <f_mkdir+0x258>
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	80 e0       	ldi	r24, 0x00	; 0
    538a:	40 e0       	ldi	r20, 0x00	; 0
    538c:	50 e0       	ldi	r21, 0x00	; 0
    538e:	ba 01       	movw	r22, r20
    5390:	ab cf       	rjmp	.-170    	; 0x52e8 <f_mkdir+0x25a>
					res = sync_window(fs);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    5392:	ce 01       	movw	r24, r28
    5394:	03 96       	adiw	r24, 0x03	; 3
    5396:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <dir_register>
    539a:	7c 01       	movw	r14, r24
			if (res == FR_OK) {
    539c:	00 97       	sbiw	r24, 0x00	; 0
    539e:	09 f0       	breq	.+2      	; 0x53a2 <f_mkdir+0x314>
    53a0:	f0 ce       	rjmp	.-544    	; 0x5182 <f_mkdir+0xf4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
    53a2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    53a4:	fe 8d       	ldd	r31, Y+30	; 0x1e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    53a6:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    53a8:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    53aa:	81 e2       	ldi	r24, 0x21	; 33
    53ac:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    53ae:	88 e4       	ldi	r24, 0x48	; 72
    53b0:	81 8f       	std	Z+25, r24	; 0x19
				} else
#endif
				{
					dir = dj.dir;
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
					st_clust(fs, dir, dcl);				/* Table start cluster */
    53b2:	89 81       	ldd	r24, Y+1	; 0x01
    53b4:	9a 81       	ldd	r25, Y+2	; 0x02

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    53b6:	22 8e       	std	Z+26, r2	; 0x1a
	*ptr++ = (BYTE)val;
    53b8:	09 a9       	sts	0x49, r16
    53ba:	03 8f       	std	Z+27, r16	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    53bc:	dc 01       	movw	r26, r24
    53be:	2c 91       	ld	r18, X
    53c0:	23 30       	cpi	r18, 0x03	; 3
    53c2:	71 f0       	breq	.+28     	; 0x53e0 <f_mkdir+0x352>
#endif
				{
					dir = dj.dir;
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
					st_clust(fs, dir, dcl);				/* Table start cluster */
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
    53c4:	20 e1       	ldi	r18, 0x10	; 16
    53c6:	23 87       	std	Z+11, r18	; 0x0b
					fs->wflag = 1;
    53c8:	21 e0       	ldi	r18, 0x01	; 1
    53ca:	dc 01       	movw	r26, r24
    53cc:	13 96       	adiw	r26, 0x03	; 3
    53ce:	2c 93       	st	X, r18
				}
				if (res == FR_OK) res = sync_fs(fs);
    53d0:	0e 94 55 0b 	call	0x16aa	; 0x16aa <sync_fs>
    53d4:	7c 01       	movw	r14, r24
    53d6:	87 ce       	rjmp	.-754    	; 0x50e6 <f_mkdir+0x58>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    53d8:	44 24       	eor	r4, r4
    53da:	55 24       	eor	r5, r5
    53dc:	32 01       	movw	r6, r4
    53de:	2b cf       	rjmp	.-426    	; 0x5236 <f_mkdir+0x1a8>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    53e0:	0d a5       	lds	r16, 0x6d
    53e2:	1e a5       	lds	r17, 0x6e
    53e4:	2f a5       	lds	r18, 0x6f
    53e6:	38 a9       	sts	0x48, r19
    53e8:	a9 01       	movw	r20, r18
    53ea:	66 27       	eor	r22, r22
    53ec:	77 27       	eor	r23, r23

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    53ee:	44 8b       	std	Z+20, r20	; 0x14
	*ptr++ = (BYTE)val;
    53f0:	55 8b       	std	Z+21, r21	; 0x15
    53f2:	e8 cf       	rjmp	.-48     	; 0x53c4 <f_mkdir+0x336>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    53f4:	ab 01       	movw	r20, r22
    53f6:	66 27       	eor	r22, r22
    53f8:	77 27       	eor	r23, r23

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    53fa:	f7 01       	movw	r30, r14
    53fc:	ed 59       	subi	r30, 0x9D	; 157
    53fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5400:	40 83       	st	Z, r20
	*ptr++ = (BYTE)val;
    5402:	f7 01       	movw	r30, r14
    5404:	ec 59       	subi	r30, 0x9C	; 156
    5406:	ff 4f       	sbci	r31, 0xFF	; 255
    5408:	50 83       	st	Z, r21
    540a:	7b cf       	rjmp	.-266    	; 0x5302 <f_mkdir+0x274>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    540c:	2d a5       	lds	r18, 0x6d
    540e:	3e a5       	lds	r19, 0x6e
    5410:	4f a5       	lds	r20, 0x6f
    5412:	58 a9       	sts	0x48, r21
    5414:	ca 01       	movw	r24, r20
    5416:	aa 27       	eor	r26, r26
    5418:	bb 27       	eor	r27, r27

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    541a:	f7 01       	movw	r30, r14
    541c:	ed 5b       	subi	r30, 0xBD	; 189
    541e:	ff 4f       	sbci	r31, 0xFF	; 255
    5420:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    5422:	f7 01       	movw	r30, r14
    5424:	ec 5b       	subi	r30, 0xBC	; 188
    5426:	ff 4f       	sbci	r31, 0xFF	; 255
    5428:	90 83       	st	Z, r25
    542a:	45 cf       	rjmp	.-374    	; 0x52b6 <f_mkdir+0x228>

0000542c <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    542c:	ef 92       	push	r14
    542e:	ff 92       	push	r15
    5430:	0f 93       	push	r16
    5432:	1f 93       	push	r17
    5434:	cf 93       	push	r28
    5436:	df 93       	push	r29
    5438:	cd b7       	in	r28, 0x3d	; 61
    543a:	de b7       	in	r29, 0x3e	; 62
    543c:	ce 56       	subi	r28, 0x6E	; 110
    543e:	d0 40       	sbci	r29, 0x00	; 0
    5440:	0f b6       	in	r0, 0x3f	; 63
    5442:	f8 94       	cli
    5444:	de bf       	out	0x3e, r29	; 62
    5446:	0f be       	out	0x3f, r0	; 63
    5448:	cd bf       	out	0x3d, r28	; 61
    544a:	ad 96       	adiw	r28, 0x2d	; 45
    544c:	9f af       	sts	0x7f, r25
    544e:	8e af       	sts	0x7e, r24
    5450:	ad 97       	sbiw	r28, 0x2d	; 45
    5452:	af 96       	adiw	r28, 0x2f	; 47
    5454:	7f af       	sts	0x7f, r23
    5456:	6e af       	sts	0x7e, r22
    5458:	af 97       	sbiw	r28, 0x2f	; 47
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Ignore drive number of new name */
    545a:	ce 01       	movw	r24, r28
    545c:	83 59       	subi	r24, 0x93	; 147
    545e:	9f 4f       	sbci	r25, 0xFF	; 255
    5460:	0e 94 df 09 	call	0x13be	; 0x13be <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive number of the old object */
    5464:	ce 01       	movw	r24, r28
    5466:	85 59       	subi	r24, 0x95	; 149
    5468:	9f 4f       	sbci	r25, 0xFF	; 255
    546a:	be 01       	movw	r22, r28
    546c:	6f 5f       	subi	r22, 0xFF	; 255
    546e:	7f 4f       	sbci	r23, 0xFF	; 255
    5470:	42 e0       	ldi	r20, 0x02	; 2
    5472:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <find_volume>
	if (res == FR_OK) {
    5476:	00 97       	sbiw	r24, 0x00	; 0
    5478:	71 f0       	breq	.+28     	; 0x5496 <f_rename+0x6a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    547a:	c2 59       	subi	r28, 0x92	; 146
    547c:	df 4f       	sbci	r29, 0xFF	; 255
    547e:	0f b6       	in	r0, 0x3f	; 63
    5480:	f8 94       	cli
    5482:	de bf       	out	0x3e, r29	; 62
    5484:	0f be       	out	0x3f, r0	; 63
    5486:	cd bf       	out	0x3d, r28	; 61
    5488:	df 91       	pop	r29
    548a:	cf 91       	pop	r28
    548c:	1f 91       	pop	r17
    548e:	0f 91       	pop	r16
    5490:	ff 90       	pop	r15
    5492:	ef 90       	pop	r14
    5494:	08 95       	ret


	get_ldnumber(&path_new);						/* Ignore drive number of new name */
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive number of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
    5496:	89 81       	ldd	r24, Y+1	; 0x01
    5498:	9a 81       	ldd	r25, Y+2	; 0x02
    549a:	25 96       	adiw	r28, 0x05	; 5
    549c:	9f af       	sts	0x7f, r25
    549e:	8e af       	sts	0x7e, r24
    54a0:	25 97       	sbiw	r28, 0x05	; 5
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
    54a2:	ad 96       	adiw	r28, 0x2d	; 45
    54a4:	6e ad       	sts	0x6e, r22
    54a6:	7f ad       	sts	0x6f, r23
    54a8:	ad 97       	sbiw	r28, 0x2d	; 45
    54aa:	ce 01       	movw	r24, r28
    54ac:	8d 5b       	subi	r24, 0xBD	; 189
    54ae:	9f 4f       	sbci	r25, 0xFF	; 255
    54b0:	0e 94 42 18 	call	0x3084	; 0x3084 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    54b4:	00 97       	sbiw	r24, 0x00	; 0
    54b6:	09 f7       	brne	.-62     	; 0x547a <f_rename+0x4e>
    54b8:	ab 96       	adiw	r28, 0x2b	; 43
    54ba:	8f ad       	sts	0x6f, r24
    54bc:	ab 97       	sbiw	r28, 0x2b	; 43
    54be:	80 7a       	andi	r24, 0xA0	; 160
    54c0:	19 f0       	breq	.+6      	; 0x54c8 <f_rename+0x9c>
    54c2:	86 e0       	ldi	r24, 0x06	; 6
    54c4:	90 e0       	ldi	r25, 0x00	; 0
    54c6:	d9 cf       	rjmp	.-78     	; 0x547a <f_rename+0x4e>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
    54c8:	6f 96       	adiw	r28, 0x1f	; 31
    54ca:	6e ad       	sts	0x6e, r22
    54cc:	7f ad       	sts	0x6f, r23
    54ce:	6f 97       	sbiw	r28, 0x1f	; 31
    54d0:	65 5f       	subi	r22, 0xF5	; 245
    54d2:	7f 4f       	sbci	r23, 0xFF	; 255
    54d4:	ce 01       	movw	r24, r28
    54d6:	03 96       	adiw	r24, 0x03	; 3
    54d8:	45 e1       	ldi	r20, 0x15	; 21
    54da:	50 e0       	ldi	r21, 0x00	; 0
    54dc:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
    54e0:	ce 01       	movw	r24, r28
    54e2:	4b 96       	adiw	r24, 0x1b	; 27
    54e4:	be 01       	movw	r22, r28
    54e6:	6d 5b       	subi	r22, 0xBD	; 189
    54e8:	7f 4f       	sbci	r23, 0xFF	; 255
    54ea:	48 e2       	ldi	r20, 0x28	; 40
    54ec:	50 e0       	ldi	r21, 0x00	; 0
    54ee:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    54f2:	af 96       	adiw	r28, 0x2f	; 47
    54f4:	6e ad       	sts	0x6e, r22
    54f6:	7f ad       	sts	0x6f, r23
    54f8:	af 97       	sbiw	r28, 0x2f	; 47
    54fa:	ce 01       	movw	r24, r28
    54fc:	4b 96       	adiw	r24, 0x1b	; 27
    54fe:	0e 94 42 18 	call	0x3084	; 0x3084 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    5502:	00 97       	sbiw	r24, 0x00	; 0
    5504:	99 f4       	brne	.+38     	; 0x552c <f_rename+0x100>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    5506:	49 a1       	lds	r20, 0x49
    5508:	5a a1       	lds	r21, 0x4a
    550a:	6b a1       	lds	r22, 0x4b
    550c:	7c a1       	lds	r23, 0x4c
    550e:	2d 96       	adiw	r28, 0x0d	; 13
    5510:	8c ad       	sts	0x6c, r24
    5512:	9d ad       	sts	0x6d, r25
    5514:	ae ad       	sts	0x6e, r26
    5516:	bf ad       	sts	0x6f, r27
    5518:	2d 97       	sbiw	r28, 0x0d	; 13
    551a:	48 17       	cp	r20, r24
    551c:	59 07       	cpc	r21, r25
    551e:	6a 07       	cpc	r22, r26
    5520:	7b 07       	cpc	r23, r27
    5522:	09 f4       	brne	.+2      	; 0x5526 <f_rename+0xfa>
    5524:	9d c0       	rjmp	.+314    	; 0x5660 <f_rename+0x234>
    5526:	88 e0       	ldi	r24, 0x08	; 8
    5528:	90 e0       	ldi	r25, 0x00	; 0
    552a:	a7 cf       	rjmp	.-178    	; 0x547a <f_rename+0x4e>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    552c:	84 30       	cpi	r24, 0x04	; 4
    552e:	91 05       	cpc	r25, r1
    5530:	09 f0       	breq	.+2      	; 0x5534 <f_rename+0x108>
    5532:	a3 cf       	rjmp	.-186    	; 0x547a <f_rename+0x4e>
					res = dir_register(&djn);			/* Register the new entry */
    5534:	ce 01       	movw	r24, r28
    5536:	4b 96       	adiw	r24, 0x1b	; 27
    5538:	0e 94 d3 17 	call	0x2fa6	; 0x2fa6 <dir_register>
					if (res == FR_OK) {
    553c:	00 97       	sbiw	r24, 0x00	; 0
    553e:	09 f0       	breq	.+2      	; 0x5542 <f_rename+0x116>
    5540:	9c cf       	rjmp	.-200    	; 0x547a <f_rename+0x4e>
						dir = djn.dir;					/* Copy information about object except name */
    5542:	0d a9       	sts	0x4d, r16
    5544:	1e a9       	sts	0x4e, r17
						mem_cpy(dir + 13, buf + 2, 19);
    5546:	c8 01       	movw	r24, r16
    5548:	0d 96       	adiw	r24, 0x0d	; 13
    554a:	be 01       	movw	r22, r28
    554c:	6b 5f       	subi	r22, 0xFB	; 251
    554e:	7f 4f       	sbci	r23, 0xFF	; 255
    5550:	43 e1       	ldi	r20, 0x13	; 19
    5552:	50 e0       	ldi	r21, 0x00	; 0
    5554:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    5558:	8b 81       	ldd	r24, Y+3	; 0x03
    555a:	80 62       	ori	r24, 0x20	; 32
    555c:	f8 01       	movw	r30, r16
    555e:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    5560:	e9 80       	ldd	r14, Y+1	; 0x01
    5562:	fa 80       	ldd	r15, Y+2	; 0x02
    5564:	81 e0       	ldi	r24, 0x01	; 1
    5566:	f7 01       	movw	r30, r14
    5568:	83 83       	std	Z+3, r24	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    556a:	f8 01       	movw	r30, r16
    556c:	83 85       	ldd	r24, Z+11	; 0x0b
    556e:	84 ff       	sbrs	r24, 4
    5570:	59 c0       	rjmp	.+178    	; 0x5624 <f_rename+0x1f8>
    5572:	2d 96       	adiw	r28, 0x0d	; 13
    5574:	4c ad       	sts	0x6c, r20
    5576:	5d ad       	sts	0x6d, r21
    5578:	6e ad       	sts	0x6e, r22
    557a:	7f ad       	sts	0x6f, r23
    557c:	2d 97       	sbiw	r28, 0x0d	; 13
    557e:	89 a1       	lds	r24, 0x49
    5580:	9a a1       	lds	r25, 0x4a
    5582:	ab a1       	lds	r26, 0x4b
    5584:	bc a1       	lds	r27, 0x4c
    5586:	48 17       	cp	r20, r24
    5588:	59 07       	cpc	r21, r25
    558a:	6a 07       	cpc	r22, r26
    558c:	7b 07       	cpc	r23, r27
    558e:	09 f4       	brne	.+2      	; 0x5592 <f_rename+0x166>
    5590:	49 c0       	rjmp	.+146    	; 0x5624 <f_rename+0x1f8>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    5592:	33 8d       	ldd	r19, Z+27	; 0x1b
    5594:	20 e0       	ldi	r18, 0x00	; 0
    5596:	82 8d       	ldd	r24, Z+26	; 0x1a
    5598:	90 e0       	ldi	r25, 0x00	; 0
    559a:	82 2b       	or	r24, r18
    559c:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    559e:	ac 01       	movw	r20, r24
    55a0:	60 e0       	ldi	r22, 0x00	; 0
    55a2:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    55a4:	f7 01       	movw	r30, r14
    55a6:	80 81       	ld	r24, Z
    55a8:	83 30       	cpi	r24, 0x03	; 3
    55aa:	09 f4       	brne	.+2      	; 0x55ae <f_rename+0x182>
    55ac:	6d c0       	rjmp	.+218    	; 0x5688 <f_rename+0x25c>
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    55ae:	db 01       	movw	r26, r22
    55b0:	ca 01       	movw	r24, r20
    55b2:	02 97       	sbiw	r24, 0x02	; 2
    55b4:	a1 09       	sbc	r26, r1
    55b6:	b1 09       	sbc	r27, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    55b8:	f7 01       	movw	r30, r14
    55ba:	43 89       	ldd	r20, Z+19	; 0x13
    55bc:	54 89       	ldd	r21, Z+20	; 0x14
    55be:	65 89       	ldd	r22, Z+21	; 0x15
    55c0:	76 89       	ldd	r23, Z+22	; 0x16
    55c2:	42 50       	subi	r20, 0x02	; 2
    55c4:	50 40       	sbci	r21, 0x00	; 0
    55c6:	60 40       	sbci	r22, 0x00	; 0
    55c8:	70 40       	sbci	r23, 0x00	; 0
    55ca:	84 17       	cp	r24, r20
    55cc:	95 07       	cpc	r25, r21
    55ce:	a6 07       	cpc	r26, r22
    55d0:	b7 07       	cpc	r27, r23
    55d2:	08 f0       	brcs	.+2      	; 0x55d6 <f_rename+0x1aa>
    55d4:	56 c0       	rjmp	.+172    	; 0x5682 <f_rename+0x256>
	return clst * fs->csize + fs->database;
    55d6:	21 85       	ldd	r18, Z+9	; 0x09
    55d8:	32 85       	ldd	r19, Z+10	; 0x0a
    55da:	40 e0       	ldi	r20, 0x00	; 0
    55dc:	50 e0       	ldi	r21, 0x00	; 0
    55de:	bc 01       	movw	r22, r24
    55e0:	cd 01       	movw	r24, r26
    55e2:	0e 94 a6 2e 	call	0x5d4c	; 0x5d4c <__mulsi3>
    55e6:	ab 01       	movw	r20, r22
    55e8:	bc 01       	movw	r22, r24
    55ea:	f7 01       	movw	r30, r14
    55ec:	87 a1       	lds	r24, 0x47
    55ee:	90 a5       	lds	r25, 0x60
    55f0:	a1 a5       	lds	r26, 0x61
    55f2:	b2 a5       	lds	r27, 0x62
    55f4:	48 0f       	add	r20, r24
    55f6:	59 1f       	adc	r21, r25
    55f8:	6a 1f       	adc	r22, r26
    55fa:	7b 1f       	adc	r23, r27
						mem_cpy(dir + 13, buf + 2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							dw = clust2sect(fs, ld_clust(fs, dir));
							if (!dw) {
    55fc:	41 15       	cp	r20, r1
    55fe:	51 05       	cpc	r21, r1
    5600:	61 05       	cpc	r22, r1
    5602:	71 05       	cpc	r23, r1
    5604:	f1 f1       	breq	.+124    	; 0x5682 <f_rename+0x256>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where any interruption can cause a cross-link */
								res = move_window(fs, dw);
    5606:	c7 01       	movw	r24, r14
    5608:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    560c:	e9 81       	ldd	r30, Y+1	; 0x01
    560e:	fa 81       	ldd	r31, Y+2	; 0x02
								if (res == FR_OK && dir[1] == '.') {
    5610:	00 97       	sbiw	r24, 0x00	; 0
    5612:	09 f0       	breq	.+2      	; 0x5616 <f_rename+0x1ea>
    5614:	32 cf       	rjmp	.-412    	; 0x547a <f_rename+0x4e>
    5616:	df 01       	movw	r26, r30
    5618:	a0 5b       	subi	r26, 0xB0	; 176
    561a:	bf 4f       	sbci	r27, 0xFF	; 255
    561c:	8c 91       	ld	r24, X
    561e:	8e 32       	cpi	r24, 0x2E	; 46
    5620:	09 f4       	brne	.+2      	; 0x5624 <f_rename+0x1f8>
    5622:	43 c0       	rjmp	.+134    	; 0x56aa <f_rename+0x27e>
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    5624:	25 96       	adiw	r28, 0x05	; 5
    5626:	0e ad       	sts	0x6e, r16
    5628:	1f ad       	sts	0x6f, r17
    562a:	25 97       	sbiw	r28, 0x05	; 5
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
    562c:	6d 96       	adiw	r28, 0x1d	; 29
    562e:	4c ad       	sts	0x6c, r20
    5630:	5d ad       	sts	0x6d, r21
    5632:	6e ad       	sts	0x6e, r22
    5634:	7f ad       	sts	0x6f, r23
    5636:	6d 97       	sbiw	r28, 0x1d	; 29
    5638:	c8 01       	movw	r24, r16
    563a:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <move_window>
	if (res == FR_OK) {
    563e:	00 97       	sbiw	r24, 0x00	; 0
    5640:	09 f0       	breq	.+2      	; 0x5644 <f_rename+0x218>
    5642:	1b cf       	rjmp	.-458    	; 0x547a <f_rename+0x4e>
		dp->dir[DIR_Name] = DDEM;
    5644:	6f 96       	adiw	r28, 0x1f	; 31
    5646:	ee ad       	sts	0x6e, r30
    5648:	ff ad       	sts	0x6f, r31
    564a:	6f 97       	sbiw	r28, 0x1f	; 31
    564c:	85 ee       	ldi	r24, 0xE5	; 229
    564e:	80 83       	st	Z, r24
		fs->wflag = 1;
    5650:	81 e0       	ldi	r24, 0x01	; 1
    5652:	f8 01       	movw	r30, r16
    5654:	83 83       	std	Z+3, r24	; 0x03
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
				if (res == FR_OK) {
					res = sync_fs(fs);
    5656:	89 81       	ldd	r24, Y+1	; 0x01
    5658:	9a 81       	ldd	r25, Y+2	; 0x02
    565a:	0e 94 55 0b 	call	0x16aa	; 0x16aa <sync_fs>
    565e:	0d cf       	rjmp	.-486    	; 0x547a <f_rename+0x4e>
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    5660:	49 a5       	lds	r20, 0x69
    5662:	5a a5       	lds	r21, 0x6a
    5664:	6b a5       	lds	r22, 0x6b
    5666:	7c a5       	lds	r23, 0x6c
    5668:	65 96       	adiw	r28, 0x15	; 21
    566a:	8c ad       	sts	0x6c, r24
    566c:	9d ad       	sts	0x6d, r25
    566e:	ae ad       	sts	0x6e, r26
    5670:	bf ad       	sts	0x6f, r27
    5672:	65 97       	sbiw	r28, 0x15	; 21
    5674:	48 17       	cp	r20, r24
    5676:	59 07       	cpc	r21, r25
    5678:	6a 07       	cpc	r22, r26
    567a:	7b 07       	cpc	r23, r27
    567c:	09 f0       	breq	.+2      	; 0x5680 <f_rename+0x254>
    567e:	53 cf       	rjmp	.-346    	; 0x5526 <f_rename+0xfa>
    5680:	59 cf       	rjmp	.-334    	; 0x5534 <f_rename+0x108>
						dir[DIR_Attr] = buf[0] | AM_ARC;
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							dw = clust2sect(fs, ld_clust(fs, dir));
							if (!dw) {
								res = FR_INT_ERR;
    5682:	82 e0       	ldi	r24, 0x02	; 2
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	f9 ce       	rjmp	.-526    	; 0x547a <f_rename+0x4e>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    5688:	f8 01       	movw	r30, r16
    568a:	35 89       	ldd	r19, Z+21	; 0x15
    568c:	20 e0       	ldi	r18, 0x00	; 0
    568e:	84 89       	ldd	r24, Z+20	; 0x14
    5690:	90 e0       	ldi	r25, 0x00	; 0
    5692:	82 2b       	or	r24, r18
    5694:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    5696:	a0 e0       	ldi	r26, 0x00	; 0
    5698:	b0 e0       	ldi	r27, 0x00	; 0
    569a:	dc 01       	movw	r26, r24
    569c:	99 27       	eor	r25, r25
    569e:	88 27       	eor	r24, r24
    56a0:	48 2b       	or	r20, r24
    56a2:	59 2b       	or	r21, r25
    56a4:	6a 2b       	or	r22, r26
    56a6:	7b 2b       	or	r23, r27
    56a8:	82 cf       	rjmp	.-252    	; 0x55ae <f_rename+0x182>
							} else {
/* Start of critical section where any interruption can cause a cross-link */
								res = move_window(fs, dw);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    56aa:	49 a1       	lds	r20, 0x49
    56ac:	5a a1       	lds	r21, 0x4a
    56ae:	6b a1       	lds	r22, 0x4b
    56b0:	7c a1       	lds	r23, 0x4c

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    56b2:	df 01       	movw	r26, r30
    56b4:	a7 59       	subi	r26, 0x97	; 151
    56b6:	bf 4f       	sbci	r27, 0xFF	; 255
    56b8:	4c 93       	st	X, r20
	*ptr++ = (BYTE)val;
    56ba:	df 01       	movw	r26, r30
    56bc:	a6 59       	subi	r26, 0x96	; 150
    56be:	bf 4f       	sbci	r27, 0xFF	; 255
    56c0:	5c 93       	st	X, r21
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    56c2:	80 81       	ld	r24, Z
    56c4:	83 30       	cpi	r24, 0x03	; 3
    56c6:	19 f0       	breq	.+6      	; 0x56ce <f_rename+0x2a2>
/* Start of critical section where any interruption can cause a cross-link */
								res = move_window(fs, dw);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
									fs->wflag = 1;
    56c8:	81 e0       	ldi	r24, 0x01	; 1
    56ca:	83 83       	std	Z+3, r24	; 0x03
    56cc:	ab cf       	rjmp	.-170    	; 0x5624 <f_rename+0x1f8>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    56ce:	ab 01       	movw	r20, r22
    56d0:	66 27       	eor	r22, r22
    56d2:	77 27       	eor	r23, r23

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    56d4:	df 01       	movw	r26, r30
    56d6:	ad 59       	subi	r26, 0x9D	; 157
    56d8:	bf 4f       	sbci	r27, 0xFF	; 255
    56da:	4c 93       	st	X, r20
	*ptr++ = (BYTE)val;
    56dc:	df 01       	movw	r26, r30
    56de:	ac 59       	subi	r26, 0x9C	; 156
    56e0:	bf 4f       	sbci	r27, 0xFF	; 255
    56e2:	5c 93       	st	X, r21
    56e4:	f1 cf       	rjmp	.-30     	; 0x56c8 <f_rename+0x29c>

000056e6 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
    56e6:	8f 92       	push	r8
    56e8:	9f 92       	push	r9
    56ea:	af 92       	push	r10
    56ec:	bf 92       	push	r11
    56ee:	cf 92       	push	r12
    56f0:	df 92       	push	r13
    56f2:	ef 92       	push	r14
    56f4:	ff 92       	push	r15
    56f6:	0f 93       	push	r16
    56f8:	1f 93       	push	r17
    56fa:	cf 93       	push	r28
    56fc:	df 93       	push	r29
    56fe:	00 d0       	rcall	.+0      	; 0x5700 <f_gets+0x1a>
    5700:	00 d0       	rcall	.+0      	; 0x5702 <f_gets+0x1c>
    5702:	cd b7       	in	r28, 0x3d	; 61
    5704:	de b7       	in	r29, 0x3e	; 62
    5706:	4c 01       	movw	r8, r24
    5708:	6b 01       	movw	r12, r22
    570a:	5a 01       	movw	r10, r20
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    570c:	08 94       	sec
    570e:	c1 08       	sbc	r12, r1
    5710:	d1 08       	sbc	r13, r1
    5712:	7c 01       	movw	r14, r24
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
	int n = 0;
    5714:	00 e0       	ldi	r16, 0x00	; 0
    5716:	10 e0       	ldi	r17, 0x00	; 0
	TCHAR c, *p = buff;
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
    5718:	0c 15       	cp	r16, r12
    571a:	1d 05       	cpc	r17, r13
    571c:	c4 f4       	brge	.+48     	; 0x574e <f_gets+0x68>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
    571e:	c5 01       	movw	r24, r10
    5720:	be 01       	movw	r22, r28
    5722:	6d 5f       	subi	r22, 0xFD	; 253
    5724:	7f 4f       	sbci	r23, 0xFF	; 255
    5726:	41 e0       	ldi	r20, 0x01	; 1
    5728:	50 e0       	ldi	r21, 0x00	; 0
    572a:	9e 01       	movw	r18, r28
    572c:	2f 5f       	subi	r18, 0xFF	; 255
    572e:	3f 4f       	sbci	r19, 0xFF	; 255
    5730:	0e 94 aa 1c 	call	0x3954	; 0x3954 <f_read>
		if (rc != 1) break;
    5734:	89 81       	ldd	r24, Y+1	; 0x01
    5736:	9a 81       	ldd	r25, Y+2	; 0x02
    5738:	81 30       	cpi	r24, 0x01	; 1
    573a:	91 05       	cpc	r25, r1
    573c:	41 f4       	brne	.+16     	; 0x574e <f_gets+0x68>
		c = s[0];
    573e:	8b 81       	ldd	r24, Y+3	; 0x03
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
    5740:	f7 01       	movw	r30, r14
    5742:	81 93       	st	Z+, r24
    5744:	7f 01       	movw	r14, r30
		n++;
    5746:	0f 5f       	subi	r16, 0xFF	; 255
    5748:	1f 4f       	sbci	r17, 0xFF	; 255
		if (c == '\n') break;		/* Break on EOL */
    574a:	8a 30       	cpi	r24, 0x0A	; 10
    574c:	29 f7       	brne	.-54     	; 0x5718 <f_gets+0x32>
	}
	*p = 0;
    574e:	f7 01       	movw	r30, r14
    5750:	10 82       	st	Z, r1
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    5752:	01 15       	cp	r16, r1
    5754:	11 05       	cpc	r17, r1
    5756:	91 f0       	breq	.+36     	; 0x577c <f_gets+0x96>
}
    5758:	c4 01       	movw	r24, r8
    575a:	0f 90       	pop	r0
    575c:	0f 90       	pop	r0
    575e:	0f 90       	pop	r0
    5760:	0f 90       	pop	r0
    5762:	df 91       	pop	r29
    5764:	cf 91       	pop	r28
    5766:	1f 91       	pop	r17
    5768:	0f 91       	pop	r16
    576a:	ff 90       	pop	r15
    576c:	ef 90       	pop	r14
    576e:	df 90       	pop	r13
    5770:	cf 90       	pop	r12
    5772:	bf 90       	pop	r11
    5774:	af 90       	pop	r10
    5776:	9f 90       	pop	r9
    5778:	8f 90       	pop	r8
    577a:	08 95       	ret
		*p++ = c;
		n++;
		if (c == '\n') break;		/* Break on EOL */
	}
	*p = 0;
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
    577c:	88 24       	eor	r8, r8
    577e:	99 24       	eor	r9, r9
    5780:	eb cf       	rjmp	.-42     	; 0x5758 <f_gets+0x72>

00005782 <f_putc>:

int f_putc (
	TCHAR c,	/* A character to be output */
	FIL* fp		/* Pointer to the file object */
)
{
    5782:	cf 93       	push	r28
    5784:	df 93       	push	r29
    5786:	cd b7       	in	r28, 0x3d	; 61
    5788:	de b7       	in	r29, 0x3e	; 62
    578a:	c6 54       	subi	r28, 0x46	; 70
    578c:	d0 40       	sbci	r29, 0x00	; 0
    578e:	0f b6       	in	r0, 0x3f	; 63
    5790:	f8 94       	cli
    5792:	de bf       	out	0x3e, r29	; 62
    5794:	0f be       	out	0x3f, r0	; 63
    5796:	cd bf       	out	0x3d, r28	; 61
    5798:	48 2f       	mov	r20, r24
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
    579a:	7a 83       	std	Y+2, r23	; 0x02
    579c:	69 83       	std	Y+1, r22	; 0x01
	pb->nchr = pb->idx = 0;
    579e:	1c 82       	std	Y+4, r1	; 0x04
    57a0:	1b 82       	std	Y+3, r1	; 0x03
    57a2:	1e 82       	std	Y+6, r1	; 0x06
    57a4:	1d 82       	std	Y+5, r1	; 0x05
{
	putbuff pb;


	putc_init(&pb, fp);
	putc_bfd(&pb, c);	/* Put the character */
    57a6:	ce 01       	movw	r24, r28
    57a8:	01 96       	adiw	r24, 0x01	; 1
    57aa:	64 2f       	mov	r22, r20
    57ac:	0e 94 a2 20 	call	0x4144	; 0x4144 <putc_bfd>
	return putc_flush(&pb);
    57b0:	ce 01       	movw	r24, r28
    57b2:	01 96       	adiw	r24, 0x01	; 1
    57b4:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <putc_flush>
}
    57b8:	ca 5b       	subi	r28, 0xBA	; 186
    57ba:	df 4f       	sbci	r29, 0xFF	; 255
    57bc:	0f b6       	in	r0, 0x3f	; 63
    57be:	f8 94       	cli
    57c0:	de bf       	out	0x3e, r29	; 62
    57c2:	0f be       	out	0x3f, r0	; 63
    57c4:	cd bf       	out	0x3d, r28	; 61
    57c6:	df 91       	pop	r29
    57c8:	cf 91       	pop	r28
    57ca:	08 95       	ret

000057cc <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
    57cc:	ef 92       	push	r14
    57ce:	ff 92       	push	r15
    57d0:	0f 93       	push	r16
    57d2:	1f 93       	push	r17
    57d4:	cf 93       	push	r28
    57d6:	df 93       	push	r29
    57d8:	cd b7       	in	r28, 0x3d	; 61
    57da:	de b7       	in	r29, 0x3e	; 62
    57dc:	c6 54       	subi	r28, 0x46	; 70
    57de:	d0 40       	sbci	r29, 0x00	; 0
    57e0:	0f b6       	in	r0, 0x3f	; 63
    57e2:	f8 94       	cli
    57e4:	de bf       	out	0x3e, r29	; 62
    57e6:	0f be       	out	0x3f, r0	; 63
    57e8:	cd bf       	out	0x3d, r28	; 61
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
    57ea:	7a 83       	std	Y+2, r23	; 0x02
    57ec:	69 83       	std	Y+1, r22	; 0x01
	pb->nchr = pb->idx = 0;
    57ee:	1c 82       	std	Y+4, r1	; 0x04
    57f0:	1b 82       	std	Y+3, r1	; 0x03
    57f2:	1e 82       	std	Y+6, r1	; 0x06
    57f4:	1d 82       	std	Y+5, r1	; 0x05
{
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
    57f6:	fc 01       	movw	r30, r24
    57f8:	60 81       	ld	r22, Z
    57fa:	66 23       	and	r22, r22
    57fc:	01 f1       	breq	.+64     	; 0x583e <f_puts+0x72>

/*-----------------------------------------------------------------------*/
/* Put a string to the file                                              */
/*-----------------------------------------------------------------------*/

int f_puts (
    57fe:	8c 01       	movw	r16, r24
    5800:	0f 5f       	subi	r16, 0xFF	; 255
    5802:	1f 4f       	sbci	r17, 0xFF	; 255
    5804:	7e 01       	movw	r14, r28
    5806:	08 94       	sec
    5808:	e1 1c       	adc	r14, r1
    580a:	f1 1c       	adc	r15, r1
{
	putbuff pb;


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
    580c:	c7 01       	movw	r24, r14
    580e:	0e 94 a2 20 	call	0x4144	; 0x4144 <putc_bfd>
    5812:	f8 01       	movw	r30, r16
    5814:	61 91       	ld	r22, Z+
    5816:	8f 01       	movw	r16, r30
    5818:	66 23       	and	r22, r22
    581a:	c1 f7       	brne	.-16     	; 0x580c <f_puts+0x40>
	return putc_flush(&pb);
    581c:	c7 01       	movw	r24, r14
    581e:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <putc_flush>
}
    5822:	ca 5b       	subi	r28, 0xBA	; 186
    5824:	df 4f       	sbci	r29, 0xFF	; 255
    5826:	0f b6       	in	r0, 0x3f	; 63
    5828:	f8 94       	cli
    582a:	de bf       	out	0x3e, r29	; 62
    582c:	0f be       	out	0x3f, r0	; 63
    582e:	cd bf       	out	0x3d, r28	; 61
    5830:	df 91       	pop	r29
    5832:	cf 91       	pop	r28
    5834:	1f 91       	pop	r17
    5836:	0f 91       	pop	r16
    5838:	ff 90       	pop	r15
    583a:	ef 90       	pop	r14
    583c:	08 95       	ret
    583e:	7e 01       	movw	r14, r28
    5840:	08 94       	sec
    5842:	e1 1c       	adc	r14, r1
    5844:	f1 1c       	adc	r15, r1
    5846:	ea cf       	rjmp	.-44     	; 0x581c <f_puts+0x50>

00005848 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    5848:	2f 92       	push	r2
    584a:	3f 92       	push	r3
    584c:	4f 92       	push	r4
    584e:	5f 92       	push	r5
    5850:	6f 92       	push	r6
    5852:	7f 92       	push	r7
    5854:	8f 92       	push	r8
    5856:	9f 92       	push	r9
    5858:	af 92       	push	r10
    585a:	bf 92       	push	r11
    585c:	cf 92       	push	r12
    585e:	df 92       	push	r13
    5860:	ef 92       	push	r14
    5862:	ff 92       	push	r15
    5864:	0f 93       	push	r16
    5866:	1f 93       	push	r17
    5868:	cf 93       	push	r28
    586a:	df 93       	push	r29
    586c:	cd b7       	in	r28, 0x3d	; 61
    586e:	de b7       	in	r29, 0x3e	; 62
    5870:	c8 56       	subi	r28, 0x68	; 104
    5872:	d0 40       	sbci	r29, 0x00	; 0
    5874:	0f b6       	in	r0, 0x3f	; 63
    5876:	f8 94       	cli
    5878:	de bf       	out	0x3e, r29	; 62
    587a:	0f be       	out	0x3f, r0	; 63
    587c:	cd bf       	out	0x3d, r28	; 61
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	pb->fp = fp;
    587e:	ef 96       	adiw	r28, 0x3f	; 63
    5880:	8e ad       	sts	0x6e, r24
    5882:	9f ad       	sts	0x6f, r25
    5884:	ef 97       	sbiw	r28, 0x3f	; 63
    5886:	9a a3       	lds	r25, 0x5a
    5888:	89 a3       	lds	r24, 0x59
	pb->nchr = pb->idx = 0;
    588a:	1c a2       	lds	r17, 0x9c
    588c:	1b a2       	lds	r17, 0x9b
    588e:	1e a2       	lds	r17, 0x9e
    5890:	1d a2       	lds	r17, 0x9d
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);

	va_start(arp, fmt);
    5892:	ae 01       	movw	r20, r28
    5894:	4f 57       	subi	r20, 0x7F	; 127
    5896:	5f 4f       	sbci	r21, 0xFF	; 255
    5898:	a9 96       	adiw	r28, 0x29	; 41
    589a:	5f af       	sts	0x7f, r21
    589c:	4e af       	sts	0x7e, r20
    589e:	a9 97       	sbiw	r28, 0x29	; 41

	for (;;) {
		c = *fmt++;
    58a0:	c1 58       	subi	r28, 0x81	; 129
    58a2:	df 4f       	sbci	r29, 0xFF	; 255
    58a4:	e8 81       	ld	r30, Y
    58a6:	f9 81       	ldd	r31, Y+1	; 0x01
    58a8:	cf 57       	subi	r28, 0x7F	; 127
    58aa:	d0 40       	sbci	r29, 0x00	; 0
    58ac:	60 81       	ld	r22, Z
		if (c == 0) break;			/* End of string */
    58ae:	66 23       	and	r22, r22
    58b0:	09 f4       	brne	.+2      	; 0x58b4 <f_printf+0x6c>
    58b2:	8b c0       	rjmp	.+278    	; 0x59ca <f_printf+0x182>
		if (c != '%') {				/* Non escape character */
    58b4:	65 32       	cpi	r22, 0x25	; 37
    58b6:	61 f0       	breq	.+24     	; 0x58d0 <f_printf+0x88>
	putc_init(&pb, fp);

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    58b8:	31 96       	adiw	r30, 0x01	; 1
    58ba:	c1 58       	subi	r28, 0x81	; 129
    58bc:	df 4f       	sbci	r29, 0xFF	; 255
    58be:	f9 83       	std	Y+1, r31	; 0x01
    58c0:	e8 83       	st	Y, r30
    58c2:	cf 57       	subi	r28, 0x7F	; 127
    58c4:	d0 40       	sbci	r29, 0x00	; 0
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
    58c6:	ce 01       	movw	r24, r28
    58c8:	81 96       	adiw	r24, 0x21	; 33
    58ca:	0e 94 a2 20 	call	0x4144	; 0x4144 <putc_bfd>
			continue;
    58ce:	e8 cf       	rjmp	.-48     	; 0x58a0 <f_printf+0x58>
		}
		w = f = 0;
		c = *fmt++;
    58d0:	c1 58       	subi	r28, 0x81	; 129
    58d2:	df 4f       	sbci	r29, 0xFF	; 255
    58d4:	e8 81       	ld	r30, Y
    58d6:	f9 81       	ldd	r31, Y+1	; 0x01
    58d8:	cf 57       	subi	r28, 0x7F	; 127
    58da:	d0 40       	sbci	r29, 0x00	; 0
    58dc:	b1 80       	ldd	r11, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padding */
    58de:	f0 e3       	ldi	r31, 0x30	; 48
    58e0:	bf 16       	cp	r11, r31
    58e2:	09 f4       	brne	.+2      	; 0x58e6 <f_printf+0x9e>
    58e4:	ec c0       	rjmp	.+472    	; 0x5abe <f_printf+0x276>
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
    58e6:	fd e2       	ldi	r31, 0x2D	; 45
    58e8:	bf 16       	cp	r11, r31
    58ea:	09 f4       	brne	.+2      	; 0x58ee <f_printf+0xa6>
    58ec:	ff c0       	rjmp	.+510    	; 0x5aec <f_printf+0x2a4>
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
    58ee:	c1 58       	subi	r28, 0x81	; 129
    58f0:	df 4f       	sbci	r29, 0xFF	; 255
    58f2:	48 81       	ld	r20, Y
    58f4:	59 81       	ldd	r21, Y+1	; 0x01
    58f6:	cf 57       	subi	r28, 0x7F	; 127
    58f8:	d0 40       	sbci	r29, 0x00	; 0
    58fa:	4e 5f       	subi	r20, 0xFE	; 254
    58fc:	5f 4f       	sbci	r21, 0xFF	; 255
    58fe:	c1 58       	subi	r28, 0x81	; 129
    5900:	df 4f       	sbci	r29, 0xFF	; 255
    5902:	59 83       	std	Y+1, r21	; 0x01
    5904:	48 83       	st	Y, r20
    5906:	cf 57       	subi	r28, 0x7F	; 127
    5908:	d0 40       	sbci	r29, 0x00	; 0
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
    590a:	20 e0       	ldi	r18, 0x00	; 0
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    590c:	8b 2d       	mov	r24, r11
    590e:	80 53       	subi	r24, 0x30	; 48
    5910:	8a 30       	cpi	r24, 0x0A	; 10
    5912:	08 f0       	brcs	.+2      	; 0x5916 <f_printf+0xce>
    5914:	e8 c0       	rjmp	.+464    	; 0x5ae6 <f_printf+0x29e>
    5916:	c1 58       	subi	r28, 0x81	; 129
    5918:	df 4f       	sbci	r29, 0xFF	; 255
    591a:	e8 81       	ld	r30, Y
    591c:	f9 81       	ldd	r31, Y+1	; 0x01
    591e:	cf 57       	subi	r28, 0x7F	; 127
    5920:	d0 40       	sbci	r29, 0x00	; 0
    5922:	cc 24       	eor	r12, r12
    5924:	dd 24       	eor	r13, r13
			w = w * 10 + c - '0';
    5926:	c6 01       	movw	r24, r12
    5928:	88 0f       	add	r24, r24
    592a:	99 1f       	adc	r25, r25
    592c:	cc 0c       	add	r12, r12
    592e:	dd 1c       	adc	r13, r13
    5930:	cc 0c       	add	r12, r12
    5932:	dd 1c       	adc	r13, r13
    5934:	cc 0c       	add	r12, r12
    5936:	dd 1c       	adc	r13, r13
    5938:	c8 0e       	add	r12, r24
    593a:	d9 1e       	adc	r13, r25
    593c:	8b 2d       	mov	r24, r11
    593e:	99 27       	eor	r25, r25
    5940:	87 fd       	sbrc	r24, 7
    5942:	90 95       	com	r25
    5944:	c8 0e       	add	r12, r24
    5946:	d9 1e       	adc	r13, r25
    5948:	40 ed       	ldi	r20, 0xD0	; 208
    594a:	5f ef       	ldi	r21, 0xFF	; 255
    594c:	c4 0e       	add	r12, r20
    594e:	d5 1e       	adc	r13, r21
			c = *fmt++;
    5950:	b1 90       	ld	r11, Z+
    5952:	c1 58       	subi	r28, 0x81	; 129
    5954:	df 4f       	sbci	r29, 0xFF	; 255
    5956:	f9 83       	std	Y+1, r31	; 0x01
    5958:	e8 83       	st	Y, r30
    595a:	cf 57       	subi	r28, 0x7F	; 127
    595c:	d0 40       	sbci	r29, 0x00	; 0
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    595e:	8b 2d       	mov	r24, r11
    5960:	80 53       	subi	r24, 0x30	; 48
    5962:	8a 30       	cpi	r24, 0x0A	; 10
    5964:	00 f3       	brcs	.-64     	; 0x5926 <f_printf+0xde>
			w = w * 10 + c - '0';
			c = *fmt++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
    5966:	5c e6       	ldi	r21, 0x6C	; 108
    5968:	b5 16       	cp	r11, r21
    596a:	f9 f0       	breq	.+62     	; 0x59aa <f_printf+0x162>
    596c:	8c e4       	ldi	r24, 0x4C	; 76
    596e:	b8 16       	cp	r11, r24
    5970:	e1 f0       	breq	.+56     	; 0x59aa <f_printf+0x162>
			f |= 4; c = *fmt++;
		}
		if (!c) break;
    5972:	bb 20       	and	r11, r11
    5974:	51 f1       	breq	.+84     	; 0x59ca <f_printf+0x182>
		d = c;
		if (IsLower(d)) d -= 0x20;
    5976:	8b 2d       	mov	r24, r11
    5978:	81 56       	subi	r24, 0x61	; 97
    597a:	3b 2d       	mov	r19, r11
    597c:	8a 31       	cpi	r24, 0x1A	; 26
    597e:	08 f4       	brcc	.+2      	; 0x5982 <f_printf+0x13a>
    5980:	30 52       	subi	r19, 0x20	; 32
		switch (d) {				/* Type is... */
    5982:	3f 34       	cpi	r19, 0x4F	; 79
    5984:	09 f4       	brne	.+2      	; 0x5988 <f_printf+0x140>
    5986:	90 c1       	rjmp	.+800    	; 0x5ca8 <f_printf+0x460>
    5988:	30 35       	cpi	r19, 0x50	; 80
    598a:	ec f5       	brge	.+122    	; 0x5a06 <f_printf+0x1be>
    598c:	33 34       	cpi	r19, 0x43	; 67
    598e:	09 f4       	brne	.+2      	; 0x5992 <f_printf+0x14a>
    5990:	97 c1       	rjmp	.+814    	; 0x5cc0 <f_printf+0x478>
    5992:	34 34       	cpi	r19, 0x44	; 68
    5994:	09 f4       	brne	.+2      	; 0x5998 <f_printf+0x150>
    5996:	8e c1       	rjmp	.+796    	; 0x5cb4 <f_printf+0x46c>
    5998:	32 34       	cpi	r19, 0x42	; 66
    599a:	09 f4       	brne	.+2      	; 0x599e <f_printf+0x156>
    599c:	7f c1       	rjmp	.+766    	; 0x5c9c <f_printf+0x454>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
    599e:	ce 01       	movw	r24, r28
    59a0:	81 96       	adiw	r24, 0x21	; 33
    59a2:	6b 2d       	mov	r22, r11
    59a4:	0e 94 a2 20 	call	0x4144	; 0x4144 <putc_bfd>
    59a8:	7b cf       	rjmp	.-266    	; 0x58a0 <f_printf+0x58>
		while (IsDigit(c)) {		/* Precision */
			w = w * 10 + c - '0';
			c = *fmt++;
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
			f |= 4; c = *fmt++;
    59aa:	24 60       	ori	r18, 0x04	; 4
    59ac:	c1 58       	subi	r28, 0x81	; 129
    59ae:	df 4f       	sbci	r29, 0xFF	; 255
    59b0:	e8 81       	ld	r30, Y
    59b2:	f9 81       	ldd	r31, Y+1	; 0x01
    59b4:	cf 57       	subi	r28, 0x7F	; 127
    59b6:	d0 40       	sbci	r29, 0x00	; 0
    59b8:	b1 90       	ld	r11, Z+
    59ba:	c1 58       	subi	r28, 0x81	; 129
    59bc:	df 4f       	sbci	r29, 0xFF	; 255
    59be:	f9 83       	std	Y+1, r31	; 0x01
    59c0:	e8 83       	st	Y, r30
    59c2:	cf 57       	subi	r28, 0x7F	; 127
    59c4:	d0 40       	sbci	r29, 0x00	; 0
		}
		if (!c) break;
    59c6:	bb 20       	and	r11, r11
    59c8:	b1 f6       	brne	.-84     	; 0x5976 <f_printf+0x12e>
		while (j++ < w) putc_bfd(&pb, d);
	}

	va_end(arp);

	return putc_flush(&pb);
    59ca:	ce 01       	movw	r24, r28
    59cc:	81 96       	adiw	r24, 0x21	; 33
    59ce:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <putc_flush>
}
    59d2:	c8 59       	subi	r28, 0x98	; 152
    59d4:	df 4f       	sbci	r29, 0xFF	; 255
    59d6:	0f b6       	in	r0, 0x3f	; 63
    59d8:	f8 94       	cli
    59da:	de bf       	out	0x3e, r29	; 62
    59dc:	0f be       	out	0x3f, r0	; 63
    59de:	cd bf       	out	0x3d, r28	; 61
    59e0:	df 91       	pop	r29
    59e2:	cf 91       	pop	r28
    59e4:	1f 91       	pop	r17
    59e6:	0f 91       	pop	r16
    59e8:	ff 90       	pop	r15
    59ea:	ef 90       	pop	r14
    59ec:	df 90       	pop	r13
    59ee:	cf 90       	pop	r12
    59f0:	bf 90       	pop	r11
    59f2:	af 90       	pop	r10
    59f4:	9f 90       	pop	r9
    59f6:	8f 90       	pop	r8
    59f8:	7f 90       	pop	r7
    59fa:	6f 90       	pop	r6
    59fc:	5f 90       	pop	r5
    59fe:	4f 90       	pop	r4
    5a00:	3f 90       	pop	r3
    5a02:	2f 90       	pop	r2
    5a04:	08 95       	ret
			f |= 4; c = *fmt++;
		}
		if (!c) break;
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    5a06:	35 35       	cpi	r19, 0x55	; 85
    5a08:	09 f4       	brne	.+2      	; 0x5a0c <f_printf+0x1c4>
    5a0a:	54 c1       	rjmp	.+680    	; 0x5cb4 <f_printf+0x46c>
    5a0c:	38 35       	cpi	r19, 0x58	; 88
    5a0e:	09 f4       	brne	.+2      	; 0x5a12 <f_printf+0x1ca>
    5a10:	7d c0       	rjmp	.+250    	; 0x5b0c <f_printf+0x2c4>
    5a12:	33 35       	cpi	r19, 0x53	; 83
    5a14:	21 f6       	brne	.-120    	; 0x599e <f_printf+0x156>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
    5a16:	a9 96       	adiw	r28, 0x29	; 41
    5a18:	ee ad       	sts	0x6e, r30
    5a1a:	ff ad       	sts	0x6f, r31
    5a1c:	a9 97       	sbiw	r28, 0x29	; 41
    5a1e:	af 01       	movw	r20, r30
    5a20:	4e 5f       	subi	r20, 0xFE	; 254
    5a22:	5f 4f       	sbci	r21, 0xFF	; 255
    5a24:	a9 96       	adiw	r28, 0x29	; 41
    5a26:	5f af       	sts	0x7f, r21
    5a28:	4e af       	sts	0x7e, r20
    5a2a:	a9 97       	sbiw	r28, 0x29	; 41
    5a2c:	a0 80       	ld	r10, Z
    5a2e:	b1 80       	ldd	r11, Z+1	; 0x01
			for (j = 0; p[j]; j++) ;
    5a30:	f5 01       	movw	r30, r10
    5a32:	60 81       	ld	r22, Z
    5a34:	66 23       	and	r22, r22
    5a36:	09 f4       	brne	.+2      	; 0x5a3a <f_printf+0x1f2>
    5a38:	57 c1       	rjmp	.+686    	; 0x5ce8 <f_printf+0x4a0>

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    5a3a:	31 96       	adiw	r30, 0x01	; 1
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    5a3c:	ee 24       	eor	r14, r14
    5a3e:	ff 24       	eor	r15, r15
    5a40:	08 94       	sec
    5a42:	e1 1c       	adc	r14, r1
    5a44:	f1 1c       	adc	r15, r1
    5a46:	81 91       	ld	r24, Z+
    5a48:	88 23       	and	r24, r24
    5a4a:	d1 f7       	brne	.-12     	; 0x5a40 <f_printf+0x1f8>
    5a4c:	87 01       	movw	r16, r14
    5a4e:	0f 5f       	subi	r16, 0xFF	; 255
    5a50:	1f 4f       	sbci	r17, 0xFF	; 255
			if (!(f & 2)) {
    5a52:	21 fd       	sbrc	r18, 1
    5a54:	16 c0       	rjmp	.+44     	; 0x5a82 <f_printf+0x23a>
				while (j++ < w) putc_bfd(&pb, ' ');
    5a56:	ec 14       	cp	r14, r12
    5a58:	fd 04       	cpc	r15, r13
    5a5a:	10 f0       	brcs	.+4      	; 0x5a60 <f_printf+0x218>
    5a5c:	4a c1       	rjmp	.+660    	; 0x5cf2 <f_printf+0x4aa>
    5a5e:	87 01       	movw	r16, r14
    5a60:	ce 01       	movw	r24, r28
    5a62:	81 96       	adiw	r24, 0x21	; 33
    5a64:	60 e2       	ldi	r22, 0x20	; 32
    5a66:	0e 94 a2 20 	call	0x4144	; 0x4144 <putc_bfd>
    5a6a:	78 01       	movw	r14, r16
    5a6c:	08 94       	sec
    5a6e:	e1 1c       	adc	r14, r1
    5a70:	f1 1c       	adc	r15, r1
    5a72:	0c 15       	cp	r16, r12
    5a74:	1d 05       	cpc	r17, r13
    5a76:	98 f3       	brcs	.-26     	; 0x5a5e <f_printf+0x216>
    5a78:	f5 01       	movw	r30, r10
    5a7a:	60 81       	ld	r22, Z
    5a7c:	87 01       	movw	r16, r14
    5a7e:	0f 5f       	subi	r16, 0xFF	; 255
    5a80:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			while (*p) putc_bfd(&pb, *p++);
    5a82:	66 23       	and	r22, r22
    5a84:	61 f0       	breq	.+24     	; 0x5a9e <f_printf+0x256>

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    5a86:	08 94       	sec
    5a88:	a1 1c       	adc	r10, r1
    5a8a:	b1 1c       	adc	r11, r1
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
			}
			while (*p) putc_bfd(&pb, *p++);
    5a8c:	ce 01       	movw	r24, r28
    5a8e:	81 96       	adiw	r24, 0x21	; 33
    5a90:	0e 94 a2 20 	call	0x4144	; 0x4144 <putc_bfd>
    5a94:	f5 01       	movw	r30, r10
    5a96:	61 91       	ld	r22, Z+
    5a98:	5f 01       	movw	r10, r30
    5a9a:	66 23       	and	r22, r22
    5a9c:	b9 f7       	brne	.-18     	; 0x5a8c <f_printf+0x244>
			while (j++ < w) putc_bfd(&pb, ' ');
    5a9e:	ec 14       	cp	r14, r12
    5aa0:	fd 04       	cpc	r15, r13
    5aa2:	10 f0       	brcs	.+4      	; 0x5aa8 <f_printf+0x260>
    5aa4:	fd ce       	rjmp	.-518    	; 0x58a0 <f_printf+0x58>
    5aa6:	8c 01       	movw	r16, r24
    5aa8:	ce 01       	movw	r24, r28
    5aaa:	81 96       	adiw	r24, 0x21	; 33
    5aac:	60 e2       	ldi	r22, 0x20	; 32
    5aae:	0e 94 a2 20 	call	0x4144	; 0x4144 <putc_bfd>
    5ab2:	c8 01       	movw	r24, r16
    5ab4:	01 96       	adiw	r24, 0x01	; 1
    5ab6:	0c 15       	cp	r16, r12
    5ab8:	1d 05       	cpc	r17, r13
    5aba:	a8 f3       	brcs	.-22     	; 0x5aa6 <f_printf+0x25e>
    5abc:	f1 ce       	rjmp	.-542    	; 0x58a0 <f_printf+0x58>
			continue;
		}
		w = f = 0;
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
    5abe:	c1 58       	subi	r28, 0x81	; 129
    5ac0:	df 4f       	sbci	r29, 0xFF	; 255
    5ac2:	e8 81       	ld	r30, Y
    5ac4:	f9 81       	ldd	r31, Y+1	; 0x01
    5ac6:	cf 57       	subi	r28, 0x7F	; 127
    5ac8:	d0 40       	sbci	r29, 0x00	; 0
    5aca:	b2 80       	ldd	r11, Z+2	; 0x02
    5acc:	33 96       	adiw	r30, 0x03	; 3
    5ace:	c1 58       	subi	r28, 0x81	; 129
    5ad0:	df 4f       	sbci	r29, 0xFF	; 255
    5ad2:	f9 83       	std	Y+1, r31	; 0x01
    5ad4:	e8 83       	st	Y, r30
    5ad6:	cf 57       	subi	r28, 0x7F	; 127
    5ad8:	d0 40       	sbci	r29, 0x00	; 0
    5ada:	21 e0       	ldi	r18, 0x01	; 1
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		while (IsDigit(c)) {		/* Precision */
    5adc:	8b 2d       	mov	r24, r11
    5ade:	80 53       	subi	r24, 0x30	; 48
    5ae0:	8a 30       	cpi	r24, 0x0A	; 10
    5ae2:	08 f4       	brcc	.+2      	; 0x5ae6 <f_printf+0x29e>
    5ae4:	18 cf       	rjmp	.-464    	; 0x5916 <f_printf+0xce>
    5ae6:	cc 24       	eor	r12, r12
    5ae8:	dd 24       	eor	r13, r13
    5aea:	3d cf       	rjmp	.-390    	; 0x5966 <f_printf+0x11e>
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
    5aec:	c1 58       	subi	r28, 0x81	; 129
    5aee:	df 4f       	sbci	r29, 0xFF	; 255
    5af0:	e8 81       	ld	r30, Y
    5af2:	f9 81       	ldd	r31, Y+1	; 0x01
    5af4:	cf 57       	subi	r28, 0x7F	; 127
    5af6:	d0 40       	sbci	r29, 0x00	; 0
    5af8:	b2 80       	ldd	r11, Z+2	; 0x02
    5afa:	33 96       	adiw	r30, 0x03	; 3
    5afc:	c1 58       	subi	r28, 0x81	; 129
    5afe:	df 4f       	sbci	r29, 0xFF	; 255
    5b00:	f9 83       	std	Y+1, r31	; 0x01
    5b02:	e8 83       	st	Y, r30
    5b04:	cf 57       	subi	r28, 0x7F	; 127
    5b06:	d0 40       	sbci	r29, 0x00	; 0
    5b08:	22 e0       	ldi	r18, 0x02	; 2
    5b0a:	00 cf       	rjmp	.-512    	; 0x590c <f_printf+0xc4>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
    5b0c:	60 e1       	ldi	r22, 0x10	; 16
    5b0e:	26 2e       	mov	r2, r22
    5b10:	31 2c       	mov	r3, r1
    5b12:	41 2c       	mov	r4, r1
    5b14:	51 2c       	mov	r5, r1
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    5b16:	a2 2e       	mov	r10, r18
    5b18:	a9 96       	adiw	r28, 0x29	; 41
    5b1a:	ee ad       	sts	0x6e, r30
    5b1c:	ff ad       	sts	0x6f, r31
    5b1e:	a9 97       	sbiw	r28, 0x29	; 41
    5b20:	22 ff       	sbrs	r18, 2
    5b22:	97 c0       	rjmp	.+302    	; 0x5c52 <f_printf+0x40a>
    5b24:	af 01       	movw	r20, r30
    5b26:	4c 5f       	subi	r20, 0xFC	; 252
    5b28:	5f 4f       	sbci	r21, 0xFF	; 255
    5b2a:	a9 96       	adiw	r28, 0x29	; 41
    5b2c:	5f af       	sts	0x7f, r21
    5b2e:	4e af       	sts	0x7e, r20
    5b30:	a9 97       	sbiw	r28, 0x29	; 41
    5b32:	60 81       	ld	r22, Z
    5b34:	71 81       	ldd	r23, Z+1	; 0x01
    5b36:	82 81       	ldd	r24, Z+2	; 0x02
    5b38:	93 81       	ldd	r25, Z+3	; 0x03
		if (d == 'D' && (v & 0x80000000)) {
    5b3a:	34 34       	cpi	r19, 0x44	; 68
    5b3c:	09 f4       	brne	.+2      	; 0x5b40 <f_printf+0x2f8>
    5b3e:	a2 c0       	rjmp	.+324    	; 0x5c84 <f_printf+0x43c>
			v = 0 - v;
    5b40:	4e 01       	movw	r8, r28
    5b42:	08 94       	sec
    5b44:	81 1c       	adc	r8, r1
    5b46:	91 1c       	adc	r9, r1
			f |= 8;
		}
		i = 0;
    5b48:	66 24       	eor	r6, r6
    5b4a:	77 24       	eor	r7, r7
		do {
			d = (TCHAR)(v % r); v /= r;
    5b4c:	a2 01       	movw	r20, r4
    5b4e:	91 01       	movw	r18, r2
    5b50:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <__udivmodsi4>
    5b54:	89 01       	movw	r16, r18
    5b56:	9a 01       	movw	r18, r20
    5b58:	46 2f       	mov	r20, r22
    5b5a:	c9 01       	movw	r24, r18
    5b5c:	b8 01       	movw	r22, r16
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    5b5e:	4a 30       	cpi	r20, 0x0A	; 10
    5b60:	2c f0       	brlt	.+10     	; 0x5b6c <f_printf+0x324>
    5b62:	58 e7       	ldi	r21, 0x78	; 120
    5b64:	b5 16       	cp	r11, r21
    5b66:	a9 f0       	breq	.+42     	; 0x5b92 <f_printf+0x34a>
    5b68:	57 e0       	ldi	r21, 0x07	; 7
    5b6a:	45 0f       	add	r20, r21
			str[i++] = d + '0';
    5b6c:	40 5d       	subi	r20, 0xD0	; 208
    5b6e:	f4 01       	movw	r30, r8
    5b70:	41 93       	st	Z+, r20
    5b72:	4f 01       	movw	r8, r30
    5b74:	73 01       	movw	r14, r6
    5b76:	08 94       	sec
    5b78:	e1 1c       	adc	r14, r1
    5b7a:	f1 1c       	adc	r15, r1
		} while (v && i < sizeof str / sizeof str[0]);
    5b7c:	01 15       	cp	r16, r1
    5b7e:	11 05       	cpc	r17, r1
    5b80:	21 05       	cpc	r18, r1
    5b82:	31 05       	cpc	r19, r1
    5b84:	59 f0       	breq	.+22     	; 0x5b9c <f_printf+0x354>
    5b86:	f0 e2       	ldi	r31, 0x20	; 32
    5b88:	ef 16       	cp	r14, r31
    5b8a:	f1 04       	cpc	r15, r1
    5b8c:	21 f0       	breq	.+8      	; 0x5b96 <f_printf+0x34e>
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
    5b8e:	37 01       	movw	r6, r14
    5b90:	dd cf       	rjmp	.-70     	; 0x5b4c <f_printf+0x304>
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    5b92:	57 e2       	ldi	r21, 0x27	; 39
    5b94:	ea cf       	rjmp	.-44     	; 0x5b6a <f_printf+0x322>
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
    5b96:	3f e1       	ldi	r19, 0x1F	; 31
    5b98:	63 2e       	mov	r6, r19
    5b9a:	71 2c       	mov	r7, r1
		if (f & 8) str[i++] = '-';
    5b9c:	a3 fe       	sbrs	r10, 3
    5b9e:	0d c0       	rjmp	.+26     	; 0x5bba <f_printf+0x372>
    5ba0:	e1 e0       	ldi	r30, 0x01	; 1
    5ba2:	f0 e0       	ldi	r31, 0x00	; 0
    5ba4:	ec 0f       	add	r30, r28
    5ba6:	fd 1f       	adc	r31, r29
    5ba8:	ee 0d       	add	r30, r14
    5baa:	ff 1d       	adc	r31, r15
    5bac:	2d e2       	ldi	r18, 0x2D	; 45
    5bae:	20 83       	st	Z, r18
    5bb0:	22 e0       	ldi	r18, 0x02	; 2
    5bb2:	e2 2e       	mov	r14, r18
    5bb4:	f1 2c       	mov	r15, r1
    5bb6:	e6 0c       	add	r14, r6
    5bb8:	f7 1c       	adc	r15, r7
		j = i; d = (f & 1) ? '0' : ' ';
    5bba:	a0 fe       	sbrs	r10, 0
    5bbc:	44 c0       	rjmp	.+136    	; 0x5c46 <f_printf+0x3fe>
    5bbe:	90 e3       	ldi	r25, 0x30	; 48
    5bc0:	99 2e       	mov	r9, r25
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    5bc2:	a1 fc       	sbrc	r10, 1
    5bc4:	44 c0       	rjmp	.+136    	; 0x5c4e <f_printf+0x406>
    5bc6:	57 01       	movw	r10, r14
    5bc8:	08 94       	sec
    5bca:	a1 1c       	adc	r10, r1
    5bcc:	b1 1c       	adc	r11, r1
    5bce:	ec 14       	cp	r14, r12
    5bd0:	fd 04       	cpc	r15, r13
    5bd2:	b0 f4       	brcc	.+44     	; 0x5c00 <f_printf+0x3b8>
    5bd4:	ce 01       	movw	r24, r28
    5bd6:	81 96       	adiw	r24, 0x21	; 33
    5bd8:	69 2d       	mov	r22, r9
    5bda:	0e 94 a2 20 	call	0x4144	; 0x4144 <putc_bfd>
    5bde:	87 01       	movw	r16, r14
    5be0:	05 c0       	rjmp	.+10     	; 0x5bec <f_printf+0x3a4>
    5be2:	ce 01       	movw	r24, r28
    5be4:	81 96       	adiw	r24, 0x21	; 33
    5be6:	69 2d       	mov	r22, r9
    5be8:	0e 94 a2 20 	call	0x4144	; 0x4144 <putc_bfd>
    5bec:	0f 5f       	subi	r16, 0xFF	; 255
    5bee:	1f 4f       	sbci	r17, 0xFF	; 255
    5bf0:	0c 15       	cp	r16, r12
    5bf2:	1d 05       	cpc	r17, r13
    5bf4:	b0 f3       	brcs	.-20     	; 0x5be2 <f_printf+0x39a>

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    5bf6:	c6 01       	movw	r24, r12
    5bf8:	8e 19       	sub	r24, r14
    5bfa:	9f 09       	sbc	r25, r15
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    5bfc:	a8 0e       	add	r10, r24
    5bfe:	b9 1e       	adc	r11, r25

/*-----------------------------------------------------------------------*/
/* Put a formatted string to the file                                    */
/*-----------------------------------------------------------------------*/

int f_printf (
    5c00:	01 e0       	ldi	r16, 0x01	; 1
    5c02:	10 e0       	ldi	r17, 0x00	; 0
    5c04:	0c 0f       	add	r16, r28
    5c06:	1d 1f       	adc	r17, r29
    5c08:	0e 0d       	add	r16, r14
    5c0a:	1f 1d       	adc	r17, r15
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
		do putc_bfd(&pb, str[--i]); while (i);
    5c0c:	08 94       	sec
    5c0e:	e1 08       	sbc	r14, r1
    5c10:	f1 08       	sbc	r15, r1
    5c12:	ce 01       	movw	r24, r28
    5c14:	81 96       	adiw	r24, 0x21	; 33
    5c16:	f8 01       	movw	r30, r16
    5c18:	62 91       	ld	r22, -Z
    5c1a:	8f 01       	movw	r16, r30
    5c1c:	0e 94 a2 20 	call	0x4144	; 0x4144 <putc_bfd>
    5c20:	e1 14       	cp	r14, r1
    5c22:	f1 04       	cpc	r15, r1
    5c24:	99 f7       	brne	.-26     	; 0x5c0c <f_printf+0x3c4>
		while (j++ < w) putc_bfd(&pb, d);
    5c26:	ac 14       	cp	r10, r12
    5c28:	bd 04       	cpc	r11, r13
    5c2a:	08 f0       	brcs	.+2      	; 0x5c2e <f_printf+0x3e6>
    5c2c:	39 ce       	rjmp	.-910    	; 0x58a0 <f_printf+0x58>
    5c2e:	ce 01       	movw	r24, r28
    5c30:	81 96       	adiw	r24, 0x21	; 33
    5c32:	69 2d       	mov	r22, r9
    5c34:	0e 94 a2 20 	call	0x4144	; 0x4144 <putc_bfd>
    5c38:	08 94       	sec
    5c3a:	a1 1c       	adc	r10, r1
    5c3c:	b1 1c       	adc	r11, r1
    5c3e:	ac 14       	cp	r10, r12
    5c40:	bd 04       	cpc	r11, r13
    5c42:	a8 f3       	brcs	.-22     	; 0x5c2e <f_printf+0x3e6>
    5c44:	2d ce       	rjmp	.-934    	; 0x58a0 <f_printf+0x58>
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
    5c46:	80 e2       	ldi	r24, 0x20	; 32
    5c48:	98 2e       	mov	r9, r24
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
    5c4a:	a1 fe       	sbrs	r10, 1
    5c4c:	bc cf       	rjmp	.-136    	; 0x5bc6 <f_printf+0x37e>
    5c4e:	57 01       	movw	r10, r14
    5c50:	d7 cf       	rjmp	.-82     	; 0x5c00 <f_printf+0x3b8>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    5c52:	34 34       	cpi	r19, 0x44	; 68
    5c54:	61 f0       	breq	.+24     	; 0x5c6e <f_printf+0x426>
    5c56:	af 01       	movw	r20, r30
    5c58:	4e 5f       	subi	r20, 0xFE	; 254
    5c5a:	5f 4f       	sbci	r21, 0xFF	; 255
    5c5c:	a9 96       	adiw	r28, 0x29	; 41
    5c5e:	5f af       	sts	0x7f, r21
    5c60:	4e af       	sts	0x7e, r20
    5c62:	a9 97       	sbiw	r28, 0x29	; 41
    5c64:	60 81       	ld	r22, Z
    5c66:	71 81       	ldd	r23, Z+1	; 0x01
    5c68:	80 e0       	ldi	r24, 0x00	; 0
    5c6a:	90 e0       	ldi	r25, 0x00	; 0
    5c6c:	69 cf       	rjmp	.-302    	; 0x5b40 <f_printf+0x2f8>
    5c6e:	60 81       	ld	r22, Z
    5c70:	71 81       	ldd	r23, Z+1	; 0x01
    5c72:	88 27       	eor	r24, r24
    5c74:	77 fd       	sbrc	r23, 7
    5c76:	80 95       	com	r24
    5c78:	98 2f       	mov	r25, r24
    5c7a:	32 96       	adiw	r30, 0x02	; 2
    5c7c:	a9 96       	adiw	r28, 0x29	; 41
    5c7e:	ff af       	sts	0x7f, r31
    5c80:	ee af       	sts	0x7e, r30
    5c82:	a9 97       	sbiw	r28, 0x29	; 41
		if (d == 'D' && (v & 0x80000000)) {
    5c84:	97 ff       	sbrs	r25, 7
    5c86:	5c cf       	rjmp	.-328    	; 0x5b40 <f_printf+0x2f8>
			v = 0 - v;
    5c88:	90 95       	com	r25
    5c8a:	80 95       	com	r24
    5c8c:	70 95       	com	r23
    5c8e:	61 95       	neg	r22
    5c90:	7f 4f       	sbci	r23, 0xFF	; 255
    5c92:	8f 4f       	sbci	r24, 0xFF	; 255
    5c94:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
    5c96:	28 60       	ori	r18, 0x08	; 8
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
		if (d == 'D' && (v & 0x80000000)) {
			v = 0 - v;
    5c98:	a2 2e       	mov	r10, r18
    5c9a:	52 cf       	rjmp	.-348    	; 0x5b40 <f_printf+0x2f8>
			f |= 4; c = *fmt++;
		}
		if (!c) break;
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
    5c9c:	52 e0       	ldi	r21, 0x02	; 2
    5c9e:	25 2e       	mov	r2, r21
    5ca0:	31 2c       	mov	r3, r1
    5ca2:	41 2c       	mov	r4, r1
    5ca4:	51 2c       	mov	r5, r1
    5ca6:	37 cf       	rjmp	.-402    	; 0x5b16 <f_printf+0x2ce>
    5ca8:	48 e0       	ldi	r20, 0x08	; 8
    5caa:	24 2e       	mov	r2, r20
    5cac:	31 2c       	mov	r3, r1
    5cae:	41 2c       	mov	r4, r1
    5cb0:	51 2c       	mov	r5, r1
    5cb2:	31 cf       	rjmp	.-414    	; 0x5b16 <f_printf+0x2ce>
    5cb4:	7a e0       	ldi	r23, 0x0A	; 10
    5cb6:	27 2e       	mov	r2, r23
    5cb8:	31 2c       	mov	r3, r1
    5cba:	41 2c       	mov	r4, r1
    5cbc:	51 2c       	mov	r5, r1
    5cbe:	2b cf       	rjmp	.-426    	; 0x5b16 <f_printf+0x2ce>
			}
			while (*p) putc_bfd(&pb, *p++);
			while (j++ < w) putc_bfd(&pb, ' ');
			continue;
		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
    5cc0:	a9 96       	adiw	r28, 0x29	; 41
    5cc2:	0e ad       	sts	0x6e, r16
    5cc4:	1f ad       	sts	0x6f, r17
    5cc6:	a9 97       	sbiw	r28, 0x29	; 41
    5cc8:	0e 5f       	subi	r16, 0xFE	; 254
    5cca:	1f 4f       	sbci	r17, 0xFF	; 255
    5ccc:	ce 01       	movw	r24, r28
    5cce:	81 96       	adiw	r24, 0x21	; 33
    5cd0:	a9 96       	adiw	r28, 0x29	; 41
    5cd2:	ee ad       	sts	0x6e, r30
    5cd4:	ff ad       	sts	0x6f, r31
    5cd6:	a9 97       	sbiw	r28, 0x29	; 41
    5cd8:	60 81       	ld	r22, Z
    5cda:	0e 94 a2 20 	call	0x4144	; 0x4144 <putc_bfd>
    5cde:	a9 96       	adiw	r28, 0x29	; 41
    5ce0:	1f af       	sts	0x7f, r17
    5ce2:	0e af       	sts	0x7e, r16
    5ce4:	a9 97       	sbiw	r28, 0x29	; 41
    5ce6:	dc cd       	rjmp	.-1096   	; 0x58a0 <f_printf+0x58>
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    5ce8:	01 e0       	ldi	r16, 0x01	; 1
    5cea:	10 e0       	ldi	r17, 0x00	; 0
    5cec:	ee 24       	eor	r14, r14
    5cee:	ff 24       	eor	r15, r15
    5cf0:	b0 ce       	rjmp	.-672    	; 0x5a52 <f_printf+0x20a>
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
    5cf2:	78 01       	movw	r14, r16
    5cf4:	0f 5f       	subi	r16, 0xFF	; 255
    5cf6:	1f 4f       	sbci	r17, 0xFF	; 255
    5cf8:	c4 ce       	rjmp	.-632    	; 0x5a82 <f_printf+0x23a>

00005cfa <disk_status>:
	case DRV_MMC :
		return mmc_disk_status();
#endif
	}
	return STA_NOINIT;
}
    5cfa:	81 e0       	ldi	r24, 0x01	; 1
    5cfc:	08 95       	ret

00005cfe <disk_initialize>:
	case DRV_MMC :
		return mmc_disk_initialize();
#endif
	}
	return STA_NOINIT;
}
    5cfe:	81 e0       	ldi	r24, 0x01	; 1
    5d00:	08 95       	ret

00005d02 <disk_read>:
	case DRV_MMC :
		return mmc_disk_read(buff, sector, count);
#endif
	}
	return RES_PARERR;
}
    5d02:	84 e0       	ldi	r24, 0x04	; 4
    5d04:	90 e0       	ldi	r25, 0x00	; 0
    5d06:	08 95       	ret

00005d08 <disk_write>:
	case DRV_MMC :
		return mmc_disk_write(buff, sector, count);
#endif
	}
	return RES_PARERR;
}
    5d08:	84 e0       	ldi	r24, 0x04	; 4
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	08 95       	ret

00005d0e <disk_ioctl>:
	case DRV_MMC :	
		return mmc_disk_ioctl(cmd, buff);
#endif
	}
	return RES_PARERR;
}
    5d0e:	84 e0       	ldi	r24, 0x04	; 4
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	08 95       	ret

00005d14 <disk_timerproc>:
	cf_disk_timerproc();
#endif
#ifdef DRV_MMC
	mmc_disk_timerproc();
#endif
}
    5d14:	08 95       	ret

00005d16 <main>:
#include "ffconf.h"
#include "ff.h"
#include "mmc_avr.h"
//#include "RSXAVRD.h"

int main(void) {
    5d16:	cf 93       	push	r28
    5d18:	df 93       	push	r29
    5d1a:	cd b7       	in	r28, 0x3d	; 61
    5d1c:	de b7       	in	r29, 0x3e	; 62
    5d1e:	cf 52       	subi	r28, 0x2F	; 47
    5d20:	d2 40       	sbci	r29, 0x02	; 2
    5d22:	0f b6       	in	r0, 0x3f	; 63
    5d24:	f8 94       	cli
    5d26:	de bf       	out	0x3e, r29	; 62
    5d28:	0f be       	out	0x3f, r0	; 63
    5d2a:	cd bf       	out	0x3d, r28	; 61


    /*if(mmc_disk_initialize() != FR_OK){ // changed line in find_volume to call mmc_disk_initialize instead of regular disk_initialize
        PORTD = 0xAB;
    }*/
    if(f_mount(&fs,"0:/", 1) == FR_OK){
    5d2c:	ce 01       	movw	r24, r28
    5d2e:	01 96       	adiw	r24, 0x01	; 1
    5d30:	60 e0       	ldi	r22, 0x00	; 0
    5d32:	71 e0       	ldi	r23, 0x01	; 1
    5d34:	41 e0       	ldi	r20, 0x01	; 1
    5d36:	0e 94 e5 19 	call	0x33ca	; 0x33ca <f_mount>
    5d3a:	00 97       	sbiw	r24, 0x00	; 0
    5d3c:	31 f4       	brne	.+12     	; 0x5d4a <main+0x34>
        // todo: figure out which FR code is being return by storing result in Var and checking which one is the broken one
       while(1){
          SPDR = 0xAC;
    5d3e:	9c ea       	ldi	r25, 0xAC	; 172
    5d40:	9f b9       	out	0x0f, r25	; 15
          while(!(SPSR && (1<<SPIF)));
    5d42:	8e b1       	in	r24, 0x0e	; 14
    5d44:	88 23       	and	r24, r24
    5d46:	e9 f3       	breq	.-6      	; 0x5d42 <main+0x2c>
    5d48:	fb cf       	rjmp	.-10     	; 0x5d40 <main+0x2a>
    5d4a:	ff cf       	rjmp	.-2      	; 0x5d4a <main+0x34>

00005d4c <__mulsi3>:
    5d4c:	62 9f       	mul	r22, r18
    5d4e:	d0 01       	movw	r26, r0
    5d50:	73 9f       	mul	r23, r19
    5d52:	f0 01       	movw	r30, r0
    5d54:	82 9f       	mul	r24, r18
    5d56:	e0 0d       	add	r30, r0
    5d58:	f1 1d       	adc	r31, r1
    5d5a:	64 9f       	mul	r22, r20
    5d5c:	e0 0d       	add	r30, r0
    5d5e:	f1 1d       	adc	r31, r1
    5d60:	92 9f       	mul	r25, r18
    5d62:	f0 0d       	add	r31, r0
    5d64:	83 9f       	mul	r24, r19
    5d66:	f0 0d       	add	r31, r0
    5d68:	74 9f       	mul	r23, r20
    5d6a:	f0 0d       	add	r31, r0
    5d6c:	65 9f       	mul	r22, r21
    5d6e:	f0 0d       	add	r31, r0
    5d70:	99 27       	eor	r25, r25
    5d72:	72 9f       	mul	r23, r18
    5d74:	b0 0d       	add	r27, r0
    5d76:	e1 1d       	adc	r30, r1
    5d78:	f9 1f       	adc	r31, r25
    5d7a:	63 9f       	mul	r22, r19
    5d7c:	b0 0d       	add	r27, r0
    5d7e:	e1 1d       	adc	r30, r1
    5d80:	f9 1f       	adc	r31, r25
    5d82:	bd 01       	movw	r22, r26
    5d84:	cf 01       	movw	r24, r30
    5d86:	11 24       	eor	r1, r1
    5d88:	08 95       	ret

00005d8a <__udivmodhi4>:
    5d8a:	aa 1b       	sub	r26, r26
    5d8c:	bb 1b       	sub	r27, r27
    5d8e:	51 e1       	ldi	r21, 0x11	; 17
    5d90:	07 c0       	rjmp	.+14     	; 0x5da0 <__udivmodhi4_ep>

00005d92 <__udivmodhi4_loop>:
    5d92:	aa 1f       	adc	r26, r26
    5d94:	bb 1f       	adc	r27, r27
    5d96:	a6 17       	cp	r26, r22
    5d98:	b7 07       	cpc	r27, r23
    5d9a:	10 f0       	brcs	.+4      	; 0x5da0 <__udivmodhi4_ep>
    5d9c:	a6 1b       	sub	r26, r22
    5d9e:	b7 0b       	sbc	r27, r23

00005da0 <__udivmodhi4_ep>:
    5da0:	88 1f       	adc	r24, r24
    5da2:	99 1f       	adc	r25, r25
    5da4:	5a 95       	dec	r21
    5da6:	a9 f7       	brne	.-22     	; 0x5d92 <__udivmodhi4_loop>
    5da8:	80 95       	com	r24
    5daa:	90 95       	com	r25
    5dac:	bc 01       	movw	r22, r24
    5dae:	cd 01       	movw	r24, r26
    5db0:	08 95       	ret

00005db2 <__udivmodsi4>:
    5db2:	a1 e2       	ldi	r26, 0x21	; 33
    5db4:	1a 2e       	mov	r1, r26
    5db6:	aa 1b       	sub	r26, r26
    5db8:	bb 1b       	sub	r27, r27
    5dba:	fd 01       	movw	r30, r26
    5dbc:	0d c0       	rjmp	.+26     	; 0x5dd8 <__udivmodsi4_ep>

00005dbe <__udivmodsi4_loop>:
    5dbe:	aa 1f       	adc	r26, r26
    5dc0:	bb 1f       	adc	r27, r27
    5dc2:	ee 1f       	adc	r30, r30
    5dc4:	ff 1f       	adc	r31, r31
    5dc6:	a2 17       	cp	r26, r18
    5dc8:	b3 07       	cpc	r27, r19
    5dca:	e4 07       	cpc	r30, r20
    5dcc:	f5 07       	cpc	r31, r21
    5dce:	20 f0       	brcs	.+8      	; 0x5dd8 <__udivmodsi4_ep>
    5dd0:	a2 1b       	sub	r26, r18
    5dd2:	b3 0b       	sbc	r27, r19
    5dd4:	e4 0b       	sbc	r30, r20
    5dd6:	f5 0b       	sbc	r31, r21

00005dd8 <__udivmodsi4_ep>:
    5dd8:	66 1f       	adc	r22, r22
    5dda:	77 1f       	adc	r23, r23
    5ddc:	88 1f       	adc	r24, r24
    5dde:	99 1f       	adc	r25, r25
    5de0:	1a 94       	dec	r1
    5de2:	69 f7       	brne	.-38     	; 0x5dbe <__udivmodsi4_loop>
    5de4:	60 95       	com	r22
    5de6:	70 95       	com	r23
    5de8:	80 95       	com	r24
    5dea:	90 95       	com	r25
    5dec:	9b 01       	movw	r18, r22
    5dee:	ac 01       	movw	r20, r24
    5df0:	bd 01       	movw	r22, r26
    5df2:	cf 01       	movw	r24, r30
    5df4:	08 95       	ret

00005df6 <_exit>:
    5df6:	f8 94       	cli

00005df8 <__stop_program>:
    5df8:	ff cf       	rjmp	.-2      	; 0x5df8 <__stop_program>
