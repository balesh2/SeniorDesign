
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000052cc  00005360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000052cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  0080011c  0080011c  0000537c  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000537c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000081  00000000  00000000  00005a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000459e  00000000  00000000  00005c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b3  00000000  00000000  0000a1ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001477  00000000  00000000  0000a961  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bbc  00000000  00000000  0000bdd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000792  00000000  00000000  0000c994  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00008985  00000000  00000000  0000d126  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000590  00000000  00000000  00015aab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ec       	ldi	r30, 0xCC	; 204
      a0:	f2 e5       	ldi	r31, 0x52	; 82
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ac 31       	cpi	r26, 0x1C	; 28
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	11 e0       	ldi	r17, 0x01	; 1
      b0:	ac e1       	ldi	r26, 0x1C	; 28
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a3 32       	cpi	r26, 0x23	; 35
      ba:	b1 07       	cpc	r27, r17
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 11 29 	call	0x5222	; 0x5222 <main>
      c2:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <init_motors>:
#define MOT4_DIR_PIN 4
#define MOT5_DIR_PIN 5

/***********************************Motor Driver Functions***********************************/
void init_motors(){
	*MOTOR_EN_DDR |= (1<<MOT0_EN_PIN | 1<<MOT1_EN_PIN | 1<<MOT2_EN_PIN | 1<<MOT3_EN_PIN | 1<<MOT4_EN_PIN | 1<<MOT5_EN_PIN);
      ca:	e1 e6       	ldi	r30, 0x61	; 97
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	8c 6f       	ori	r24, 0xFC	; 252
      d2:	80 83       	st	Z, r24
	*MOTOR_DIR_DDR |= (1<<MOT0_DIR_PIN | 1<<MOT1_DIR_PIN | 1<<MOT2_DIR_PIN | 1<<MOT3_DIR_PIN | 1<<MOT4_DIR_PIN | 1<<MOT5_DIR_PIN);
      d4:	8a b3       	in	r24, 0x1a	; 26
      d6:	8f 63       	ori	r24, 0x3F	; 63
      d8:	8a bb       	out	0x1a, r24	; 26
	*MOTOR_STEP_DDR |= (1<<MOT0_STEP_PIN | 1<<MOT1_STEP_PIN | 1<<MOT2_STEP_PIN | 1<<MOT3_STEP_PIN | 1<<MOT4_STEP_PIN | 1<<MOT5_STEP_PIN);
      da:	84 b3       	in	r24, 0x14	; 20
      dc:	8f 63       	ori	r24, 0x3F	; 63
      de:	84 bb       	out	0x14, r24	; 20
}
      e0:	08 95       	ret

000000e2 <motor_pwr>:

void motor_pwr(uint8_t motor, uint8_t flag){
      e2:	cf 93       	push	r28
      e4:	df 93       	push	r29
      e6:	00 d0       	rcall	.+0      	; 0xe8 <motor_pwr+0x6>
      e8:	00 d0       	rcall	.+0      	; 0xea <motor_pwr+0x8>
      ea:	00 d0       	rcall	.+0      	; 0xec <motor_pwr+0xa>
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
	uint8_t motorENID[6] = {MOT0_EN_PIN, MOT1_EN_PIN, MOT2_EN_PIN,
      f0:	de 01       	movw	r26, r28
      f2:	11 96       	adiw	r26, 0x01	; 1
      f4:	e0 e0       	ldi	r30, 0x00	; 0
      f6:	f1 e0       	ldi	r31, 0x01	; 1
      f8:	96 e0       	ldi	r25, 0x06	; 6
      fa:	01 90       	ld	r0, Z+
      fc:	0d 92       	st	X+, r0
      fe:	91 50       	subi	r25, 0x01	; 1
     100:	e1 f7       	brne	.-8      	; 0xfa <motor_pwr+0x18>
					   MOT3_EN_PIN, MOT4_EN_PIN, MOT5_EN_PIN};
	if(flag == 0x01)
		*MOTOR_EN_PORT &= ~(1<<motorENID[motor]);
     102:	20 91 62 00 	lds	r18, 0x0062
     106:	e1 e0       	ldi	r30, 0x01	; 1
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	ec 0f       	add	r30, r28
     10c:	fd 1f       	adc	r31, r29
     10e:	e8 0f       	add	r30, r24
     110:	f1 1d       	adc	r31, r1
     112:	81 e0       	ldi	r24, 0x01	; 1
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	00 80       	ld	r0, Z
     118:	02 c0       	rjmp	.+4      	; 0x11e <motor_pwr+0x3c>
     11a:	88 0f       	add	r24, r24
     11c:	99 1f       	adc	r25, r25
     11e:	0a 94       	dec	r0
     120:	e2 f7       	brpl	.-8      	; 0x11a <motor_pwr+0x38>
}

void motor_pwr(uint8_t motor, uint8_t flag){
	uint8_t motorENID[6] = {MOT0_EN_PIN, MOT1_EN_PIN, MOT2_EN_PIN,
					   MOT3_EN_PIN, MOT4_EN_PIN, MOT5_EN_PIN};
	if(flag == 0x01)
     122:	61 30       	cpi	r22, 0x01	; 1
     124:	61 f0       	breq	.+24     	; 0x13e <motor_pwr+0x5c>
		*MOTOR_EN_PORT &= ~(1<<motorENID[motor]);
	else
		*MOTOR_EN_PORT |= (1<<motorENID[motor]);
     126:	28 2b       	or	r18, r24
     128:	20 93 62 00 	sts	0x0062, r18
}
     12c:	26 96       	adiw	r28, 0x06	; 6
     12e:	0f b6       	in	r0, 0x3f	; 63
     130:	f8 94       	cli
     132:	de bf       	out	0x3e, r29	; 62
     134:	0f be       	out	0x3f, r0	; 63
     136:	cd bf       	out	0x3d, r28	; 61
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

void motor_pwr(uint8_t motor, uint8_t flag){
	uint8_t motorENID[6] = {MOT0_EN_PIN, MOT1_EN_PIN, MOT2_EN_PIN,
					   MOT3_EN_PIN, MOT4_EN_PIN, MOT5_EN_PIN};
	if(flag == 0x01)
		*MOTOR_EN_PORT &= ~(1<<motorENID[motor]);
     13e:	80 95       	com	r24
     140:	82 23       	and	r24, r18
     142:	80 93 62 00 	sts	0x0062, r24
     146:	f2 cf       	rjmp	.-28     	; 0x12c <motor_pwr+0x4a>

00000148 <motor_dir>:
	else
		*MOTOR_EN_PORT |= (1<<motorENID[motor]);
}

void motor_dir(uint8_t motor, uint8_t dir){
     148:	cf 93       	push	r28
     14a:	df 93       	push	r29
     14c:	00 d0       	rcall	.+0      	; 0x14e <motor_dir+0x6>
     14e:	00 d0       	rcall	.+0      	; 0x150 <motor_dir+0x8>
     150:	00 d0       	rcall	.+0      	; 0x152 <motor_dir+0xa>
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
	uint8_t motorDIRID[6] = {MOT0_DIR_PIN, MOT1_DIR_PIN, MOT2_DIR_PIN,
     156:	de 01       	movw	r26, r28
     158:	11 96       	adiw	r26, 0x01	; 1
     15a:	e6 e0       	ldi	r30, 0x06	; 6
     15c:	f1 e0       	ldi	r31, 0x01	; 1
     15e:	96 e0       	ldi	r25, 0x06	; 6
     160:	01 90       	ld	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	91 50       	subi	r25, 0x01	; 1
     166:	e1 f7       	brne	.-8      	; 0x160 <motor_dir+0x18>
					   MOT3_DIR_PIN, MOT4_DIR_PIN, MOT5_DIR_PIN};
	if(dir == 0x01)
		*MOTOR_DIR_PORT |= (1<<motorDIRID[motor]);
     168:	2b b3       	in	r18, 0x1b	; 27
     16a:	e1 e0       	ldi	r30, 0x01	; 1
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	ec 0f       	add	r30, r28
     170:	fd 1f       	adc	r31, r29
     172:	e8 0f       	add	r30, r24
     174:	f1 1d       	adc	r31, r1
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	00 80       	ld	r0, Z
     17c:	02 c0       	rjmp	.+4      	; 0x182 <motor_dir+0x3a>
     17e:	88 0f       	add	r24, r24
     180:	99 1f       	adc	r25, r25
     182:	0a 94       	dec	r0
     184:	e2 f7       	brpl	.-8      	; 0x17e <motor_dir+0x36>
}

void motor_dir(uint8_t motor, uint8_t dir){
	uint8_t motorDIRID[6] = {MOT0_DIR_PIN, MOT1_DIR_PIN, MOT2_DIR_PIN,
					   MOT3_DIR_PIN, MOT4_DIR_PIN, MOT5_DIR_PIN};
	if(dir == 0x01)
     186:	61 30       	cpi	r22, 0x01	; 1
     188:	61 f0       	breq	.+24     	; 0x1a2 <motor_dir+0x5a>
		*MOTOR_DIR_PORT |= (1<<motorDIRID[motor]);
	else
		*MOTOR_DIR_PORT &= ~(1<<motorDIRID[motor]);
     18a:	80 95       	com	r24
     18c:	82 23       	and	r24, r18
     18e:	8b bb       	out	0x1b, r24	; 27
}
     190:	26 96       	adiw	r28, 0x06	; 6
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	08 95       	ret

void motor_dir(uint8_t motor, uint8_t dir){
	uint8_t motorDIRID[6] = {MOT0_DIR_PIN, MOT1_DIR_PIN, MOT2_DIR_PIN,
					   MOT3_DIR_PIN, MOT4_DIR_PIN, MOT5_DIR_PIN};
	if(dir == 0x01)
		*MOTOR_DIR_PORT |= (1<<motorDIRID[motor]);
     1a2:	28 2b       	or	r18, r24
     1a4:	2b bb       	out	0x1b, r18	; 27
     1a6:	f4 cf       	rjmp	.-24     	; 0x190 <motor_dir+0x48>

000001a8 <step_motor>:
	else
		*MOTOR_DIR_PORT &= ~(1<<motorDIRID[motor]);
}

void step_motor(uint8_t motor, uint16_t steps, uint16_t speed){
     1a8:	ef 92       	push	r14
     1aa:	ff 92       	push	r15
     1ac:	1f 93       	push	r17
     1ae:	cf 93       	push	r28
     1b0:	df 93       	push	r29
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <step_motor+0xc>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <step_motor+0xe>
     1b6:	00 d0       	rcall	.+0      	; 0x1b8 <step_motor+0x10>
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	18 2f       	mov	r17, r24
     1be:	db 01       	movw	r26, r22
	uint16_t i,j,k;
	uint8_t motorSTEPID[6] = {MOT0_STEP_PIN, MOT1_STEP_PIN, MOT2_STEP_PIN, MOT3_STEP_PIN, MOT4_STEP_PIN, MOT5_STEP_PIN};
     1c0:	be 01       	movw	r22, r28
     1c2:	6f 5f       	subi	r22, 0xFF	; 255
     1c4:	7f 4f       	sbci	r23, 0xFF	; 255
     1c6:	86 e0       	ldi	r24, 0x06	; 6
     1c8:	91 e0       	ldi	r25, 0x01	; 1
     1ca:	26 e0       	ldi	r18, 0x06	; 6
     1cc:	fc 01       	movw	r30, r24
     1ce:	01 90       	ld	r0, Z+
     1d0:	cf 01       	movw	r24, r30
     1d2:	fb 01       	movw	r30, r22
     1d4:	01 92       	st	Z+, r0
     1d6:	bf 01       	movw	r22, r30
     1d8:	21 50       	subi	r18, 0x01	; 1
     1da:	c1 f7       	brne	.-16     	; 0x1cc <step_motor+0x24>
	speed = -99*(speed)+10000;
     1dc:	8d e9       	ldi	r24, 0x9D	; 157
     1de:	9f ef       	ldi	r25, 0xFF	; 255
     1e0:	48 9f       	mul	r20, r24
     1e2:	90 01       	movw	r18, r0
     1e4:	49 9f       	mul	r20, r25
     1e6:	30 0d       	add	r19, r0
     1e8:	58 9f       	mul	r21, r24
     1ea:	30 0d       	add	r19, r0
     1ec:	11 24       	eor	r1, r1
     1ee:	20 5f       	subi	r18, 0xF0	; 240
     1f0:	38 4d       	sbci	r19, 0xD8	; 216
     1f2:	62 e0       	ldi	r22, 0x02	; 2
     1f4:	e6 2e       	mov	r14, r22
     1f6:	f1 2c       	mov	r15, r1
	for(i=0;i<2;i++){
		for (j=0;j<steps;j++){
			*MOTOR_STEP_PORT ^= (1<<motorSTEPID[motor]);
     1f8:	e1 e0       	ldi	r30, 0x01	; 1
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	ec 0f       	add	r30, r28
     1fe:	fd 1f       	adc	r31, r29
     200:	e1 0f       	add	r30, r17
     202:	f1 1d       	adc	r31, r1
     204:	61 e0       	ldi	r22, 0x01	; 1
     206:	70 e0       	ldi	r23, 0x00	; 0
void step_motor(uint8_t motor, uint16_t steps, uint16_t speed){
	uint16_t i,j,k;
	uint8_t motorSTEPID[6] = {MOT0_STEP_PIN, MOT1_STEP_PIN, MOT2_STEP_PIN, MOT3_STEP_PIN, MOT4_STEP_PIN, MOT5_STEP_PIN};
	speed = -99*(speed)+10000;
	for(i=0;i<2;i++){
		for (j=0;j<steps;j++){
     208:	10 97       	sbiw	r26, 0x00	; 0
     20a:	f1 f0       	breq	.+60     	; 0x248 <step_motor+0xa0>
     20c:	40 e0       	ldi	r20, 0x00	; 0
     20e:	50 e0       	ldi	r21, 0x00	; 0
			*MOTOR_STEP_PORT ^= (1<<motorSTEPID[motor]);
     210:	15 b3       	in	r17, 0x15	; 21
     212:	cb 01       	movw	r24, r22
     214:	00 80       	ld	r0, Z
     216:	02 c0       	rjmp	.+4      	; 0x21c <step_motor+0x74>
     218:	88 0f       	add	r24, r24
     21a:	99 1f       	adc	r25, r25
     21c:	0a 94       	dec	r0
     21e:	e2 f7       	brpl	.-8      	; 0x218 <step_motor+0x70>
     220:	18 27       	eor	r17, r24
     222:	15 bb       	out	0x15, r17	; 21
			for (k=0;k<speed;k++)
     224:	21 15       	cp	r18, r1
     226:	31 05       	cpc	r19, r1
     228:	51 f0       	breq	.+20     	; 0x23e <step_motor+0x96>
     22a:	80 e0       	ldi	r24, 0x00	; 0
     22c:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     22e:	15 e0       	ldi	r17, 0x05	; 5
     230:	1a 95       	dec	r17
     232:	f1 f7       	brne	.-4      	; 0x230 <step_motor+0x88>
     234:	00 00       	nop
     236:	01 96       	adiw	r24, 0x01	; 1
     238:	82 17       	cp	r24, r18
     23a:	93 07       	cpc	r25, r19
     23c:	c0 f3       	brcs	.-16     	; 0x22e <step_motor+0x86>
void step_motor(uint8_t motor, uint16_t steps, uint16_t speed){
	uint16_t i,j,k;
	uint8_t motorSTEPID[6] = {MOT0_STEP_PIN, MOT1_STEP_PIN, MOT2_STEP_PIN, MOT3_STEP_PIN, MOT4_STEP_PIN, MOT5_STEP_PIN};
	speed = -99*(speed)+10000;
	for(i=0;i<2;i++){
		for (j=0;j<steps;j++){
     23e:	4f 5f       	subi	r20, 0xFF	; 255
     240:	5f 4f       	sbci	r21, 0xFF	; 255
     242:	4a 17       	cp	r20, r26
     244:	5b 07       	cpc	r21, r27
     246:	21 f7       	brne	.-56     	; 0x210 <step_motor+0x68>
     248:	08 94       	sec
     24a:	e1 08       	sbc	r14, r1
     24c:	f1 08       	sbc	r15, r1

void step_motor(uint8_t motor, uint16_t steps, uint16_t speed){
	uint16_t i,j,k;
	uint8_t motorSTEPID[6] = {MOT0_STEP_PIN, MOT1_STEP_PIN, MOT2_STEP_PIN, MOT3_STEP_PIN, MOT4_STEP_PIN, MOT5_STEP_PIN};
	speed = -99*(speed)+10000;
	for(i=0;i<2;i++){
     24e:	e1 14       	cp	r14, r1
     250:	f1 04       	cpc	r15, r1
     252:	d1 f6       	brne	.-76     	; 0x208 <step_motor+0x60>
			*MOTOR_STEP_PORT ^= (1<<motorSTEPID[motor]);
			for (k=0;k<speed;k++)
				_delay_us(1);
		}
	}
}
     254:	26 96       	adiw	r28, 0x06	; 6
     256:	0f b6       	in	r0, 0x3f	; 63
     258:	f8 94       	cli
     25a:	de bf       	out	0x3e, r29	; 62
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	cd bf       	out	0x3d, r28	; 61
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	1f 91       	pop	r17
     266:	ff 90       	pop	r15
     268:	ef 90       	pop	r14
     26a:	08 95       	ret

0000026c <send_code>:
#define LINE3_PIN 7

/***********************************Parallel Lines Functions***********************************/
void send_code(uint8_t code, uint8_t ms){
	uint8_t i;
	*LINES_DDR |= (1<<LINE0_PIN | 1<<LINE1_PIN | 1<<LINE2_PIN | 1<<LINE3_PIN);
     26c:	91 b3       	in	r25, 0x11	; 17
     26e:	90 6f       	ori	r25, 0xF0	; 240
     270:	91 bb       	out	0x11, r25	; 17
	*LINES_PORT |= ((code&0x01)<<LINE0_PIN | (code&0x02)<<LINE1_PIN | (code&0x04)<<LINE2_PIN | (code&0x08)<<LINE3_PIN);
     272:	42 b3       	in	r20, 0x12	; 18
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	9c 01       	movw	r18, r24
     278:	21 70       	andi	r18, 0x01	; 1
     27a:	30 70       	andi	r19, 0x00	; 0
     27c:	22 95       	swap	r18
     27e:	32 95       	swap	r19
     280:	30 7f       	andi	r19, 0xF0	; 240
     282:	32 27       	eor	r19, r18
     284:	20 7f       	andi	r18, 0xF0	; 240
     286:	32 27       	eor	r19, r18
     288:	82 70       	andi	r24, 0x02	; 2
     28a:	90 70       	andi	r25, 0x00	; 0
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	82 95       	swap	r24
     292:	92 95       	swap	r25
     294:	90 7f       	andi	r25, 0xF0	; 240
     296:	98 27       	eor	r25, r24
     298:	80 7f       	andi	r24, 0xF0	; 240
     29a:	98 27       	eor	r25, r24
     29c:	82 2b       	or	r24, r18
     29e:	84 2b       	or	r24, r20
     2a0:	82 bb       	out	0x12, r24	; 18
	for(i=0;i<ms;i++)
     2a2:	66 23       	and	r22, r22
     2a4:	51 f0       	breq	.+20     	; 0x2ba <send_code+0x4e>
     2a6:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     2a8:	ef e9       	ldi	r30, 0x9F	; 159
     2aa:	ff e0       	ldi	r31, 0x0F	; 15
     2ac:	31 97       	sbiw	r30, 0x01	; 1
     2ae:	f1 f7       	brne	.-4      	; 0x2ac <send_code+0x40>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <send_code+0x46>
     2b2:	00 00       	nop
     2b4:	8f 5f       	subi	r24, 0xFF	; 255
     2b6:	86 17       	cp	r24, r22
     2b8:	b9 f7       	brne	.-18     	; 0x2a8 <send_code+0x3c>
		_delay_ms(1);
	*LINES_PORT &= ~(1<<LINE0_PIN | 1<<LINE1_PIN | 1<<LINE2_PIN | 1<<LINE3_PIN);
     2ba:	82 b3       	in	r24, 0x12	; 18
     2bc:	8f 70       	andi	r24, 0x0F	; 15
     2be:	82 bb       	out	0x12, r24	; 18
}
     2c0:	08 95       	ret

000002c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	ec 01       	movw	r28, r24
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
     2c8:	a8 81       	ld	r26, Y
     2ca:	b9 81       	ldd	r27, Y+1	; 0x01
     2cc:	10 97       	sbiw	r26, 0x00	; 0
     2ce:	11 f1       	breq	.+68     	; 0x314 <get_ldnumber+0x52>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     2d0:	2c 91       	ld	r18, X
     2d2:	21 32       	cpi	r18, 0x21	; 33
     2d4:	70 f0       	brcs	.+28     	; 0x2f2 <get_ldnumber+0x30>
     2d6:	2a 33       	cpi	r18, 0x3A	; 58
     2d8:	e9 f0       	breq	.+58     	; 0x314 <get_ldnumber+0x52>
/*-----------------------------------------------------------------------*/
/* Get logical drive number from path name                               */
/*-----------------------------------------------------------------------*/

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
     2da:	ad 01       	movw	r20, r26
     2dc:	4f 5f       	subi	r20, 0xFF	; 255
     2de:	5f 4f       	sbci	r21, 0xFF	; 255
     2e0:	ca 01       	movw	r24, r20
     2e2:	03 c0       	rjmp	.+6      	; 0x2ea <get_ldnumber+0x28>
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
     2e4:	3a 33       	cpi	r19, 0x3A	; 58
     2e6:	59 f0       	breq	.+22     	; 0x2fe <get_ldnumber+0x3c>
     2e8:	cf 01       	movw	r24, r30
     2ea:	fc 01       	movw	r30, r24
     2ec:	31 91       	ld	r19, Z+
     2ee:	31 32       	cpi	r19, 0x21	; 33
     2f0:	c8 f7       	brcc	.-14     	; 0x2e4 <get_ldnumber+0x22>
			return vol;
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	30 e0       	ldi	r19, 0x00	; 0
#endif
	}
	return vol;
}
     2f6:	c9 01       	movw	r24, r18
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	08 95       	ret

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
     2fe:	33 27       	eor	r19, r19
     300:	27 fd       	sbrc	r18, 7
     302:	30 95       	com	r19
     304:	20 53       	subi	r18, 0x30	; 48
     306:	30 40       	sbci	r19, 0x00	; 0
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
     308:	2a 30       	cpi	r18, 0x0A	; 10
     30a:	31 05       	cpc	r19, r1
     30c:	18 f4       	brcc	.+6      	; 0x314 <get_ldnumber+0x52>
     30e:	84 17       	cp	r24, r20
     310:	95 07       	cpc	r25, r21
     312:	31 f0       	breq	.+12     	; 0x320 <get_ldnumber+0x5e>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
     314:	2f ef       	ldi	r18, 0xFF	; 255
     316:	3f ef       	ldi	r19, 0xFF	; 255
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
     318:	c9 01       	movw	r24, r18
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	08 95       	ret
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
     320:	21 15       	cp	r18, r1
     322:	31 05       	cpc	r19, r1
     324:	b9 f7       	brne	.-18     	; 0x314 <get_ldnumber+0x52>
					vol = (int)i;
					*path = ++tt;
     326:	12 96       	adiw	r26, 0x02	; 2
     328:	b9 83       	std	Y+1, r27	; 0x01
     32a:	a8 83       	st	Y, r26
     32c:	e4 cf       	rjmp	.-56     	; 0x2f6 <get_ldnumber+0x34>

0000032e <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	void* dfp,		/* Pointer to the FIL/DIR object to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
     32e:	0f 93       	push	r16
     330:	1f 93       	push	r17
     332:	cf 93       	push	r28
     334:	df 93       	push	r29
     336:	00 d0       	rcall	.+0      	; 0x338 <validate+0xa>
     338:	cd b7       	in	r28, 0x3d	; 61
     33a:	de b7       	in	r29, 0x3e	; 62
     33c:	8c 01       	movw	r16, r24
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
     33e:	00 97       	sbiw	r24, 0x00	; 0
     340:	49 f0       	breq	.+18     	; 0x354 <validate+0x26>
     342:	dc 01       	movw	r26, r24
     344:	ed 91       	ld	r30, X+
     346:	fc 91       	ld	r31, X
     348:	11 97       	sbiw	r26, 0x01	; 1
     34a:	30 97       	sbiw	r30, 0x00	; 0
     34c:	19 f0       	breq	.+6      	; 0x354 <validate+0x26>
     34e:	80 81       	ld	r24, Z
     350:	88 23       	and	r24, r24
     352:	61 f4       	brne	.+24     	; 0x36c <validate+0x3e>
		*fs = 0;				/* The object is invalid */
     354:	fb 01       	movw	r30, r22
     356:	11 82       	std	Z+1, r1	; 0x01
     358:	10 82       	st	Z, r1
		res = FR_INVALID_OBJECT;
     35a:	89 e0       	ldi	r24, 0x09	; 9
     35c:	90 e0       	ldi	r25, 0x00	; 0
		*fs = obj->fs;			/* Owner file sytem object */
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
	}
	return res;
}
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	df 91       	pop	r29
     364:	cf 91       	pop	r28
     366:	1f 91       	pop	r17
     368:	0f 91       	pop	r16
     36a:	08 95       	ret
{
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
     36c:	85 81       	ldd	r24, Z+5	; 0x05
     36e:	96 81       	ldd	r25, Z+6	; 0x06
     370:	12 96       	adiw	r26, 0x02	; 2
     372:	2d 91       	ld	r18, X+
     374:	3c 91       	ld	r19, X
     376:	13 97       	sbiw	r26, 0x03	; 3
     378:	82 17       	cp	r24, r18
     37a:	93 07       	cpc	r25, r19
     37c:	59 f7       	brne	.-42     	; 0x354 <validate+0x26>
     37e:	81 81       	ldd	r24, Z+1	; 0x01
     380:	69 83       	std	Y+1, r22	; 0x01
     382:	7a 83       	std	Y+2, r23	; 0x02
     384:	0e 94 86 22 	call	0x450c	; 0x450c <disk_status>
     388:	69 81       	ldd	r22, Y+1	; 0x01
     38a:	7a 81       	ldd	r23, Y+2	; 0x02
     38c:	80 fd       	sbrc	r24, 0
     38e:	e2 cf       	rjmp	.-60     	; 0x354 <validate+0x26>
		*fs = 0;				/* The object is invalid */
		res = FR_INVALID_OBJECT;
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
     390:	d8 01       	movw	r26, r16
     392:	8d 91       	ld	r24, X+
     394:	9c 91       	ld	r25, X
     396:	11 97       	sbiw	r26, 0x01	; 1
     398:	fb 01       	movw	r30, r22
     39a:	91 83       	std	Z+1, r25	; 0x01
     39c:	80 83       	st	Z, r24
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	dd cf       	rjmp	.-70     	; 0x35e <validate+0x30>

000003a4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
     3a4:	fc 01       	movw	r30, r24
     3a6:	db 01       	movw	r26, r22
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
     3a8:	41 15       	cp	r20, r1
     3aa:	51 05       	cpc	r21, r1
     3ac:	29 f0       	breq	.+10     	; 0x3b8 <mem_cpy+0x14>
		do *d++ = *s++; while (--cnt);
     3ae:	8d 91       	ld	r24, X+
     3b0:	81 93       	st	Z+, r24
     3b2:	41 50       	subi	r20, 0x01	; 1
     3b4:	50 40       	sbci	r21, 0x00	; 0
     3b6:	d9 f7       	brne	.-10     	; 0x3ae <mem_cpy+0xa>
     3b8:	08 95       	ret

000003ba <get_fileinfo.isra.3.part.4>:
/*-----------------------------------------------------------------------*/
/* Get file information from directory entry                             */
/*-----------------------------------------------------------------------*/

static
void get_fileinfo (		/* No return code */
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	dc 01       	movw	r26, r24
     3c0:	eb 01       	movw	r28, r22
     3c2:	20 e0       	ldi	r18, 0x00	; 0
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	90 e0       	ldi	r25, 0x00	; 0
	i = j = 0;
	while (i < 11) {		/* Copy name body and extension */
		c = (TCHAR)dp->dir[i++];
		if (c == ' ') continue;				/* Skip padding spaces */
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
     3ca:	5e e2       	ldi	r21, 0x2E	; 46
     3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <get_fileinfo.isra.3.part.4+0x2c>
     3ce:	89 30       	cpi	r24, 0x09	; 9
     3d0:	91 05       	cpc	r25, r1
     3d2:	c1 f0       	breq	.+48     	; 0x404 <get_fileinfo.isra.3.part.4+0x4a>
		fno->fname[j++] = c;
     3d4:	fe 01       	movw	r30, r28
     3d6:	e2 0f       	add	r30, r18
     3d8:	f3 1f       	adc	r31, r19
     3da:	41 87       	std	Z+9, r20	; 0x09
     3dc:	2f 5f       	subi	r18, 0xFF	; 255
     3de:	3f 4f       	sbci	r19, 0xFF	; 255
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
	while (i < 11) {		/* Copy name body and extension */
     3e0:	8b 30       	cpi	r24, 0x0B	; 11
     3e2:	91 05       	cpc	r25, r1
     3e4:	b1 f0       	breq	.+44     	; 0x412 <get_fileinfo.isra.3.part.4+0x58>
		c = (TCHAR)dp->dir[i++];
     3e6:	ed 91       	ld	r30, X+
     3e8:	fc 91       	ld	r31, X
     3ea:	11 97       	sbiw	r26, 0x01	; 1
     3ec:	e8 0f       	add	r30, r24
     3ee:	f9 1f       	adc	r31, r25
     3f0:	40 81       	ld	r20, Z
     3f2:	01 96       	adiw	r24, 0x01	; 1
		if (c == ' ') continue;				/* Skip padding spaces */
     3f4:	40 32       	cpi	r20, 0x20	; 32
     3f6:	a1 f3       	breq	.-24     	; 0x3e0 <get_fileinfo.isra.3.part.4+0x26>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
     3f8:	45 30       	cpi	r20, 0x05	; 5
     3fa:	49 f7       	brne	.-46     	; 0x3ce <get_fileinfo.isra.3.part.4+0x14>
     3fc:	45 ee       	ldi	r20, 0xE5	; 229
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
     3fe:	89 30       	cpi	r24, 0x09	; 9
     400:	91 05       	cpc	r25, r1
     402:	41 f7       	brne	.-48     	; 0x3d4 <get_fileinfo.isra.3.part.4+0x1a>
     404:	fe 01       	movw	r30, r28
     406:	e2 0f       	add	r30, r18
     408:	f3 1f       	adc	r31, r19
     40a:	51 87       	std	Z+9, r21	; 0x09
     40c:	2f 5f       	subi	r18, 0xFF	; 255
     40e:	3f 4f       	sbci	r19, 0xFF	; 255
     410:	e1 cf       	rjmp	.-62     	; 0x3d4 <get_fileinfo.isra.3.part.4+0x1a>
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
     412:	2c 0f       	add	r18, r28
     414:	3d 1f       	adc	r19, r29
     416:	f9 01       	movw	r30, r18
     418:	11 86       	std	Z+9, r1	; 0x09
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
     41a:	ed 91       	ld	r30, X+
     41c:	fc 91       	ld	r31, X
     41e:	11 97       	sbiw	r26, 0x01	; 1
     420:	83 85       	ldd	r24, Z+11	; 0x0b
     422:	88 87       	std	Y+8, r24	; 0x08
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
     424:	ed 91       	ld	r30, X+
     426:	fc 91       	ld	r31, X
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
     428:	87 8d       	ldd	r24, Z+31	; 0x1f
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	a0 e0       	ldi	r26, 0x00	; 0
     42e:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
     430:	ba 2f       	mov	r27, r26
     432:	a9 2f       	mov	r26, r25
     434:	98 2f       	mov	r25, r24
     436:	88 27       	eor	r24, r24
     438:	46 8d       	ldd	r20, Z+30	; 0x1e
     43a:	50 e0       	ldi	r21, 0x00	; 0
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	84 2b       	or	r24, r20
     442:	95 2b       	or	r25, r21
     444:	a6 2b       	or	r26, r22
     446:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
     448:	ba 2f       	mov	r27, r26
     44a:	a9 2f       	mov	r26, r25
     44c:	98 2f       	mov	r25, r24
     44e:	88 27       	eor	r24, r24
     450:	45 8d       	ldd	r20, Z+29	; 0x1d
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	60 e0       	ldi	r22, 0x00	; 0
     456:	70 e0       	ldi	r23, 0x00	; 0
     458:	84 2b       	or	r24, r20
     45a:	95 2b       	or	r25, r21
     45c:	a6 2b       	or	r26, r22
     45e:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
     460:	ba 2f       	mov	r27, r26
     462:	a9 2f       	mov	r26, r25
     464:	98 2f       	mov	r25, r24
     466:	88 27       	eor	r24, r24
     468:	44 8d       	ldd	r20, Z+28	; 0x1c
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	60 e0       	ldi	r22, 0x00	; 0
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	84 2b       	or	r24, r20
     472:	95 2b       	or	r25, r21
     474:	a6 2b       	or	r26, r22
     476:	b7 2b       	or	r27, r23
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
     478:	88 83       	st	Y, r24
     47a:	99 83       	std	Y+1, r25	; 0x01
     47c:	aa 83       	std	Y+2, r26	; 0x02
     47e:	bb 83       	std	Y+3, r27	; 0x03
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
     480:	81 8d       	ldd	r24, Z+25	; 0x19
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	a0 e0       	ldi	r26, 0x00	; 0
     486:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
     488:	ba 2f       	mov	r27, r26
     48a:	a9 2f       	mov	r26, r25
     48c:	98 2f       	mov	r25, r24
     48e:	88 27       	eor	r24, r24
     490:	40 8d       	ldd	r20, Z+24	; 0x18
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	84 2b       	or	r24, r20
     49a:	95 2b       	or	r25, r21
     49c:	a6 2b       	or	r26, r22
     49e:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
     4a0:	ba 2f       	mov	r27, r26
     4a2:	a9 2f       	mov	r26, r25
     4a4:	98 2f       	mov	r25, r24
     4a6:	88 27       	eor	r24, r24
     4a8:	47 89       	ldd	r20, Z+23	; 0x17
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	84 2b       	or	r24, r20
     4b2:	95 2b       	or	r25, r21
     4b4:	a6 2b       	or	r26, r22
     4b6:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
     4b8:	ba 2f       	mov	r27, r26
     4ba:	a9 2f       	mov	r26, r25
     4bc:	98 2f       	mov	r25, r24
     4be:	88 27       	eor	r24, r24
     4c0:	46 89       	ldd	r20, Z+22	; 0x16
     4c2:	50 e0       	ldi	r21, 0x00	; 0
     4c4:	60 e0       	ldi	r22, 0x00	; 0
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	84 2b       	or	r24, r20
     4ca:	95 2b       	or	r25, r21
     4cc:	a6 2b       	or	r26, r22
     4ce:	b7 2b       	or	r27, r23
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
     4d0:	9f 83       	std	Y+7, r25	; 0x07
     4d2:	8e 83       	std	Y+6, r24	; 0x06
     4d4:	bd 83       	std	Y+5, r27	; 0x05
     4d6:	ac 83       	std	Y+4, r26	; 0x04
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
     4de:	8f 92       	push	r8
     4e0:	9f 92       	push	r9
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	ec 01       	movw	r28, r24
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
     4f8:	8b 81       	ldd	r24, Y+3	; 0x03
     4fa:	88 23       	and	r24, r24
     4fc:	79 f4       	brne	.+30     	; 0x51c <sync_window+0x3e>
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
		}
	}
	return res;
}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	bf 90       	pop	r11
     514:	af 90       	pop	r10
     516:	9f 90       	pop	r9
     518:	8f 90       	pop	r8
     51a:	08 95       	ret
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
     51c:	cb a4       	lds	r28, 0xab
     51e:	dc a4       	lds	r29, 0xac
     520:	ed a4       	lds	r30, 0xad
     522:	fe a4       	lds	r31, 0xae
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
     524:	8f e2       	ldi	r24, 0x2F	; 47
     526:	88 2e       	mov	r8, r24
     528:	91 2c       	mov	r9, r1
     52a:	8c 0e       	add	r8, r28
     52c:	9d 1e       	adc	r9, r29
     52e:	89 81       	ldd	r24, Y+1	; 0x01
     530:	b4 01       	movw	r22, r8
     532:	a7 01       	movw	r20, r14
     534:	96 01       	movw	r18, r12
     536:	01 e0       	ldi	r16, 0x01	; 1
     538:	10 e0       	ldi	r17, 0x00	; 0
     53a:	0e 94 8d 22 	call	0x451a	; 0x451a <disk_write>
     53e:	00 97       	sbiw	r24, 0x00	; 0
     540:	99 f5       	brne	.+102    	; 0x5a8 <sync_window+0xca>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
     542:	1b 82       	std	Y+3, r1	; 0x03
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
     544:	8f 89       	ldd	r24, Y+23	; 0x17
     546:	98 8d       	ldd	r25, Y+24	; 0x18
     548:	a9 8d       	ldd	r26, Y+25	; 0x19
     54a:	ba 8d       	ldd	r27, Y+26	; 0x1a
     54c:	4f 8d       	ldd	r20, Y+31	; 0x1f
     54e:	58 a1       	lds	r21, 0x48
     550:	69 a1       	lds	r22, 0x49
     552:	7a a1       	lds	r23, 0x4a
     554:	97 01       	movw	r18, r14
     556:	86 01       	movw	r16, r12
     558:	04 1b       	sub	r16, r20
     55a:	15 0b       	sbc	r17, r21
     55c:	26 0b       	sbc	r18, r22
     55e:	37 0b       	sbc	r19, r23
     560:	08 17       	cp	r16, r24
     562:	19 07       	cpc	r17, r25
     564:	2a 07       	cpc	r18, r26
     566:	3b 07       	cpc	r19, r27
     568:	50 f6       	brcc	.-108    	; 0x4fe <sync_window+0x20>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     56a:	aa 80       	ldd	r10, Y+2	; 0x02
     56c:	bb 24       	eor	r11, r11
     56e:	12 e0       	ldi	r17, 0x02	; 2
     570:	a1 16       	cp	r10, r17
     572:	b1 04       	cpc	r11, r1
     574:	28 f4       	brcc	.+10     	; 0x580 <sync_window+0xa2>
     576:	c3 cf       	rjmp	.-122    	; 0x4fe <sync_window+0x20>
     578:	8f 89       	ldd	r24, Y+23	; 0x17
     57a:	98 8d       	ldd	r25, Y+24	; 0x18
     57c:	a9 8d       	ldd	r26, Y+25	; 0x19
     57e:	ba 8d       	ldd	r27, Y+26	; 0x1a
					wsect += fs->fsize;
     580:	c8 0e       	add	r12, r24
     582:	d9 1e       	adc	r13, r25
     584:	ea 1e       	adc	r14, r26
     586:	fb 1e       	adc	r15, r27
					disk_write(fs->drv, fs->win, wsect, 1);
     588:	89 81       	ldd	r24, Y+1	; 0x01
     58a:	b4 01       	movw	r22, r8
     58c:	a7 01       	movw	r20, r14
     58e:	96 01       	movw	r18, r12
     590:	01 e0       	ldi	r16, 0x01	; 1
     592:	10 e0       	ldi	r17, 0x00	; 0
     594:	0e 94 8d 22 	call	0x451a	; 0x451a <disk_write>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
     598:	08 94       	sec
     59a:	a1 08       	sbc	r10, r1
     59c:	b1 08       	sbc	r11, r1
     59e:	21 e0       	ldi	r18, 0x01	; 1
     5a0:	a2 16       	cp	r10, r18
     5a2:	b1 04       	cpc	r11, r1
     5a4:	49 f7       	brne	.-46     	; 0x578 <sync_window+0x9a>
     5a6:	ab cf       	rjmp	.-170    	; 0x4fe <sync_window+0x20>


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	aa cf       	rjmp	.-172    	; 0x502 <sync_window+0x24>

000005ae <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
     5ae:	0f 93       	push	r16
     5b0:	1f 93       	push	r17
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
     5b6:	ec 01       	movw	r28, r24
	FRESULT res;


	res = sync_window(fs);
     5b8:	0e 94 6f 02 	call	0x4de	; 0x4de <sync_window>
     5bc:	9c 01       	movw	r18, r24
	if (res == FR_OK) {
     5be:	00 97       	sbiw	r24, 0x00	; 0
     5c0:	69 f4       	brne	.+26     	; 0x5dc <sync_fs+0x2e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
     5c2:	88 81       	ld	r24, Y
     5c4:	83 30       	cpi	r24, 0x03	; 3
     5c6:	c1 f0       	breq	.+48     	; 0x5f8 <sync_fs+0x4a>
			fs->winsect = fs->volbase + 1;
			disk_write(fs->drv, fs->win, fs->winsect, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
     5c8:	89 81       	ldd	r24, Y+1	; 0x01
     5ca:	60 e0       	ldi	r22, 0x00	; 0
     5cc:	40 e0       	ldi	r20, 0x00	; 0
     5ce:	50 e0       	ldi	r21, 0x00	; 0
     5d0:	0e 94 90 22 	call	0x4520	; 0x4520 <disk_ioctl>
     5d4:	21 e0       	ldi	r18, 0x01	; 1
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	00 97       	sbiw	r24, 0x00	; 0
     5da:	31 f0       	breq	.+12     	; 0x5e8 <sync_fs+0x3a>
	}

	return res;
}
     5dc:	c9 01       	movw	r24, r18
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	1f 91       	pop	r17
     5e4:	0f 91       	pop	r16
     5e6:	08 95       	ret
			fs->winsect = fs->volbase + 1;
			disk_write(fs->drv, fs->win, fs->winsect, 1);
			fs->fsi_flag = 0;
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
     5ec:	c9 01       	movw	r24, r18
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	08 95       	ret


	res = sync_window(fs);
	if (res == FR_OK) {
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
     5f8:	8c 81       	ldd	r24, Y+4	; 0x04
     5fa:	81 30       	cpi	r24, 0x01	; 1
     5fc:	29 f7       	brne	.-54     	; 0x5c8 <sync_fs+0x1a>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
     5fe:	be 01       	movw	r22, r28
     600:	61 5d       	subi	r22, 0xD1	; 209
     602:	7f 4f       	sbci	r23, 0xFF	; 255
/*-----------------------------------------------------------------------*/
/* Synchronize file system and strage device                             */
/*-----------------------------------------------------------------------*/

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
     604:	ce 01       	movw	r24, r28
     606:	81 5d       	subi	r24, 0xD1	; 209
     608:	9d 4f       	sbci	r25, 0xFD	; 253
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
     60a:	fb 01       	movw	r30, r22

	do *d++ = (BYTE)val; while (--cnt);
     60c:	11 92       	st	Z+, r1
     60e:	e8 17       	cp	r30, r24
     610:	f9 07       	cpc	r31, r25
     612:	e1 f7       	brne	.-8      	; 0x60c <sync_fs+0x5e>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     614:	fe 01       	movw	r30, r28
     616:	e3 5d       	subi	r30, 0xD3	; 211
     618:	fd 4f       	sbci	r31, 0xFD	; 253
     61a:	85 e5       	ldi	r24, 0x55	; 85
     61c:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
     61e:	fe 01       	movw	r30, r28
     620:	e2 5d       	subi	r30, 0xD2	; 210
     622:	fd 4f       	sbci	r31, 0xFD	; 253
     624:	8a ea       	ldi	r24, 0xAA	; 170
     626:	80 83       	st	Z, r24
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     628:	82 e5       	ldi	r24, 0x52	; 82
     62a:	8f a7       	lds	r24, 0x7f
	*ptr++ = (BYTE)val; val >>= 8;
     62c:	88 ab       	sts	0x58, r24
	*ptr++ = (BYTE)val; val >>= 8;
     62e:	81 e6       	ldi	r24, 0x61	; 97
     630:	89 ab       	sts	0x59, r24
	*ptr++ = (BYTE)val;
     632:	91 e4       	ldi	r25, 0x41	; 65
     634:	9a ab       	sts	0x5a, r25
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     636:	fe 01       	movw	r30, r28
     638:	ed 5e       	subi	r30, 0xED	; 237
     63a:	fd 4f       	sbci	r31, 0xFD	; 253
     63c:	22 e7       	ldi	r18, 0x72	; 114
     63e:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
     640:	fe 01       	movw	r30, r28
     642:	ec 5e       	subi	r30, 0xEC	; 236
     644:	fd 4f       	sbci	r31, 0xFD	; 253
     646:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
     648:	fe 01       	movw	r30, r28
     64a:	eb 5e       	subi	r30, 0xEB	; 235
     64c:	fd 4f       	sbci	r31, 0xFD	; 253
     64e:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
     650:	fe 01       	movw	r30, r28
     652:	ea 5e       	subi	r30, 0xEA	; 234
     654:	fd 4f       	sbci	r31, 0xFD	; 253
     656:	80 83       	st	Z, r24
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
			st_word(fs->win + BS_55AA, 0xAA55);
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
     658:	3f 85       	ldd	r19, Y+15	; 0x0f
     65a:	28 89       	ldd	r18, Y+16	; 0x10
     65c:	99 89       	ldd	r25, Y+17	; 0x11
     65e:	8a 89       	ldd	r24, Y+18	; 0x12
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     660:	fe 01       	movw	r30, r28
     662:	e9 5e       	subi	r30, 0xE9	; 233
     664:	fd 4f       	sbci	r31, 0xFD	; 253
     666:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
     668:	fe 01       	movw	r30, r28
     66a:	e8 5e       	subi	r30, 0xE8	; 232
     66c:	fd 4f       	sbci	r31, 0xFD	; 253
     66e:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
     670:	fe 01       	movw	r30, r28
     672:	e7 5e       	subi	r30, 0xE7	; 231
     674:	fd 4f       	sbci	r31, 0xFD	; 253
     676:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
     678:	fe 01       	movw	r30, r28
     67a:	e6 5e       	subi	r30, 0xE6	; 230
     67c:	fd 4f       	sbci	r31, 0xFD	; 253
     67e:	80 83       	st	Z, r24
			mem_set(fs->win, 0, SS(fs));
			st_word(fs->win + BS_55AA, 0xAA55);
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
     680:	3b 85       	ldd	r19, Y+11	; 0x0b
     682:	2c 85       	ldd	r18, Y+12	; 0x0c
     684:	9d 85       	ldd	r25, Y+13	; 0x0d
     686:	8e 85       	ldd	r24, Y+14	; 0x0e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
     688:	fe 01       	movw	r30, r28
     68a:	e5 5e       	subi	r30, 0xE5	; 229
     68c:	fd 4f       	sbci	r31, 0xFD	; 253
     68e:	30 83       	st	Z, r19
	*ptr++ = (BYTE)val; val >>= 8;
     690:	fe 01       	movw	r30, r28
     692:	e4 5e       	subi	r30, 0xE4	; 228
     694:	fd 4f       	sbci	r31, 0xFD	; 253
     696:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
     698:	fe 01       	movw	r30, r28
     69a:	e3 5e       	subi	r30, 0xE3	; 227
     69c:	fd 4f       	sbci	r31, 0xFD	; 253
     69e:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
     6a0:	fe 01       	movw	r30, r28
     6a2:	e2 5e       	subi	r30, 0xE2	; 226
     6a4:	fd 4f       	sbci	r31, 0xFD	; 253
     6a6:	80 83       	st	Z, r24
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
     6a8:	0b 8d       	ldd	r16, Y+27	; 0x1b
     6aa:	1c 8d       	ldd	r17, Y+28	; 0x1c
     6ac:	2d 8d       	ldd	r18, Y+29	; 0x1d
     6ae:	3e 8d       	ldd	r19, Y+30	; 0x1e
     6b0:	0f 5f       	subi	r16, 0xFF	; 255
     6b2:	1f 4f       	sbci	r17, 0xFF	; 255
     6b4:	2f 4f       	sbci	r18, 0xFF	; 255
     6b6:	3f 4f       	sbci	r19, 0xFF	; 255
     6b8:	0b a7       	lds	r16, 0x7b
     6ba:	1c a7       	lds	r17, 0x7c
     6bc:	2d a7       	lds	r18, 0x7d
     6be:	3e a7       	lds	r19, 0x7e
			disk_write(fs->drv, fs->win, fs->winsect, 1);
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	a9 01       	movw	r20, r18
     6c4:	98 01       	movw	r18, r16
     6c6:	01 e0       	ldi	r16, 0x01	; 1
     6c8:	10 e0       	ldi	r17, 0x00	; 0
     6ca:	0e 94 8d 22 	call	0x451a	; 0x451a <disk_write>
			fs->fsi_flag = 0;
     6ce:	1c 82       	std	Y+4, r1	; 0x04
     6d0:	7b cf       	rjmp	.-266    	; 0x5c8 <sync_fs+0x1a>

000006d2 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
     6d2:	af 92       	push	r10
     6d4:	bf 92       	push	r11
     6d6:	cf 92       	push	r12
     6d8:	df 92       	push	r13
     6da:	ef 92       	push	r14
     6dc:	ff 92       	push	r15
     6de:	0f 93       	push	r16
     6e0:	1f 93       	push	r17
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	5c 01       	movw	r10, r24
     6e8:	6a 01       	movw	r12, r20
     6ea:	7b 01       	movw	r14, r22
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
     6ec:	fc 01       	movw	r30, r24
     6ee:	83 a5       	lds	r24, 0x63
     6f0:	94 a5       	lds	r25, 0x64
     6f2:	a5 a5       	lds	r26, 0x65
     6f4:	b6 a5       	lds	r27, 0x66
     6f6:	84 17       	cp	r24, r20
     6f8:	95 07       	cpc	r25, r21
     6fa:	a6 07       	cpc	r26, r22
     6fc:	b7 07       	cpc	r27, r23
     6fe:	59 f1       	breq	.+86     	; 0x756 <move_window+0x84>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
     700:	c5 01       	movw	r24, r10
     702:	0e 94 6f 02 	call	0x4de	; 0x4de <sync_window>
     706:	ec 01       	movw	r28, r24
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
     708:	00 97       	sbiw	r24, 0x00	; 0
     70a:	61 f0       	breq	.+24     	; 0x724 <move_window+0x52>
			}
			fs->winsect = sector;
		}
	}
	return res;
}
     70c:	ce 01       	movw	r24, r28
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	df 90       	pop	r13
     71c:	cf 90       	pop	r12
     71e:	bf 90       	pop	r11
     720:	af 90       	pop	r10
     722:	08 95       	ret
	if (sector != fs->winsect) {	/* Window offset changed? */
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
     724:	b5 01       	movw	r22, r10
     726:	61 5d       	subi	r22, 0xD1	; 209
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	f5 01       	movw	r30, r10
     72c:	81 81       	ldd	r24, Z+1	; 0x01
     72e:	a7 01       	movw	r20, r14
     730:	96 01       	movw	r18, r12
     732:	01 e0       	ldi	r16, 0x01	; 1
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	0e 94 8a 22 	call	0x4514	; 0x4514 <disk_read>
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	31 f0       	breq	.+12     	; 0x74a <move_window+0x78>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
     73e:	c1 e0       	ldi	r28, 0x01	; 1
     740:	d0 e0       	ldi	r29, 0x00	; 0
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
     742:	cc 24       	eor	r12, r12
     744:	ca 94       	dec	r12
     746:	dc 2c       	mov	r13, r12
     748:	76 01       	movw	r14, r12
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
     74a:	f5 01       	movw	r30, r10
     74c:	c3 a6       	lds	r28, 0xb3
     74e:	d4 a6       	lds	r29, 0xb4
     750:	e5 a6       	lds	r30, 0xb5
     752:	f6 a6       	lds	r31, 0xb6
     754:	db cf       	rjmp	.-74     	; 0x70c <move_window+0x3a>
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
     756:	c0 e0       	ldi	r28, 0x00	; 0
     758:	d0 e0       	ldi	r29, 0x00	; 0
     75a:	d8 cf       	rjmp	.-80     	; 0x70c <move_window+0x3a>

0000075c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	ec 01       	movw	r28, r24
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
     762:	1b 82       	std	Y+3, r1	; 0x03
     764:	8f ef       	ldi	r24, 0xFF	; 255
     766:	9f ef       	ldi	r25, 0xFF	; 255
     768:	dc 01       	movw	r26, r24
     76a:	8b a7       	lds	r24, 0x7b
     76c:	9c a7       	lds	r25, 0x7c
     76e:	ad a7       	lds	r26, 0x7d
     770:	be a7       	lds	r27, 0x7e
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
     772:	ce 01       	movw	r24, r28
     774:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
     778:	00 97       	sbiw	r24, 0x00	; 0
     77a:	21 f0       	breq	.+8      	; 0x784 <check_fs+0x28>
     77c:	84 e0       	ldi	r24, 0x04	; 4
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
     784:	fe 01       	movw	r30, r28
     786:	e2 5d       	subi	r30, 0xD2	; 210
     788:	fd 4f       	sbci	r31, 0xFD	; 253
	rv = rv << 8 | ptr[0];
     78a:	90 81       	ld	r25, Z
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	fe 01       	movw	r30, r28
     790:	e3 5d       	subi	r30, 0xD3	; 211
     792:	fd 4f       	sbci	r31, 0xFD	; 253
     794:	20 81       	ld	r18, Z
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	28 2b       	or	r18, r24
     79a:	39 2b       	or	r19, r25
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
     79c:	8a ea       	ldi	r24, 0xAA	; 170
     79e:	25 35       	cpi	r18, 0x55	; 85
     7a0:	38 07       	cpc	r19, r24
     7a2:	21 f0       	breq	.+8      	; 0x7ac <check_fs+0x50>
     7a4:	83 e0       	ldi	r24, 0x03	; 3
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
     7ac:	8f a5       	lds	r24, 0x6f
     7ae:	89 3e       	cpi	r24, 0xE9	; 233
     7b0:	39 f0       	breq	.+14     	; 0x7c0 <check_fs+0x64>
     7b2:	8b 3e       	cpi	r24, 0xEB	; 235
     7b4:	11 f0       	breq	.+4      	; 0x7ba <check_fs+0x5e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	e2 cf       	rjmp	.-60     	; 0x77e <check_fs+0x22>
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
     7ba:	89 a9       	sts	0x49, r24
     7bc:	80 39       	cpi	r24, 0x90	; 144
     7be:	d9 f7       	brne	.-10     	; 0x7b6 <check_fs+0x5a>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
     7c0:	fe 01       	movw	r30, r28
     7c2:	e8 59       	subi	r30, 0x98	; 152
     7c4:	ff 4f       	sbci	r31, 0xFF	; 255
     7c6:	80 81       	ld	r24, Z
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a0 e0       	ldi	r26, 0x00	; 0
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
     7ce:	ba 2f       	mov	r27, r26
     7d0:	a9 2f       	mov	r26, r25
     7d2:	98 2f       	mov	r25, r24
     7d4:	88 27       	eor	r24, r24
     7d6:	fe 01       	movw	r30, r28
     7d8:	e9 59       	subi	r30, 0x99	; 153
     7da:	ff 4f       	sbci	r31, 0xFF	; 255
     7dc:	40 81       	ld	r20, Z
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	60 e0       	ldi	r22, 0x00	; 0
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	84 2b       	or	r24, r20
     7e6:	95 2b       	or	r25, r21
     7e8:	a6 2b       	or	r26, r22
     7ea:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
     7ec:	ba 2f       	mov	r27, r26
     7ee:	a9 2f       	mov	r26, r25
     7f0:	98 2f       	mov	r25, r24
     7f2:	88 27       	eor	r24, r24
     7f4:	fe 01       	movw	r30, r28
     7f6:	ea 59       	subi	r30, 0x9A	; 154
     7f8:	ff 4f       	sbci	r31, 0xFF	; 255
     7fa:	40 81       	ld	r20, Z
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	84 2b       	or	r24, r20
     804:	95 2b       	or	r25, r21
     806:	a6 2b       	or	r26, r22
     808:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
     80a:	ba 2f       	mov	r27, r26
     80c:	a9 2f       	mov	r26, r25
     80e:	98 2f       	mov	r25, r24
     810:	88 27       	eor	r24, r24
     812:	fe 01       	movw	r30, r28
     814:	eb 59       	subi	r30, 0x9B	; 155
     816:	ff 4f       	sbci	r31, 0xFF	; 255
     818:	40 81       	ld	r20, Z
     81a:	50 e0       	ldi	r21, 0x00	; 0
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	84 2b       	or	r24, r20
     822:	95 2b       	or	r25, r21
     824:	a6 2b       	or	r26, r22
     826:	b7 2b       	or	r27, r23
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
     828:	b0 70       	andi	r27, 0x00	; 0
     82a:	86 34       	cpi	r24, 0x46	; 70
     82c:	21 e4       	ldi	r18, 0x41	; 65
     82e:	92 07       	cpc	r25, r18
     830:	24 e5       	ldi	r18, 0x54	; 84
     832:	a2 07       	cpc	r26, r18
     834:	20 e0       	ldi	r18, 0x00	; 0
     836:	b2 07       	cpc	r27, r18
     838:	e1 f1       	breq	.+120    	; 0x8b2 <check_fs+0x156>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
     83a:	fe 01       	movw	r30, r28
     83c:	ec 57       	subi	r30, 0x7C	; 124
     83e:	ff 4f       	sbci	r31, 0xFF	; 255
     840:	80 81       	ld	r24, Z
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	a0 e0       	ldi	r26, 0x00	; 0
     846:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
     848:	ba 2f       	mov	r27, r26
     84a:	a9 2f       	mov	r26, r25
     84c:	98 2f       	mov	r25, r24
     84e:	88 27       	eor	r24, r24
     850:	fe 01       	movw	r30, r28
     852:	ed 57       	subi	r30, 0x7D	; 125
     854:	ff 4f       	sbci	r31, 0xFF	; 255
     856:	40 81       	ld	r20, Z
     858:	50 e0       	ldi	r21, 0x00	; 0
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	84 2b       	or	r24, r20
     860:	95 2b       	or	r25, r21
     862:	a6 2b       	or	r26, r22
     864:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
     866:	ba 2f       	mov	r27, r26
     868:	a9 2f       	mov	r26, r25
     86a:	98 2f       	mov	r25, r24
     86c:	88 27       	eor	r24, r24
     86e:	fe 01       	movw	r30, r28
     870:	ee 57       	subi	r30, 0x7E	; 126
     872:	ff 4f       	sbci	r31, 0xFF	; 255
     874:	40 81       	ld	r20, Z
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	70 e0       	ldi	r23, 0x00	; 0
     87c:	84 2b       	or	r24, r20
     87e:	95 2b       	or	r25, r21
     880:	a6 2b       	or	r26, r22
     882:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
     884:	ba 2f       	mov	r27, r26
     886:	a9 2f       	mov	r26, r25
     888:	98 2f       	mov	r25, r24
     88a:	88 27       	eor	r24, r24
     88c:	cf 57       	subi	r28, 0x7F	; 127
     88e:	df 4f       	sbci	r29, 0xFF	; 255
     890:	48 81       	ld	r20, Y
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	84 2b       	or	r24, r20
     89a:	95 2b       	or	r25, r21
     89c:	a6 2b       	or	r26, r22
     89e:	b7 2b       	or	r27, r23

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
     8a0:	86 34       	cpi	r24, 0x46	; 70
     8a2:	21 e4       	ldi	r18, 0x41	; 65
     8a4:	92 07       	cpc	r25, r18
     8a6:	24 e5       	ldi	r18, 0x54	; 84
     8a8:	a2 07       	cpc	r26, r18
     8aa:	23 e3       	ldi	r18, 0x33	; 51
     8ac:	b2 07       	cpc	r27, r18
     8ae:	09 f0       	breq	.+2      	; 0x8b2 <check_fs+0x156>
     8b0:	82 cf       	rjmp	.-252    	; 0x7b6 <check_fs+0x5a>
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	64 cf       	rjmp	.-312    	; 0x77e <check_fs+0x22>

000008b6 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
     8b6:	2f 92       	push	r2
     8b8:	3f 92       	push	r3
     8ba:	4f 92       	push	r4
     8bc:	5f 92       	push	r5
     8be:	6f 92       	push	r6
     8c0:	7f 92       	push	r7
     8c2:	8f 92       	push	r8
     8c4:	9f 92       	push	r9
     8c6:	af 92       	push	r10
     8c8:	bf 92       	push	r11
     8ca:	cf 92       	push	r12
     8cc:	df 92       	push	r13
     8ce:	ef 92       	push	r14
     8d0:	ff 92       	push	r15
     8d2:	0f 93       	push	r16
     8d4:	1f 93       	push	r17
     8d6:	cf 93       	push	r28
     8d8:	df 93       	push	r29
     8da:	cd b7       	in	r28, 0x3d	; 61
     8dc:	de b7       	in	r29, 0x3e	; 62
     8de:	6f 97       	sbiw	r28, 0x1f	; 31
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
     8ea:	7b 01       	movw	r14, r22
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
     8ec:	db 01       	movw	r26, r22
     8ee:	1d 92       	st	X+, r1
     8f0:	1c 92       	st	X, r1
	vol = get_ldnumber(path);
     8f2:	4f 8f       	std	Y+31, r20	; 0x1f
     8f4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <get_ldnumber>
     8f8:	8c 01       	movw	r16, r24
	if (vol < 0) return FR_INVALID_DRIVE;
     8fa:	4f 8d       	ldd	r20, Y+31	; 0x1f
     8fc:	97 fd       	sbrc	r25, 7
     8fe:	3d c0       	rjmp	.+122    	; 0x97a <find_volume+0xc4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
     900:	fc 01       	movw	r30, r24
     902:	ee 0f       	add	r30, r30
     904:	ff 1f       	adc	r31, r31
     906:	e4 5e       	subi	r30, 0xE4	; 228
     908:	fe 4f       	sbci	r31, 0xFE	; 254
     90a:	c0 80       	ld	r12, Z
     90c:	d1 80       	ldd	r13, Z+1	; 0x01
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     90e:	c1 14       	cp	r12, r1
     910:	d1 04       	cpc	r13, r1
     912:	b1 f1       	breq	.+108    	; 0x980 <find_volume+0xca>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
     914:	f7 01       	movw	r30, r14
     916:	d1 82       	std	Z+1, r13	; 0x01
     918:	c0 82       	st	Z, r12

	mode &= ~FA_READ;					/* Desired access mode, write access or not */
     91a:	6e ef       	ldi	r22, 0xFE	; 254
     91c:	e6 2e       	mov	r14, r22
     91e:	e4 22       	and	r14, r20
	if (fs->fs_type) {					/* If the volume has been mounted */
     920:	d6 01       	movw	r26, r12
     922:	8c 91       	ld	r24, X
     924:	88 23       	and	r24, r24
     926:	31 f0       	breq	.+12     	; 0x934 <find_volume+0x7e>
		stat = disk_status(fs->drv);
     928:	11 96       	adiw	r26, 0x01	; 1
     92a:	8c 91       	ld	r24, X
     92c:	0e 94 86 22 	call	0x450c	; 0x450c <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
     930:	80 ff       	sbrs	r24, 0
     932:	29 c0       	rjmp	.+82     	; 0x986 <find_volume+0xd0>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
     934:	f6 01       	movw	r30, r12
     936:	10 82       	st	Z, r1
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
     938:	01 83       	std	Z+1, r16	; 0x01
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
     93a:	80 2f       	mov	r24, r16
     93c:	0e 94 88 22 	call	0x4510	; 0x4510 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
     940:	80 ff       	sbrs	r24, 0
     942:	2b c0       	rjmp	.+86     	; 0x99a <find_volume+0xe4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	90 e0       	ldi	r25, 0x00	; 0
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
     948:	6f 96       	adiw	r28, 0x1f	; 31
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	cd bf       	out	0x3d, r28	; 61
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	df 90       	pop	r13
     962:	cf 90       	pop	r12
     964:	bf 90       	pop	r11
     966:	af 90       	pop	r10
     968:	9f 90       	pop	r9
     96a:	8f 90       	pop	r8
     96c:	7f 90       	pop	r7
     96e:	6f 90       	pop	r6
     970:	5f 90       	pop	r5
     972:	4f 90       	pop	r4
     974:	3f 90       	pop	r3
     976:	2f 90       	pop	r2
     978:	08 95       	ret


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
     97a:	8b e0       	ldi	r24, 0x0B	; 11
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	e4 cf       	rjmp	.-56     	; 0x948 <find_volume+0x92>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
     980:	8c e0       	ldi	r24, 0x0C	; 12
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	e1 cf       	rjmp	.-62     	; 0x948 <find_volume+0x92>

	mode &= ~FA_READ;					/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
     986:	ee 20       	and	r14, r14
     988:	29 f0       	breq	.+10     	; 0x994 <find_volume+0xde>
     98a:	82 ff       	sbrs	r24, 2
     98c:	03 c0       	rjmp	.+6      	; 0x994 <find_volume+0xde>
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
     98e:	8a e0       	ldi	r24, 0x0A	; 10
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	da cf       	rjmp	.-76     	; 0x948 <find_volume+0x92>
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	d7 cf       	rjmp	.-82     	; 0x948 <find_volume+0x92>
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
     99a:	ee 20       	and	r14, r14
     99c:	11 f0       	breq	.+4      	; 0x9a2 <find_volume+0xec>
     99e:	82 fd       	sbrc	r24, 2
     9a0:	f6 cf       	rjmp	.-20     	; 0x98e <find_volume+0xd8>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
     9a2:	c6 01       	movw	r24, r12
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	ba 01       	movw	r22, r20
     9aa:	0e 94 ae 03 	call	0x75c	; 0x75c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
     9ae:	82 30       	cpi	r24, 0x02	; 2
     9b0:	61 f0       	breq	.+24     	; 0x9ca <find_volume+0x114>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
     9b2:	88 24       	eor	r8, r8
     9b4:	99 24       	eor	r9, r9
     9b6:	54 01       	movw	r10, r8
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <find_volume+0x108>
     9bc:	72 c2       	rjmp	.+1252   	; 0xea2 <find_volume+0x5ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	08 f4       	brcc	.+2      	; 0x9c4 <find_volume+0x10e>
     9c2:	91 c0       	rjmp	.+290    	; 0xae6 <find_volume+0x230>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
     9c4:	8d e0       	ldi	r24, 0x0D	; 13
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	bf cf       	rjmp	.-130    	; 0x948 <find_volume+0x92>
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     9ca:	96 01       	movw	r18, r12
     9cc:	2f 50       	subi	r18, 0x0F	; 15
     9ce:	3e 4f       	sbci	r19, 0xFE	; 254
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
     9d0:	7e 01       	movw	r14, r28
     9d2:	08 94       	sec
     9d4:	e1 1c       	adc	r14, r1
     9d6:	f1 1c       	adc	r15, r1
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     9d8:	81 e1       	ldi	r24, 0x11	; 17
     9da:	68 2e       	mov	r6, r24
     9dc:	71 2c       	mov	r7, r1
     9de:	6c 0e       	add	r6, r28
     9e0:	7d 1e       	adc	r7, r29
     9e2:	87 01       	movw	r16, r14
     9e4:	94 e0       	ldi	r25, 0x04	; 4
     9e6:	89 2e       	mov	r8, r25
     9e8:	91 2c       	mov	r9, r1
     9ea:	8c 0c       	add	r8, r12
     9ec:	9d 1c       	adc	r9, r13
     9ee:	4b e0       	ldi	r20, 0x0B	; 11
     9f0:	44 2e       	mov	r4, r20
     9f2:	51 2c       	mov	r5, r1
     9f4:	4c 0c       	add	r4, r12
     9f6:	5d 1c       	adc	r5, r13
     9f8:	5a e0       	ldi	r21, 0x0A	; 10
     9fa:	25 2e       	mov	r2, r21
     9fc:	31 2c       	mov	r3, r1
     9fe:	2c 0c       	add	r2, r12
     a00:	3d 1c       	adc	r3, r13
     a02:	a6 01       	movw	r20, r12
     a04:	47 5f       	subi	r20, 0xF7	; 247
     a06:	5f 4f       	sbci	r21, 0xFF	; 255
     a08:	5a 8b       	std	Y+18, r21	; 0x12
     a0a:	49 8b       	std	Y+17, r20	; 0x11
     a0c:	c6 01       	movw	r24, r12
     a0e:	08 96       	adiw	r24, 0x08	; 8
     a10:	9e 8b       	std	Y+22, r25	; 0x16
     a12:	8d 8b       	std	Y+21, r24	; 0x15
     a14:	56 01       	movw	r10, r12
     a16:	67 01       	movw	r12, r14
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
     a18:	d9 01       	movw	r26, r18
     a1a:	8c 91       	ld	r24, X
     a1c:	88 23       	and	r24, r24
     a1e:	09 f4       	brne	.+2      	; 0xa22 <find_volume+0x16c>
     a20:	57 c0       	rjmp	.+174    	; 0xad0 <find_volume+0x21a>
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     a22:	79 01       	movw	r14, r18
     a24:	e8 18       	sub	r14, r8
     a26:	f9 08       	sbc	r15, r9
     a28:	f7 01       	movw	r30, r14
     a2a:	e4 0d       	add	r30, r4
     a2c:	f5 1d       	adc	r31, r5
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
     a2e:	80 81       	ld	r24, Z
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	a0 e0       	ldi	r26, 0x00	; 0
     a34:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
     a36:	44 27       	eor	r20, r20
     a38:	58 2f       	mov	r21, r24
     a3a:	69 2f       	mov	r22, r25
     a3c:	7a 2f       	mov	r23, r26
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     a3e:	f7 01       	movw	r30, r14
     a40:	e2 0d       	add	r30, r2
     a42:	f3 1d       	adc	r31, r3
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
     a44:	80 81       	ld	r24, Z
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	48 2b       	or	r20, r24
     a4e:	59 2b       	or	r21, r25
     a50:	6a 2b       	or	r22, r26
     a52:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
     a54:	76 2f       	mov	r23, r22
     a56:	65 2f       	mov	r22, r21
     a58:	54 2f       	mov	r21, r20
     a5a:	44 27       	eor	r20, r20
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     a5c:	e9 89       	ldd	r30, Y+17	; 0x11
     a5e:	fa 89       	ldd	r31, Y+18	; 0x12
     a60:	ee 0d       	add	r30, r14
     a62:	ff 1d       	adc	r31, r15
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
     a64:	80 81       	ld	r24, Z
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a0 e0       	ldi	r26, 0x00	; 0
     a6a:	b0 e0       	ldi	r27, 0x00	; 0
     a6c:	48 2b       	or	r20, r24
     a6e:	59 2b       	or	r21, r25
     a70:	6a 2b       	or	r22, r26
     a72:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
     a74:	76 2f       	mov	r23, r22
     a76:	65 2f       	mov	r22, r21
     a78:	54 2f       	mov	r21, r20
     a7a:	44 27       	eor	r20, r20
/*-----------------------------------------------------------------------*/
/* Find logical drive and check if the volume is mounted                 */
/*-----------------------------------------------------------------------*/

static
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
     a7c:	ed 89       	ldd	r30, Y+21	; 0x15
     a7e:	fe 89       	ldd	r31, Y+22	; 0x16
     a80:	ee 0d       	add	r30, r14
     a82:	ff 1d       	adc	r31, r15
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
     a84:	80 81       	ld	r24, Z
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	a0 e0       	ldi	r26, 0x00	; 0
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	48 2b       	or	r20, r24
     a8e:	59 2b       	or	r21, r25
     a90:	6a 2b       	or	r22, r26
     a92:	7b 2b       	or	r23, r27
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
     a94:	f8 01       	movw	r30, r16
     a96:	41 93       	st	Z+, r20
     a98:	51 93       	st	Z+, r21
     a9a:	61 93       	st	Z+, r22
     a9c:	71 93       	st	Z+, r23
     a9e:	8f 01       	movw	r16, r30
     aa0:	20 5f       	subi	r18, 0xF0	; 240
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
     aa4:	e6 15       	cp	r30, r6
     aa6:	f7 05       	cpc	r31, r7
     aa8:	09 f0       	breq	.+2      	; 0xaac <find_volume+0x1f6>
     aaa:	b6 cf       	rjmp	.-148    	; 0xa18 <find_volume+0x162>
     aac:	76 01       	movw	r14, r12
     aae:	65 01       	movw	r12, r10
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
     ab0:	d7 01       	movw	r26, r14
     ab2:	8d 90       	ld	r8, X+
     ab4:	9d 90       	ld	r9, X+
     ab6:	ad 90       	ld	r10, X+
     ab8:	bd 90       	ld	r11, X+
     aba:	7d 01       	movw	r14, r26
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
     abc:	81 14       	cp	r8, r1
     abe:	91 04       	cpc	r9, r1
     ac0:	a1 04       	cpc	r10, r1
     ac2:	b1 04       	cpc	r11, r1
     ac4:	49 f4       	brne	.+18     	; 0xad8 <find_volume+0x222>
     ac6:	83 e0       	ldi	r24, 0x03	; 3
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
     ac8:	e6 14       	cp	r14, r6
     aca:	f7 04       	cpc	r15, r7
     acc:	89 f7       	brne	.-30     	; 0xab0 <find_volume+0x1fa>
     ace:	74 cf       	rjmp	.-280    	; 0x9b8 <find_volume+0x102>
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	ba 01       	movw	r22, r20
     ad6:	de cf       	rjmp	.-68     	; 0xa94 <find_volume+0x1de>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
     ad8:	c6 01       	movw	r24, r12
     ada:	b5 01       	movw	r22, r10
     adc:	a4 01       	movw	r20, r8
     ade:	0e 94 ae 03 	call	0x75c	; 0x75c <check_fs>
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
     ae2:	82 30       	cpi	r24, 0x02	; 2
     ae4:	88 f7       	brcc	.-30     	; 0xac8 <find_volume+0x212>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     ae6:	f6 01       	movw	r30, r12
     ae8:	33 ad       	sts	0x63, r19
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	82 ad       	sts	0x62, r24
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	82 2b       	or	r24, r18
     af2:	93 2b       	or	r25, r19
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
     af4:	f2 e0       	ldi	r31, 0x02	; 2
     af6:	80 30       	cpi	r24, 0x00	; 0
     af8:	9f 07       	cpc	r25, r31
     afa:	09 f0       	breq	.+2      	; 0xafe <find_volume+0x248>
     afc:	63 cf       	rjmp	.-314    	; 0x9c4 <find_volume+0x10e>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
     afe:	f6 01       	movw	r30, r12
     b00:	ea 5b       	subi	r30, 0xBA	; 186
     b02:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
     b04:	30 81       	ld	r19, Z
     b06:	20 e0       	ldi	r18, 0x00	; 0
     b08:	f6 01       	movw	r30, r12
     b0a:	eb 5b       	subi	r30, 0xBB	; 187
     b0c:	ff 4f       	sbci	r31, 0xFF	; 255
     b0e:	80 81       	ld	r24, Z
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	82 2b       	or	r24, r18
     b14:	93 2b       	or	r25, r19
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
     b16:	7c 01       	movw	r14, r24
     b18:	00 e0       	ldi	r16, 0x00	; 0
     b1a:	10 e0       	ldi	r17, 0x00	; 0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
     b1c:	e1 14       	cp	r14, r1
     b1e:	f1 04       	cpc	r15, r1
     b20:	01 05       	cpc	r16, r1
     b22:	11 05       	cpc	r17, r1
     b24:	a1 f5       	brne	.+104    	; 0xb8e <find_volume+0x2d8>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
     b26:	f6 01       	movw	r30, r12
     b28:	ea 5a       	subi	r30, 0xAA	; 170
     b2a:	ff 4f       	sbci	r31, 0xFF	; 255
     b2c:	40 81       	ld	r20, Z
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	70 e0       	ldi	r23, 0x00	; 0
	rv = rv << 8 | ptr[2];
     b34:	76 2f       	mov	r23, r22
     b36:	65 2f       	mov	r22, r21
     b38:	54 2f       	mov	r21, r20
     b3a:	44 27       	eor	r20, r20
     b3c:	f6 01       	movw	r30, r12
     b3e:	eb 5a       	subi	r30, 0xAB	; 171
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	80 81       	ld	r24, Z
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	48 2b       	or	r20, r24
     b4c:	59 2b       	or	r21, r25
     b4e:	6a 2b       	or	r22, r26
     b50:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
     b52:	76 2f       	mov	r23, r22
     b54:	65 2f       	mov	r22, r21
     b56:	54 2f       	mov	r21, r20
     b58:	44 27       	eor	r20, r20
     b5a:	f6 01       	movw	r30, r12
     b5c:	ec 5a       	subi	r30, 0xAC	; 172
     b5e:	ff 4f       	sbci	r31, 0xFF	; 255
     b60:	80 81       	ld	r24, Z
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	a0 e0       	ldi	r26, 0x00	; 0
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	48 2b       	or	r20, r24
     b6a:	59 2b       	or	r21, r25
     b6c:	6a 2b       	or	r22, r26
     b6e:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
     b70:	ee 24       	eor	r14, r14
     b72:	f4 2e       	mov	r15, r20
     b74:	05 2f       	mov	r16, r21
     b76:	16 2f       	mov	r17, r22
     b78:	f6 01       	movw	r30, r12
     b7a:	ed 5a       	subi	r30, 0xAD	; 173
     b7c:	ff 4f       	sbci	r31, 0xFF	; 255
     b7e:	80 81       	ld	r24, Z
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	e8 2a       	or	r14, r24
     b88:	f9 2a       	or	r15, r25
     b8a:	0a 2b       	or	r16, r26
     b8c:	1b 2b       	or	r17, r27
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */

		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;
     b8e:	d6 01       	movw	r26, r12
     b90:	57 96       	adiw	r26, 0x17	; 23
     b92:	ed 92       	st	X+, r14
     b94:	fd 92       	st	X+, r15
     b96:	0d 93       	st	X+, r16
     b98:	1c 93       	st	X, r17
     b9a:	5a 97       	sbiw	r26, 0x1a	; 26

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
     b9c:	df 96       	adiw	r26, 0x3f	; 63
     b9e:	4c 90       	ld	r4, X
     ba0:	df 97       	sbiw	r26, 0x3f	; 63
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	4c 92       	st	X, r4
     ba6:	12 97       	sbiw	r26, 0x02	; 2
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
     ba8:	84 2d       	mov	r24, r4
     baa:	81 50       	subi	r24, 0x01	; 1
     bac:	82 30       	cpi	r24, 0x02	; 2
     bae:	08 f0       	brcs	.+2      	; 0xbb2 <find_volume+0x2fc>
     bb0:	09 cf       	rjmp	.-494    	; 0x9c4 <find_volume+0x10e>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
     bb2:	dc 96       	adiw	r26, 0x3c	; 60
     bb4:	8c 91       	ld	r24, X
     bb6:	dc 97       	sbiw	r26, 0x3c	; 60
     bb8:	e8 2f       	mov	r30, r24
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	fe 8b       	std	Y+22, r31	; 0x16
     bbe:	ed 8b       	std	Y+21, r30	; 0x15
     bc0:	1a 96       	adiw	r26, 0x0a	; 10
     bc2:	fc 93       	st	X, r31
     bc4:	ee 93       	st	-X, r30
     bc6:	19 97       	sbiw	r26, 0x09	; 9
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
     bc8:	30 97       	sbiw	r30, 0x00	; 0
     bca:	09 f4       	brne	.+2      	; 0xbce <find_volume+0x318>
     bcc:	fb ce       	rjmp	.-522    	; 0x9c4 <find_volume+0x10e>
     bce:	cf 01       	movw	r24, r30
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	8e 23       	and	r24, r30
     bd4:	9f 23       	and	r25, r31
     bd6:	00 97       	sbiw	r24, 0x00	; 0
     bd8:	09 f0       	breq	.+2      	; 0xbdc <find_volume+0x326>
     bda:	f4 ce       	rjmp	.-536    	; 0x9c4 <find_volume+0x10e>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
     bdc:	f6 01       	movw	r30, r12
     bde:	ef 5b       	subi	r30, 0xBF	; 191
     be0:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
     be2:	90 81       	ld	r25, Z
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	f6 01       	movw	r30, r12
     be8:	e0 5c       	subi	r30, 0xC0	; 192
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	20 80       	ld	r2, Z
     bee:	33 24       	eor	r3, r3
     bf0:	28 2a       	or	r2, r24
     bf2:	39 2a       	or	r3, r25
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
     bf4:	18 96       	adiw	r26, 0x08	; 8
     bf6:	3c 92       	st	X, r3
     bf8:	2e 92       	st	-X, r2
     bfa:	17 97       	sbiw	r26, 0x07	; 7
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
     bfc:	c1 01       	movw	r24, r2
     bfe:	8f 70       	andi	r24, 0x0F	; 15
     c00:	90 70       	andi	r25, 0x00	; 0
     c02:	00 97       	sbiw	r24, 0x00	; 0
     c04:	09 f0       	breq	.+2      	; 0xc08 <find_volume+0x352>
     c06:	de ce       	rjmp	.-580    	; 0x9c4 <find_volume+0x10e>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
     c08:	f6 01       	movw	r30, r12
     c0a:	ed 5b       	subi	r30, 0xBD	; 189
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
     c0e:	30 81       	ld	r19, Z
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	f6 01       	movw	r30, r12
     c14:	ee 5b       	subi	r30, 0xBE	; 190
     c16:	ff 4f       	sbci	r31, 0xFF	; 255
     c18:	80 81       	ld	r24, Z
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	82 2b       	or	r24, r18
     c1e:	93 2b       	or	r25, r19
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
     c20:	9c 01       	movw	r18, r24
     c22:	40 e0       	ldi	r20, 0x00	; 0
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	29 8b       	std	Y+17, r18	; 0x11
     c28:	3a 8b       	std	Y+18, r19	; 0x12
     c2a:	4b 8b       	std	Y+19, r20	; 0x13
     c2c:	5c 8b       	std	Y+20, r21	; 0x14
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
     c2e:	21 15       	cp	r18, r1
     c30:	31 05       	cpc	r19, r1
     c32:	41 05       	cpc	r20, r1
     c34:	51 05       	cpc	r21, r1
     c36:	09 f0       	breq	.+2      	; 0xc3a <find_volume+0x384>
     c38:	40 c0       	rjmp	.+128    	; 0xcba <find_volume+0x404>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
     c3a:	f6 01       	movw	r30, r12
     c3c:	ee 5a       	subi	r30, 0xAE	; 174
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	80 81       	ld	r24, Z
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a0 e0       	ldi	r26, 0x00	; 0
     c46:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
     c48:	44 27       	eor	r20, r20
     c4a:	58 2f       	mov	r21, r24
     c4c:	69 2f       	mov	r22, r25
     c4e:	7a 2f       	mov	r23, r26
     c50:	f6 01       	movw	r30, r12
     c52:	ef 5a       	subi	r30, 0xAF	; 175
     c54:	ff 4f       	sbci	r31, 0xFF	; 255
     c56:	80 81       	ld	r24, Z
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	48 2b       	or	r20, r24
     c60:	59 2b       	or	r21, r25
     c62:	6a 2b       	or	r22, r26
     c64:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
     c66:	76 2f       	mov	r23, r22
     c68:	65 2f       	mov	r22, r21
     c6a:	54 2f       	mov	r21, r20
     c6c:	44 27       	eor	r20, r20
     c6e:	f6 01       	movw	r30, r12
     c70:	e0 5b       	subi	r30, 0xB0	; 176
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	80 81       	ld	r24, Z
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	a0 e0       	ldi	r26, 0x00	; 0
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	48 2b       	or	r20, r24
     c7e:	59 2b       	or	r21, r25
     c80:	6a 2b       	or	r22, r26
     c82:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
     c84:	b6 2f       	mov	r27, r22
     c86:	a5 2f       	mov	r26, r21
     c88:	94 2f       	mov	r25, r20
     c8a:	88 27       	eor	r24, r24
     c8c:	89 8b       	std	Y+17, r24	; 0x11
     c8e:	9a 8b       	std	Y+18, r25	; 0x12
     c90:	ab 8b       	std	Y+19, r26	; 0x13
     c92:	bc 8b       	std	Y+20, r27	; 0x14
     c94:	f6 01       	movw	r30, r12
     c96:	e1 5b       	subi	r30, 0xB1	; 177
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	80 81       	ld	r24, Z
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	29 89       	ldd	r18, Y+17	; 0x11
     ca4:	3a 89       	ldd	r19, Y+18	; 0x12
     ca6:	4b 89       	ldd	r20, Y+19	; 0x13
     ca8:	5c 89       	ldd	r21, Y+20	; 0x14
     caa:	28 2b       	or	r18, r24
     cac:	39 2b       	or	r19, r25
     cae:	4a 2b       	or	r20, r26
     cb0:	5b 2b       	or	r21, r27
     cb2:	29 8b       	std	Y+17, r18	; 0x11
     cb4:	3a 8b       	std	Y+18, r19	; 0x12
     cb6:	4b 8b       	std	Y+19, r20	; 0x13
     cb8:	5c 8b       	std	Y+20, r21	; 0x14
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
     cba:	d6 01       	movw	r26, r12
     cbc:	de 96       	adiw	r26, 0x3e	; 62
     cbe:	9c 91       	ld	r25, X
     cc0:	de 97       	sbiw	r26, 0x3e	; 62
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	dd 96       	adiw	r26, 0x3d	; 61
     cc6:	6c 90       	ld	r6, X
     cc8:	dd 97       	sbiw	r26, 0x3d	; 61
     cca:	77 24       	eor	r7, r7
     ccc:	68 2a       	or	r6, r24
     cce:	79 2a       	or	r7, r25

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
     cd0:	61 14       	cp	r6, r1
     cd2:	71 04       	cpc	r7, r1
     cd4:	09 f4       	brne	.+2      	; 0xcd8 <find_volume+0x422>
     cd6:	76 ce       	rjmp	.-788    	; 0x9c4 <find_volume+0x10e>
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
     cd8:	24 2d       	mov	r18, r4
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	40 e0       	ldi	r20, 0x00	; 0
     cde:	50 e0       	ldi	r21, 0x00	; 0
     ce0:	c8 01       	movw	r24, r16
     ce2:	b7 01       	movw	r22, r14
     ce4:	0e 94 23 29 	call	0x5246	; 0x5246 <__mulsi3>
     ce8:	6b 8f       	std	Y+27, r22	; 0x1b
     cea:	7c 8f       	std	Y+28, r23	; 0x1c
     cec:	8d 8f       	std	Y+29, r24	; 0x1d
     cee:	9e 8f       	std	Y+30, r25	; 0x1e

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
     cf0:	93 01       	movw	r18, r6
     cf2:	40 e0       	ldi	r20, 0x00	; 0
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	2f 8b       	std	Y+23, r18	; 0x17
     cf8:	38 8f       	std	Y+24, r19	; 0x18
     cfa:	49 8f       	std	Y+25, r20	; 0x19
     cfc:	5a 8f       	std	Y+26, r21	; 0x1a
     cfe:	c1 01       	movw	r24, r2
     d00:	92 95       	swap	r25
     d02:	82 95       	swap	r24
     d04:	8f 70       	andi	r24, 0x0F	; 15
     d06:	89 27       	eor	r24, r25
     d08:	9f 70       	andi	r25, 0x0F	; 15
     d0a:	89 27       	eor	r24, r25
     d0c:	2c 01       	movw	r4, r24
     d0e:	66 24       	eor	r6, r6
     d10:	77 24       	eor	r7, r7
     d12:	42 0e       	add	r4, r18
     d14:	53 1e       	adc	r5, r19
     d16:	64 1e       	adc	r6, r20
     d18:	75 1e       	adc	r7, r21
     d1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d1e:	ad 8d       	ldd	r26, Y+29	; 0x1d
     d20:	be 8d       	ldd	r27, Y+30	; 0x1e
     d22:	48 0e       	add	r4, r24
     d24:	59 1e       	adc	r5, r25
     d26:	6a 1e       	adc	r6, r26
     d28:	7b 1e       	adc	r7, r27
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
     d2a:	29 89       	ldd	r18, Y+17	; 0x11
     d2c:	3a 89       	ldd	r19, Y+18	; 0x12
     d2e:	4b 89       	ldd	r20, Y+19	; 0x13
     d30:	5c 89       	ldd	r21, Y+20	; 0x14
     d32:	24 15       	cp	r18, r4
     d34:	35 05       	cpc	r19, r5
     d36:	46 05       	cpc	r20, r6
     d38:	57 05       	cpc	r21, r7
     d3a:	08 f4       	brcc	.+2      	; 0xd3e <find_volume+0x488>
     d3c:	43 ce       	rjmp	.-890    	; 0x9c4 <find_volume+0x10e>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
     d3e:	ca 01       	movw	r24, r20
     d40:	b9 01       	movw	r22, r18
     d42:	64 19       	sub	r22, r4
     d44:	75 09       	sbc	r23, r5
     d46:	86 09       	sbc	r24, r6
     d48:	97 09       	sbc	r25, r7
     d4a:	ad 89       	ldd	r26, Y+21	; 0x15
     d4c:	be 89       	ldd	r27, Y+22	; 0x16
     d4e:	9d 01       	movw	r18, r26
     d50:	40 e0       	ldi	r20, 0x00	; 0
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	0e 94 42 29 	call	0x5284	; 0x5284 <__udivmodsi4>
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
     d58:	21 15       	cp	r18, r1
     d5a:	31 05       	cpc	r19, r1
     d5c:	41 05       	cpc	r20, r1
     d5e:	51 05       	cpc	r21, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <find_volume+0x4ae>
     d62:	30 ce       	rjmp	.-928    	; 0x9c4 <find_volume+0x10e>
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
     d64:	26 3f       	cpi	r18, 0xF6	; 246
     d66:	bf ef       	ldi	r27, 0xFF	; 255
     d68:	3b 07       	cpc	r19, r27
     d6a:	b0 e0       	ldi	r27, 0x00	; 0
     d6c:	4b 07       	cpc	r20, r27
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	5b 07       	cpc	r21, r27
     d72:	08 f0       	brcs	.+2      	; 0xd76 <find_volume+0x4c0>
     d74:	c3 c0       	rjmp	.+390    	; 0xefc <find_volume+0x646>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
     d76:	26 3f       	cpi	r18, 0xF6	; 246
     d78:	ef e0       	ldi	r30, 0x0F	; 15
     d7a:	3e 07       	cpc	r19, r30
     d7c:	e0 e0       	ldi	r30, 0x00	; 0
     d7e:	4e 07       	cpc	r20, r30
     d80:	e0 e0       	ldi	r30, 0x00	; 0
     d82:	5e 07       	cpc	r21, r30
     d84:	08 f0       	brcs	.+2      	; 0xd88 <find_volume+0x4d2>
     d86:	90 c0       	rjmp	.+288    	; 0xea8 <find_volume+0x5f2>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     d88:	da 01       	movw	r26, r20
     d8a:	c9 01       	movw	r24, r18
     d8c:	02 96       	adiw	r24, 0x02	; 2
     d8e:	a1 1d       	adc	r26, r1
     d90:	b1 1d       	adc	r27, r1
     d92:	89 8b       	std	Y+17, r24	; 0x11
     d94:	9a 8b       	std	Y+18, r25	; 0x12
     d96:	ab 8b       	std	Y+19, r26	; 0x13
     d98:	bc 8b       	std	Y+20, r27	; 0x14
     d9a:	f6 01       	movw	r30, r12
     d9c:	83 8b       	std	Z+19, r24	; 0x13
     d9e:	94 8b       	std	Z+20, r25	; 0x14
     da0:	a5 8b       	std	Z+21, r26	; 0x15
     da2:	b6 8b       	std	Z+22, r27	; 0x16
		fs->volbase = bsect;								/* Volume start sector */
     da4:	83 8e       	std	Z+27, r8	; 0x1b
     da6:	94 8e       	std	Z+28, r9	; 0x1c
     da8:	a5 8e       	std	Z+29, r10	; 0x1d
     daa:	b6 8e       	std	Z+30, r11	; 0x1e
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     dac:	4f 89       	ldd	r20, Y+23	; 0x17
     dae:	58 8d       	ldd	r21, Y+24	; 0x18
     db0:	69 8d       	ldd	r22, Y+25	; 0x19
     db2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     db4:	48 0d       	add	r20, r8
     db6:	59 1d       	adc	r21, r9
     db8:	6a 1d       	adc	r22, r10
     dba:	7b 1d       	adc	r23, r11
     dbc:	47 8f       	std	Z+31, r20	; 0x1f
     dbe:	50 a3       	lds	r21, 0x50
     dc0:	61 a3       	lds	r22, 0x51
     dc2:	72 a3       	lds	r23, 0x52
		fs->database = bsect + sysect;						/* Data start sector */
     dc4:	d3 01       	movw	r26, r6
     dc6:	c2 01       	movw	r24, r4
     dc8:	88 0d       	add	r24, r8
     dca:	99 1d       	adc	r25, r9
     dcc:	aa 1d       	adc	r26, r10
     dce:	bb 1d       	adc	r27, r11
     dd0:	87 a3       	lds	r24, 0x57
     dd2:	90 a7       	lds	r25, 0x70
     dd4:	a1 a7       	lds	r26, 0x71
     dd6:	b2 a7       	lds	r27, 0x72
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
     dd8:	21 e0       	ldi	r18, 0x01	; 1
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
     dda:	21 14       	cp	r2, r1
     ddc:	31 04       	cpc	r3, r1
     dde:	09 f4       	brne	.+2      	; 0xde2 <find_volume+0x52c>
     de0:	f1 cd       	rjmp	.-1054   	; 0x9c4 <find_volume+0x10e>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
     de2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     de4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     de6:	ad 8d       	ldd	r26, Y+29	; 0x1d
     de8:	be 8d       	ldd	r27, Y+30	; 0x1e
     dea:	84 0f       	add	r24, r20
     dec:	95 1f       	adc	r25, r21
     dee:	a6 1f       	adc	r26, r22
     df0:	b7 1f       	adc	r27, r23
     df2:	f6 01       	movw	r30, r12
     df4:	83 a3       	lds	r24, 0x53
     df6:	94 a3       	lds	r25, 0x54
     df8:	a5 a3       	lds	r26, 0x55
     dfa:	b6 a3       	lds	r27, 0x56
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
     dfc:	49 89       	ldd	r20, Y+17	; 0x11
     dfe:	5a 89       	ldd	r21, Y+18	; 0x12
     e00:	6b 89       	ldd	r22, Y+19	; 0x13
     e02:	7c 89       	ldd	r23, Y+20	; 0x14
     e04:	44 0f       	add	r20, r20
     e06:	55 1f       	adc	r21, r21
     e08:	66 1f       	adc	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	22 30       	cpi	r18, 0x02	; 2
     e0e:	a9 f0       	breq	.+42     	; 0xe3a <find_volume+0x584>
     e10:	89 89       	ldd	r24, Y+17	; 0x11
     e12:	9a 89       	ldd	r25, Y+18	; 0x12
     e14:	ab 89       	ldd	r26, Y+19	; 0x13
     e16:	bc 89       	ldd	r27, Y+20	; 0x14
     e18:	48 0f       	add	r20, r24
     e1a:	59 1f       	adc	r21, r25
     e1c:	6a 1f       	adc	r22, r26
     e1e:	7b 1f       	adc	r23, r27
     e20:	76 95       	lsr	r23
     e22:	67 95       	ror	r22
     e24:	57 95       	ror	r21
     e26:	47 95       	ror	r20
     e28:	81 70       	andi	r24, 0x01	; 1
     e2a:	90 70       	andi	r25, 0x00	; 0
     e2c:	a0 70       	andi	r26, 0x00	; 0
     e2e:	b0 70       	andi	r27, 0x00	; 0
     e30:	48 0f       	add	r20, r24
     e32:	59 1f       	adc	r21, r25
     e34:	6a 1f       	adc	r22, r26
     e36:	7b 1f       	adc	r23, r27
     e38:	21 e0       	ldi	r18, 0x01	; 1
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
     e3a:	41 50       	subi	r20, 0x01	; 1
     e3c:	5e 4f       	sbci	r21, 0xFE	; 254
     e3e:	6f 4f       	sbci	r22, 0xFF	; 255
     e40:	7f 4f       	sbci	r23, 0xFF	; 255
     e42:	89 e0       	ldi	r24, 0x09	; 9
     e44:	76 95       	lsr	r23
     e46:	67 95       	ror	r22
     e48:	57 95       	ror	r21
     e4a:	47 95       	ror	r20
     e4c:	8a 95       	dec	r24
     e4e:	d1 f7       	brne	.-12     	; 0xe44 <find_volume+0x58e>
     e50:	e4 16       	cp	r14, r20
     e52:	f5 06       	cpc	r15, r21
     e54:	06 07       	cpc	r16, r22
     e56:	17 07       	cpc	r17, r23
     e58:	08 f4       	brcc	.+2      	; 0xe5c <find_volume+0x5a6>
     e5a:	b4 cd       	rjmp	.-1176   	; 0x9c4 <find_volume+0x10e>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
     e5c:	8f ef       	ldi	r24, 0xFF	; 255
     e5e:	9f ef       	ldi	r25, 0xFF	; 255
     e60:	dc 01       	movw	r26, r24
     e62:	f6 01       	movw	r30, r12
     e64:	87 87       	std	Z+15, r24	; 0x0f
     e66:	90 8b       	std	Z+16, r25	; 0x10
     e68:	a1 8b       	std	Z+17, r26	; 0x11
     e6a:	b2 8b       	std	Z+18, r27	; 0x12
     e6c:	83 87       	std	Z+11, r24	; 0x0b
     e6e:	94 87       	std	Z+12, r25	; 0x0c
     e70:	a5 87       	std	Z+13, r26	; 0x0d
     e72:	b6 87       	std	Z+14, r27	; 0x0e
		fs->fsi_flag = 0x80;
     e74:	80 e8       	ldi	r24, 0x80	; 128
     e76:	84 83       	std	Z+4, r24	; 0x04
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
     e78:	23 30       	cpi	r18, 0x03	; 3
     e7a:	09 f4       	brne	.+2      	; 0xe7e <find_volume+0x5c8>
     e7c:	c2 c0       	rjmp	.+388    	; 0x1002 <find_volume+0x74c>
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;	/* FAT sub-type */
     e7e:	d6 01       	movw	r26, r12
     e80:	2c 93       	st	X, r18
	fs->id = ++Fsid;	/* File system mount ID */
     e82:	80 91 1e 01 	lds	r24, 0x011E
     e86:	90 91 1f 01 	lds	r25, 0x011F
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	90 93 1f 01 	sts	0x011F, r25
     e90:	80 93 1e 01 	sts	0x011E, r24
     e94:	16 96       	adiw	r26, 0x06	; 6
     e96:	9c 93       	st	X, r25
     e98:	8e 93       	st	-X, r24
     e9a:	15 97       	sbiw	r26, 0x05	; 5
	fs->cdir = 0;		/* Initialize current directory */
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
     e9c:	80 e0       	ldi	r24, 0x00	; 0
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	53 cd       	rjmp	.-1370   	; 0x948 <find_volume+0x92>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	50 cd       	rjmp	.-1376   	; 0x948 <find_volume+0x92>
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     ea8:	da 01       	movw	r26, r20
     eaa:	c9 01       	movw	r24, r18
     eac:	02 96       	adiw	r24, 0x02	; 2
     eae:	a1 1d       	adc	r26, r1
     eb0:	b1 1d       	adc	r27, r1
     eb2:	89 8b       	std	Y+17, r24	; 0x11
     eb4:	9a 8b       	std	Y+18, r25	; 0x12
     eb6:	ab 8b       	std	Y+19, r26	; 0x13
     eb8:	bc 8b       	std	Y+20, r27	; 0x14
     eba:	f6 01       	movw	r30, r12
     ebc:	83 8b       	std	Z+19, r24	; 0x13
     ebe:	94 8b       	std	Z+20, r25	; 0x14
     ec0:	a5 8b       	std	Z+21, r26	; 0x15
     ec2:	b6 8b       	std	Z+22, r27	; 0x16
		fs->volbase = bsect;								/* Volume start sector */
     ec4:	83 8e       	std	Z+27, r8	; 0x1b
     ec6:	94 8e       	std	Z+28, r9	; 0x1c
     ec8:	a5 8e       	std	Z+29, r10	; 0x1d
     eca:	b6 8e       	std	Z+30, r11	; 0x1e
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     ecc:	4f 89       	ldd	r20, Y+23	; 0x17
     ece:	58 8d       	ldd	r21, Y+24	; 0x18
     ed0:	69 8d       	ldd	r22, Y+25	; 0x19
     ed2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ed4:	48 0d       	add	r20, r8
     ed6:	59 1d       	adc	r21, r9
     ed8:	6a 1d       	adc	r22, r10
     eda:	7b 1d       	adc	r23, r11
     edc:	47 8f       	std	Z+31, r20	; 0x1f
     ede:	50 a3       	lds	r21, 0x50
     ee0:	61 a3       	lds	r22, 0x51
     ee2:	72 a3       	lds	r23, 0x52
		fs->database = bsect + sysect;						/* Data start sector */
     ee4:	d3 01       	movw	r26, r6
     ee6:	c2 01       	movw	r24, r4
     ee8:	88 0d       	add	r24, r8
     eea:	99 1d       	adc	r25, r9
     eec:	aa 1d       	adc	r26, r10
     eee:	bb 1d       	adc	r27, r11
     ef0:	87 a3       	lds	r24, 0x57
     ef2:	90 a7       	lds	r25, 0x70
     ef4:	a1 a7       	lds	r26, 0x71
     ef6:	b2 a7       	lds	r27, 0x72
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
     ef8:	22 e0       	ldi	r18, 0x02	; 2
     efa:	6f cf       	rjmp	.-290    	; 0xdda <find_volume+0x524>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
     efc:	da 01       	movw	r26, r20
     efe:	c9 01       	movw	r24, r18
     f00:	02 96       	adiw	r24, 0x02	; 2
     f02:	a1 1d       	adc	r26, r1
     f04:	b1 1d       	adc	r27, r1
     f06:	89 8b       	std	Y+17, r24	; 0x11
     f08:	9a 8b       	std	Y+18, r25	; 0x12
     f0a:	ab 8b       	std	Y+19, r26	; 0x13
     f0c:	bc 8b       	std	Y+20, r27	; 0x14
     f0e:	f6 01       	movw	r30, r12
     f10:	83 8b       	std	Z+19, r24	; 0x13
     f12:	94 8b       	std	Z+20, r25	; 0x14
     f14:	a5 8b       	std	Z+21, r26	; 0x15
     f16:	b6 8b       	std	Z+22, r27	; 0x16
		fs->volbase = bsect;								/* Volume start sector */
     f18:	83 8e       	std	Z+27, r8	; 0x1b
     f1a:	94 8e       	std	Z+28, r9	; 0x1c
     f1c:	a5 8e       	std	Z+29, r10	; 0x1d
     f1e:	b6 8e       	std	Z+30, r11	; 0x1e
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
     f20:	8f 89       	ldd	r24, Y+23	; 0x17
     f22:	98 8d       	ldd	r25, Y+24	; 0x18
     f24:	a9 8d       	ldd	r26, Y+25	; 0x19
     f26:	ba 8d       	ldd	r27, Y+26	; 0x1a
     f28:	88 0d       	add	r24, r8
     f2a:	99 1d       	adc	r25, r9
     f2c:	aa 1d       	adc	r26, r10
     f2e:	bb 1d       	adc	r27, r11
     f30:	87 8f       	std	Z+31, r24	; 0x1f
     f32:	90 a3       	lds	r25, 0x50
     f34:	a1 a3       	lds	r26, 0x51
     f36:	b2 a3       	lds	r27, 0x52
		fs->database = bsect + sysect;						/* Data start sector */
     f38:	d3 01       	movw	r26, r6
     f3a:	c2 01       	movw	r24, r4
     f3c:	88 0d       	add	r24, r8
     f3e:	99 1d       	adc	r25, r9
     f40:	aa 1d       	adc	r26, r10
     f42:	bb 1d       	adc	r27, r11
     f44:	87 a3       	lds	r24, 0x57
     f46:	90 a7       	lds	r25, 0x70
     f48:	a1 a7       	lds	r26, 0x71
     f4a:	b2 a7       	lds	r27, 0x72
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
     f4c:	e6 5a       	subi	r30, 0xA6	; 166
     f4e:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
     f50:	30 81       	ld	r19, Z
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	f6 01       	movw	r30, r12
     f56:	e7 5a       	subi	r30, 0xA7	; 167
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	80 81       	ld	r24, Z
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	82 2b       	or	r24, r18
     f60:	93 2b       	or	r25, r19
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
		fs->volbase = bsect;								/* Volume start sector */
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
		fs->database = bsect + sysect;						/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
     f62:	00 97       	sbiw	r24, 0x00	; 0
     f64:	09 f0       	breq	.+2      	; 0xf68 <find_volume+0x6b2>
     f66:	2e cd       	rjmp	.-1444   	; 0x9c4 <find_volume+0x10e>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
     f68:	21 14       	cp	r2, r1
     f6a:	31 04       	cpc	r3, r1
     f6c:	09 f0       	breq	.+2      	; 0xf70 <find_volume+0x6ba>
     f6e:	2a cd       	rjmp	.-1452   	; 0x9c4 <find_volume+0x10e>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
     f70:	f6 01       	movw	r30, r12
     f72:	e2 5a       	subi	r30, 0xA2	; 162
     f74:	ff 4f       	sbci	r31, 0xFF	; 255
     f76:	80 81       	ld	r24, Z
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	a0 e0       	ldi	r26, 0x00	; 0
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
     f7e:	44 27       	eor	r20, r20
     f80:	58 2f       	mov	r21, r24
     f82:	69 2f       	mov	r22, r25
     f84:	7a 2f       	mov	r23, r26
     f86:	f6 01       	movw	r30, r12
     f88:	e3 5a       	subi	r30, 0xA3	; 163
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	80 81       	ld	r24, Z
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	a0 e0       	ldi	r26, 0x00	; 0
     f92:	b0 e0       	ldi	r27, 0x00	; 0
     f94:	48 2b       	or	r20, r24
     f96:	59 2b       	or	r21, r25
     f98:	6a 2b       	or	r22, r26
     f9a:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
     f9c:	76 2f       	mov	r23, r22
     f9e:	65 2f       	mov	r22, r21
     fa0:	54 2f       	mov	r21, r20
     fa2:	44 27       	eor	r20, r20
     fa4:	f6 01       	movw	r30, r12
     fa6:	e4 5a       	subi	r30, 0xA4	; 164
     fa8:	ff 4f       	sbci	r31, 0xFF	; 255
     faa:	80 81       	ld	r24, Z
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	48 2b       	or	r20, r24
     fb4:	59 2b       	or	r21, r25
     fb6:	6a 2b       	or	r22, r26
     fb8:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
     fba:	76 2f       	mov	r23, r22
     fbc:	65 2f       	mov	r22, r21
     fbe:	54 2f       	mov	r21, r20
     fc0:	44 27       	eor	r20, r20
     fc2:	f6 01       	movw	r30, r12
     fc4:	e5 5a       	subi	r30, 0xA5	; 165
     fc6:	ff 4f       	sbci	r31, 0xFF	; 255
     fc8:	80 81       	ld	r24, Z
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	a0 e0       	ldi	r26, 0x00	; 0
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	48 2b       	or	r20, r24
     fd2:	59 2b       	or	r21, r25
     fd4:	6a 2b       	or	r22, r26
     fd6:	7b 2b       	or	r23, r27
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
		fs->database = bsect + sysect;						/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
     fd8:	d6 01       	movw	r26, r12
     fda:	93 96       	adiw	r26, 0x23	; 35
     fdc:	4d 93       	st	X+, r20
     fde:	5d 93       	st	X+, r21
     fe0:	6d 93       	st	X+, r22
     fe2:	7c 93       	st	X, r23
     fe4:	96 97       	sbiw	r26, 0x26	; 38
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
     fe6:	49 89       	ldd	r20, Y+17	; 0x11
     fe8:	5a 89       	ldd	r21, Y+18	; 0x12
     fea:	6b 89       	ldd	r22, Y+19	; 0x13
     fec:	7c 89       	ldd	r23, Y+20	; 0x14
     fee:	44 0f       	add	r20, r20
     ff0:	55 1f       	adc	r21, r21
     ff2:	66 1f       	adc	r22, r22
     ff4:	77 1f       	adc	r23, r23
     ff6:	44 0f       	add	r20, r20
     ff8:	55 1f       	adc	r21, r21
     ffa:	66 1f       	adc	r22, r22
     ffc:	77 1f       	adc	r23, r23
     ffe:	23 e0       	ldi	r18, 0x03	; 3
    1000:	1c cf       	rjmp	.-456    	; 0xe3a <find_volume+0x584>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    1002:	e0 5a       	subi	r30, 0xA0	; 160
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    1006:	50 81       	ld	r21, Z
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	f6 01       	movw	r30, r12
    100c:	e1 5a       	subi	r30, 0xA1	; 161
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	80 81       	ld	r24, Z
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	84 2b       	or	r24, r20
    1016:	95 2b       	or	r25, r21
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
		fs->fsi_flag = 0x80;
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	91 05       	cpc	r25, r1
    101c:	09 f0       	breq	.+2      	; 0x1020 <find_volume+0x76a>
    101e:	2f cf       	rjmp	.-418    	; 0xe7e <find_volume+0x5c8>
			&& move_window(fs, bsect + 1) == FR_OK)
    1020:	b5 01       	movw	r22, r10
    1022:	a4 01       	movw	r20, r8
    1024:	4f 5f       	subi	r20, 0xFF	; 255
    1026:	5f 4f       	sbci	r21, 0xFF	; 255
    1028:	6f 4f       	sbci	r22, 0xFF	; 255
    102a:	7f 4f       	sbci	r23, 0xFF	; 255
    102c:	c6 01       	movw	r24, r12
    102e:	2f 8f       	std	Y+31, r18	; 0x1f
    1030:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
    1034:	2f 8d       	ldd	r18, Y+31	; 0x1f
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	09 f0       	breq	.+2      	; 0x103c <find_volume+0x786>
    103a:	21 cf       	rjmp	.-446    	; 0xe7e <find_volume+0x5c8>
		{
			fs->fsi_flag = 0;
    103c:	d6 01       	movw	r26, r12
    103e:	14 96       	adiw	r26, 0x04	; 4
    1040:	1c 92       	st	X, r1
    1042:	14 97       	sbiw	r26, 0x04	; 4
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    1044:	f6 01       	movw	r30, r12
    1046:	e2 5d       	subi	r30, 0xD2	; 210
    1048:	fd 4f       	sbci	r31, 0xFD	; 253
	rv = rv << 8 | ptr[0];
    104a:	50 81       	ld	r21, Z
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	f6 01       	movw	r30, r12
    1050:	e3 5d       	subi	r30, 0xD3	; 211
    1052:	fd 4f       	sbci	r31, 0xFD	; 253
    1054:	80 81       	ld	r24, Z
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	84 2b       	or	r24, r20
    105a:	95 2b       	or	r25, r21
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
    105c:	ba ea       	ldi	r27, 0xAA	; 170
    105e:	85 35       	cpi	r24, 0x55	; 85
    1060:	9b 07       	cpc	r25, r27
    1062:	09 f0       	breq	.+2      	; 0x1066 <find_volume+0x7b0>
    1064:	0c cf       	rjmp	.-488    	; 0xe7e <find_volume+0x5c8>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    1066:	f6 01       	movw	r30, r12
    1068:	82 a9       	sts	0x42, r24
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	a0 e0       	ldi	r26, 0x00	; 0
    106e:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    1070:	ba 2f       	mov	r27, r26
    1072:	a9 2f       	mov	r26, r25
    1074:	98 2f       	mov	r25, r24
    1076:	88 27       	eor	r24, r24
    1078:	41 a9       	sts	0x41, r20
    107a:	50 e0       	ldi	r21, 0x00	; 0
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	84 2b       	or	r24, r20
    1082:	95 2b       	or	r25, r21
    1084:	a6 2b       	or	r26, r22
    1086:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    1088:	ba 2f       	mov	r27, r26
    108a:	a9 2f       	mov	r26, r25
    108c:	98 2f       	mov	r25, r24
    108e:	88 27       	eor	r24, r24
    1090:	40 a9       	sts	0x40, r20
    1092:	50 e0       	ldi	r21, 0x00	; 0
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	84 2b       	or	r24, r20
    109a:	95 2b       	or	r25, r21
    109c:	a6 2b       	or	r26, r22
    109e:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    10a0:	ba 2f       	mov	r27, r26
    10a2:	a9 2f       	mov	r26, r25
    10a4:	98 2f       	mov	r25, r24
    10a6:	88 27       	eor	r24, r24
    10a8:	47 a5       	lds	r20, 0x67
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	84 2b       	or	r24, r20
    10b2:	95 2b       	or	r25, r21
    10b4:	a6 2b       	or	r26, r22
    10b6:	b7 2b       	or	r27, r23
			&& ld_word(fs->win + BPB_FSInfo32) == 1
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
    10b8:	82 35       	cpi	r24, 0x52	; 82
    10ba:	f2 e5       	ldi	r31, 0x52	; 82
    10bc:	9f 07       	cpc	r25, r31
    10be:	f1 e6       	ldi	r31, 0x61	; 97
    10c0:	af 07       	cpc	r26, r31
    10c2:	f1 e4       	ldi	r31, 0x41	; 65
    10c4:	bf 07       	cpc	r27, r31
    10c6:	09 f0       	breq	.+2      	; 0x10ca <find_volume+0x814>
    10c8:	da ce       	rjmp	.-588    	; 0xe7e <find_volume+0x5c8>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    10ca:	f6 01       	movw	r30, r12
    10cc:	ea 5e       	subi	r30, 0xEA	; 234
    10ce:	fd 4f       	sbci	r31, 0xFD	; 253
    10d0:	80 81       	ld	r24, Z
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a0 e0       	ldi	r26, 0x00	; 0
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    10d8:	ba 2f       	mov	r27, r26
    10da:	a9 2f       	mov	r26, r25
    10dc:	98 2f       	mov	r25, r24
    10de:	88 27       	eor	r24, r24
    10e0:	f6 01       	movw	r30, r12
    10e2:	eb 5e       	subi	r30, 0xEB	; 235
    10e4:	fd 4f       	sbci	r31, 0xFD	; 253
    10e6:	40 81       	ld	r20, Z
    10e8:	50 e0       	ldi	r21, 0x00	; 0
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	84 2b       	or	r24, r20
    10f0:	95 2b       	or	r25, r21
    10f2:	a6 2b       	or	r26, r22
    10f4:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    10f6:	ba 2f       	mov	r27, r26
    10f8:	a9 2f       	mov	r26, r25
    10fa:	98 2f       	mov	r25, r24
    10fc:	88 27       	eor	r24, r24
    10fe:	f6 01       	movw	r30, r12
    1100:	ec 5e       	subi	r30, 0xEC	; 236
    1102:	fd 4f       	sbci	r31, 0xFD	; 253
    1104:	40 81       	ld	r20, Z
    1106:	50 e0       	ldi	r21, 0x00	; 0
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	84 2b       	or	r24, r20
    110e:	95 2b       	or	r25, r21
    1110:	a6 2b       	or	r26, r22
    1112:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    1114:	ba 2f       	mov	r27, r26
    1116:	a9 2f       	mov	r26, r25
    1118:	98 2f       	mov	r25, r24
    111a:	88 27       	eor	r24, r24
    111c:	f6 01       	movw	r30, r12
    111e:	ed 5e       	subi	r30, 0xED	; 237
    1120:	fd 4f       	sbci	r31, 0xFD	; 253
    1122:	40 81       	ld	r20, Z
    1124:	50 e0       	ldi	r21, 0x00	; 0
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	70 e0       	ldi	r23, 0x00	; 0
    112a:	84 2b       	or	r24, r20
    112c:	95 2b       	or	r25, r21
    112e:	a6 2b       	or	r26, r22
    1130:	b7 2b       	or	r27, r23
			&& move_window(fs, bsect + 1) == FR_OK)
		{
			fs->fsi_flag = 0;
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
    1132:	82 37       	cpi	r24, 0x72	; 114
    1134:	32 e7       	ldi	r19, 0x72	; 114
    1136:	93 07       	cpc	r25, r19
    1138:	31 e4       	ldi	r19, 0x41	; 65
    113a:	a3 07       	cpc	r26, r19
    113c:	31 e6       	ldi	r19, 0x61	; 97
    113e:	b3 07       	cpc	r27, r19
    1140:	09 f0       	breq	.+2      	; 0x1144 <__stack+0x45>
    1142:	9d ce       	rjmp	.-710    	; 0xe7e <find_volume+0x5c8>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    1144:	f6 01       	movw	r30, r12
    1146:	e6 5e       	subi	r30, 0xE6	; 230
    1148:	fd 4f       	sbci	r31, 0xFD	; 253
    114a:	80 81       	ld	r24, Z
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	a0 e0       	ldi	r26, 0x00	; 0
    1150:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    1152:	ba 2f       	mov	r27, r26
    1154:	a9 2f       	mov	r26, r25
    1156:	98 2f       	mov	r25, r24
    1158:	88 27       	eor	r24, r24
    115a:	f6 01       	movw	r30, r12
    115c:	e7 5e       	subi	r30, 0xE7	; 231
    115e:	fd 4f       	sbci	r31, 0xFD	; 253
    1160:	40 81       	ld	r20, Z
    1162:	50 e0       	ldi	r21, 0x00	; 0
    1164:	60 e0       	ldi	r22, 0x00	; 0
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	84 2b       	or	r24, r20
    116a:	95 2b       	or	r25, r21
    116c:	a6 2b       	or	r26, r22
    116e:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    1170:	ba 2f       	mov	r27, r26
    1172:	a9 2f       	mov	r26, r25
    1174:	98 2f       	mov	r25, r24
    1176:	88 27       	eor	r24, r24
    1178:	f6 01       	movw	r30, r12
    117a:	e8 5e       	subi	r30, 0xE8	; 232
    117c:	fd 4f       	sbci	r31, 0xFD	; 253
    117e:	40 81       	ld	r20, Z
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	70 e0       	ldi	r23, 0x00	; 0
    1186:	84 2b       	or	r24, r20
    1188:	95 2b       	or	r25, r21
    118a:	a6 2b       	or	r26, r22
    118c:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    118e:	ba 2f       	mov	r27, r26
    1190:	a9 2f       	mov	r26, r25
    1192:	98 2f       	mov	r25, r24
    1194:	88 27       	eor	r24, r24
    1196:	f6 01       	movw	r30, r12
    1198:	e9 5e       	subi	r30, 0xE9	; 233
    119a:	fd 4f       	sbci	r31, 0xFD	; 253
    119c:	40 81       	ld	r20, Z
    119e:	50 e0       	ldi	r21, 0x00	; 0
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	84 2b       	or	r24, r20
    11a6:	95 2b       	or	r25, r21
    11a8:	a6 2b       	or	r26, r22
    11aa:	b7 2b       	or	r27, r23
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
    11ac:	f6 01       	movw	r30, r12
    11ae:	87 87       	std	Z+15, r24	; 0x0f
    11b0:	90 8b       	std	Z+16, r25	; 0x10
    11b2:	a1 8b       	std	Z+17, r26	; 0x11
    11b4:	b2 8b       	std	Z+18, r27	; 0x12
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    11b6:	e2 5e       	subi	r30, 0xE2	; 226
    11b8:	fd 4f       	sbci	r31, 0xFD	; 253
    11ba:	80 81       	ld	r24, Z
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	a0 e0       	ldi	r26, 0x00	; 0
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    11c2:	ba 2f       	mov	r27, r26
    11c4:	a9 2f       	mov	r26, r25
    11c6:	98 2f       	mov	r25, r24
    11c8:	88 27       	eor	r24, r24
    11ca:	f6 01       	movw	r30, r12
    11cc:	e3 5e       	subi	r30, 0xE3	; 227
    11ce:	fd 4f       	sbci	r31, 0xFD	; 253
    11d0:	40 81       	ld	r20, Z
    11d2:	50 e0       	ldi	r21, 0x00	; 0
    11d4:	60 e0       	ldi	r22, 0x00	; 0
    11d6:	70 e0       	ldi	r23, 0x00	; 0
    11d8:	84 2b       	or	r24, r20
    11da:	95 2b       	or	r25, r21
    11dc:	a6 2b       	or	r26, r22
    11de:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[1];
    11e0:	ba 2f       	mov	r27, r26
    11e2:	a9 2f       	mov	r26, r25
    11e4:	98 2f       	mov	r25, r24
    11e6:	88 27       	eor	r24, r24
    11e8:	f6 01       	movw	r30, r12
    11ea:	e4 5e       	subi	r30, 0xE4	; 228
    11ec:	fd 4f       	sbci	r31, 0xFD	; 253
    11ee:	40 81       	ld	r20, Z
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	84 2b       	or	r24, r20
    11f8:	95 2b       	or	r25, r21
    11fa:	a6 2b       	or	r26, r22
    11fc:	b7 2b       	or	r27, r23
	rv = rv << 8 | ptr[0];
    11fe:	ba 2f       	mov	r27, r26
    1200:	a9 2f       	mov	r26, r25
    1202:	98 2f       	mov	r25, r24
    1204:	88 27       	eor	r24, r24
    1206:	f6 01       	movw	r30, r12
    1208:	e5 5e       	subi	r30, 0xE5	; 229
    120a:	fd 4f       	sbci	r31, 0xFD	; 253
    120c:	40 81       	ld	r20, Z
    120e:	50 e0       	ldi	r21, 0x00	; 0
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	84 2b       	or	r24, r20
    1216:	95 2b       	or	r25, r21
    1218:	a6 2b       	or	r26, r22
    121a:	b7 2b       	or	r27, r23
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
    121c:	f6 01       	movw	r30, r12
    121e:	83 87       	std	Z+11, r24	; 0x0b
    1220:	94 87       	std	Z+12, r25	; 0x0c
    1222:	a5 87       	std	Z+13, r26	; 0x0d
    1224:	b6 87       	std	Z+14, r27	; 0x0e
    1226:	2b ce       	rjmp	.-938    	; 0xe7e <find_volume+0x5c8>

00001228 <get_fat.isra.8>:
/*-----------------------------------------------------------------------*/
/* FAT access - Read value of a FAT entry                                */
/*-----------------------------------------------------------------------*/

static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
    1228:	bf 92       	push	r11
    122a:	cf 92       	push	r12
    122c:	df 92       	push	r13
    122e:	ef 92       	push	r14
    1230:	ff 92       	push	r15
    1232:	0f 93       	push	r16
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	ec 01       	movw	r28, r24
    123c:	6a 01       	movw	r12, r20
    123e:	7b 01       	movw	r14, r22
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
    1240:	42 30       	cpi	r20, 0x02	; 2
    1242:	51 05       	cpc	r21, r1
    1244:	61 05       	cpc	r22, r1
    1246:	71 05       	cpc	r23, r1
    1248:	88 f0       	brcs	.+34     	; 0x126c <get_fat.isra.8+0x44>
    124a:	8b 89       	ldd	r24, Y+19	; 0x13
    124c:	9c 89       	ldd	r25, Y+20	; 0x14
    124e:	ad 89       	ldd	r26, Y+21	; 0x15
    1250:	be 89       	ldd	r27, Y+22	; 0x16
    1252:	48 17       	cp	r20, r24
    1254:	59 07       	cpc	r21, r25
    1256:	6a 07       	cpc	r22, r26
    1258:	7b 07       	cpc	r23, r27
    125a:	40 f4       	brcc	.+16     	; 0x126c <get_fat.isra.8+0x44>
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
    125c:	88 81       	ld	r24, Y
    125e:	82 30       	cpi	r24, 0x02	; 2
    1260:	09 f4       	brne	.+2      	; 0x1264 <get_fat.isra.8+0x3c>
    1262:	77 c0       	rjmp	.+238    	; 0x1352 <get_fat.isra.8+0x12a>
    1264:	83 30       	cpi	r24, 0x03	; 3
    1266:	79 f1       	breq	.+94     	; 0x12c6 <get_fat.isra.8+0x9e>
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	81 f0       	breq	.+32     	; 0x128c <get_fat.isra.8+0x64>
				}
			}
			/* go next */
#endif
		default:
			val = 1;	/* Internal error */
    126c:	01 e0       	ldi	r16, 0x01	; 1
    126e:	10 e0       	ldi	r17, 0x00	; 0
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
		}
	}

	return val;
}
    1274:	b8 01       	movw	r22, r16
    1276:	c9 01       	movw	r24, r18
    1278:	df 91       	pop	r29
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	0f 91       	pop	r16
    1280:	ff 90       	pop	r15
    1282:	ef 90       	pop	r14
    1284:	df 90       	pop	r13
    1286:	cf 90       	pop	r12
    1288:	bf 90       	pop	r11
    128a:	08 95       	ret
	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
    128c:	8a 01       	movw	r16, r20
    128e:	16 95       	lsr	r17
    1290:	07 95       	ror	r16
    1292:	04 0f       	add	r16, r20
    1294:	15 1f       	adc	r17, r21
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    1296:	a8 01       	movw	r20, r16
    1298:	45 2f       	mov	r20, r21
    129a:	55 27       	eor	r21, r21
    129c:	46 95       	lsr	r20
    129e:	60 e0       	ldi	r22, 0x00	; 0
    12a0:	70 e0       	ldi	r23, 0x00	; 0
    12a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12a4:	98 a1       	lds	r25, 0x48
    12a6:	a9 a1       	lds	r26, 0x49
    12a8:	ba a1       	lds	r27, 0x4a
    12aa:	48 0f       	add	r20, r24
    12ac:	59 1f       	adc	r21, r25
    12ae:	6a 1f       	adc	r22, r26
    12b0:	7b 1f       	adc	r23, r27
    12b2:	ce 01       	movw	r24, r28
    12b4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	09 f4       	brne	.+2      	; 0x12be <get_fat.isra.8+0x96>
    12bc:	6b c0       	rjmp	.+214    	; 0x1394 <get_fat.isra.8+0x16c>

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
    12be:	0f ef       	ldi	r16, 0xFF	; 255
    12c0:	1f ef       	ldi	r17, 0xFF	; 255
    12c2:	98 01       	movw	r18, r16
    12c4:	d7 cf       	rjmp	.-82     	; 0x1274 <get_fat.isra.8+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
			val = ld_word(fs->win + clst * 2 % SS(fs));
			break;

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
    12c6:	e7 e0       	ldi	r30, 0x07	; 7
    12c8:	76 95       	lsr	r23
    12ca:	67 95       	ror	r22
    12cc:	57 95       	ror	r21
    12ce:	47 95       	ror	r20
    12d0:	ea 95       	dec	r30
    12d2:	d1 f7       	brne	.-12     	; 0x12c8 <get_fat.isra.8+0xa0>
    12d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12d6:	98 a1       	lds	r25, 0x48
    12d8:	a9 a1       	lds	r26, 0x49
    12da:	ba a1       	lds	r27, 0x4a
    12dc:	48 0f       	add	r20, r24
    12de:	59 1f       	adc	r21, r25
    12e0:	6a 1f       	adc	r22, r26
    12e2:	7b 1f       	adc	r23, r27
    12e4:	ce 01       	movw	r24, r28
    12e6:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	41 f7       	brne	.-48     	; 0x12be <get_fat.isra.8+0x96>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
    12ee:	f6 01       	movw	r30, r12
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	f1 70       	andi	r31, 0x01	; 1
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    12fa:	ec 0f       	add	r30, r28
    12fc:	fd 1f       	adc	r31, r29
    12fe:	02 a9       	sts	0x42, r16
    1300:	10 e0       	ldi	r17, 0x00	; 0
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
	rv = rv << 8 | ptr[2];
    1306:	32 2f       	mov	r19, r18
    1308:	21 2f       	mov	r18, r17
    130a:	10 2f       	mov	r17, r16
    130c:	00 27       	eor	r16, r16
    130e:	81 a9       	sts	0x41, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a0 e0       	ldi	r26, 0x00	; 0
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	08 2b       	or	r16, r24
    1318:	19 2b       	or	r17, r25
    131a:	2a 2b       	or	r18, r26
    131c:	3b 2b       	or	r19, r27
	rv = rv << 8 | ptr[1];
    131e:	32 2f       	mov	r19, r18
    1320:	21 2f       	mov	r18, r17
    1322:	10 2f       	mov	r17, r16
    1324:	00 27       	eor	r16, r16
    1326:	80 a9       	sts	0x40, r24
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e0       	ldi	r26, 0x00	; 0
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	08 2b       	or	r16, r24
    1330:	19 2b       	or	r17, r25
    1332:	2a 2b       	or	r18, r26
    1334:	3b 2b       	or	r19, r27
	rv = rv << 8 | ptr[0];
    1336:	32 2f       	mov	r19, r18
    1338:	21 2f       	mov	r18, r17
    133a:	10 2f       	mov	r17, r16
    133c:	00 27       	eor	r16, r16
    133e:	87 a5       	lds	r24, 0x67
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a0 e0       	ldi	r26, 0x00	; 0
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	08 2b       	or	r16, r24
    1348:	19 2b       	or	r17, r25
    134a:	2a 2b       	or	r18, r26
    134c:	3b 2b       	or	r19, r27
			val = ld_word(fs->win + clst * 2 % SS(fs));
			break;

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
    134e:	3f 70       	andi	r19, 0x0F	; 15
    1350:	91 cf       	rjmp	.-222    	; 0x1274 <get_fat.isra.8+0x4c>
			wc |= fs->win[bc % SS(fs)] << 8;
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
    1352:	45 2f       	mov	r20, r21
    1354:	56 2f       	mov	r21, r22
    1356:	67 2f       	mov	r22, r23
    1358:	77 27       	eor	r23, r23
    135a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    135c:	98 a1       	lds	r25, 0x48
    135e:	a9 a1       	lds	r26, 0x49
    1360:	ba a1       	lds	r27, 0x4a
    1362:	48 0f       	add	r20, r24
    1364:	59 1f       	adc	r21, r25
    1366:	6a 1f       	adc	r22, r26
    1368:	7b 1f       	adc	r23, r27
    136a:	ce 01       	movw	r24, r28
    136c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
    1370:	00 97       	sbiw	r24, 0x00	; 0
    1372:	09 f0       	breq	.+2      	; 0x1376 <get_fat.isra.8+0x14e>
    1374:	a4 cf       	rjmp	.-184    	; 0x12be <get_fat.isra.8+0x96>
			val = ld_word(fs->win + clst * 2 % SS(fs));
    1376:	f6 01       	movw	r30, r12
    1378:	ee 0f       	add	r30, r30
    137a:	ff 1f       	adc	r31, r31
    137c:	f1 70       	andi	r31, 0x01	; 1
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    137e:	ec 0f       	add	r30, r28
    1380:	fd 1f       	adc	r31, r29
	rv = rv << 8 | ptr[0];
    1382:	90 a9       	sts	0x40, r25
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	07 a5       	lds	r16, 0x67
    1388:	10 e0       	ldi	r17, 0x00	; 0
    138a:	08 2b       	or	r16, r24
    138c:	19 2b       	or	r17, r25
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
			break;

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
			val = ld_word(fs->win + clst * 2 % SS(fs));
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	70 cf       	rjmp	.-288    	; 0x1274 <get_fat.isra.8+0x4c>

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc = fs->win[bc++ % SS(fs)];
    1394:	f8 01       	movw	r30, r16
    1396:	f1 70       	andi	r31, 0x01	; 1
    1398:	ec 0f       	add	r30, r28
    139a:	fd 1f       	adc	r31, r29
    139c:	b7 a4       	lds	r27, 0xa7
    139e:	0f 5f       	subi	r16, 0xFF	; 255
    13a0:	1f 4f       	sbci	r17, 0xFF	; 255
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
    13a2:	a8 01       	movw	r20, r16
    13a4:	45 2f       	mov	r20, r21
    13a6:	55 27       	eor	r21, r21
    13a8:	46 95       	lsr	r20
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    13b0:	98 a1       	lds	r25, 0x48
    13b2:	a9 a1       	lds	r26, 0x49
    13b4:	ba a1       	lds	r27, 0x4a
    13b6:	48 0f       	add	r20, r24
    13b8:	59 1f       	adc	r21, r25
    13ba:	6a 1f       	adc	r22, r26
    13bc:	7b 1f       	adc	r23, r27
    13be:	ce 01       	movw	r24, r28
    13c0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	09 f0       	breq	.+2      	; 0x13ca <get_fat.isra.8+0x1a2>
    13c8:	7a cf       	rjmp	.-268    	; 0x12be <get_fat.isra.8+0x96>

		switch (fs->fs_type) {
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc = fs->win[bc++ % SS(fs)];
    13ca:	2b 2d       	mov	r18, r11
    13cc:	30 e0       	ldi	r19, 0x00	; 0
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
			wc |= fs->win[bc % SS(fs)] << 8;
    13ce:	f8 01       	movw	r30, r16
    13d0:	f1 70       	andi	r31, 0x01	; 1
    13d2:	ec 0f       	add	r30, r28
    13d4:	fd 1f       	adc	r31, r29
    13d6:	97 a5       	lds	r25, 0x67
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	28 2b       	or	r18, r24
    13dc:	39 2b       	or	r19, r25
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	c8 22       	and	r12, r24
    13e2:	dd 24       	eor	r13, r13
    13e4:	c1 14       	cp	r12, r1
    13e6:	d1 04       	cpc	r13, r1
    13e8:	51 f0       	breq	.+20     	; 0x13fe <get_fat.isra.8+0x1d6>
    13ea:	32 95       	swap	r19
    13ec:	22 95       	swap	r18
    13ee:	2f 70       	andi	r18, 0x0F	; 15
    13f0:	23 27       	eor	r18, r19
    13f2:	3f 70       	andi	r19, 0x0F	; 15
    13f4:	23 27       	eor	r18, r19
    13f6:	89 01       	movw	r16, r18
    13f8:	20 e0       	ldi	r18, 0x00	; 0
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3b cf       	rjmp	.-394    	; 0x1274 <get_fat.isra.8+0x4c>
    13fe:	89 01       	movw	r16, r18
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	1f 70       	andi	r17, 0x0F	; 15
    1406:	20 70       	andi	r18, 0x00	; 0
    1408:	30 70       	andi	r19, 0x00	; 0
    140a:	34 cf       	rjmp	.-408    	; 0x1274 <get_fat.isra.8+0x4c>

0000140c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
    140c:	8f 92       	push	r8
    140e:	9f 92       	push	r9
    1410:	af 92       	push	r10
    1412:	bf 92       	push	r11
    1414:	cf 92       	push	r12
    1416:	df 92       	push	r13
    1418:	ef 92       	push	r14
    141a:	ff 92       	push	r15
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	ec 01       	movw	r28, r24
    1426:	6a 01       	movw	r12, r20
    1428:	7b 01       	movw	r14, r22
    142a:	48 01       	movw	r8, r16
    142c:	59 01       	movw	r10, r18
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
    142e:	42 30       	cpi	r20, 0x02	; 2
    1430:	51 05       	cpc	r21, r1
    1432:	61 05       	cpc	r22, r1
    1434:	71 05       	cpc	r23, r1
    1436:	48 f0       	brcs	.+18     	; 0x144a <put_fat+0x3e>
    1438:	8b 89       	ldd	r24, Y+19	; 0x13
    143a:	9c 89       	ldd	r25, Y+20	; 0x14
    143c:	ad 89       	ldd	r26, Y+21	; 0x15
    143e:	be 89       	ldd	r27, Y+22	; 0x16
    1440:	48 17       	cp	r20, r24
    1442:	59 07       	cpc	r21, r25
    1444:	6a 07       	cpc	r22, r26
    1446:	7b 07       	cpc	r23, r27
    1448:	78 f0       	brcs	.+30     	; 0x1468 <put_fat+0x5c>
	DWORD val		/* New value to be set to the entry */
)
{
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
    144a:	82 e0       	ldi	r24, 0x02	; 2
    144c:	90 e0       	ldi	r25, 0x00	; 0
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	bf 90       	pop	r11
    1460:	af 90       	pop	r10
    1462:	9f 90       	pop	r9
    1464:	8f 90       	pop	r8
    1466:	08 95       	ret
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
		switch (fs->fs_type) {
    1468:	88 81       	ld	r24, Y
    146a:	82 30       	cpi	r24, 0x02	; 2
    146c:	09 f4       	brne	.+2      	; 0x1470 <put_fat+0x64>
    146e:	93 c0       	rjmp	.+294    	; 0x1596 <put_fat+0x18a>
    1470:	83 30       	cpi	r24, 0x03	; 3
    1472:	09 f4       	brne	.+2      	; 0x1476 <put_fat+0x6a>
    1474:	59 c0       	rjmp	.+178    	; 0x1528 <put_fat+0x11c>
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	41 f7       	brne	.-48     	; 0x144a <put_fat+0x3e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
    147a:	8a 01       	movw	r16, r20
    147c:	16 95       	lsr	r17
    147e:	07 95       	ror	r16
    1480:	0c 0d       	add	r16, r12
    1482:	1d 1d       	adc	r17, r13
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1484:	a8 01       	movw	r20, r16
    1486:	45 2f       	mov	r20, r21
    1488:	55 27       	eor	r21, r21
    148a:	46 95       	lsr	r20
    148c:	60 e0       	ldi	r22, 0x00	; 0
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1492:	98 a1       	lds	r25, 0x48
    1494:	a9 a1       	lds	r26, 0x49
    1496:	ba a1       	lds	r27, 0x4a
    1498:	48 0f       	add	r20, r24
    149a:	59 1f       	adc	r21, r25
    149c:	6a 1f       	adc	r22, r26
    149e:	7b 1f       	adc	r23, r27
    14a0:	ce 01       	movw	r24, r28
    14a2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
			if (res != FR_OK) break;
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	91 f6       	brne	.-92     	; 0x144e <put_fat+0x42>
			p = fs->win + bc++ % SS(fs);
    14aa:	f8 01       	movw	r30, r16
    14ac:	f1 70       	andi	r31, 0x01	; 1
    14ae:	0f 5f       	subi	r16, 0xFF	; 255
    14b0:	1f 4f       	sbci	r17, 0xFF	; 255
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	c8 22       	and	r12, r24
    14b6:	dd 24       	eor	r13, r13
    14b8:	c1 14       	cp	r12, r1
    14ba:	d1 04       	cpc	r13, r1
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <put_fat+0xb4>
    14be:	88 c0       	rjmp	.+272    	; 0x15d0 <put_fat+0x1c4>
    14c0:	ec 0f       	add	r30, r28
    14c2:	fd 1f       	adc	r31, r29
    14c4:	97 a5       	lds	r25, 0x67
    14c6:	9f 70       	andi	r25, 0x0F	; 15
    14c8:	88 2d       	mov	r24, r8
    14ca:	82 95       	swap	r24
    14cc:	80 7f       	andi	r24, 0xF0	; 240
    14ce:	89 2b       	or	r24, r25
    14d0:	87 a7       	lds	r24, 0x77
			fs->wflag = 1;
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	8b 83       	std	Y+3, r24	; 0x03
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    14d6:	a8 01       	movw	r20, r16
    14d8:	45 2f       	mov	r20, r21
    14da:	55 27       	eor	r21, r21
    14dc:	46 95       	lsr	r20
    14de:	60 e0       	ldi	r22, 0x00	; 0
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14e4:	98 a1       	lds	r25, 0x48
    14e6:	a9 a1       	lds	r26, 0x49
    14e8:	ba a1       	lds	r27, 0x4a
    14ea:	48 0f       	add	r20, r24
    14ec:	59 1f       	adc	r21, r25
    14ee:	6a 1f       	adc	r22, r26
    14f0:	7b 1f       	adc	r23, r27
    14f2:	ce 01       	movw	r24, r28
    14f4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
			if (res != FR_OK) break;
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	09 f0       	breq	.+2      	; 0x14fe <put_fat+0xf2>
    14fc:	a8 cf       	rjmp	.-176    	; 0x144e <put_fat+0x42>
			p = fs->win + bc % SS(fs);
    14fe:	11 70       	andi	r17, 0x01	; 1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    1500:	c1 14       	cp	r12, r1
    1502:	d1 04       	cpc	r13, r1
    1504:	09 f4       	brne	.+2      	; 0x1508 <put_fat+0xfc>
    1506:	68 c0       	rjmp	.+208    	; 0x15d8 <put_fat+0x1cc>
    1508:	b5 01       	movw	r22, r10
    150a:	a4 01       	movw	r20, r8
    150c:	24 e0       	ldi	r18, 0x04	; 4
    150e:	76 95       	lsr	r23
    1510:	67 95       	ror	r22
    1512:	57 95       	ror	r21
    1514:	47 95       	ror	r20
    1516:	2a 95       	dec	r18
    1518:	d1 f7       	brne	.-12     	; 0x150e <put_fat+0x102>
    151a:	fe 01       	movw	r30, r28
    151c:	e0 0f       	add	r30, r16
    151e:	f1 1f       	adc	r31, r17
    1520:	47 a7       	lds	r20, 0x77
			fs->wflag = 1;
    1522:	21 e0       	ldi	r18, 0x01	; 1
    1524:	2b 83       	std	Y+3, r18	; 0x03
    1526:	93 cf       	rjmp	.-218    	; 0x144e <put_fat+0x42>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1528:	b7 e0       	ldi	r27, 0x07	; 7
    152a:	76 95       	lsr	r23
    152c:	67 95       	ror	r22
    152e:	57 95       	ror	r21
    1530:	47 95       	ror	r20
    1532:	ba 95       	dec	r27
    1534:	d1 f7       	brne	.-12     	; 0x152a <put_fat+0x11e>
    1536:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1538:	98 a1       	lds	r25, 0x48
    153a:	a9 a1       	lds	r26, 0x49
    153c:	ba a1       	lds	r27, 0x4a
    153e:	48 0f       	add	r20, r24
    1540:	59 1f       	adc	r21, r25
    1542:	6a 1f       	adc	r22, r26
    1544:	7b 1f       	adc	r23, r27
    1546:	ce 01       	movw	r24, r28
    1548:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
			if (res != FR_OK) break;
    154c:	00 97       	sbiw	r24, 0x00	; 0
    154e:	09 f0       	breq	.+2      	; 0x1552 <put_fat+0x146>
    1550:	7e cf       	rjmp	.-260    	; 0x144e <put_fat+0x42>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    1552:	f6 01       	movw	r30, r12
    1554:	ee 0f       	add	r30, r30
    1556:	ff 1f       	adc	r31, r31
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	f1 70       	andi	r31, 0x01	; 1
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    155e:	ec 0f       	add	r30, r28
    1560:	fd 1f       	adc	r31, r29
    1562:	42 a9       	sts	0x42, r20
    1564:	50 e0       	ldi	r21, 0x00	; 0
    1566:	60 e0       	ldi	r22, 0x00	; 0
    1568:	70 e0       	ldi	r23, 0x00	; 0
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
    156a:	34 2f       	mov	r19, r20
    156c:	22 27       	eor	r18, r18
    156e:	11 27       	eor	r17, r17
    1570:	00 27       	eor	r16, r16
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
			if (res != FR_OK) break;
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
    1572:	00 70       	andi	r16, 0x00	; 0
    1574:	10 70       	andi	r17, 0x00	; 0
    1576:	20 70       	andi	r18, 0x00	; 0
    1578:	30 7f       	andi	r19, 0xF0	; 240
    157a:	b5 01       	movw	r22, r10
    157c:	a4 01       	movw	r20, r8
    157e:	7f 70       	andi	r23, 0x0F	; 15
    1580:	04 2b       	or	r16, r20
    1582:	15 2b       	or	r17, r21
    1584:	26 2b       	or	r18, r22
    1586:	37 2b       	or	r19, r23
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    1588:	07 a7       	lds	r16, 0x77
	*ptr++ = (BYTE)val; val >>= 8;
    158a:	10 ab       	sts	0x50, r17
	*ptr++ = (BYTE)val; val >>= 8;
    158c:	21 ab       	sts	0x51, r18
	*ptr++ = (BYTE)val;
    158e:	32 ab       	sts	0x52, r19
			if (res != FR_OK) break;
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
			fs->wflag = 1;
    1590:	21 e0       	ldi	r18, 0x01	; 1
    1592:	2b 83       	std	Y+3, r18	; 0x03
    1594:	5c cf       	rjmp	.-328    	; 0x144e <put_fat+0x42>
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
			fs->wflag = 1;
			break;

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1596:	45 2f       	mov	r20, r21
    1598:	56 2f       	mov	r21, r22
    159a:	67 2f       	mov	r22, r23
    159c:	77 27       	eor	r23, r23
    159e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15a0:	98 a1       	lds	r25, 0x48
    15a2:	a9 a1       	lds	r26, 0x49
    15a4:	ba a1       	lds	r27, 0x4a
    15a6:	48 0f       	add	r20, r24
    15a8:	59 1f       	adc	r21, r25
    15aa:	6a 1f       	adc	r22, r26
    15ac:	7b 1f       	adc	r23, r27
    15ae:	ce 01       	movw	r24, r28
    15b0:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
			if (res != FR_OK) break;
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	09 f0       	breq	.+2      	; 0x15ba <put_fat+0x1ae>
    15b8:	4a cf       	rjmp	.-364    	; 0x144e <put_fat+0x42>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
    15ba:	f6 01       	movw	r30, r12
    15bc:	ee 0f       	add	r30, r30
    15be:	ff 1f       	adc	r31, r31
    15c0:	f1 70       	andi	r31, 0x01	; 1

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    15c2:	ec 0f       	add	r30, r28
    15c4:	fd 1f       	adc	r31, r29
    15c6:	87 a6       	lds	r24, 0xb7
	*ptr++ = (BYTE)val;
    15c8:	90 aa       	sts	0x90, r25

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
			if (res != FR_OK) break;
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
			fs->wflag = 1;
    15ca:	21 e0       	ldi	r18, 0x01	; 1
    15cc:	2b 83       	std	Y+3, r18	; 0x03
    15ce:	3f cf       	rjmp	.-386    	; 0x144e <put_fat+0x42>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = fs->win + bc++ % SS(fs);
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    15d0:	88 2d       	mov	r24, r8
    15d2:	ec 0f       	add	r30, r28
    15d4:	fd 1f       	adc	r31, r29
    15d6:	7c cf       	rjmp	.-264    	; 0x14d0 <put_fat+0xc4>
			fs->wflag = 1;
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
			if (res != FR_OK) break;
			p = fs->win + bc % SS(fs);
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    15d8:	fe 01       	movw	r30, r28
    15da:	e0 0f       	add	r30, r16
    15dc:	f1 1f       	adc	r31, r17
    15de:	47 a5       	lds	r20, 0x67
    15e0:	40 7f       	andi	r20, 0xF0	; 240
    15e2:	29 2d       	mov	r18, r9
    15e4:	2f 70       	andi	r18, 0x0F	; 15
    15e6:	42 2b       	or	r20, r18
    15e8:	9b cf       	rjmp	.-202    	; 0x1520 <put_fat+0x114>

000015ea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
    15ea:	2f 92       	push	r2
    15ec:	3f 92       	push	r3
    15ee:	4f 92       	push	r4
    15f0:	5f 92       	push	r5
    15f2:	6f 92       	push	r6
    15f4:	7f 92       	push	r7
    15f6:	8f 92       	push	r8
    15f8:	9f 92       	push	r9
    15fa:	af 92       	push	r10
    15fc:	bf 92       	push	r11
    15fe:	cf 92       	push	r12
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	ec 01       	movw	r28, r24
    1610:	1a 01       	movw	r2, r20
    1612:	2b 01       	movw	r4, r22
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
    1614:	68 80       	ld	r6, Y
    1616:	79 80       	ldd	r7, Y+1	; 0x01


	if (clst == 0) {	/* Create a new chain */
    1618:	41 15       	cp	r20, r1
    161a:	51 05       	cpc	r21, r1
    161c:	61 05       	cpc	r22, r1
    161e:	71 05       	cpc	r23, r1
    1620:	09 f0       	breq	.+2      	; 0x1624 <create_chain+0x3a>
    1622:	b6 c0       	rjmp	.+364    	; 0x1790 <create_chain+0x1a6>
		scl = fs->last_clst;				/* Get suggested cluster to start at */
    1624:	f3 01       	movw	r30, r6
    1626:	83 84       	ldd	r8, Z+11	; 0x0b
    1628:	94 84       	ldd	r9, Z+12	; 0x0c
    162a:	a5 84       	ldd	r10, Z+13	; 0x0d
    162c:	b6 84       	ldd	r11, Z+14	; 0x0e
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    162e:	81 14       	cp	r8, r1
    1630:	91 04       	cpc	r9, r1
    1632:	a1 04       	cpc	r10, r1
    1634:	b1 04       	cpc	r11, r1
    1636:	09 f0       	breq	.+2      	; 0x163a <create_chain+0x50>
    1638:	49 c0       	rjmp	.+146    	; 0x16cc <create_chain+0xe2>
    163a:	83 89       	ldd	r24, Z+19	; 0x13
    163c:	94 89       	ldd	r25, Z+20	; 0x14
    163e:	a5 89       	ldd	r26, Z+21	; 0x15
    1640:	b6 89       	ldd	r27, Z+22	; 0x16
    1642:	11 e0       	ldi	r17, 0x01	; 1
    1644:	81 2e       	mov	r8, r17
    1646:	91 2c       	mov	r9, r1
    1648:	a1 2c       	mov	r10, r1
    164a:	b1 2c       	mov	r11, r1
    164c:	75 01       	movw	r14, r10
    164e:	64 01       	movw	r12, r8
	} else
#endif
	{	/* At the FAT12/16/32 */
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
    1650:	08 94       	sec
    1652:	c1 1c       	adc	r12, r1
    1654:	d1 1c       	adc	r13, r1
    1656:	e1 1c       	adc	r14, r1
    1658:	f1 1c       	adc	r15, r1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
    165a:	c8 16       	cp	r12, r24
    165c:	d9 06       	cpc	r13, r25
    165e:	ea 06       	cpc	r14, r26
    1660:	fb 06       	cpc	r15, r27
    1662:	60 f0       	brcs	.+24     	; 0x167c <create_chain+0x92>
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
    1664:	f2 e0       	ldi	r31, 0x02	; 2
    1666:	8f 16       	cp	r8, r31
    1668:	91 04       	cpc	r9, r1
    166a:	a1 04       	cpc	r10, r1
    166c:	b1 04       	cpc	r11, r1
    166e:	08 f4       	brcc	.+2      	; 0x1672 <create_chain+0x88>
    1670:	8b c0       	rjmp	.+278    	; 0x1788 <create_chain+0x19e>
	{	/* At the FAT12/16/32 */
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
    1672:	72 e0       	ldi	r23, 0x02	; 2
    1674:	c7 2e       	mov	r12, r23
    1676:	d1 2c       	mov	r13, r1
    1678:	e1 2c       	mov	r14, r1
    167a:	f1 2c       	mov	r15, r1
				if (ncl > scl) return 0;	/* No free cluster */
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
    167c:	88 81       	ld	r24, Y
    167e:	99 81       	ldd	r25, Y+1	; 0x01
    1680:	b7 01       	movw	r22, r14
    1682:	a6 01       	movw	r20, r12
    1684:	0e 94 14 09 	call	0x1228	; 0x1228 <get_fat.isra.8>
    1688:	8b 01       	movw	r16, r22
    168a:	9c 01       	movw	r18, r24
			if (cs == 0) break;				/* Found a free cluster */
    168c:	61 15       	cp	r22, r1
    168e:	71 05       	cpc	r23, r1
    1690:	81 05       	cpc	r24, r1
    1692:	91 05       	cpc	r25, r1
    1694:	61 f1       	breq	.+88     	; 0x16ee <create_chain+0x104>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
    1696:	61 30       	cpi	r22, 0x01	; 1
    1698:	71 05       	cpc	r23, r1
    169a:	81 05       	cpc	r24, r1
    169c:	91 05       	cpc	r25, r1
    169e:	09 f4       	brne	.+2      	; 0x16a2 <create_chain+0xb8>
    16a0:	5e c0       	rjmp	.+188    	; 0x175e <create_chain+0x174>
    16a2:	0f 3f       	cpi	r16, 0xFF	; 255
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	18 07       	cpc	r17, r24
    16a8:	8f ef       	ldi	r24, 0xFF	; 255
    16aa:	28 07       	cpc	r18, r24
    16ac:	8f ef       	ldi	r24, 0xFF	; 255
    16ae:	38 07       	cpc	r19, r24
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <create_chain+0xca>
    16b2:	55 c0       	rjmp	.+170    	; 0x175e <create_chain+0x174>
			if (ncl == scl) return 0;		/* No free cluster */
    16b4:	c8 14       	cp	r12, r8
    16b6:	d9 04       	cpc	r13, r9
    16b8:	ea 04       	cpc	r14, r10
    16ba:	fb 04       	cpc	r15, r11
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <create_chain+0xd6>
    16be:	64 c0       	rjmp	.+200    	; 0x1788 <create_chain+0x19e>
    16c0:	f3 01       	movw	r30, r6
    16c2:	83 89       	ldd	r24, Z+19	; 0x13
    16c4:	94 89       	ldd	r25, Z+20	; 0x14
    16c6:	a5 89       	ldd	r26, Z+21	; 0x15
    16c8:	b6 89       	ldd	r27, Z+22	; 0x16
    16ca:	c2 cf       	rjmp	.-124    	; 0x1650 <create_chain+0x66>
	FATFS *fs = obj->fs;


	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Get suggested cluster to start at */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
    16cc:	f3 01       	movw	r30, r6
    16ce:	83 89       	ldd	r24, Z+19	; 0x13
    16d0:	94 89       	ldd	r25, Z+20	; 0x14
    16d2:	a5 89       	ldd	r26, Z+21	; 0x15
    16d4:	b6 89       	ldd	r27, Z+22	; 0x16
    16d6:	88 16       	cp	r8, r24
    16d8:	99 06       	cpc	r9, r25
    16da:	aa 06       	cpc	r10, r26
    16dc:	bb 06       	cpc	r11, r27
    16de:	08 f4       	brcc	.+2      	; 0x16e2 <create_chain+0xf8>
    16e0:	b5 cf       	rjmp	.-150    	; 0x164c <create_chain+0x62>
    16e2:	e1 e0       	ldi	r30, 0x01	; 1
    16e4:	8e 2e       	mov	r8, r30
    16e6:	91 2c       	mov	r9, r1
    16e8:	a1 2c       	mov	r10, r1
    16ea:	b1 2c       	mov	r11, r1
    16ec:	af cf       	rjmp	.-162    	; 0x164c <create_chain+0x62>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
			if (cs == 0) break;				/* Found a free cluster */
    16ee:	cc 2d       	mov	r28, r12
    16f0:	8d 2c       	mov	r8, r13
    16f2:	de 2d       	mov	r29, r14
    16f4:	bf 2c       	mov	r11, r15
	}

	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
		res = FR_OK;						/* FAT does not need to be written */
	} else {
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
    16f6:	c3 01       	movw	r24, r6
    16f8:	a6 01       	movw	r20, r12
    16fa:	b7 01       	movw	r22, r14
    16fc:	0f ef       	ldi	r16, 0xFF	; 255
    16fe:	1f ef       	ldi	r17, 0xFF	; 255
    1700:	98 01       	movw	r18, r16
    1702:	0e 94 06 0a 	call	0x140c	; 0x140c <put_fat>
		if (res == FR_OK && clst) {
    1706:	00 97       	sbiw	r24, 0x00	; 0
    1708:	09 f0       	breq	.+2      	; 0x170c <create_chain+0x122>
    170a:	70 c0       	rjmp	.+224    	; 0x17ec <create_chain+0x202>
    170c:	21 14       	cp	r2, r1
    170e:	31 04       	cpc	r3, r1
    1710:	41 04       	cpc	r4, r1
    1712:	51 04       	cpc	r5, r1
    1714:	09 f0       	breq	.+2      	; 0x1718 <create_chain+0x12e>
    1716:	60 c0       	rjmp	.+192    	; 0x17d8 <create_chain+0x1ee>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
    1718:	f3 01       	movw	r30, r6
    171a:	c3 87       	std	Z+11, r28	; 0x0b
    171c:	84 86       	std	Z+12, r8	; 0x0c
    171e:	d5 87       	std	Z+13, r29	; 0x0d
    1720:	b6 86       	std	Z+14, r11	; 0x0e
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
    1722:	47 85       	ldd	r20, Z+15	; 0x0f
    1724:	50 89       	ldd	r21, Z+16	; 0x10
    1726:	61 89       	ldd	r22, Z+17	; 0x11
    1728:	72 89       	ldd	r23, Z+18	; 0x12
    172a:	83 89       	ldd	r24, Z+19	; 0x13
    172c:	94 89       	ldd	r25, Z+20	; 0x14
    172e:	a5 89       	ldd	r26, Z+21	; 0x15
    1730:	b6 89       	ldd	r27, Z+22	; 0x16
    1732:	02 97       	sbiw	r24, 0x02	; 2
    1734:	a1 09       	sbc	r26, r1
    1736:	b1 09       	sbc	r27, r1
    1738:	48 17       	cp	r20, r24
    173a:	59 07       	cpc	r21, r25
    173c:	6a 07       	cpc	r22, r26
    173e:	7b 07       	cpc	r23, r27
    1740:	40 f4       	brcc	.+16     	; 0x1752 <create_chain+0x168>
    1742:	41 50       	subi	r20, 0x01	; 1
    1744:	50 40       	sbci	r21, 0x00	; 0
    1746:	60 40       	sbci	r22, 0x00	; 0
    1748:	70 40       	sbci	r23, 0x00	; 0
    174a:	47 87       	std	Z+15, r20	; 0x0f
    174c:	50 8b       	std	Z+16, r21	; 0x10
    174e:	61 8b       	std	Z+17, r22	; 0x11
    1750:	72 8b       	std	Z+18, r23	; 0x12
		fs->fsi_flag |= 1;
    1752:	f3 01       	movw	r30, r6
    1754:	84 81       	ldd	r24, Z+4	; 0x04
    1756:	81 60       	ori	r24, 0x01	; 1
    1758:	84 83       	std	Z+4, r24	; 0x04
    175a:	97 01       	movw	r18, r14
    175c:	86 01       	movw	r16, r12
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
	}

	return ncl;		/* Return new cluster number or error status */
}
    175e:	b8 01       	movw	r22, r16
    1760:	c9 01       	movw	r24, r18
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	1f 91       	pop	r17
    1768:	0f 91       	pop	r16
    176a:	ff 90       	pop	r15
    176c:	ef 90       	pop	r14
    176e:	df 90       	pop	r13
    1770:	cf 90       	pop	r12
    1772:	bf 90       	pop	r11
    1774:	af 90       	pop	r10
    1776:	9f 90       	pop	r9
    1778:	8f 90       	pop	r8
    177a:	7f 90       	pop	r7
    177c:	6f 90       	pop	r6
    177e:	5f 90       	pop	r5
    1780:	4f 90       	pop	r4
    1782:	3f 90       	pop	r3
    1784:	2f 90       	pop	r2
    1786:	08 95       	ret
				if (ncl > scl) return 0;	/* No free cluster */
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
			if (cs == 0) break;				/* Found a free cluster */
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
			if (ncl == scl) return 0;		/* No free cluster */
    1788:	00 e0       	ldi	r16, 0x00	; 0
    178a:	10 e0       	ldi	r17, 0x00	; 0
    178c:	98 01       	movw	r18, r16
    178e:	e7 cf       	rjmp	.-50     	; 0x175e <create_chain+0x174>
	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Get suggested cluster to start at */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
    1790:	c3 01       	movw	r24, r6
    1792:	0e 94 14 09 	call	0x1228	; 0x1228 <get_fat.isra.8>
    1796:	8b 01       	movw	r16, r22
    1798:	9c 01       	movw	r18, r24
		if (cs < 2) return 1;				/* Invalid value */
    179a:	62 30       	cpi	r22, 0x02	; 2
    179c:	71 05       	cpc	r23, r1
    179e:	81 05       	cpc	r24, r1
    17a0:	91 05       	cpc	r25, r1
    17a2:	a8 f0       	brcs	.+42     	; 0x17ce <create_chain+0x1e4>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
    17a4:	6f 3f       	cpi	r22, 0xFF	; 255
    17a6:	ff ef       	ldi	r31, 0xFF	; 255
    17a8:	7f 07       	cpc	r23, r31
    17aa:	ff ef       	ldi	r31, 0xFF	; 255
    17ac:	8f 07       	cpc	r24, r31
    17ae:	ff ef       	ldi	r31, 0xFF	; 255
    17b0:	9f 07       	cpc	r25, r31
    17b2:	a9 f2       	breq	.-86     	; 0x175e <create_chain+0x174>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    17b4:	f3 01       	movw	r30, r6
    17b6:	83 89       	ldd	r24, Z+19	; 0x13
    17b8:	94 89       	ldd	r25, Z+20	; 0x14
    17ba:	a5 89       	ldd	r26, Z+21	; 0x15
    17bc:	b6 89       	ldd	r27, Z+22	; 0x16
    17be:	08 17       	cp	r16, r24
    17c0:	19 07       	cpc	r17, r25
    17c2:	2a 07       	cpc	r18, r26
    17c4:	3b 07       	cpc	r19, r27
    17c6:	58 f2       	brcs	.-106    	; 0x175e <create_chain+0x174>
    17c8:	52 01       	movw	r10, r4
    17ca:	41 01       	movw	r8, r2
    17cc:	3f cf       	rjmp	.-386    	; 0x164c <create_chain+0x62>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
		fs->last_clst = ncl;
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
    17ce:	01 e0       	ldi	r16, 0x01	; 1
    17d0:	10 e0       	ldi	r17, 0x00	; 0
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	c3 cf       	rjmp	.-122    	; 0x175e <create_chain+0x174>
	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
		res = FR_OK;						/* FAT does not need to be written */
	} else {
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
		if (res == FR_OK && clst) {
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
    17d8:	c3 01       	movw	r24, r6
    17da:	b2 01       	movw	r22, r4
    17dc:	a1 01       	movw	r20, r2
    17de:	86 01       	movw	r16, r12
    17e0:	97 01       	movw	r18, r14
    17e2:	0e 94 06 0a 	call	0x140c	; 0x140c <put_fat>
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
    17e6:	00 97       	sbiw	r24, 0x00	; 0
    17e8:	09 f4       	brne	.+2      	; 0x17ec <create_chain+0x202>
    17ea:	96 cf       	rjmp	.-212    	; 0x1718 <create_chain+0x12e>
		fs->last_clst = ncl;
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
		fs->fsi_flag |= 1;
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	91 05       	cpc	r25, r1
    17f0:	71 f7       	brne	.-36     	; 0x17ce <create_chain+0x1e4>
    17f2:	0f ef       	ldi	r16, 0xFF	; 255
    17f4:	1f ef       	ldi	r17, 0xFF	; 255
    17f6:	98 01       	movw	r18, r16
    17f8:	b2 cf       	rjmp	.-156    	; 0x175e <create_chain+0x174>

000017fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    17fa:	4f 92       	push	r4
    17fc:	5f 92       	push	r5
    17fe:	6f 92       	push	r6
    1800:	7f 92       	push	r7
    1802:	8f 92       	push	r8
    1804:	9f 92       	push	r9
    1806:	af 92       	push	r10
    1808:	bf 92       	push	r11
    180a:	cf 92       	push	r12
    180c:	df 92       	push	r13
    180e:	ef 92       	push	r14
    1810:	ff 92       	push	r15
    1812:	0f 93       	push	r16
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
    181e:	27 97       	sbiw	r28, 0x07	; 7
    1820:	0f b6       	in	r0, 0x3f	; 63
    1822:	f8 94       	cli
    1824:	de bf       	out	0x3e, r29	; 62
    1826:	0f be       	out	0x3f, r0	; 63
    1828:	cd bf       	out	0x3d, r28	; 61
    182a:	4c 01       	movw	r8, r24
    182c:	8b 01       	movw	r16, r22
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
    182e:	dc 01       	movw	r26, r24
    1830:	ad 90       	ld	r10, X+
    1832:	bc 90       	ld	r11, X
    1834:	11 97       	sbiw	r26, 0x01	; 1
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
    1836:	1e 96       	adiw	r26, 0x0e	; 14
    1838:	8d 91       	ld	r24, X+
    183a:	9d 91       	ld	r25, X+
    183c:	0d 90       	ld	r0, X+
    183e:	bc 91       	ld	r27, X
    1840:	a0 2d       	mov	r26, r0
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
    1842:	f4 01       	movw	r30, r8
    1844:	46 89       	ldd	r20, Z+22	; 0x16
    1846:	57 89       	ldd	r21, Z+23	; 0x17
    1848:	60 8d       	ldd	r22, Z+24	; 0x18
    184a:	71 8d       	ldd	r23, Z+25	; 0x19
    184c:	41 15       	cp	r20, r1
    184e:	51 05       	cpc	r21, r1
    1850:	61 05       	cpc	r22, r1
    1852:	71 05       	cpc	r23, r1
    1854:	c9 f4       	brne	.+50     	; 0x1888 <dir_next+0x8e>
    1856:	84 e0       	ldi	r24, 0x04	; 4
    1858:	90 e0       	ldi	r25, 0x00	; 0
	}
	dp->dptr = ofs;						/* Current entry */
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */

	return FR_OK;
}
    185a:	27 96       	adiw	r28, 0x07	; 7
    185c:	0f b6       	in	r0, 0x3f	; 63
    185e:	f8 94       	cli
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	cd bf       	out	0x3d, r28	; 61
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	df 90       	pop	r13
    1874:	cf 90       	pop	r12
    1876:	bf 90       	pop	r11
    1878:	af 90       	pop	r10
    187a:	9f 90       	pop	r9
    187c:	8f 90       	pop	r8
    187e:	7f 90       	pop	r7
    1880:	6f 90       	pop	r6
    1882:	5f 90       	pop	r5
    1884:	4f 90       	pop	r4
    1886:	08 95       	ret
	FATFS *fs = dp->obj.fs;
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
    1888:	e0 e2       	ldi	r30, 0x20	; 32
    188a:	ce 2e       	mov	r12, r30
    188c:	d1 2c       	mov	r13, r1
    188e:	e1 2c       	mov	r14, r1
    1890:	f1 2c       	mov	r15, r1
    1892:	c8 0e       	add	r12, r24
    1894:	d9 1e       	adc	r13, r25
    1896:	ea 1e       	adc	r14, r26
    1898:	fb 1e       	adc	r15, r27
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	cf 16       	cp	r12, r31
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	df 06       	cpc	r13, r31
    18a2:	f0 e2       	ldi	r31, 0x20	; 32
    18a4:	ef 06       	cpc	r14, r31
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	ff 06       	cpc	r15, r31
    18aa:	a8 f6       	brcc	.-86     	; 0x1856 <dir_next+0x5c>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
    18ac:	d7 01       	movw	r26, r14
    18ae:	c6 01       	movw	r24, r12
    18b0:	91 70       	andi	r25, 0x01	; 1
    18b2:	a0 70       	andi	r26, 0x00	; 0
    18b4:	b0 70       	andi	r27, 0x00	; 0
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	a1 05       	cpc	r26, r1
    18ba:	b1 05       	cpc	r27, r1
    18bc:	09 f0       	breq	.+2      	; 0x18c0 <dir_next+0xc6>
    18be:	89 c0       	rjmp	.+274    	; 0x19d2 <dir_next+0x1d8>
		dp->sect++;				/* Next sector */
    18c0:	4f 5f       	subi	r20, 0xFF	; 255
    18c2:	5f 4f       	sbci	r21, 0xFF	; 255
    18c4:	6f 4f       	sbci	r22, 0xFF	; 255
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	d4 01       	movw	r26, r8
    18ca:	56 96       	adiw	r26, 0x16	; 22
    18cc:	4d 93       	st	X+, r20
    18ce:	5d 93       	st	X+, r21
    18d0:	6d 93       	st	X+, r22
    18d2:	7c 93       	st	X, r23
    18d4:	59 97       	sbiw	r26, 0x19	; 25

		if (!dp->clust) {		/* Static table */
    18d6:	52 96       	adiw	r26, 0x12	; 18
    18d8:	4d 90       	ld	r4, X+
    18da:	5d 90       	ld	r5, X+
    18dc:	6d 90       	ld	r6, X+
    18de:	7c 90       	ld	r7, X
    18e0:	55 97       	sbiw	r26, 0x15	; 21
    18e2:	41 14       	cp	r4, r1
    18e4:	51 04       	cpc	r5, r1
    18e6:	61 04       	cpc	r6, r1
    18e8:	71 04       	cpc	r7, r1
    18ea:	09 f4       	brne	.+2      	; 0x18ee <dir_next+0xf4>
    18ec:	85 c0       	rjmp	.+266    	; 0x19f8 <dir_next+0x1fe>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
				dp->sect = 0; return FR_NO_FILE;
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
    18ee:	f5 01       	movw	r30, r10
    18f0:	81 85       	ldd	r24, Z+9	; 0x09
    18f2:	92 85       	ldd	r25, Z+10	; 0x0a
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	a0 e0       	ldi	r26, 0x00	; 0
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	b7 01       	movw	r22, r14
    18fc:	a6 01       	movw	r20, r12
    18fe:	29 e0       	ldi	r18, 0x09	; 9
    1900:	76 95       	lsr	r23
    1902:	67 95       	ror	r22
    1904:	57 95       	ror	r21
    1906:	47 95       	ror	r20
    1908:	2a 95       	dec	r18
    190a:	d1 f7       	brne	.-12     	; 0x1900 <dir_next+0x106>
    190c:	84 23       	and	r24, r20
    190e:	95 23       	and	r25, r21
    1910:	a6 23       	and	r26, r22
    1912:	b7 23       	and	r27, r23
    1914:	00 97       	sbiw	r24, 0x00	; 0
    1916:	a1 05       	cpc	r26, r1
    1918:	b1 05       	cpc	r27, r1
    191a:	09 f0       	breq	.+2      	; 0x191e <dir_next+0x124>
    191c:	5a c0       	rjmp	.+180    	; 0x19d2 <dir_next+0x1d8>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
    191e:	c5 01       	movw	r24, r10
    1920:	b3 01       	movw	r22, r6
    1922:	a2 01       	movw	r20, r4
    1924:	0e 94 14 09 	call	0x1228	; 0x1228 <get_fat.isra.8>
    1928:	2b 01       	movw	r4, r22
    192a:	3c 01       	movw	r6, r24
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
    192c:	62 30       	cpi	r22, 0x02	; 2
    192e:	71 05       	cpc	r23, r1
    1930:	81 05       	cpc	r24, r1
    1932:	91 05       	cpc	r25, r1
    1934:	08 f4       	brcc	.+2      	; 0x1938 <dir_next+0x13e>
    1936:	7d c0       	rjmp	.+250    	; 0x1a32 <dir_next+0x238>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
    1938:	6f 3f       	cpi	r22, 0xFF	; 255
    193a:	2f ef       	ldi	r18, 0xFF	; 255
    193c:	72 07       	cpc	r23, r18
    193e:	2f ef       	ldi	r18, 0xFF	; 255
    1940:	82 07       	cpc	r24, r18
    1942:	2f ef       	ldi	r18, 0xFF	; 255
    1944:	92 07       	cpc	r25, r18
    1946:	09 f4       	brne	.+2      	; 0x194a <dir_next+0x150>
    1948:	8c c0       	rjmp	.+280    	; 0x1a62 <dir_next+0x268>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
    194a:	f5 01       	movw	r30, r10
    194c:	83 89       	ldd	r24, Z+19	; 0x13
    194e:	94 89       	ldd	r25, Z+20	; 0x14
    1950:	a5 89       	ldd	r26, Z+21	; 0x15
    1952:	b6 89       	ldd	r27, Z+22	; 0x16
    1954:	48 16       	cp	r4, r24
    1956:	59 06       	cpc	r5, r25
    1958:	6a 06       	cpc	r6, r26
    195a:	7b 06       	cpc	r7, r27
    195c:	08 f0       	brcs	.+2      	; 0x1960 <dir_next+0x166>
    195e:	6c c0       	rjmp	.+216    	; 0x1a38 <dir_next+0x23e>
    1960:	a3 01       	movw	r20, r6
    1962:	92 01       	movw	r18, r4
    1964:	22 50       	subi	r18, 0x02	; 2
    1966:	30 40       	sbci	r19, 0x00	; 0
    1968:	40 40       	sbci	r20, 0x00	; 0
    196a:	50 40       	sbci	r21, 0x00	; 0
    196c:	29 83       	std	Y+1, r18	; 0x01
    196e:	3a 83       	std	Y+2, r19	; 0x02
    1970:	4b 83       	std	Y+3, r20	; 0x03
    1972:	5c 83       	std	Y+4, r21	; 0x04
#else
					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
    1974:	f4 01       	movw	r30, r8
    1976:	42 8a       	std	Z+18, r4	; 0x12
    1978:	53 8a       	std	Z+19, r5	; 0x13
    197a:	64 8a       	std	Z+20, r6	; 0x14
    197c:	75 8a       	std	Z+21, r7	; 0x15
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    197e:	02 97       	sbiw	r24, 0x02	; 2
    1980:	a1 09       	sbc	r26, r1
    1982:	b1 09       	sbc	r27, r1
    1984:	29 81       	ldd	r18, Y+1	; 0x01
    1986:	3a 81       	ldd	r19, Y+2	; 0x02
    1988:	4b 81       	ldd	r20, Y+3	; 0x03
    198a:	5c 81       	ldd	r21, Y+4	; 0x04
    198c:	28 17       	cp	r18, r24
    198e:	39 07       	cpc	r19, r25
    1990:	4a 07       	cpc	r20, r26
    1992:	5b 07       	cpc	r21, r27
    1994:	08 f0       	brcs	.+2      	; 0x1998 <dir_next+0x19e>
    1996:	68 c0       	rjmp	.+208    	; 0x1a68 <dir_next+0x26e>
	return clst * fs->csize + fs->database;
    1998:	d5 01       	movw	r26, r10
    199a:	19 96       	adiw	r26, 0x09	; 9
    199c:	2d 91       	ld	r18, X+
    199e:	3c 91       	ld	r19, X
    19a0:	1a 97       	sbiw	r26, 0x0a	; 10
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	69 81       	ldd	r22, Y+1	; 0x01
    19a8:	7a 81       	ldd	r23, Y+2	; 0x02
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	0e 94 23 29 	call	0x5246	; 0x5246 <__mulsi3>
    19b2:	dc 01       	movw	r26, r24
    19b4:	cb 01       	movw	r24, r22
    19b6:	f5 01       	movw	r30, r10
    19b8:	47 a1       	lds	r20, 0x47
    19ba:	50 a5       	lds	r21, 0x60
    19bc:	61 a5       	lds	r22, 0x61
    19be:	72 a5       	lds	r23, 0x62
    19c0:	84 0f       	add	r24, r20
    19c2:	95 1f       	adc	r25, r21
    19c4:	a6 1f       	adc	r26, r22
    19c6:	b7 1f       	adc	r27, r23
					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
				dp->sect = clust2sect(fs, clst);
    19c8:	f4 01       	movw	r30, r8
    19ca:	86 8b       	std	Z+22, r24	; 0x16
    19cc:	97 8b       	std	Z+23, r25	; 0x17
    19ce:	a0 8f       	std	Z+24, r26	; 0x18
    19d0:	b1 8f       	std	Z+25, r27	; 0x19
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
    19d2:	d4 01       	movw	r26, r8
    19d4:	1e 96       	adiw	r26, 0x0e	; 14
    19d6:	cd 92       	st	X+, r12
    19d8:	dd 92       	st	X+, r13
    19da:	ed 92       	st	X+, r14
    19dc:	fc 92       	st	X, r15
    19de:	51 97       	sbiw	r26, 0x11	; 17
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
    19e0:	c6 01       	movw	r24, r12
    19e2:	91 70       	andi	r25, 0x01	; 1
    19e4:	8f 96       	adiw	r24, 0x2f	; 47
    19e6:	8a 0d       	add	r24, r10
    19e8:	9b 1d       	adc	r25, r11
    19ea:	5b 96       	adiw	r26, 0x1b	; 27
    19ec:	9c 93       	st	X, r25
    19ee:	8e 93       	st	-X, r24
    19f0:	5a 97       	sbiw	r26, 0x1a	; 26

	return FR_OK;
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	31 cf       	rjmp	.-414    	; 0x185a <dir_next+0x60>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
		dp->sect++;				/* Next sector */

		if (!dp->clust) {		/* Static table */
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
    19f8:	b7 01       	movw	r22, r14
    19fa:	a6 01       	movw	r20, r12
    19fc:	35 e0       	ldi	r19, 0x05	; 5
    19fe:	76 95       	lsr	r23
    1a00:	67 95       	ror	r22
    1a02:	57 95       	ror	r21
    1a04:	47 95       	ror	r20
    1a06:	3a 95       	dec	r19
    1a08:	d1 f7       	brne	.-12     	; 0x19fe <dir_next+0x204>
    1a0a:	f5 01       	movw	r30, r10
    1a0c:	87 81       	ldd	r24, Z+7	; 0x07
    1a0e:	90 85       	ldd	r25, Z+8	; 0x08
    1a10:	a0 e0       	ldi	r26, 0x00	; 0
    1a12:	b0 e0       	ldi	r27, 0x00	; 0
    1a14:	48 17       	cp	r20, r24
    1a16:	59 07       	cpc	r21, r25
    1a18:	6a 07       	cpc	r22, r26
    1a1a:	7b 07       	cpc	r23, r27
    1a1c:	d0 f2       	brcs	.-76     	; 0x19d2 <dir_next+0x1d8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
						dp->sect = 0; return FR_NO_FILE;
    1a1e:	d4 01       	movw	r26, r8
    1a20:	56 96       	adiw	r26, 0x16	; 22
    1a22:	1d 92       	st	X+, r1
    1a24:	1d 92       	st	X+, r1
    1a26:	1d 92       	st	X+, r1
    1a28:	1c 92       	st	X, r1
    1a2a:	59 97       	sbiw	r26, 0x19	; 25
    1a2c:	84 e0       	ldi	r24, 0x04	; 4
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	14 cf       	rjmp	.-472    	; 0x185a <dir_next+0x60>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    1a32:	82 e0       	ldi	r24, 0x02	; 2
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	11 cf       	rjmp	.-478    	; 0x185a <dir_next+0x60>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
    1a38:	01 15       	cp	r16, r1
    1a3a:	11 05       	cpc	r17, r1
    1a3c:	81 f3       	breq	.-32     	; 0x1a1e <dir_next+0x224>
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
    1a3e:	f4 01       	movw	r30, r8
    1a40:	42 89       	ldd	r20, Z+18	; 0x12
    1a42:	53 89       	ldd	r21, Z+19	; 0x13
    1a44:	64 89       	ldd	r22, Z+20	; 0x14
    1a46:	75 89       	ldd	r23, Z+21	; 0x15
    1a48:	c4 01       	movw	r24, r8
    1a4a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <create_chain>
    1a4e:	2b 01       	movw	r4, r22
    1a50:	3c 01       	movw	r6, r24
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1a52:	61 15       	cp	r22, r1
    1a54:	71 05       	cpc	r23, r1
    1a56:	81 05       	cpc	r24, r1
    1a58:	91 05       	cpc	r25, r1
    1a5a:	51 f4       	brne	.+20     	; 0x1a70 <dir_next+0x276>
    1a5c:	87 e0       	ldi	r24, 0x07	; 7
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	fc ce       	rjmp	.-520    	; 0x185a <dir_next+0x60>
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	f9 ce       	rjmp	.-526    	; 0x185a <dir_next+0x60>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	ac cf       	rjmp	.-168    	; 0x19c8 <dir_next+0x1ce>
					if (!stretch) {								/* If no stretch, report EOT */
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
    1a70:	61 30       	cpi	r22, 0x01	; 1
    1a72:	71 05       	cpc	r23, r1
    1a74:	81 05       	cpc	r24, r1
    1a76:	91 05       	cpc	r25, r1
    1a78:	e1 f2       	breq	.-72     	; 0x1a32 <dir_next+0x238>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1a7a:	6f 3f       	cpi	r22, 0xFF	; 255
    1a7c:	2f ef       	ldi	r18, 0xFF	; 255
    1a7e:	72 07       	cpc	r23, r18
    1a80:	2f ef       	ldi	r18, 0xFF	; 255
    1a82:	82 07       	cpc	r24, r18
    1a84:	2f ef       	ldi	r18, 0xFF	; 255
    1a86:	92 07       	cpc	r25, r18
    1a88:	61 f3       	breq	.-40     	; 0x1a62 <dir_next+0x268>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
    1a8a:	c5 01       	movw	r24, r10
    1a8c:	0e 94 6f 02 	call	0x4de	; 0x4de <sync_window>
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	39 f7       	brne	.-50     	; 0x1a62 <dir_next+0x268>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
    1a94:	f5 01       	movw	r30, r10
    1a96:	bf 96       	adiw	r30, 0x2f	; 47
/*-----------------------------------------------------------------------*/
/* Directory handling - Move directory table index next                  */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
    1a98:	c5 01       	movw	r24, r10
    1a9a:	81 5d       	subi	r24, 0xD1	; 209
    1a9c:	9d 4f       	sbci	r25, 0xFD	; 253
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    1a9e:	11 92       	st	Z+, r1
    1aa0:	e8 17       	cp	r30, r24
    1aa2:	f9 07       	cpc	r31, r25
    1aa4:	e1 f7       	brne	.-8      	; 0x1a9e <dir_next+0x2a4>
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1aa6:	d3 01       	movw	r26, r6
    1aa8:	c2 01       	movw	r24, r4
    1aaa:	02 97       	sbiw	r24, 0x02	; 2
    1aac:	a1 09       	sbc	r26, r1
    1aae:	b1 09       	sbc	r27, r1
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	9a 83       	std	Y+2, r25	; 0x02
    1ab4:	ab 83       	std	Y+3, r26	; 0x03
    1ab6:	bc 83       	std	Y+4, r27	; 0x04
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    1ab8:	f5 01       	movw	r30, r10
    1aba:	83 89       	ldd	r24, Z+19	; 0x13
    1abc:	94 89       	ldd	r25, Z+20	; 0x14
    1abe:	a5 89       	ldd	r26, Z+21	; 0x15
    1ac0:	b6 89       	ldd	r27, Z+22	; 0x16
    1ac2:	02 97       	sbiw	r24, 0x02	; 2
    1ac4:	a1 09       	sbc	r26, r1
    1ac6:	b1 09       	sbc	r27, r1
    1ac8:	29 81       	ldd	r18, Y+1	; 0x01
    1aca:	3a 81       	ldd	r19, Y+2	; 0x02
    1acc:	4b 81       	ldd	r20, Y+3	; 0x03
    1ace:	5c 81       	ldd	r21, Y+4	; 0x04
    1ad0:	28 17       	cp	r18, r24
    1ad2:	39 07       	cpc	r19, r25
    1ad4:	4a 07       	cpc	r20, r26
    1ad6:	5b 07       	cpc	r21, r27
    1ad8:	08 f0       	brcs	.+2      	; 0x1adc <dir_next+0x2e2>
    1ada:	55 c0       	rjmp	.+170    	; 0x1b86 <dir_next+0x38c>
	return clst * fs->csize + fs->database;
    1adc:	01 85       	ldd	r16, Z+9	; 0x09
    1ade:	12 85       	ldd	r17, Z+10	; 0x0a
    1ae0:	98 01       	movw	r18, r16
    1ae2:	40 e0       	ldi	r20, 0x00	; 0
    1ae4:	50 e0       	ldi	r21, 0x00	; 0
    1ae6:	69 81       	ldd	r22, Y+1	; 0x01
    1ae8:	7a 81       	ldd	r23, Y+2	; 0x02
    1aea:	8b 81       	ldd	r24, Y+3	; 0x03
    1aec:	9c 81       	ldd	r25, Y+4	; 0x04
    1aee:	0e 94 23 29 	call	0x5246	; 0x5246 <__mulsi3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	f5 01       	movw	r30, r10
    1af8:	47 a1       	lds	r20, 0x47
    1afa:	50 a5       	lds	r21, 0x60
    1afc:	61 a5       	lds	r22, 0x61
    1afe:	72 a5       	lds	r23, 0x62
    1b00:	84 0f       	add	r24, r20
    1b02:	95 1f       	adc	r25, r21
    1b04:	a6 1f       	adc	r26, r22
    1b06:	b7 1f       	adc	r27, r23
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
    1b08:	f5 01       	movw	r30, r10
    1b0a:	83 a7       	lds	r24, 0x73
    1b0c:	94 a7       	lds	r25, 0x74
    1b0e:	a5 a7       	lds	r26, 0x75
    1b10:	b6 a7       	lds	r27, 0x76
    1b12:	40 e0       	ldi	r20, 0x00	; 0
    1b14:	50 e0       	ldi	r21, 0x00	; 0
						fs->wflag = 1;
    1b16:	21 e0       	ldi	r18, 0x01	; 1
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
    1b18:	1f c0       	rjmp	.+62     	; 0x1b58 <dir_next+0x35e>
						fs->wflag = 1;
    1b1a:	d5 01       	movw	r26, r10
    1b1c:	13 96       	adiw	r26, 0x03	; 3
    1b1e:	2c 93       	st	X, r18
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
    1b20:	c5 01       	movw	r24, r10
    1b22:	2f 83       	std	Y+7, r18	; 0x07
    1b24:	4d 83       	std	Y+5, r20	; 0x05
    1b26:	5e 83       	std	Y+6, r21	; 0x06
    1b28:	0e 94 6f 02 	call	0x4de	; 0x4de <sync_window>
    1b2c:	2f 81       	ldd	r18, Y+7	; 0x07
    1b2e:	4d 81       	ldd	r20, Y+5	; 0x05
    1b30:	5e 81       	ldd	r21, Y+6	; 0x06
    1b32:	00 97       	sbiw	r24, 0x00	; 0
    1b34:	09 f0       	breq	.+2      	; 0x1b38 <dir_next+0x33e>
    1b36:	95 cf       	rjmp	.-214    	; 0x1a62 <dir_next+0x268>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
    1b38:	4f 5f       	subi	r20, 0xFF	; 255
    1b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3c:	f5 01       	movw	r30, r10
    1b3e:	83 a5       	lds	r24, 0x63
    1b40:	94 a5       	lds	r25, 0x64
    1b42:	a5 a5       	lds	r26, 0x65
    1b44:	b6 a5       	lds	r27, 0x66
    1b46:	01 96       	adiw	r24, 0x01	; 1
    1b48:	a1 1d       	adc	r26, r1
    1b4a:	b1 1d       	adc	r27, r1
    1b4c:	83 a7       	lds	r24, 0x73
    1b4e:	94 a7       	lds	r25, 0x74
    1b50:	a5 a7       	lds	r26, 0x75
    1b52:	b6 a7       	lds	r27, 0x76
    1b54:	01 85       	ldd	r16, Z+9	; 0x09
    1b56:	12 85       	ldd	r17, Z+10	; 0x0a
    1b58:	40 17       	cp	r20, r16
    1b5a:	51 07       	cpc	r21, r17
    1b5c:	f0 f2       	brcs	.-68     	; 0x1b1a <dir_next+0x320>
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
					}
					fs->winsect -= n;							/* Restore window offset */
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	70 e0       	ldi	r23, 0x00	; 0
    1b62:	f5 01       	movw	r30, r10
    1b64:	83 a5       	lds	r24, 0x63
    1b66:	94 a5       	lds	r25, 0x64
    1b68:	a5 a5       	lds	r26, 0x65
    1b6a:	b6 a5       	lds	r27, 0x66
    1b6c:	84 1b       	sub	r24, r20
    1b6e:	95 0b       	sbc	r25, r21
    1b70:	a6 0b       	sbc	r26, r22
    1b72:	b7 0b       	sbc	r27, r23
    1b74:	83 a7       	lds	r24, 0x73
    1b76:	94 a7       	lds	r25, 0x74
    1b78:	a5 a7       	lds	r26, 0x75
    1b7a:	b6 a7       	lds	r27, 0x76
    1b7c:	83 89       	ldd	r24, Z+19	; 0x13
    1b7e:	94 89       	ldd	r25, Z+20	; 0x14
    1b80:	a5 89       	ldd	r26, Z+21	; 0x15
    1b82:	b6 89       	ldd	r27, Z+22	; 0x16
    1b84:	f7 ce       	rjmp	.-530    	; 0x1974 <dir_next+0x17a>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	dc 01       	movw	r26, r24
    1b8c:	f5 01       	movw	r30, r10
    1b8e:	01 85       	ldd	r16, Z+9	; 0x09
    1b90:	12 85       	ldd	r17, Z+10	; 0x0a
    1b92:	ba cf       	rjmp	.-140    	; 0x1b08 <dir_next+0x30e>

00001b94 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
    1b94:	6f 92       	push	r6
    1b96:	7f 92       	push	r7
    1b98:	8f 92       	push	r8
    1b9a:	9f 92       	push	r9
    1b9c:	af 92       	push	r10
    1b9e:	bf 92       	push	r11
    1ba0:	cf 92       	push	r12
    1ba2:	df 92       	push	r13
    1ba4:	ef 92       	push	r14
    1ba6:	ff 92       	push	r15
    1ba8:	0f 93       	push	r16
    1baa:	1f 93       	push	r17
    1bac:	cf 93       	push	r28
    1bae:	df 93       	push	r29
    1bb0:	3c 01       	movw	r6, r24
    1bb2:	6a 01       	movw	r12, r20
    1bb4:	7b 01       	movw	r14, r22
	FRESULT res = FR_OK;
	DWORD nxt;
	FATFS *fs = obj->fs;
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	c0 81       	ld	r28, Z
    1bba:	d1 81       	ldd	r29, Z+1	; 0x01
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
    1bbc:	42 30       	cpi	r20, 0x02	; 2
    1bbe:	51 05       	cpc	r21, r1
    1bc0:	61 05       	cpc	r22, r1
    1bc2:	71 05       	cpc	r23, r1
    1bc4:	48 f0       	brcs	.+18     	; 0x1bd8 <remove_chain+0x44>
    1bc6:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bca:	ad 89       	ldd	r26, Y+21	; 0x15
    1bcc:	be 89       	ldd	r27, Y+22	; 0x16
    1bce:	48 17       	cp	r20, r24
    1bd0:	59 07       	cpc	r21, r25
    1bd2:	6a 07       	cpc	r22, r26
    1bd4:	7b 07       	cpc	r23, r27
    1bd6:	90 f0       	brcs	.+36     	; 0x1bfc <remove_chain+0x68>

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    1bd8:	e2 e0       	ldi	r30, 0x02	; 2
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
			}
		}
	}
#endif
	return FR_OK;
}
    1bdc:	cf 01       	movw	r24, r30
    1bde:	df 91       	pop	r29
    1be0:	cf 91       	pop	r28
    1be2:	1f 91       	pop	r17
    1be4:	0f 91       	pop	r16
    1be6:	ff 90       	pop	r15
    1be8:	ef 90       	pop	r14
    1bea:	df 90       	pop	r13
    1bec:	cf 90       	pop	r12
    1bee:	bf 90       	pop	r11
    1bf0:	af 90       	pop	r10
    1bf2:	9f 90       	pop	r9
    1bf4:	8f 90       	pop	r8
    1bf6:	7f 90       	pop	r7
    1bf8:	6f 90       	pop	r6
    1bfa:	08 95       	ret
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
    1bfc:	01 15       	cp	r16, r1
    1bfe:	11 05       	cpc	r17, r1
    1c00:	21 05       	cpc	r18, r1
    1c02:	31 05       	cpc	r19, r1
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <remove_chain+0x74>
    1c06:	50 c0       	rjmp	.+160    	; 0x1ca8 <remove_chain+0x114>
    1c08:	ce 01       	movw	r24, r28
		if (res != FR_OK) return res;
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
    1c0a:	b7 01       	movw	r22, r14
    1c0c:	a6 01       	movw	r20, r12
    1c0e:	0e 94 14 09 	call	0x1228	; 0x1228 <get_fat.isra.8>
    1c12:	4b 01       	movw	r8, r22
    1c14:	5c 01       	movw	r10, r24
		if (nxt == 0) break;				/* Empty cluster? */
    1c16:	61 15       	cp	r22, r1
    1c18:	71 05       	cpc	r23, r1
    1c1a:	81 05       	cpc	r24, r1
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <remove_chain+0x8e>
    1c20:	53 c0       	rjmp	.+166    	; 0x1cc8 <remove_chain+0x134>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
    1c22:	61 30       	cpi	r22, 0x01	; 1
    1c24:	71 05       	cpc	r23, r1
    1c26:	81 05       	cpc	r24, r1
    1c28:	91 05       	cpc	r25, r1
    1c2a:	b1 f2       	breq	.-84     	; 0x1bd8 <remove_chain+0x44>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	88 16       	cp	r8, r24
    1c30:	8f ef       	ldi	r24, 0xFF	; 255
    1c32:	98 06       	cpc	r9, r24
    1c34:	8f ef       	ldi	r24, 0xFF	; 255
    1c36:	a8 06       	cpc	r10, r24
    1c38:	8f ef       	ldi	r24, 0xFF	; 255
    1c3a:	b8 06       	cpc	r11, r24
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <remove_chain+0xac>
    1c3e:	47 c0       	rjmp	.+142    	; 0x1cce <remove_chain+0x13a>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
    1c40:	ce 01       	movw	r24, r28
    1c42:	b7 01       	movw	r22, r14
    1c44:	a6 01       	movw	r20, r12
    1c46:	00 e0       	ldi	r16, 0x00	; 0
    1c48:	10 e0       	ldi	r17, 0x00	; 0
    1c4a:	98 01       	movw	r18, r16
    1c4c:	0e 94 06 0a 	call	0x140c	; 0x140c <put_fat>
    1c50:	fc 01       	movw	r30, r24
			if (res != FR_OK) return res;
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	19 f6       	brne	.-122    	; 0x1bdc <remove_chain+0x48>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
    1c56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c58:	98 89       	ldd	r25, Y+16	; 0x10
    1c5a:	a9 89       	ldd	r26, Y+17	; 0x11
    1c5c:	ba 89       	ldd	r27, Y+18	; 0x12
    1c5e:	0b 89       	ldd	r16, Y+19	; 0x13
    1c60:	1c 89       	ldd	r17, Y+20	; 0x14
    1c62:	2d 89       	ldd	r18, Y+21	; 0x15
    1c64:	3e 89       	ldd	r19, Y+22	; 0x16
    1c66:	b9 01       	movw	r22, r18
    1c68:	a8 01       	movw	r20, r16
    1c6a:	42 50       	subi	r20, 0x02	; 2
    1c6c:	50 40       	sbci	r21, 0x00	; 0
    1c6e:	60 40       	sbci	r22, 0x00	; 0
    1c70:	70 40       	sbci	r23, 0x00	; 0
    1c72:	84 17       	cp	r24, r20
    1c74:	95 07       	cpc	r25, r21
    1c76:	a6 07       	cpc	r26, r22
    1c78:	b7 07       	cpc	r27, r23
    1c7a:	50 f4       	brcc	.+20     	; 0x1c90 <remove_chain+0xfc>
			fs->free_clst++;
    1c7c:	01 96       	adiw	r24, 0x01	; 1
    1c7e:	a1 1d       	adc	r26, r1
    1c80:	b1 1d       	adc	r27, r1
    1c82:	8f 87       	std	Y+15, r24	; 0x0f
    1c84:	98 8b       	std	Y+16, r25	; 0x10
    1c86:	a9 8b       	std	Y+17, r26	; 0x11
    1c88:	ba 8b       	std	Y+18, r27	; 0x12
			fs->fsi_flag |= 1;
    1c8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c8c:	81 60       	ori	r24, 0x01	; 1
    1c8e:	8c 83       	std	Y+4, r24	; 0x04
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
    1c90:	80 16       	cp	r8, r16
    1c92:	91 06       	cpc	r9, r17
    1c94:	a2 06       	cpc	r10, r18
    1c96:	b3 06       	cpc	r11, r19
    1c98:	08 f0       	brcs	.+2      	; 0x1c9c <remove_chain+0x108>
    1c9a:	a0 cf       	rjmp	.-192    	; 0x1bdc <remove_chain+0x48>
    1c9c:	f3 01       	movw	r30, r6
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	75 01       	movw	r14, r10
    1ca4:	64 01       	movw	r12, r8
    1ca6:	b1 cf       	rjmp	.-158    	; 0x1c0a <remove_chain+0x76>

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
		res = put_fat(fs, pclst, 0xFFFFFFFF);
    1ca8:	ce 01       	movw	r24, r28
    1caa:	b9 01       	movw	r22, r18
    1cac:	a8 01       	movw	r20, r16
    1cae:	0f ef       	ldi	r16, 0xFF	; 255
    1cb0:	1f ef       	ldi	r17, 0xFF	; 255
    1cb2:	98 01       	movw	r18, r16
    1cb4:	0e 94 06 0a 	call	0x140c	; 0x140c <put_fat>
    1cb8:	fc 01       	movw	r30, r24
		if (res != FR_OK) return res;
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <remove_chain+0x12c>
    1cbe:	8e cf       	rjmp	.-228    	; 0x1bdc <remove_chain+0x48>
    1cc0:	f3 01       	movw	r30, r6
    1cc2:	80 81       	ld	r24, Z
    1cc4:	91 81       	ldd	r25, Z+1	; 0x01
    1cc6:	a1 cf       	rjmp	.-190    	; 0x1c0a <remove_chain+0x76>
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
    1cc8:	e0 e0       	ldi	r30, 0x00	; 0
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	87 cf       	rjmp	.-242    	; 0x1bdc <remove_chain+0x48>
	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
    1cce:	e1 e0       	ldi	r30, 0x01	; 1
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	84 cf       	rjmp	.-248    	; 0x1bdc <remove_chain+0x48>

00001cd4 <dir_read.constprop.10>:
/*-----------------------------------------------------------------------*/
/* Read an object from the directory                                     */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_read (
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	ec 01       	movw	r28, r24
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
	FATFS *fs = dp->obj.fs;
    1cde:	08 81       	ld	r16, Y
    1ce0:	19 81       	ldd	r17, Y+1	; 0x01
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
	FRESULT res = FR_NO_FILE;
    1ce2:	84 e0       	ldi	r24, 0x04	; 4
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	1d c0       	rjmp	.+58     	; 0x1d22 <dir_read.constprop.10+0x4e>
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
		res = move_window(fs, dp->sect);
    1ce8:	c8 01       	movw	r24, r16
    1cea:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
		if (res != FR_OK) break;
    1cee:	00 97       	sbiw	r24, 0x00	; 0
    1cf0:	51 f5       	brne	.+84     	; 0x1d46 <dir_read.constprop.10+0x72>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
    1cf2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1cf4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1cf6:	30 81       	ld	r19, Z
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
    1cf8:	33 23       	and	r19, r19
    1cfa:	19 f1       	breq	.+70     	; 0x1d42 <dir_read.constprop.10+0x6e>
				}
			}
		} else
#endif
		{	/* At the FAT12/16/32 */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
    1cfc:	23 85       	ldd	r18, Z+11	; 0x0b
    1cfe:	2f 73       	andi	r18, 0x3F	; 63
    1d00:	2c 83       	std	Y+4, r18	; 0x04
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
    1d02:	35 3e       	cpi	r19, 0xE5	; 229
    1d04:	39 f0       	breq	.+14     	; 0x1d14 <dir_read.constprop.10+0x40>
    1d06:	3e 32       	cpi	r19, 0x2E	; 46
    1d08:	29 f0       	breq	.+10     	; 0x1d14 <dir_read.constprop.10+0x40>
    1d0a:	2f 30       	cpi	r18, 0x0F	; 15
    1d0c:	19 f0       	breq	.+6      	; 0x1d14 <dir_read.constprop.10+0x40>
    1d0e:	2f 71       	andi	r18, 0x1F	; 31
    1d10:	28 30       	cpi	r18, 0x08	; 8
    1d12:	91 f4       	brne	.+36     	; 0x1d38 <dir_read.constprop.10+0x64>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
    1d14:	ce 01       	movw	r24, r28
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <dir_next>
		if (res != FR_OK) break;
    1d1e:	00 97       	sbiw	r24, 0x00	; 0
    1d20:	91 f4       	brne	.+36     	; 0x1d46 <dir_read.constprop.10+0x72>
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
    1d22:	4e 89       	ldd	r20, Y+22	; 0x16
    1d24:	5f 89       	ldd	r21, Y+23	; 0x17
    1d26:	68 8d       	ldd	r22, Y+24	; 0x18
    1d28:	79 8d       	ldd	r23, Y+25	; 0x19
    1d2a:	41 15       	cp	r20, r1
    1d2c:	51 05       	cpc	r21, r1
    1d2e:	61 05       	cpc	r22, r1
    1d30:	71 05       	cpc	r23, r1
    1d32:	d1 f6       	brne	.-76     	; 0x1ce8 <dir_read.constprop.10+0x14>
		}
		res = dir_next(dp, 0);		/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    1d34:	00 97       	sbiw	r24, 0x00	; 0
    1d36:	39 f4       	brne	.+14     	; 0x1d46 <dir_read.constprop.10+0x72>
	return res;
}
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	08 95       	ret

	while (dp->sect) {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		c = dp->dir[DIR_Name];	/* Test for the entry type */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of the directory */
    1d42:	84 e0       	ldi	r24, 0x04	; 4
    1d44:	90 e0       	ldi	r25, 0x00	; 0
		}
		res = dir_next(dp, 0);		/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
    1d46:	1e 8a       	std	Y+22, r1	; 0x16
    1d48:	1f 8a       	std	Y+23, r1	; 0x17
    1d4a:	18 8e       	std	Y+24, r1	; 0x18
    1d4c:	19 8e       	std	Y+25, r1	; 0x19
	return res;
}
    1d4e:	df 91       	pop	r29
    1d50:	cf 91       	pop	r28
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	08 95       	ret

00001d58 <dir_sdi.constprop.11>:
/*-----------------------------------------------------------------------*/
/* Directory handling - Set directory index                              */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
    1d58:	af 92       	push	r10
    1d5a:	bf 92       	push	r11
    1d5c:	cf 92       	push	r12
    1d5e:	df 92       	push	r13
    1d60:	ef 92       	push	r14
    1d62:	ff 92       	push	r15
    1d64:	0f 93       	push	r16
    1d66:	1f 93       	push	r17
    1d68:	cf 93       	push	r28
    1d6a:	df 93       	push	r29
    1d6c:	ec 01       	movw	r28, r24
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
    1d6e:	a8 80       	ld	r10, Y
    1d70:	b9 80       	ldd	r11, Y+1	; 0x01


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
    1d72:	1e 86       	std	Y+14, r1	; 0x0e
    1d74:	1f 86       	std	Y+15, r1	; 0x0f
    1d76:	18 8a       	std	Y+16, r1	; 0x10
    1d78:	19 8a       	std	Y+17, r1	; 0x11
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
    1d7a:	ce 80       	ldd	r12, Y+6	; 0x06
    1d7c:	df 80       	ldd	r13, Y+7	; 0x07
    1d7e:	e8 84       	ldd	r14, Y+8	; 0x08
    1d80:	f9 84       	ldd	r15, Y+9	; 0x09
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
    1d82:	c1 14       	cp	r12, r1
    1d84:	d1 04       	cpc	r13, r1
    1d86:	e1 04       	cpc	r14, r1
    1d88:	f1 04       	cpc	r15, r1
    1d8a:	71 f4       	brne	.+28     	; 0x1da8 <dir_sdi.constprop.11+0x50>
    1d8c:	f5 01       	movw	r30, r10
    1d8e:	80 81       	ld	r24, Z
    1d90:	83 30       	cpi	r24, 0x03	; 3
    1d92:	b8 f0       	brcs	.+46     	; 0x1dc2 <dir_sdi.constprop.11+0x6a>
		clst = fs->dirbase;
    1d94:	83 a1       	lds	r24, 0x43
    1d96:	94 a1       	lds	r25, 0x44
    1d98:	a5 a1       	lds	r26, 0x45
    1d9a:	b6 a1       	lds	r27, 0x46
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
    1d9c:	00 97       	sbiw	r24, 0x00	; 0
    1d9e:	a1 05       	cpc	r26, r1
    1da0:	b1 05       	cpc	r27, r1
    1da2:	79 f0       	breq	.+30     	; 0x1dc2 <dir_sdi.constprop.11+0x6a>
    1da4:	6c 01       	movw	r12, r24
    1da6:	7d 01       	movw	r14, r26
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
    1da8:	f5 01       	movw	r30, r10
    1daa:	01 85       	ldd	r16, Z+9	; 0x09
    1dac:	12 85       	ldd	r17, Z+10	; 0x0a
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
		while (ofs >= csz) {				/* Follow cluster chain */
    1db2:	01 15       	cp	r16, r1
    1db4:	11 05       	cpc	r17, r1
    1db6:	21 05       	cpc	r18, r1
    1db8:	31 05       	cpc	r19, r1
    1dba:	09 f0       	breq	.+2      	; 0x1dbe <dir_sdi.constprop.11+0x66>
    1dbc:	4f c0       	rjmp	.+158    	; 0x1e5c <dir_sdi.constprop.11+0x104>
    1dbe:	c5 01       	movw	r24, r10
    1dc0:	24 c0       	rjmp	.+72     	; 0x1e0a <dir_sdi.constprop.11+0xb2>
		clst = fs->dirbase;
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
    1dc2:	f5 01       	movw	r30, r10
    1dc4:	87 81       	ldd	r24, Z+7	; 0x07
    1dc6:	90 85       	ldd	r25, Z+8	; 0x08
    1dc8:	00 97       	sbiw	r24, 0x00	; 0
    1dca:	81 f5       	brne	.+96     	; 0x1e2c <dir_sdi.constprop.11+0xd4>
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
	}
	dp->clust = clst;					/* Current cluster# */
	if (!dp->sect) return FR_INT_ERR;
    1dcc:	82 e0       	ldi	r24, 0x02	; 2
    1dce:	90 e0       	ldi	r25, 0x00	; 0
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */

	return FR_OK;
}
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	1f 91       	pop	r17
    1dd6:	0f 91       	pop	r16
    1dd8:	ff 90       	pop	r15
    1dda:	ef 90       	pop	r14
    1ddc:	df 90       	pop	r13
    1dde:	cf 90       	pop	r12
    1de0:	bf 90       	pop	r11
    1de2:	af 90       	pop	r10
    1de4:	08 95       	ret
	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	c8 16       	cp	r12, r24
    1dea:	d1 04       	cpc	r13, r1
    1dec:	e1 04       	cpc	r14, r1
    1dee:	f1 04       	cpc	r15, r1
    1df0:	68 f3       	brcs	.-38     	; 0x1dcc <dir_sdi.constprop.11+0x74>
    1df2:	f5 01       	movw	r30, r10
    1df4:	83 89       	ldd	r24, Z+19	; 0x13
    1df6:	94 89       	ldd	r25, Z+20	; 0x14
    1df8:	a5 89       	ldd	r26, Z+21	; 0x15
    1dfa:	b6 89       	ldd	r27, Z+22	; 0x16
    1dfc:	c8 16       	cp	r12, r24
    1dfe:	d9 06       	cpc	r13, r25
    1e00:	ea 06       	cpc	r14, r26
    1e02:	fb 06       	cpc	r15, r27
    1e04:	18 f7       	brcc	.-58     	; 0x1dcc <dir_sdi.constprop.11+0x74>
    1e06:	88 81       	ld	r24, Y
    1e08:	99 81       	ldd	r25, Y+1	; 0x01
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
    1e0a:	b7 01       	movw	r22, r14
    1e0c:	a6 01       	movw	r20, r12
    1e0e:	0e 94 14 09 	call	0x1228	; 0x1228 <get_fat.isra.8>
    1e12:	6b 01       	movw	r12, r22
    1e14:	7c 01       	movw	r14, r24
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1e16:	6f 3f       	cpi	r22, 0xFF	; 255
    1e18:	ff ef       	ldi	r31, 0xFF	; 255
    1e1a:	7f 07       	cpc	r23, r31
    1e1c:	ff ef       	ldi	r31, 0xFF	; 255
    1e1e:	8f 07       	cpc	r24, r31
    1e20:	ff ef       	ldi	r31, 0xFF	; 255
    1e22:	9f 07       	cpc	r25, r31
    1e24:	01 f7       	brne	.-64     	; 0x1de6 <dir_sdi.constprop.11+0x8e>
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	d2 cf       	rjmp	.-92     	; 0x1dd0 <dir_sdi.constprop.11+0x78>
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;
    1e2c:	83 a1       	lds	r24, 0x43
    1e2e:	94 a1       	lds	r25, 0x44
    1e30:	a5 a1       	lds	r26, 0x45
    1e32:	b6 a1       	lds	r27, 0x46
    1e34:	8e 8b       	std	Y+22, r24	; 0x16
    1e36:	9f 8b       	std	Y+23, r25	; 0x17
    1e38:	a8 8f       	std	Y+24, r26	; 0x18
    1e3a:	b9 8f       	std	Y+25, r27	; 0x19
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
	}
	dp->clust = clst;					/* Current cluster# */
    1e3c:	ca 8a       	std	Y+18, r12	; 0x12
    1e3e:	db 8a       	std	Y+19, r13	; 0x13
    1e40:	ec 8a       	std	Y+20, r14	; 0x14
    1e42:	fd 8a       	std	Y+21, r15	; 0x15
	if (!dp->sect) return FR_INT_ERR;
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	a1 05       	cpc	r26, r1
    1e48:	b1 05       	cpc	r27, r1
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <dir_sdi.constprop.11+0xf6>
    1e4c:	bf cf       	rjmp	.-130    	; 0x1dcc <dir_sdi.constprop.11+0x74>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
    1e4e:	c5 01       	movw	r24, r10
    1e50:	8f 96       	adiw	r24, 0x2f	; 47
    1e52:	9b 8f       	std	Y+27, r25	; 0x1b
    1e54:	8a 8f       	std	Y+26, r24	; 0x1a

	return FR_OK;
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	ba cf       	rjmp	.-140    	; 0x1dd0 <dir_sdi.constprop.11+0x78>
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    1e5c:	b7 01       	movw	r22, r14
    1e5e:	a6 01       	movw	r20, r12
    1e60:	42 50       	subi	r20, 0x02	; 2
    1e62:	50 40       	sbci	r21, 0x00	; 0
    1e64:	60 40       	sbci	r22, 0x00	; 0
    1e66:	70 40       	sbci	r23, 0x00	; 0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    1e68:	f5 01       	movw	r30, r10
    1e6a:	83 89       	ldd	r24, Z+19	; 0x13
    1e6c:	94 89       	ldd	r25, Z+20	; 0x14
    1e6e:	a5 89       	ldd	r26, Z+21	; 0x15
    1e70:	b6 89       	ldd	r27, Z+22	; 0x16
    1e72:	02 97       	sbiw	r24, 0x02	; 2
    1e74:	a1 09       	sbc	r26, r1
    1e76:	b1 09       	sbc	r27, r1
    1e78:	48 17       	cp	r20, r24
    1e7a:	59 07       	cpc	r21, r25
    1e7c:	6a 07       	cpc	r22, r26
    1e7e:	7b 07       	cpc	r23, r27
    1e80:	b0 f4       	brcc	.+44     	; 0x1eae <dir_sdi.constprop.11+0x156>
	return clst * fs->csize + fs->database;
    1e82:	cb 01       	movw	r24, r22
    1e84:	ba 01       	movw	r22, r20
    1e86:	a9 01       	movw	r20, r18
    1e88:	98 01       	movw	r18, r16
    1e8a:	0e 94 23 29 	call	0x5246	; 0x5246 <__mulsi3>
    1e8e:	dc 01       	movw	r26, r24
    1e90:	cb 01       	movw	r24, r22
    1e92:	f5 01       	movw	r30, r10
    1e94:	47 a1       	lds	r20, 0x47
    1e96:	50 a5       	lds	r21, 0x60
    1e98:	61 a5       	lds	r22, 0x61
    1e9a:	72 a5       	lds	r23, 0x62
    1e9c:	84 0f       	add	r24, r20
    1e9e:	95 1f       	adc	r25, r21
    1ea0:	a6 1f       	adc	r26, r22
    1ea2:	b7 1f       	adc	r27, r23
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
    1ea4:	8e 8b       	std	Y+22, r24	; 0x16
    1ea6:	9f 8b       	std	Y+23, r25	; 0x17
    1ea8:	a8 8f       	std	Y+24, r26	; 0x18
    1eaa:	b9 8f       	std	Y+25, r27	; 0x19
    1eac:	c7 cf       	rjmp	.-114    	; 0x1e3c <dir_sdi.constprop.11+0xe4>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	f7 cf       	rjmp	.-18     	; 0x1ea4 <dir_sdi.constprop.11+0x14c>

00001eb6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
    1eb6:	ef 92       	push	r14
    1eb8:	ff 92       	push	r15
    1eba:	0f 93       	push	r16
    1ebc:	1f 93       	push	r17
    1ebe:	cf 93       	push	r28
    1ec0:	df 93       	push	r29
    1ec2:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	ed 90       	ld	r14, X+
    1ec8:	fc 90       	ld	r15, X
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;


	res = dir_sdi(dp, 0);
    1eca:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <dir_sdi.constprop.11>
    1ece:	ec 01       	movw	r28, r24
	if (res == FR_OK) {
    1ed0:	00 97       	sbiw	r24, 0x00	; 0
    1ed2:	b1 f0       	breq	.+44     	; 0x1f00 <dir_register+0x4a>
			}
			res = dir_next(dp, 1);
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1ed4:	c4 30       	cpi	r28, 0x04	; 4
    1ed6:	d1 05       	cpc	r29, r1
    1ed8:	09 f4       	brne	.+2      	; 0x1edc <dir_register+0x26>
    1eda:	52 c0       	rjmp	.+164    	; 0x1f80 <dir_register+0xca>
			fs->wflag = 1;
		}
	}

	return res;
}
    1edc:	ce 01       	movw	r24, r28
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ff 90       	pop	r15
    1ee8:	ef 90       	pop	r14
    1eea:	08 95       	ret
			res = move_window(fs, dp->sect);
			if (res != FR_OK) break;
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
    1eec:	88 23       	and	r24, r24
    1eee:	d9 f0       	breq	.+54     	; 0x1f26 <dir_register+0x70>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
			}
			res = dir_next(dp, 1);
    1ef0:	c8 01       	movw	r24, r16
    1ef2:	61 e0       	ldi	r22, 0x01	; 1
    1ef4:	70 e0       	ldi	r23, 0x00	; 0
    1ef6:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <dir_next>
    1efa:	ec 01       	movw	r28, r24
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
    1efc:	00 97       	sbiw	r24, 0x00	; 0
    1efe:	51 f7       	brne	.-44     	; 0x1ed4 <dir_register+0x1e>

	res = dir_sdi(dp, 0);
	if (res == FR_OK) {
		n = 0;
		do {
			res = move_window(fs, dp->sect);
    1f00:	f8 01       	movw	r30, r16
    1f02:	46 89       	ldd	r20, Z+22	; 0x16
    1f04:	57 89       	ldd	r21, Z+23	; 0x17
    1f06:	60 8d       	ldd	r22, Z+24	; 0x18
    1f08:	71 8d       	ldd	r23, Z+25	; 0x19
    1f0a:	c7 01       	movw	r24, r14
    1f0c:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
    1f10:	ec 01       	movw	r28, r24
			if (res != FR_OK) break;
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	f9 f6       	brne	.-66     	; 0x1ed4 <dir_register+0x1e>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
    1f16:	d8 01       	movw	r26, r16
    1f18:	5a 96       	adiw	r26, 0x1a	; 26
    1f1a:	ed 91       	ld	r30, X+
    1f1c:	fc 91       	ld	r31, X
    1f1e:	5b 97       	sbiw	r26, 0x1b	; 27
    1f20:	80 81       	ld	r24, Z
    1f22:	85 3e       	cpi	r24, 0xE5	; 229
    1f24:	19 f7       	brne	.-58     	; 0x1eec <dir_register+0x36>

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
    1f26:	f8 01       	movw	r30, r16
    1f28:	46 89       	ldd	r20, Z+22	; 0x16
    1f2a:	57 89       	ldd	r21, Z+23	; 0x17
    1f2c:	60 8d       	ldd	r22, Z+24	; 0x18
    1f2e:	71 8d       	ldd	r23, Z+25	; 0x19
    1f30:	c7 01       	movw	r24, r14
    1f32:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
    1f36:	ec 01       	movw	r28, r24
		if (res == FR_OK) {
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	81 f6       	brne	.-96     	; 0x1edc <dir_register+0x26>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
    1f3c:	d8 01       	movw	r26, r16
    1f3e:	5a 96       	adiw	r26, 0x1a	; 26
    1f40:	ed 91       	ld	r30, X+
    1f42:	fc 91       	ld	r31, X
    1f44:	5b 97       	sbiw	r26, 0x1b	; 27
/*-----------------------------------------------------------------------*/
/* Register an object to the directory                                   */
/*-----------------------------------------------------------------------*/

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
    1f46:	cf 01       	movw	r24, r30
    1f48:	80 96       	adiw	r24, 0x20	; 32
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    1f4a:	11 92       	st	Z+, r1
    1f4c:	e8 17       	cp	r30, r24
    1f4e:	f9 07       	cpc	r31, r25
    1f50:	e1 f7       	brne	.-8      	; 0x1f4a <dir_register+0x94>
	/* Set SFN entry */
	if (res == FR_OK) {
		res = move_window(fs, dp->sect);
		if (res == FR_OK) {
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
    1f52:	b8 01       	movw	r22, r16
    1f54:	64 5e       	subi	r22, 0xE4	; 228
    1f56:	7f 4f       	sbci	r23, 0xFF	; 255
    1f58:	f8 01       	movw	r30, r16
    1f5a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f5c:	93 8d       	ldd	r25, Z+27	; 0x1b
    1f5e:	4b e0       	ldi	r20, 0x0B	; 11
    1f60:	50 e0       	ldi	r21, 0x00	; 0
    1f62:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	d7 01       	movw	r26, r14
    1f6a:	13 96       	adiw	r26, 0x03	; 3
    1f6c:	8c 93       	st	X, r24
    1f6e:	13 97       	sbiw	r26, 0x03	; 3
		}
	}

	return res;
}
    1f70:	ce 01       	movw	r24, r28
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	ff 90       	pop	r15
    1f7c:	ef 90       	pop	r14
    1f7e:	08 95       	ret
			}
			res = dir_next(dp, 1);
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
    1f80:	c7 e0       	ldi	r28, 0x07	; 7
    1f82:	d0 e0       	ldi	r29, 0x00	; 0
			fs->wflag = 1;
		}
	}

	return res;
}
    1f84:	ce 01       	movw	r24, r28
    1f86:	df 91       	pop	r29
    1f88:	cf 91       	pop	r28
    1f8a:	1f 91       	pop	r17
    1f8c:	0f 91       	pop	r16
    1f8e:	ff 90       	pop	r15
    1f90:	ef 90       	pop	r14
    1f92:	08 95       	ret

00001f94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
    1f94:	2f 92       	push	r2
    1f96:	3f 92       	push	r3
    1f98:	4f 92       	push	r4
    1f9a:	5f 92       	push	r5
    1f9c:	6f 92       	push	r6
    1f9e:	7f 92       	push	r7
    1fa0:	8f 92       	push	r8
    1fa2:	9f 92       	push	r9
    1fa4:	af 92       	push	r10
    1fa6:	bf 92       	push	r11
    1fa8:	cf 92       	push	r12
    1faa:	df 92       	push	r13
    1fac:	ef 92       	push	r14
    1fae:	ff 92       	push	r15
    1fb0:	0f 93       	push	r16
    1fb2:	1f 93       	push	r17
    1fb4:	cf 93       	push	r28
    1fb6:	df 93       	push	r29
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <follow_path+0x26>
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <follow_path+0x28>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	7c 01       	movw	r14, r24
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
	FATFS *fs = obj->fs;
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	4d 90       	ld	r4, X+
    1fc6:	5c 90       	ld	r5, X
    1fc8:	11 97       	sbiw	r26, 0x01	; 1
    1fca:	cb 01       	movw	r24, r22
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from the current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
    1fcc:	fc 01       	movw	r30, r24
    1fce:	20 81       	ld	r18, Z
    1fd0:	01 96       	adiw	r24, 0x01	; 1
    1fd2:	2f 32       	cpi	r18, 0x2F	; 47
    1fd4:	d9 f3       	breq	.-10     	; 0x1fcc <follow_path+0x38>
    1fd6:	2c 35       	cpi	r18, 0x5C	; 92
    1fd8:	c9 f3       	breq	.-14     	; 0x1fcc <follow_path+0x38>
    1fda:	6f 01       	movw	r12, r30
		obj->sclust = 0;					/* Start from the root directory */
    1fdc:	f7 01       	movw	r30, r14
    1fde:	16 82       	std	Z+6, r1	; 0x06
    1fe0:	17 82       	std	Z+7, r1	; 0x07
    1fe2:	10 86       	std	Z+8, r1	; 0x08
    1fe4:	11 86       	std	Z+9, r1	; 0x09
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
    1fe6:	d6 01       	movw	r26, r12
    1fe8:	8c 91       	ld	r24, X
    1fea:	80 32       	cpi	r24, 0x20	; 32
    1fec:	08 f4       	brcc	.+2      	; 0x1ff0 <follow_path+0x5c>
    1fee:	16 c1       	rjmp	.+556    	; 0x221c <follow_path+0x288>
    1ff0:	8c e1       	ldi	r24, 0x1C	; 28
    1ff2:	88 2e       	mov	r8, r24
    1ff4:	91 2c       	mov	r9, r1
    1ff6:	8e 0c       	add	r8, r14
    1ff8:	9f 1c       	adc	r9, r15
    1ffa:	c7 01       	movw	r24, r14
    1ffc:	87 96       	adiw	r24, 0x27	; 39
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    1ffe:	10 e2       	ldi	r17, 0x20	; 32
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    2000:	05 e0       	ldi	r16, 0x05	; 5
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    2002:	2d e1       	ldi	r18, 0x1D	; 29
    2004:	62 2e       	mov	r6, r18
    2006:	71 2c       	mov	r7, r1
    2008:	6e 0c       	add	r6, r14
    200a:	7f 1c       	adc	r7, r15
    200c:	56 01       	movw	r10, r12
    200e:	9c 83       	std	Y+4, r25	; 0x04
    2010:	8b 83       	std	Y+3, r24	; 0x03
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    2012:	f4 01       	movw	r30, r8
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	9c 81       	ldd	r25, Y+4	; 0x04

	do *d++ = (BYTE)val; while (--cnt);
    2018:	11 93       	st	Z+, r17
    201a:	e8 17       	cp	r30, r24
    201c:	f9 07       	cpc	r31, r25
    201e:	e1 f7       	brne	.-8      	; 0x2018 <follow_path+0x84>
    2020:	9c 83       	std	Y+4, r25	; 0x04
    2022:	8b 83       	std	Y+3, r24	; 0x03
    2024:	60 e0       	ldi	r22, 0x00	; 0
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	40 e0       	ldi	r20, 0x00	; 0
    202a:	50 e0       	ldi	r21, 0x00	; 0
    202c:	a8 e0       	ldi	r26, 0x08	; 8
    202e:	b0 e0       	ldi	r27, 0x00	; 0
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    2030:	f5 01       	movw	r30, r10
    2032:	e4 0f       	add	r30, r20
    2034:	f5 1f       	adc	r31, r21
    2036:	20 81       	ld	r18, Z
    2038:	6a 01       	movw	r12, r20
    203a:	08 94       	sec
    203c:	c1 1c       	adc	r12, r1
    203e:	d1 1c       	adc	r13, r1
		if (c <= ' ') break; 			/* Break if end of the path name */
    2040:	21 32       	cpi	r18, 0x21	; 33
    2042:	08 f4       	brcc	.+2      	; 0x2046 <follow_path+0xb2>
    2044:	e8 c0       	rjmp	.+464    	; 0x2216 <follow_path+0x282>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
    2046:	2f 32       	cpi	r18, 0x2F	; 47
    2048:	09 f4       	brne	.+2      	; 0x204c <follow_path+0xb8>
    204a:	6d c0       	rjmp	.+218    	; 0x2126 <follow_path+0x192>
    204c:	2c 35       	cpi	r18, 0x5C	; 92
    204e:	09 f4       	brne	.+2      	; 0x2052 <follow_path+0xbe>
    2050:	6a c0       	rjmp	.+212    	; 0x2126 <follow_path+0x192>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
    2052:	2e 32       	cpi	r18, 0x2E	; 46
    2054:	49 f1       	breq	.+82     	; 0x20a8 <follow_path+0x114>
    2056:	6a 17       	cp	r22, r26
    2058:	7b 07       	cpc	r23, r27
    205a:	30 f5       	brcc	.+76     	; 0x20a8 <follow_path+0x114>
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
    205c:	82 2f       	mov	r24, r18
    205e:	81 58       	subi	r24, 0x81	; 129
    2060:	8f 31       	cpi	r24, 0x1F	; 31
    2062:	08 f4       	brcc	.+2      	; 0x2066 <follow_path+0xd2>
    2064:	40 c0       	rjmp	.+128    	; 0x20e6 <follow_path+0x152>
    2066:	8f 55       	subi	r24, 0x5F	; 95
    2068:	8d 31       	cpi	r24, 0x1D	; 29
    206a:	e8 f1       	brcs	.+122    	; 0x20e6 <follow_path+0x152>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
    206c:	42 2f       	mov	r20, r18
    206e:	50 e0       	ldi	r21, 0x00	; 0
}

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
    2070:	42 32       	cpi	r20, 0x22	; 34
    2072:	51 05       	cpc	r21, r1
    2074:	f1 f0       	breq	.+60     	; 0x20b2 <follow_path+0x11e>
    2076:	ed e0       	ldi	r30, 0x0D	; 13
    2078:	f1 e0       	ldi	r31, 0x01	; 1
    207a:	06 c0       	rjmp	.+12     	; 0x2088 <follow_path+0xf4>
    207c:	99 27       	eor	r25, r25
    207e:	87 fd       	sbrc	r24, 7
    2080:	90 95       	com	r25
    2082:	48 17       	cp	r20, r24
    2084:	59 07       	cpc	r21, r25
    2086:	a9 f0       	breq	.+42     	; 0x20b2 <follow_path+0x11e>
    2088:	81 91       	ld	r24, Z+
    208a:	88 23       	and	r24, r24
    208c:	b9 f7       	brne	.-18     	; 0x207c <follow_path+0xe8>
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
    208e:	82 2f       	mov	r24, r18
    2090:	81 56       	subi	r24, 0x61	; 97
    2092:	8a 31       	cpi	r24, 0x1A	; 26
    2094:	08 f4       	brcc	.+2      	; 0x2098 <follow_path+0x104>
    2096:	20 52       	subi	r18, 0x20	; 32
			sfn[i++] = c;
    2098:	f7 01       	movw	r30, r14
    209a:	e6 0f       	add	r30, r22
    209c:	f7 1f       	adc	r31, r23
    209e:	24 8f       	std	Z+28, r18	; 0x1c
    20a0:	6f 5f       	subi	r22, 0xFF	; 255
    20a2:	7f 4f       	sbci	r23, 0xFF	; 255
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    20a4:	a6 01       	movw	r20, r12
    20a6:	c4 cf       	rjmp	.-120    	; 0x2030 <follow_path+0x9c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
    20a8:	ab 30       	cpi	r26, 0x0B	; 11
    20aa:	b1 05       	cpc	r27, r1
    20ac:	11 f0       	breq	.+4      	; 0x20b2 <follow_path+0x11e>
    20ae:	2e 32       	cpi	r18, 0x2E	; 46
    20b0:	a1 f1       	breq	.+104    	; 0x211a <follow_path+0x186>
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    20b2:	46 e0       	ldi	r20, 0x06	; 6
    20b4:	50 e0       	ldi	r21, 0x00	; 0
			}
		}
	}

	return res;
}
    20b6:	ca 01       	movw	r24, r20
    20b8:	0f 90       	pop	r0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	ff 90       	pop	r15
    20ca:	ef 90       	pop	r14
    20cc:	df 90       	pop	r13
    20ce:	cf 90       	pop	r12
    20d0:	bf 90       	pop	r11
    20d2:	af 90       	pop	r10
    20d4:	9f 90       	pop	r9
    20d6:	8f 90       	pop	r8
    20d8:	7f 90       	pop	r7
    20da:	6f 90       	pop	r6
    20dc:	5f 90       	pop	r5
    20de:	4f 90       	pop	r4
    20e0:	3f 90       	pop	r3
    20e2:	2f 90       	pop	r2
    20e4:	08 95       	ret
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    20e6:	f5 01       	movw	r30, r10
    20e8:	ec 0d       	add	r30, r12
    20ea:	fd 1d       	adc	r31, r13
    20ec:	30 81       	ld	r19, Z
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
    20ee:	83 2f       	mov	r24, r19
    20f0:	80 54       	subi	r24, 0x40	; 64
    20f2:	8f 33       	cpi	r24, 0x3F	; 63
    20f4:	18 f0       	brcs	.+6      	; 0x20fc <follow_path+0x168>
    20f6:	80 54       	subi	r24, 0x40	; 64
    20f8:	8d 37       	cpi	r24, 0x7D	; 125
    20fa:	d8 f6       	brcc	.-74     	; 0x20b2 <follow_path+0x11e>
    20fc:	cd 01       	movw	r24, r26
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	68 17       	cp	r22, r24
    2102:	79 07       	cpc	r23, r25
    2104:	b0 f6       	brcc	.-84     	; 0x20b2 <follow_path+0x11e>
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
#endif
#endif
		}
		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false at SBCS cfg.) */
			d = (BYTE)p[si++];			/* Get 2nd byte */
    2106:	4e 5f       	subi	r20, 0xFE	; 254
    2108:	5f 4f       	sbci	r21, 0xFF	; 255
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
    210a:	f7 01       	movw	r30, r14
    210c:	e6 0f       	add	r30, r22
    210e:	f7 1f       	adc	r31, r23
    2110:	24 8f       	std	Z+28, r18	; 0x1c
			sfn[i++] = d;
    2112:	35 8f       	std	Z+29, r19	; 0x1d
    2114:	6e 5f       	subi	r22, 0xFE	; 254
    2116:	7f 4f       	sbci	r23, 0xFF	; 255
    2118:	8b cf       	rjmp	.-234    	; 0x2030 <follow_path+0x9c>
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    211a:	a6 01       	movw	r20, r12
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
			i = 8; ni = 11;				/* Goto extension */
    211c:	68 e0       	ldi	r22, 0x08	; 8
    211e:	70 e0       	ldi	r23, 0x00	; 0
    2120:	ab e0       	ldi	r26, 0x0B	; 11
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	85 cf       	rjmp	.-246    	; 0x2030 <follow_path+0x9c>
/*-----------------------------------------------------------------------*/
/* Follow a file path                                                    */
/*-----------------------------------------------------------------------*/

static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
    2126:	f5 01       	movw	r30, r10
    2128:	ec 0d       	add	r30, r12
    212a:	fd 1d       	adc	r31, r13
    212c:	4b 81       	ldd	r20, Y+3	; 0x03
    212e:	5c 81       	ldd	r21, Y+4	; 0x04
#endif
	for (;;) {
		c = (BYTE)p[si++];
		if (c <= ' ') break; 			/* Break if end of the path name */
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
    2130:	5f 01       	movw	r10, r30
    2132:	81 91       	ld	r24, Z+
    2134:	8f 32       	cpi	r24, 0x2F	; 47
    2136:	e1 f3       	breq	.-8      	; 0x2130 <follow_path+0x19c>
    2138:	8c 35       	cpi	r24, 0x5C	; 92
    213a:	d1 f3       	breq	.-12     	; 0x2130 <follow_path+0x19c>
    213c:	5c 83       	std	Y+4, r21	; 0x04
    213e:	4b 83       	std	Y+3, r20	; 0x03
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
    2140:	61 15       	cp	r22, r1
    2142:	71 05       	cpc	r23, r1
    2144:	09 f4       	brne	.+2      	; 0x2148 <follow_path+0x1b4>
    2146:	b5 cf       	rjmp	.-150    	; 0x20b2 <follow_path+0x11e>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    2148:	d7 01       	movw	r26, r14
    214a:	5c 96       	adiw	r26, 0x1c	; 28
    214c:	8c 91       	ld	r24, X
    214e:	5c 97       	sbiw	r26, 0x1c	; 28
    2150:	85 3e       	cpi	r24, 0xE5	; 229
    2152:	09 f4       	brne	.+2      	; 0x2156 <follow_path+0x1c2>
    2154:	bb c0       	rjmp	.+374    	; 0x22cc <follow_path+0x338>
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    2156:	21 32       	cpi	r18, 0x21	; 33
    2158:	08 f4       	brcc	.+2      	; 0x215c <follow_path+0x1c8>
    215a:	68 c0       	rjmp	.+208    	; 0x222c <follow_path+0x298>
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	f7 01       	movw	r30, r14
    2160:	87 a3       	lds	r24, 0x57
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    2162:	c0 80       	ld	r12, Z
    2164:	d1 80       	ldd	r13, Z+1	; 0x01
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
    2166:	c7 01       	movw	r24, r14
    2168:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <dir_sdi.constprop.11>
    216c:	ac 01       	movw	r20, r24
	if (res != FR_OK) return res;
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	09 f0       	breq	.+2      	; 0x2174 <follow_path+0x1e0>
    2172:	46 c0       	rjmp	.+140    	; 0x2200 <follow_path+0x26c>
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	fc 82       	std	Y+4, r15	; 0x04
    217a:	eb 82       	std	Y+3, r14	; 0x03
    217c:	7c 01       	movw	r14, r24
	/* At the FAT12/16/32 */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
    217e:	ab 81       	ldd	r26, Y+3	; 0x03
    2180:	bc 81       	ldd	r27, Y+4	; 0x04
    2182:	56 96       	adiw	r26, 0x16	; 22
    2184:	4d 91       	ld	r20, X+
    2186:	5d 91       	ld	r21, X+
    2188:	6d 91       	ld	r22, X+
    218a:	7c 91       	ld	r23, X
    218c:	59 97       	sbiw	r26, 0x19	; 25
    218e:	c6 01       	movw	r24, r12
    2190:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
    2194:	ac 01       	movw	r20, r24
		if (res != FR_OK) break;
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	89 f5       	brne	.+98     	; 0x21fc <follow_path+0x268>
		c = dp->dir[DIR_Name];
    219a:	ab 81       	ldd	r26, Y+3	; 0x03
    219c:	bc 81       	ldd	r27, Y+4	; 0x04
    219e:	5a 96       	adiw	r26, 0x1a	; 26
    21a0:	ed 91       	ld	r30, X+
    21a2:	fc 91       	ld	r31, X
    21a4:	5b 97       	sbiw	r26, 0x1b	; 27
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    21a6:	80 81       	ld	r24, Z
    21a8:	88 23       	and	r24, r24
    21aa:	09 f4       	brne	.+2      	; 0x21ae <follow_path+0x21a>
    21ac:	41 c0       	rjmp	.+130    	; 0x2230 <follow_path+0x29c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
    21ae:	93 85       	ldd	r25, Z+11	; 0x0b
    21b0:	9f 73       	andi	r25, 0x3F	; 63
    21b2:	14 96       	adiw	r26, 0x04	; 4
    21b4:	9c 93       	st	X, r25
    21b6:	14 97       	sbiw	r26, 0x04	; 4
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    21b8:	83 85       	ldd	r24, Z+11	; 0x0b
    21ba:	83 fd       	sbrc	r24, 3
    21bc:	16 c0       	rjmp	.+44     	; 0x21ea <follow_path+0x256>
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    21be:	df 01       	movw	r26, r30
    21c0:	2d 91       	ld	r18, X+
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	f4 01       	movw	r30, r8
    21c6:	80 81       	ld	r24, Z
    21c8:	28 1b       	sub	r18, r24
    21ca:	31 09       	sbc	r19, r1
    21cc:	f3 01       	movw	r30, r6
	} while (--cnt && r == 0);
    21ce:	21 15       	cp	r18, r1
    21d0:	31 05       	cpc	r19, r1
    21d2:	59 f4       	brne	.+22     	; 0x21ea <follow_path+0x256>
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
    21d4:	2d 91       	ld	r18, X+
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	81 91       	ld	r24, Z+
    21da:	28 1b       	sub	r18, r24
    21dc:	31 09       	sbc	r19, r1
	} while (--cnt && r == 0);
    21de:	ee 15       	cp	r30, r14
    21e0:	ff 05       	cpc	r31, r15
    21e2:	a9 f7       	brne	.-22     	; 0x21ce <follow_path+0x23a>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
    21e4:	21 15       	cp	r18, r1
    21e6:	31 05       	cpc	r19, r1
    21e8:	51 f1       	breq	.+84     	; 0x223e <follow_path+0x2aa>
#endif
		res = dir_next(dp, 0);	/* Next entry */
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	70 e0       	ldi	r23, 0x00	; 0
    21f2:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <dir_next>
    21f6:	ac 01       	movw	r20, r24
	} while (res == FR_OK);
    21f8:	00 97       	sbiw	r24, 0x00	; 0
    21fa:	09 f2       	breq	.-126    	; 0x217e <follow_path+0x1ea>
    21fc:	eb 80       	ldd	r14, Y+3	; 0x03
    21fe:	fc 80       	ldd	r15, Y+4	; 0x04
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    2200:	f7 01       	movw	r30, r14
    2202:	87 a1       	lds	r24, 0x47
			if (res != FR_OK) {				/* Failed to find the object */
				if (res == FR_NO_FILE) {	/* Object is not found */
    2204:	44 30       	cpi	r20, 0x04	; 4
    2206:	51 05       	cpc	r21, r1
    2208:	09 f0       	breq	.+2      	; 0x220c <follow_path+0x278>
    220a:	55 cf       	rjmp	.-342    	; 0x20b6 <follow_path+0x122>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    220c:	82 fd       	sbrc	r24, 2
    220e:	62 c0       	rjmp	.+196    	; 0x22d4 <follow_path+0x340>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
    2210:	45 e0       	ldi	r20, 0x05	; 5
    2212:	50 e0       	ldi	r21, 0x00	; 0
    2214:	50 cf       	rjmp	.-352    	; 0x20b6 <follow_path+0x122>
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
    2216:	ac 0c       	add	r10, r12
    2218:	bd 1c       	adc	r11, r13
    221a:	92 cf       	rjmp	.-220    	; 0x2140 <follow_path+0x1ac>
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
		dp->fn[NSFLAG] = NS_NONAME;
    221c:	80 e8       	ldi	r24, 0x80	; 128
    221e:	f7 01       	movw	r30, r14
    2220:	87 a3       	lds	r24, 0x57
		res = dir_sdi(dp, 0);
    2222:	c7 01       	movw	r24, r14
    2224:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <dir_sdi.constprop.11>
    2228:	ac 01       	movw	r20, r24
    222a:	45 cf       	rjmp	.-374    	; 0x20b6 <follow_path+0x122>
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
    222c:	84 e0       	ldi	r24, 0x04	; 4
    222e:	97 cf       	rjmp	.-210    	; 0x215e <follow_path+0x1ca>
    2230:	eb 80       	ldd	r14, Y+3	; 0x03
    2232:	fc 80       	ldd	r15, Y+4	; 0x04
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
			if (res != FR_OK) break;
			res = dir_find(dp);				/* Find an object with the segment name */
			ns = dp->fn[NSFLAG];
    2234:	d7 01       	movw	r26, r14
    2236:	97 96       	adiw	r26, 0x27	; 39
    2238:	8c 91       	ld	r24, X
    223a:	97 97       	sbiw	r26, 0x27	; 39
    223c:	e7 cf       	rjmp	.-50     	; 0x220c <follow_path+0x278>
    223e:	97 01       	movw	r18, r14
    2240:	eb 80       	ldd	r14, Y+3	; 0x03
    2242:	fc 80       	ldd	r15, Y+4	; 0x04
    2244:	3c 83       	std	Y+4, r19	; 0x04
    2246:	2b 83       	std	Y+3, r18	; 0x03
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
    2248:	f7 01       	movw	r30, r14
    224a:	87 a1       	lds	r24, 0x47
    224c:	82 fd       	sbrc	r24, 2
    224e:	33 cf       	rjmp	.-410    	; 0x20b6 <follow_path+0x122>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
    2250:	94 ff       	sbrs	r25, 4
    2252:	de cf       	rjmp	.-68     	; 0x2210 <follow_path+0x27c>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    2254:	d7 01       	movw	r26, r14
    2256:	1e 96       	adiw	r26, 0x0e	; 14
    2258:	2d 91       	ld	r18, X+
    225a:	3c 91       	ld	r19, X
    225c:	1f 97       	sbiw	r26, 0x0f	; 15
    225e:	31 70       	andi	r19, 0x01	; 1
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    2260:	24 0d       	add	r18, r4
    2262:	35 1d       	adc	r19, r5
    2264:	f9 01       	movw	r30, r18
    2266:	e6 5b       	subi	r30, 0xB6	; 182
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    226a:	30 80       	ld	r3, Z
    226c:	22 24       	eor	r2, r2
    226e:	f9 01       	movw	r30, r18
    2270:	e7 5b       	subi	r30, 0xB7	; 183
    2272:	ff 4f       	sbci	r31, 0xFF	; 255
    2274:	80 81       	ld	r24, Z
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	82 29       	or	r24, r2
    227a:	93 29       	or	r25, r3
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    227c:	ac 01       	movw	r20, r24
    227e:	60 e0       	ldi	r22, 0x00	; 0
    2280:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    2282:	f2 01       	movw	r30, r4
    2284:	80 81       	ld	r24, Z
    2286:	83 30       	cpi	r24, 0x03	; 3
    2288:	41 f0       	breq	.+16     	; 0x229a <follow_path+0x306>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
    228a:	d7 01       	movw	r26, r14
    228c:	16 96       	adiw	r26, 0x06	; 6
    228e:	4d 93       	st	X+, r20
    2290:	5d 93       	st	X+, r21
    2292:	6d 93       	st	X+, r22
    2294:	7c 93       	st	X, r23
    2296:	19 97       	sbiw	r26, 0x09	; 9
			}
		}
    2298:	bc ce       	rjmp	.-648    	; 0x2012 <follow_path+0x7e>
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
    229a:	f9 01       	movw	r30, r18
    229c:	ec 5b       	subi	r30, 0xBC	; 188
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
	rv = rv << 8 | ptr[0];
    22a0:	80 81       	ld	r24, Z
    22a2:	8a 83       	std	Y+2, r24	; 0x02
    22a4:	19 82       	std	Y+1, r1	; 0x01
    22a6:	f9 01       	movw	r30, r18
    22a8:	ed 5b       	subi	r30, 0xBD	; 189
    22aa:	ff 4f       	sbci	r31, 0xFF	; 255
    22ac:	80 81       	ld	r24, Z
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	29 81       	ldd	r18, Y+1	; 0x01
    22b2:	3a 81       	ldd	r19, Y+2	; 0x02
    22b4:	82 2b       	or	r24, r18
    22b6:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    22b8:	a0 e0       	ldi	r26, 0x00	; 0
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	dc 01       	movw	r26, r24
    22be:	99 27       	eor	r25, r25
    22c0:	88 27       	eor	r24, r24
    22c2:	48 2b       	or	r20, r24
    22c4:	59 2b       	or	r21, r25
    22c6:	6a 2b       	or	r22, r26
    22c8:	7b 2b       	or	r23, r27
    22ca:	df cf       	rjmp	.-66     	; 0x228a <follow_path+0x2f6>
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
    22cc:	5c 96       	adiw	r26, 0x1c	; 28
    22ce:	0c 93       	st	X, r16
    22d0:	5c 97       	sbiw	r26, 0x1c	; 28
    22d2:	41 cf       	rjmp	.-382    	; 0x2156 <follow_path+0x1c2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
    22d4:	44 e0       	ldi	r20, 0x04	; 4
    22d6:	50 e0       	ldi	r21, 0x00	; 0
    22d8:	ee ce       	rjmp	.-548    	; 0x20b6 <follow_path+0x122>

000022da <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
    22da:	cf 93       	push	r28
    22dc:	df 93       	push	r29
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
    22e2:	27 97       	sbiw	r28, 0x07	; 7
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	8b 83       	std	Y+3, r24	; 0x03
    22f2:	7e 83       	std	Y+6, r23	; 0x06
    22f4:	6d 83       	std	Y+5, r22	; 0x05
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
    22f6:	7a 83       	std	Y+2, r23	; 0x02
    22f8:	69 83       	std	Y+1, r22	; 0x01


	vol = get_ldnumber(&rp);
    22fa:	ce 01       	movw	r24, r28
    22fc:	01 96       	adiw	r24, 0x01	; 1
    22fe:	4f 83       	std	Y+7, r20	; 0x07
    2300:	0e 94 61 01 	call	0x2c2	; 0x2c2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
    2304:	4f 81       	ldd	r20, Y+7	; 0x07
    2306:	97 fd       	sbrc	r25, 7
    2308:	23 c0       	rjmp	.+70     	; 0x2350 <f_mount+0x76>
	cfs = FatFs[vol];					/* Pointer to fs object */
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	fc 01       	movw	r30, r24
    2310:	e4 5e       	subi	r30, 0xE4	; 228
    2312:	fe 4f       	sbci	r31, 0xFE	; 254
    2314:	01 90       	ld	r0, Z+
    2316:	f0 81       	ld	r31, Z
    2318:	e0 2d       	mov	r30, r0

	if (cfs) {
    231a:	30 97       	sbiw	r30, 0x00	; 0
    231c:	09 f0       	breq	.+2      	; 0x2320 <f_mount+0x46>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
    231e:	10 82       	st	Z, r1
	}

	if (fs) {
    2320:	eb 81       	ldd	r30, Y+3	; 0x03
    2322:	fc 81       	ldd	r31, Y+4	; 0x04
    2324:	30 97       	sbiw	r30, 0x00	; 0
    2326:	b9 f0       	breq	.+46     	; 0x2356 <f_mount+0x7c>
		fs->fs_type = 0;				/* Clear new fs object */
    2328:	10 82       	st	Z, r1
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    232a:	84 5e       	subi	r24, 0xE4	; 228
    232c:	9e 4f       	sbci	r25, 0xFE	; 254
    232e:	dc 01       	movw	r26, r24
    2330:	11 96       	adiw	r26, 0x01	; 1
    2332:	fc 93       	st	X, r31
    2334:	ee 93       	st	-X, r30

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    2336:	41 30       	cpi	r20, 0x01	; 1
    2338:	b1 f0       	breq	.+44     	; 0x2366 <f_mount+0x8c>
    233a:	80 e0       	ldi	r24, 0x00	; 0
    233c:	90 e0       	ldi	r25, 0x00	; 0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
    233e:	27 96       	adiw	r28, 0x07	; 7
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	08 95       	ret
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
    2350:	8b e0       	ldi	r24, 0x0B	; 11
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	f4 cf       	rjmp	.-24     	; 0x233e <f_mount+0x64>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
    2356:	84 5e       	subi	r24, 0xE4	; 228
    2358:	9e 4f       	sbci	r25, 0xFE	; 254
    235a:	fc 01       	movw	r30, r24
    235c:	11 82       	std	Z+1, r1	; 0x01
    235e:	10 82       	st	Z, r1

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	ec cf       	rjmp	.-40     	; 0x233e <f_mount+0x64>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
    2366:	ce 01       	movw	r24, r28
    2368:	05 96       	adiw	r24, 0x05	; 5
    236a:	be 01       	movw	r22, r28
    236c:	6d 5f       	subi	r22, 0xFD	; 253
    236e:	7f 4f       	sbci	r23, 0xFF	; 255
    2370:	40 e0       	ldi	r20, 0x00	; 0
    2372:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <find_volume>
	LEAVE_FF(fs, res);
    2376:	e3 cf       	rjmp	.-58     	; 0x233e <f_mount+0x64>

00002378 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    2378:	2f 92       	push	r2
    237a:	3f 92       	push	r3
    237c:	4f 92       	push	r4
    237e:	5f 92       	push	r5
    2380:	6f 92       	push	r6
    2382:	7f 92       	push	r7
    2384:	8f 92       	push	r8
    2386:	9f 92       	push	r9
    2388:	af 92       	push	r10
    238a:	bf 92       	push	r11
    238c:	cf 92       	push	r12
    238e:	df 92       	push	r13
    2390:	ef 92       	push	r14
    2392:	ff 92       	push	r15
    2394:	0f 93       	push	r16
    2396:	1f 93       	push	r17
    2398:	cf 93       	push	r28
    239a:	df 93       	push	r29
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	e0 97       	sbiw	r28, 0x30	; 48
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	7c 01       	movw	r14, r24
    23ae:	7c a7       	lds	r23, 0x7c
    23b0:	6b a7       	lds	r22, 0x7b
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	59 f1       	breq	.+86     	; 0x240c <f_open+0x94>

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
    23b6:	8f e3       	ldi	r24, 0x3F	; 63
    23b8:	b8 2e       	mov	r11, r24
    23ba:	b4 22       	and	r11, r20
	res = find_volume(&path, &fs, mode);
    23bc:	ce 01       	movw	r24, r28
    23be:	8b 96       	adiw	r24, 0x2b	; 43
    23c0:	be 01       	movw	r22, r28
    23c2:	6f 5f       	subi	r22, 0xFF	; 255
    23c4:	7f 4f       	sbci	r23, 0xFF	; 255
    23c6:	4b 2d       	mov	r20, r11
    23c8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <find_volume>
    23cc:	6c 01       	movw	r12, r24
	if (res == FR_OK) {
    23ce:	00 97       	sbiw	r24, 0x00	; 0
    23d0:	09 f1       	breq	.+66     	; 0x2414 <f_open+0x9c>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    23d2:	f7 01       	movw	r30, r14
    23d4:	11 82       	std	Z+1, r1	; 0x01
    23d6:	10 82       	st	Z, r1

	LEAVE_FF(fs, res);
}
    23d8:	c6 01       	movw	r24, r12
    23da:	e0 96       	adiw	r28, 0x30	; 48
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	df 91       	pop	r29
    23e8:	cf 91       	pop	r28
    23ea:	1f 91       	pop	r17
    23ec:	0f 91       	pop	r16
    23ee:	ff 90       	pop	r15
    23f0:	ef 90       	pop	r14
    23f2:	df 90       	pop	r13
    23f4:	cf 90       	pop	r12
    23f6:	bf 90       	pop	r11
    23f8:	af 90       	pop	r10
    23fa:	9f 90       	pop	r9
    23fc:	8f 90       	pop	r8
    23fe:	7f 90       	pop	r7
    2400:	6f 90       	pop	r6
    2402:	5f 90       	pop	r5
    2404:	4f 90       	pop	r4
    2406:	3f 90       	pop	r3
    2408:	2f 90       	pop	r2
    240a:	08 95       	ret
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
    240c:	a9 e0       	ldi	r26, 0x09	; 9
    240e:	ca 2e       	mov	r12, r26
    2410:	d1 2c       	mov	r13, r1
    2412:	e2 cf       	rjmp	.-60     	; 0x23d8 <f_open+0x60>

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
	res = find_volume(&path, &fs, mode);
	if (res == FR_OK) {
		dj.obj.fs = fs;
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	9a 81       	ldd	r25, Y+2	; 0x02
    2418:	9c 83       	std	Y+4, r25	; 0x04
    241a:	8b 83       	std	Y+3, r24	; 0x03
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    241c:	6b a5       	lds	r22, 0x6b
    241e:	7c a5       	lds	r23, 0x6c
    2420:	ce 01       	movw	r24, r28
    2422:	03 96       	adiw	r24, 0x03	; 3
    2424:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <follow_path>
    2428:	9c 01       	movw	r18, r24
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	19 f4       	brne	.+6      	; 0x2434 <f_open+0xbc>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
    242e:	8a a5       	lds	r24, 0x6a
    2430:	87 fd       	sbrc	r24, 7
    2432:	f5 c1       	rjmp	.+1002   	; 0x281e <f_open+0x4a6>
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    2434:	0b 2d       	mov	r16, r11
    2436:	10 e0       	ldi	r17, 0x00	; 0
    2438:	c8 01       	movw	r24, r16
    243a:	8c 71       	andi	r24, 0x1C	; 28
    243c:	90 70       	andi	r25, 0x00	; 0
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	09 f4       	brne	.+2      	; 0x2444 <f_open+0xcc>
    2442:	84 c0       	rjmp	.+264    	; 0x254c <f_open+0x1d4>
			if (res != FR_OK) {					/* No file, create new */
    2444:	21 15       	cp	r18, r1
    2446:	31 05       	cpc	r19, r1
    2448:	09 f4       	brne	.+2      	; 0x244c <f_open+0xd4>
    244a:	bf c1       	rjmp	.+894    	; 0x27ca <f_open+0x452>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    244c:	24 30       	cpi	r18, 0x04	; 4
    244e:	31 05       	cpc	r19, r1
    2450:	09 f0       	breq	.+2      	; 0x2454 <f_open+0xdc>
    2452:	c2 c1       	rjmp	.+900    	; 0x27d8 <f_open+0x460>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
    2454:	ce 01       	movw	r24, r28
    2456:	03 96       	adiw	r24, 0x03	; 3
    2458:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <dir_register>
    245c:	9c 01       	movw	r18, r24
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	09 f0       	breq	.+2      	; 0x2464 <f_open+0xec>
    2462:	ba c1       	rjmp	.+884    	; 0x27d8 <f_open+0x460>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
    2464:	88 e0       	ldi	r24, 0x08	; 8
    2466:	b8 2a       	or	r11, r24
    2468:	0b 2d       	mov	r16, r11
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    246a:	03 ff       	sbrs	r16, 3
    246c:	db c1       	rjmp	.+950    	; 0x2824 <f_open+0x4ac>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
    246e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2470:	fe 8d       	ldd	r31, Y+30	; 0x1e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2472:	16 86       	std	Z+14, r1	; 0x0e
	*ptr++ = (BYTE)val; val >>= 8;
    2474:	17 86       	std	Z+15, r1	; 0x0f
	*ptr++ = (BYTE)val; val >>= 8;
    2476:	91 e2       	ldi	r25, 0x21	; 33
    2478:	90 8b       	std	Z+16, r25	; 0x10
	*ptr++ = (BYTE)val;
    247a:	88 e4       	ldi	r24, 0x48	; 72
    247c:	81 8b       	std	Z+17, r24	; 0x11
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
    247e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2480:	fe 8d       	ldd	r31, Y+30	; 0x1e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2482:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    2484:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    2486:	90 8f       	std	Z+24, r25	; 0x18
	*ptr++ = (BYTE)val;
    2488:	81 8f       	std	Z+25, r24	; 0x19
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
    248a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    248c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    248e:	80 e2       	ldi	r24, 0x20	; 32
    2490:	83 87       	std	Z+11, r24	; 0x0b
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
    2492:	89 80       	ldd	r8, Y+1	; 0x01
    2494:	9a 80       	ldd	r9, Y+2	; 0x02
    2496:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2498:	fe 8d       	ldd	r31, Y+30	; 0x1e
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    249a:	33 8d       	ldd	r19, Z+27	; 0x1b
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	82 8d       	ldd	r24, Z+26	; 0x1a
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	82 2b       	or	r24, r18
    24a4:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    24a6:	2c 01       	movw	r4, r24
    24a8:	66 24       	eor	r6, r6
    24aa:	77 24       	eor	r7, r7
	if (fs->fs_type == FS_FAT32) {
    24ac:	d4 01       	movw	r26, r8
    24ae:	8c 91       	ld	r24, X
    24b0:	83 30       	cpi	r24, 0x03	; 3
    24b2:	09 f4       	brne	.+2      	; 0x24b6 <f_open+0x13e>
    24b4:	c3 c1       	rjmp	.+902    	; 0x283c <f_open+0x4c4>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    24b6:	12 8e       	std	Z+26, r1	; 0x1a
	*ptr++ = (BYTE)val;
    24b8:	13 8e       	std	Z+27, r1	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    24ba:	d4 01       	movw	r26, r8
    24bc:	8c 91       	ld	r24, X
    24be:	83 30       	cpi	r24, 0x03	; 3
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <f_open+0x14c>
    24c2:	b9 c1       	rjmp	.+882    	; 0x2836 <f_open+0x4be>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
    24c4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    24c6:	fe 8d       	ldd	r31, Y+30	; 0x1e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    24c8:	14 8e       	std	Z+28, r1	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    24ca:	15 8e       	std	Z+29, r1	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    24cc:	16 8e       	std	Z+30, r1	; 0x1e
	*ptr++ = (BYTE)val;
    24ce:	17 8e       	std	Z+31, r1	; 0x1f
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
					st_dword(dj.dir + DIR_FileSize, 0);
					fs->wflag = 1;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	d4 01       	movw	r26, r8
    24d4:	13 96       	adiw	r26, 0x03	; 3
    24d6:	8c 93       	st	X, r24
    24d8:	13 97       	sbiw	r26, 0x03	; 3

					if (cl) {							/* Remove the cluster chain if exist */
    24da:	41 14       	cp	r4, r1
    24dc:	51 04       	cpc	r5, r1
    24de:	61 04       	cpc	r6, r1
    24e0:	71 04       	cpc	r7, r1
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <f_open+0x16e>
    24e4:	47 c0       	rjmp	.+142    	; 0x2574 <f_open+0x1fc>
						dw = fs->winsect;
    24e6:	9b 96       	adiw	r26, 0x2b	; 43
    24e8:	8d 91       	ld	r24, X+
    24ea:	9d 91       	ld	r25, X+
    24ec:	0d 90       	ld	r0, X+
    24ee:	bc 91       	ld	r27, X
    24f0:	a0 2d       	mov	r26, r0
    24f2:	8d a7       	lds	r24, 0x7d
    24f4:	9e a7       	lds	r25, 0x7e
    24f6:	af a7       	lds	r26, 0x7f
    24f8:	b8 ab       	sts	0x58, r27
						res = remove_chain(&dj.obj, cl, 0);
    24fa:	ce 01       	movw	r24, r28
    24fc:	03 96       	adiw	r24, 0x03	; 3
    24fe:	b3 01       	movw	r22, r6
    2500:	a2 01       	movw	r20, r4
    2502:	00 e0       	ldi	r16, 0x00	; 0
    2504:	10 e0       	ldi	r17, 0x00	; 0
    2506:	98 01       	movw	r18, r16
    2508:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <remove_chain>
    250c:	9c 01       	movw	r18, r24
						if (res == FR_OK) {
    250e:	00 97       	sbiw	r24, 0x00	; 0
    2510:	09 f0       	breq	.+2      	; 0x2514 <f_open+0x19c>
    2512:	62 c1       	rjmp	.+708    	; 0x27d8 <f_open+0x460>
							res = move_window(fs, dw);
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	9a 81       	ldd	r25, Y+2	; 0x02
    2518:	4d a5       	lds	r20, 0x6d
    251a:	5e a5       	lds	r21, 0x6e
    251c:	6f a5       	lds	r22, 0x6f
    251e:	78 a9       	sts	0x48, r23
    2520:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
    2524:	9c 01       	movw	r18, r24
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
    2526:	89 80       	ldd	r8, Y+1	; 0x01
    2528:	9a 80       	ldd	r9, Y+2	; 0x02
    252a:	d3 01       	movw	r26, r6
    252c:	c2 01       	movw	r24, r4
    252e:	01 97       	sbiw	r24, 0x01	; 1
    2530:	a1 09       	sbc	r26, r1
    2532:	b1 09       	sbc	r27, r1
    2534:	f4 01       	movw	r30, r8
    2536:	83 87       	std	Z+11, r24	; 0x0b
    2538:	94 87       	std	Z+12, r25	; 0x0c
    253a:	a5 87       	std	Z+13, r26	; 0x0d
    253c:	b6 87       	std	Z+14, r27	; 0x0e
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
    253e:	21 15       	cp	r18, r1
    2540:	31 05       	cpc	r19, r1
    2542:	09 f0       	breq	.+2      	; 0x2546 <f_open+0x1ce>
    2544:	49 c1       	rjmp	.+658    	; 0x27d8 <f_open+0x460>
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
    2546:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2548:	fe 8d       	ldd	r31, Y+30	; 0x1e
    254a:	14 c0       	rjmp	.+40     	; 0x2574 <f_open+0x1fc>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
    254c:	21 15       	cp	r18, r1
    254e:	31 05       	cpc	r19, r1
    2550:	09 f0       	breq	.+2      	; 0x2554 <f_open+0x1dc>
    2552:	42 c1       	rjmp	.+644    	; 0x27d8 <f_open+0x460>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
    2554:	8f 81       	ldd	r24, Y+7	; 0x07
    2556:	84 fd       	sbrc	r24, 4
    2558:	6a c1       	rjmp	.+724    	; 0x282e <f_open+0x4b6>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
    255a:	b1 fe       	sbrs	r11, 1
    255c:	02 c0       	rjmp	.+4      	; 0x2562 <f_open+0x1ea>
    255e:	80 fd       	sbrc	r24, 0
    2560:	4a c1       	rjmp	.+660    	; 0x27f6 <f_open+0x47e>
    2562:	c8 01       	movw	r24, r16
    2564:	88 70       	andi	r24, 0x08	; 8
    2566:	90 70       	andi	r25, 0x00	; 0
    2568:	89 80       	ldd	r8, Y+1	; 0x01
    256a:	9a 80       	ldd	r9, Y+2	; 0x02
    256c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    256e:	fe 8d       	ldd	r31, Y+30	; 0x1e
					}
				}
			}
		}
		if (res == FR_OK) {
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	19 f0       	breq	.+6      	; 0x257a <f_open+0x202>
				mode |= FA_MODIFIED;
    2574:	80 e4       	ldi	r24, 0x40	; 64
    2576:	b8 2a       	or	r11, r24
    2578:	0b 2d       	mov	r16, r11
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
    257a:	d4 01       	movw	r26, r8
    257c:	9b 96       	adiw	r26, 0x2b	; 43
    257e:	4d 91       	ld	r20, X+
    2580:	5d 91       	ld	r21, X+
    2582:	6d 91       	ld	r22, X+
    2584:	7c 91       	ld	r23, X
    2586:	9e 97       	sbiw	r26, 0x2e	; 46
    2588:	d7 01       	movw	r26, r14
    258a:	5c 96       	adiw	r26, 0x1c	; 28
    258c:	4d 93       	st	X+, r20
    258e:	5d 93       	st	X+, r21
    2590:	6d 93       	st	X+, r22
    2592:	7c 93       	st	X, r23
    2594:	5f 97       	sbiw	r26, 0x1f	; 31
			fp->dir_ptr = dj.dir;
    2596:	91 96       	adiw	r26, 0x21	; 33
    2598:	fc 93       	st	X, r31
    259a:	ee 93       	st	-X, r30
    259c:	90 97       	sbiw	r26, 0x20	; 32
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    259e:	33 8d       	ldd	r19, Z+27	; 0x1b
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	82 8d       	ldd	r24, Z+26	; 0x1a
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	82 2b       	or	r24, r18
    25a8:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    25aa:	ac 01       	movw	r20, r24
    25ac:	60 e0       	ldi	r22, 0x00	; 0
    25ae:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    25b0:	d4 01       	movw	r26, r8
    25b2:	8c 91       	ld	r24, X
    25b4:	83 30       	cpi	r24, 0x03	; 3
    25b6:	09 f4       	brne	.+2      	; 0x25ba <f_open+0x242>
    25b8:	22 c1       	rjmp	.+580    	; 0x27fe <f_open+0x486>
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
				fp->obj.c_ofs = dj.blk_ofs;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
    25ba:	d7 01       	movw	r26, r14
    25bc:	16 96       	adiw	r26, 0x06	; 6
    25be:	4d 93       	st	X+, r20
    25c0:	5d 93       	st	X+, r21
    25c2:	6d 93       	st	X+, r22
    25c4:	7c 93       	st	X, r23
    25c6:	19 97       	sbiw	r26, 0x09	; 9
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    25c8:	87 8d       	ldd	r24, Z+31	; 0x1f
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a0 e0       	ldi	r26, 0x00	; 0
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    25d0:	44 27       	eor	r20, r20
    25d2:	58 2f       	mov	r21, r24
    25d4:	69 2f       	mov	r22, r25
    25d6:	7a 2f       	mov	r23, r26
    25d8:	86 8d       	ldd	r24, Z+30	; 0x1e
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	a0 e0       	ldi	r26, 0x00	; 0
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	48 2b       	or	r20, r24
    25e2:	59 2b       	or	r21, r25
    25e4:	6a 2b       	or	r22, r26
    25e6:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    25e8:	76 2f       	mov	r23, r22
    25ea:	65 2f       	mov	r22, r21
    25ec:	54 2f       	mov	r21, r20
    25ee:	44 27       	eor	r20, r20
    25f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    25f2:	90 e0       	ldi	r25, 0x00	; 0
    25f4:	a0 e0       	ldi	r26, 0x00	; 0
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	48 2b       	or	r20, r24
    25fa:	59 2b       	or	r21, r25
    25fc:	6a 2b       	or	r22, r26
    25fe:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    2600:	76 2f       	mov	r23, r22
    2602:	65 2f       	mov	r22, r21
    2604:	54 2f       	mov	r21, r20
    2606:	44 27       	eor	r20, r20
    2608:	84 8d       	ldd	r24, Z+28	; 0x1c
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	a0 e0       	ldi	r26, 0x00	; 0
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	48 2b       	or	r20, r24
    2612:	59 2b       	or	r21, r25
    2614:	6a 2b       	or	r22, r26
    2616:	7b 2b       	or	r23, r27
				fp->obj.c_ofs = dj.blk_ofs;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
    2618:	f7 01       	movw	r30, r14
    261a:	42 87       	std	Z+10, r20	; 0x0a
    261c:	53 87       	std	Z+11, r21	; 0x0b
    261e:	64 87       	std	Z+12, r22	; 0x0c
    2620:	75 87       	std	Z+13, r23	; 0x0d
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
    2622:	91 82       	std	Z+1, r9	; 0x01
    2624:	80 82       	st	Z, r8
			fp->obj.id = fs->id;
    2626:	d4 01       	movw	r26, r8
    2628:	15 96       	adiw	r26, 0x05	; 5
    262a:	8d 91       	ld	r24, X+
    262c:	9c 91       	ld	r25, X
    262e:	16 97       	sbiw	r26, 0x06	; 6
    2630:	93 83       	std	Z+3, r25	; 0x03
    2632:	82 83       	std	Z+2, r24	; 0x02
			fp->flag = mode;		/* Set file access mode */
    2634:	b6 86       	std	Z+14, r11	; 0x0e
			fp->err = 0;			/* Clear error flag */
    2636:	17 86       	std	Z+15, r1	; 0x0f
			fp->sect = 0;			/* Invalidate current data sector */
    2638:	10 8e       	std	Z+24, r1	; 0x18
    263a:	11 8e       	std	Z+25, r1	; 0x19
    263c:	12 8e       	std	Z+26, r1	; 0x1a
    263e:	13 8e       	std	Z+27, r1	; 0x1b
			fp->fptr = 0;			/* Set file pointer top of the file */
    2640:	10 8a       	std	Z+16, r1	; 0x10
    2642:	11 8a       	std	Z+17, r1	; 0x11
    2644:	12 8a       	std	Z+18, r1	; 0x12
    2646:	13 8a       	std	Z+19, r1	; 0x13
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
    2648:	32 e2       	ldi	r19, 0x22	; 34
    264a:	23 2e       	mov	r2, r19
    264c:	31 2c       	mov	r3, r1
    264e:	2e 0c       	add	r2, r14
    2650:	3f 1c       	adc	r3, r15

/*-----------------------------------------------------------------------*/
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_open (
    2652:	c7 01       	movw	r24, r14
    2654:	8e 5d       	subi	r24, 0xDE	; 222
    2656:	9d 4f       	sbci	r25, 0xFD	; 253
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    2658:	f1 01       	movw	r30, r2

	do *d++ = (BYTE)val; while (--cnt);
    265a:	11 92       	st	Z+, r1
    265c:	e8 17       	cp	r30, r24
    265e:	f9 07       	cpc	r31, r25
    2660:	e1 f7       	brne	.-8      	; 0x265a <f_open+0x2e2>
			fp->fptr = 0;			/* Set file pointer top of the file */
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
    2662:	05 ff       	sbrs	r16, 5
    2664:	b9 ce       	rjmp	.-654    	; 0x23d8 <f_open+0x60>
    2666:	f7 01       	movw	r30, r14
    2668:	42 84       	ldd	r4, Z+10	; 0x0a
    266a:	53 84       	ldd	r5, Z+11	; 0x0b
    266c:	64 84       	ldd	r6, Z+12	; 0x0c
    266e:	75 84       	ldd	r7, Z+13	; 0x0d
    2670:	41 14       	cp	r4, r1
    2672:	51 04       	cpc	r5, r1
    2674:	61 04       	cpc	r6, r1
    2676:	71 04       	cpc	r7, r1
    2678:	09 f4       	brne	.+2      	; 0x267c <f_open+0x304>
    267a:	ae ce       	rjmp	.-676    	; 0x23d8 <f_open+0x60>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
    267c:	d7 01       	movw	r26, r14
    267e:	40 8a       	std	Z+16, r4	; 0x10
    2680:	51 8a       	std	Z+17, r5	; 0x11
    2682:	62 8a       	std	Z+18, r6	; 0x12
    2684:	73 8a       	std	Z+19, r7	; 0x13
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
    2686:	f4 01       	movw	r30, r8
    2688:	81 85       	ldd	r24, Z+9	; 0x09
    268a:	92 85       	ldd	r25, Z+10	; 0x0a
    268c:	4c 01       	movw	r8, r24
    268e:	aa 24       	eor	r10, r10
    2690:	bb 24       	eor	r11, r11
    2692:	29 e0       	ldi	r18, 0x09	; 9
    2694:	88 0c       	add	r8, r8
    2696:	99 1c       	adc	r9, r9
    2698:	aa 1c       	adc	r10, r10
    269a:	bb 1c       	adc	r11, r11
    269c:	2a 95       	dec	r18
    269e:	d1 f7       	brne	.-12     	; 0x2694 <f_open+0x31c>
				clst = fp->obj.sclust;				/* Follow the cluster chain */
    26a0:	16 96       	adiw	r26, 0x06	; 6
    26a2:	4d 91       	ld	r20, X+
    26a4:	5d 91       	ld	r21, X+
    26a6:	6d 91       	ld	r22, X+
    26a8:	7c 91       	ld	r23, X
    26aa:	19 97       	sbiw	r26, 0x09	; 9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    26ac:	84 14       	cp	r8, r4
    26ae:	95 04       	cpc	r9, r5
    26b0:	a6 04       	cpc	r10, r6
    26b2:	b7 04       	cpc	r11, r7
    26b4:	f8 f4       	brcc	.+62     	; 0x26f4 <f_open+0x37c>
					clst = get_fat(&fp->obj, clst);
    26b6:	d7 01       	movw	r26, r14
    26b8:	8d 91       	ld	r24, X+
    26ba:	9c 91       	ld	r25, X
    26bc:	0e 94 14 09 	call	0x1228	; 0x1228 <get_fat.isra.8>
    26c0:	ab 01       	movw	r20, r22
    26c2:	bc 01       	movw	r22, r24
					if (clst <= 1) res = FR_INT_ERR;
    26c4:	42 30       	cpi	r20, 0x02	; 2
    26c6:	51 05       	cpc	r21, r1
    26c8:	61 05       	cpc	r22, r1
    26ca:	71 05       	cpc	r23, r1
    26cc:	08 f4       	brcc	.+2      	; 0x26d0 <f_open+0x358>
    26ce:	8f c0       	rjmp	.+286    	; 0x27ee <f_open+0x476>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    26d0:	4f 3f       	cpi	r20, 0xFF	; 255
    26d2:	bf ef       	ldi	r27, 0xFF	; 255
    26d4:	5b 07       	cpc	r21, r27
    26d6:	bf ef       	ldi	r27, 0xFF	; 255
    26d8:	6b 07       	cpc	r22, r27
    26da:	bf ef       	ldi	r27, 0xFF	; 255
    26dc:	7b 07       	cpc	r23, r27
    26de:	09 f4       	brne	.+2      	; 0x26e2 <f_open+0x36a>
    26e0:	7d c0       	rjmp	.+250    	; 0x27dc <f_open+0x464>

/*-----------------------------------------------------------------------*/
/* Open or Create a File                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_open (
    26e2:	48 18       	sub	r4, r8
    26e4:	59 08       	sbc	r5, r9
    26e6:	6a 08       	sbc	r6, r10
    26e8:	7b 08       	sbc	r7, r11
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
    26ea:	84 14       	cp	r8, r4
    26ec:	95 04       	cpc	r9, r5
    26ee:	a6 04       	cpc	r10, r6
    26f0:	b7 04       	cpc	r11, r7
    26f2:	08 f3       	brcs	.-62     	; 0x26b6 <f_open+0x33e>
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
    26f4:	d7 01       	movw	r26, r14
    26f6:	54 96       	adiw	r26, 0x14	; 20
    26f8:	4d 93       	st	X+, r20
    26fa:	5d 93       	st	X+, r21
    26fc:	6d 93       	st	X+, r22
    26fe:	7c 93       	st	X, r23
    2700:	57 97       	sbiw	r26, 0x17	; 23
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
    2702:	d3 01       	movw	r26, r6
    2704:	c2 01       	movw	r24, r4
    2706:	91 70       	andi	r25, 0x01	; 1
    2708:	a0 70       	andi	r26, 0x00	; 0
    270a:	b0 70       	andi	r27, 0x00	; 0
    270c:	00 97       	sbiw	r24, 0x00	; 0
    270e:	a1 05       	cpc	r26, r1
    2710:	b1 05       	cpc	r27, r1
    2712:	09 f4       	brne	.+2      	; 0x2716 <f_open+0x39e>
    2714:	61 ce       	rjmp	.-830    	; 0x23d8 <f_open+0x60>
					if ((sc = clust2sect(fs, clst)) == 0) {
    2716:	e9 81       	ldd	r30, Y+1	; 0x01
    2718:	fa 81       	ldd	r31, Y+2	; 0x02
    271a:	fe a7       	lds	r31, 0x7e
    271c:	ed a7       	lds	r30, 0x7d
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    271e:	9e ef       	ldi	r25, 0xFE	; 254
    2720:	89 2e       	mov	r8, r25
    2722:	9f ef       	ldi	r25, 0xFF	; 255
    2724:	99 2e       	mov	r9, r25
    2726:	9f ef       	ldi	r25, 0xFF	; 255
    2728:	a9 2e       	mov	r10, r25
    272a:	9f ef       	ldi	r25, 0xFF	; 255
    272c:	b9 2e       	mov	r11, r25
    272e:	84 0e       	add	r8, r20
    2730:	95 1e       	adc	r9, r21
    2732:	a6 1e       	adc	r10, r22
    2734:	b7 1e       	adc	r11, r23
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2736:	83 89       	ldd	r24, Z+19	; 0x13
    2738:	94 89       	ldd	r25, Z+20	; 0x14
    273a:	a5 89       	ldd	r26, Z+21	; 0x15
    273c:	b6 89       	ldd	r27, Z+22	; 0x16
    273e:	02 97       	sbiw	r24, 0x02	; 2
    2740:	a1 09       	sbc	r26, r1
    2742:	b1 09       	sbc	r27, r1
    2744:	88 16       	cp	r8, r24
    2746:	99 06       	cpc	r9, r25
    2748:	aa 06       	cpc	r10, r26
    274a:	bb 06       	cpc	r11, r27
    274c:	08 f0       	brcs	.+2      	; 0x2750 <f_open+0x3d8>
    274e:	86 c0       	rjmp	.+268    	; 0x285c <f_open+0x4e4>
	return clst * fs->csize + fs->database;
    2750:	21 85       	ldd	r18, Z+9	; 0x09
    2752:	32 85       	ldd	r19, Z+10	; 0x0a
    2754:	40 e0       	ldi	r20, 0x00	; 0
    2756:	50 e0       	ldi	r21, 0x00	; 0
    2758:	c5 01       	movw	r24, r10
    275a:	b4 01       	movw	r22, r8
    275c:	0e 94 23 29 	call	0x5246	; 0x5246 <__mulsi3>
    2760:	ab 01       	movw	r20, r22
    2762:	bc 01       	movw	r22, r24
    2764:	ed a5       	lds	r30, 0x6d
    2766:	fe a5       	lds	r31, 0x6e
    2768:	87 a1       	lds	r24, 0x47
    276a:	90 a5       	lds	r25, 0x60
    276c:	a1 a5       	lds	r26, 0x61
    276e:	b2 a5       	lds	r27, 0x62
    2770:	48 0f       	add	r20, r24
    2772:	59 1f       	adc	r21, r25
    2774:	6a 1f       	adc	r22, r26
    2776:	7b 1f       	adc	r23, r27
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
    2778:	41 15       	cp	r20, r1
    277a:	51 05       	cpc	r21, r1
    277c:	61 05       	cpc	r22, r1
    277e:	71 05       	cpc	r23, r1
    2780:	09 f4       	brne	.+2      	; 0x2784 <f_open+0x40c>
    2782:	6c c0       	rjmp	.+216    	; 0x285c <f_open+0x4e4>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
    2784:	93 01       	movw	r18, r6
    2786:	82 01       	movw	r16, r4
    2788:	89 e0       	ldi	r24, 0x09	; 9
    278a:	36 95       	lsr	r19
    278c:	27 95       	ror	r18
    278e:	17 95       	ror	r17
    2790:	07 95       	ror	r16
    2792:	8a 95       	dec	r24
    2794:	d1 f7       	brne	.-12     	; 0x278a <f_open+0x412>
    2796:	04 0f       	add	r16, r20
    2798:	15 1f       	adc	r17, r21
    279a:	26 1f       	adc	r18, r22
    279c:	37 1f       	adc	r19, r23
    279e:	d7 01       	movw	r26, r14
    27a0:	58 96       	adiw	r26, 0x18	; 24
    27a2:	0d 93       	st	X+, r16
    27a4:	1d 93       	st	X+, r17
    27a6:	2d 93       	st	X+, r18
    27a8:	3c 93       	st	X, r19
    27aa:	5b 97       	sbiw	r26, 0x1b	; 27
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
    27ac:	81 81       	ldd	r24, Z+1	; 0x01
    27ae:	b1 01       	movw	r22, r2
    27b0:	a9 01       	movw	r20, r18
    27b2:	98 01       	movw	r18, r16
    27b4:	01 e0       	ldi	r16, 0x01	; 1
    27b6:	10 e0       	ldi	r17, 0x00	; 0
    27b8:	0e 94 8a 22 	call	0x4514	; 0x4514 <disk_read>
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	09 f4       	brne	.+2      	; 0x27c2 <f_open+0x44a>
    27c0:	0b ce       	rjmp	.-1002   	; 0x23d8 <f_open+0x60>
    27c2:	11 e0       	ldi	r17, 0x01	; 1
    27c4:	c1 2e       	mov	r12, r17
    27c6:	d1 2c       	mov	r13, r1
    27c8:	04 ce       	rjmp	.-1016   	; 0x23d2 <f_open+0x5a>
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    27ca:	8f 81       	ldd	r24, Y+7	; 0x07
    27cc:	81 71       	andi	r24, 0x11	; 17
    27ce:	99 f4       	brne	.+38     	; 0x27f6 <f_open+0x47e>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
    27d0:	b2 fe       	sbrs	r11, 2
    27d2:	4b ce       	rjmp	.-874    	; 0x246a <f_open+0xf2>
    27d4:	28 e0       	ldi	r18, 0x08	; 8
    27d6:	30 e0       	ldi	r19, 0x00	; 0
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    27d8:	69 01       	movw	r12, r18
    27da:	fb cd       	rjmp	.-1034   	; 0x23d2 <f_open+0x5a>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
    27dc:	e1 e0       	ldi	r30, 0x01	; 1
    27de:	ce 2e       	mov	r12, r30
    27e0:	d1 2c       	mov	r13, r1
				}
				fp->clust = clst;
    27e2:	f7 01       	movw	r30, r14
    27e4:	44 8b       	std	Z+20, r20	; 0x14
    27e6:	55 8b       	std	Z+21, r21	; 0x15
    27e8:	66 8b       	std	Z+22, r22	; 0x16
    27ea:	77 8b       	std	Z+23, r23	; 0x17
    27ec:	f2 cd       	rjmp	.-1052   	; 0x23d2 <f_open+0x5a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
    27ee:	f2 e0       	ldi	r31, 0x02	; 2
    27f0:	cf 2e       	mov	r12, r31
    27f2:	d1 2c       	mov	r13, r1
    27f4:	f6 cf       	rjmp	.-20     	; 0x27e2 <f_open+0x46a>
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
						res = FR_DENIED;
    27f6:	27 e0       	ldi	r18, 0x07	; 7
    27f8:	30 e0       	ldi	r19, 0x00	; 0
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    27fa:	69 01       	movw	r12, r18
    27fc:	ea cd       	rjmp	.-1068   	; 0x23d2 <f_open+0x5a>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    27fe:	35 89       	ldd	r19, Z+21	; 0x15
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	84 89       	ldd	r24, Z+20	; 0x14
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	82 2b       	or	r24, r18
    2808:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    280a:	a0 e0       	ldi	r26, 0x00	; 0
    280c:	b0 e0       	ldi	r27, 0x00	; 0
    280e:	dc 01       	movw	r26, r24
    2810:	99 27       	eor	r25, r25
    2812:	88 27       	eor	r24, r24
    2814:	48 2b       	or	r20, r24
    2816:	59 2b       	or	r21, r25
    2818:	6a 2b       	or	r22, r26
    281a:	7b 2b       	or	r23, r27
    281c:	ce ce       	rjmp	.-612    	; 0x25ba <f_open+0x242>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
				res = FR_INVALID_NAME;
    281e:	26 e0       	ldi	r18, 0x06	; 6
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	08 ce       	rjmp	.-1008   	; 0x2434 <f_open+0xbc>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
    2824:	89 80       	ldd	r8, Y+1	; 0x01
    2826:	9a 80       	ldd	r9, Y+2	; 0x02
    2828:	ed 8d       	ldd	r30, Y+29	; 0x1d
    282a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    282c:	a6 ce       	rjmp	.-692    	; 0x257a <f_open+0x202>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
    282e:	24 e0       	ldi	r18, 0x04	; 4
    2830:	30 e0       	ldi	r19, 0x00	; 0
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    2832:	69 01       	movw	r12, r18
    2834:	ce cd       	rjmp	.-1124   	; 0x23d2 <f_open+0x5a>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    2836:	14 8a       	std	Z+20, r1	; 0x14
	*ptr++ = (BYTE)val;
    2838:	15 8a       	std	Z+21, r1	; 0x15
    283a:	44 ce       	rjmp	.-888    	; 0x24c4 <f_open+0x14c>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    283c:	35 89       	ldd	r19, Z+21	; 0x15
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	84 89       	ldd	r24, Z+20	; 0x14
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	82 2b       	or	r24, r18
    2846:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    2848:	a0 e0       	ldi	r26, 0x00	; 0
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	dc 01       	movw	r26, r24
    284e:	99 27       	eor	r25, r25
    2850:	88 27       	eor	r24, r24
    2852:	48 2a       	or	r4, r24
    2854:	59 2a       	or	r5, r25
    2856:	6a 2a       	or	r6, r26
    2858:	7b 2a       	or	r7, r27
    285a:	2d ce       	rjmp	.-934    	; 0x24b6 <f_open+0x13e>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
						res = FR_INT_ERR;
    285c:	b2 e0       	ldi	r27, 0x02	; 2
    285e:	cb 2e       	mov	r12, r27
    2860:	d1 2c       	mov	r13, r1
    2862:	b7 cd       	rjmp	.-1170   	; 0x23d2 <f_open+0x5a>

00002864 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
    2864:	2f 92       	push	r2
    2866:	3f 92       	push	r3
    2868:	4f 92       	push	r4
    286a:	5f 92       	push	r5
    286c:	6f 92       	push	r6
    286e:	7f 92       	push	r7
    2870:	8f 92       	push	r8
    2872:	9f 92       	push	r9
    2874:	af 92       	push	r10
    2876:	bf 92       	push	r11
    2878:	cf 92       	push	r12
    287a:	df 92       	push	r13
    287c:	ef 92       	push	r14
    287e:	ff 92       	push	r15
    2880:	0f 93       	push	r16
    2882:	1f 93       	push	r17
    2884:	cf 93       	push	r28
    2886:	df 93       	push	r29
    2888:	cd b7       	in	r28, 0x3d	; 61
    288a:	de b7       	in	r29, 0x3e	; 62
    288c:	2a 97       	sbiw	r28, 0x0a	; 10
    288e:	0f b6       	in	r0, 0x3f	; 63
    2890:	f8 94       	cli
    2892:	de bf       	out	0x3e, r29	; 62
    2894:	0f be       	out	0x3f, r0	; 63
    2896:	cd bf       	out	0x3d, r28	; 61
    2898:	5c 01       	movw	r10, r24
    289a:	e6 2e       	mov	r14, r22
    289c:	c7 2e       	mov	r12, r23
    289e:	3a 01       	movw	r6, r20
    28a0:	3c 83       	std	Y+4, r19	; 0x04
    28a2:	2b 83       	std	Y+3, r18	; 0x03
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
    28a4:	f9 01       	movw	r30, r18
    28a6:	11 82       	std	Z+1, r1	; 0x01
    28a8:	10 82       	st	Z, r1
	res = validate(fp, &fs);
    28aa:	be 01       	movw	r22, r28
    28ac:	6f 5f       	subi	r22, 0xFF	; 255
    28ae:	7f 4f       	sbci	r23, 0xFF	; 255
    28b0:	0e 94 97 01 	call	0x32e	; 0x32e <validate>
    28b4:	2c 01       	movw	r4, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	61 f4       	brne	.+24     	; 0x28d2 <f_read+0x6e>
    28ba:	f5 01       	movw	r30, r10
    28bc:	47 84       	ldd	r4, Z+15	; 0x0f
    28be:	55 24       	eor	r5, r5
    28c0:	41 14       	cp	r4, r1
    28c2:	51 04       	cpc	r5, r1
    28c4:	31 f4       	brne	.+12     	; 0x28d2 <f_read+0x6e>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
    28c6:	86 85       	ldd	r24, Z+14	; 0x0e
    28c8:	80 fd       	sbrc	r24, 0
    28ca:	1d c0       	rjmp	.+58     	; 0x2906 <f_read+0xa2>
    28cc:	97 e0       	ldi	r25, 0x07	; 7
    28ce:	49 2e       	mov	r4, r25
    28d0:	51 2c       	mov	r5, r1
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
    28d2:	c2 01       	movw	r24, r4
    28d4:	2a 96       	adiw	r28, 0x0a	; 10
    28d6:	0f b6       	in	r0, 0x3f	; 63
    28d8:	f8 94       	cli
    28da:	de bf       	out	0x3e, r29	; 62
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	cd bf       	out	0x3d, r28	; 61
    28e0:	df 91       	pop	r29
    28e2:	cf 91       	pop	r28
    28e4:	1f 91       	pop	r17
    28e6:	0f 91       	pop	r16
    28e8:	ff 90       	pop	r15
    28ea:	ef 90       	pop	r14
    28ec:	df 90       	pop	r13
    28ee:	cf 90       	pop	r12
    28f0:	bf 90       	pop	r11
    28f2:	af 90       	pop	r10
    28f4:	9f 90       	pop	r9
    28f6:	8f 90       	pop	r8
    28f8:	7f 90       	pop	r7
    28fa:	6f 90       	pop	r6
    28fc:	5f 90       	pop	r5
    28fe:	4f 90       	pop	r4
    2900:	3f 90       	pop	r3
    2902:	2f 90       	pop	r2
    2904:	08 95       	ret

	*br = 0;	/* Clear read byte counter */
	res = validate(fp, &fs);
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
    2906:	00 89       	ldd	r16, Z+16	; 0x10
    2908:	11 89       	ldd	r17, Z+17	; 0x11
    290a:	22 89       	ldd	r18, Z+18	; 0x12
    290c:	33 89       	ldd	r19, Z+19	; 0x13
    290e:	82 85       	ldd	r24, Z+10	; 0x0a
    2910:	93 85       	ldd	r25, Z+11	; 0x0b
    2912:	a4 85       	ldd	r26, Z+12	; 0x0c
    2914:	b5 85       	ldd	r27, Z+13	; 0x0d
    2916:	80 1b       	sub	r24, r16
    2918:	91 0b       	sbc	r25, r17
    291a:	a2 0b       	sbc	r26, r18
    291c:	b3 0b       	sbc	r27, r19
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
    291e:	a3 01       	movw	r20, r6
    2920:	60 e0       	ldi	r22, 0x00	; 0
    2922:	70 e0       	ldi	r23, 0x00	; 0
    2924:	84 17       	cp	r24, r20
    2926:	95 07       	cpc	r25, r21
    2928:	a6 07       	cpc	r26, r22
    292a:	b7 07       	cpc	r27, r23
    292c:	08 f4       	brcc	.+2      	; 0x2930 <f_read+0xcc>
    292e:	3c 01       	movw	r6, r24

	for ( ;  btr;								/* Repeat until all data read */
    2930:	61 14       	cp	r6, r1
    2932:	71 04       	cpc	r7, r1
    2934:	71 f2       	breq	.-100    	; 0x28d2 <f_read+0x6e>
    2936:	ed 82       	std	Y+5, r14	; 0x05
    2938:	ce 82       	std	Y+6, r12	; 0x06
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    293a:	c5 01       	movw	r24, r10
    293c:	82 96       	adiw	r24, 0x22	; 34
    293e:	98 87       	std	Y+8, r25	; 0x08
    2940:	8f 83       	std	Y+7, r24	; 0x07
    2942:	5a 86       	std	Y+10, r5	; 0x0a
    2944:	49 86       	std	Y+9, r4	; 0x09
    2946:	45 01       	movw	r8, r10
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
    2948:	d9 01       	movw	r26, r18
    294a:	c8 01       	movw	r24, r16
    294c:	91 70       	andi	r25, 0x01	; 1
    294e:	a0 70       	andi	r26, 0x00	; 0
    2950:	b0 70       	andi	r27, 0x00	; 0
    2952:	00 97       	sbiw	r24, 0x00	; 0
    2954:	a1 05       	cpc	r26, r1
    2956:	b1 05       	cpc	r27, r1
    2958:	09 f0       	breq	.+2      	; 0x295c <f_read+0xf8>
    295a:	60 c0       	rjmp	.+192    	; 0x2a1c <f_read+0x1b8>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
    295c:	29 80       	ldd	r2, Y+1	; 0x01
    295e:	3a 80       	ldd	r3, Y+2	; 0x02
    2960:	d9 01       	movw	r26, r18
    2962:	c8 01       	movw	r24, r16
    2964:	49 e0       	ldi	r20, 0x09	; 9
    2966:	b6 95       	lsr	r27
    2968:	a7 95       	ror	r26
    296a:	97 95       	ror	r25
    296c:	87 95       	ror	r24
    296e:	4a 95       	dec	r20
    2970:	d1 f7       	brne	.-12     	; 0x2966 <f_read+0x102>
    2972:	f1 01       	movw	r30, r2
    2974:	a1 84       	ldd	r10, Z+9	; 0x09
    2976:	b2 84       	ldd	r11, Z+10	; 0x0a
    2978:	08 94       	sec
    297a:	a1 08       	sbc	r10, r1
    297c:	b1 08       	sbc	r11, r1
    297e:	a8 22       	and	r10, r24
    2980:	b9 22       	and	r11, r25
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    2982:	f4 01       	movw	r30, r8

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
			if (csect == 0) {					/* On the cluster boundary? */
    2984:	a1 14       	cp	r10, r1
    2986:	b1 04       	cpc	r11, r1
    2988:	09 f4       	brne	.+2      	; 0x298c <f_read+0x128>
    298a:	81 c0       	rjmp	.+258    	; 0x2a8e <f_read+0x22a>
    298c:	84 89       	ldd	r24, Z+20	; 0x14
    298e:	95 89       	ldd	r25, Z+21	; 0x15
    2990:	a6 89       	ldd	r26, Z+22	; 0x16
    2992:	b7 89       	ldd	r27, Z+23	; 0x17
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2994:	1e ef       	ldi	r17, 0xFE	; 254
    2996:	c1 2e       	mov	r12, r17
    2998:	1f ef       	ldi	r17, 0xFF	; 255
    299a:	d1 2e       	mov	r13, r17
    299c:	1f ef       	ldi	r17, 0xFF	; 255
    299e:	e1 2e       	mov	r14, r17
    29a0:	1f ef       	ldi	r17, 0xFF	; 255
    29a2:	f1 2e       	mov	r15, r17
    29a4:	c8 0e       	add	r12, r24
    29a6:	d9 1e       	adc	r13, r25
    29a8:	ea 1e       	adc	r14, r26
    29aa:	fb 1e       	adc	r15, r27
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    29ac:	f1 01       	movw	r30, r2
    29ae:	83 89       	ldd	r24, Z+19	; 0x13
    29b0:	94 89       	ldd	r25, Z+20	; 0x14
    29b2:	a5 89       	ldd	r26, Z+21	; 0x15
    29b4:	b6 89       	ldd	r27, Z+22	; 0x16
    29b6:	02 97       	sbiw	r24, 0x02	; 2
    29b8:	a1 09       	sbc	r26, r1
    29ba:	b1 09       	sbc	r27, r1
    29bc:	c8 16       	cp	r12, r24
    29be:	d9 06       	cpc	r13, r25
    29c0:	ea 06       	cpc	r14, r26
    29c2:	fb 06       	cpc	r15, r27
    29c4:	08 f4       	brcc	.+2      	; 0x29c8 <f_read+0x164>
    29c6:	84 c0       	rjmp	.+264    	; 0x2ad0 <f_read+0x26c>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
    29c8:	82 e0       	ldi	r24, 0x02	; 2
    29ca:	f4 01       	movw	r30, r8
    29cc:	87 87       	std	Z+15, r24	; 0x0f
    29ce:	a2 e0       	ldi	r26, 0x02	; 2
    29d0:	4a 2e       	mov	r4, r26
    29d2:	51 2c       	mov	r5, r1
    29d4:	7e cf       	rjmp	.-260    	; 0x28d2 <f_read+0x6e>
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
				continue;
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
    29d6:	f4 01       	movw	r30, r8
    29d8:	00 8d       	ldd	r16, Z+24	; 0x18
    29da:	11 8d       	ldd	r17, Z+25	; 0x19
    29dc:	22 8d       	ldd	r18, Z+26	; 0x1a
    29de:	33 8d       	ldd	r19, Z+27	; 0x1b
    29e0:	0c 15       	cp	r16, r12
    29e2:	1d 05       	cpc	r17, r13
    29e4:	2e 05       	cpc	r18, r14
    29e6:	3f 05       	cpc	r19, r15
    29e8:	81 f0       	breq	.+32     	; 0x2a0a <f_read+0x1a6>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
    29ea:	86 85       	ldd	r24, Z+14	; 0x0e
    29ec:	87 fd       	sbrc	r24, 7
    29ee:	c8 c0       	rjmp	.+400    	; 0x2b80 <f_read+0x31c>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= ~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    29f0:	f1 01       	movw	r30, r2
    29f2:	81 81       	ldd	r24, Z+1	; 0x01
    29f4:	6f 81       	ldd	r22, Y+7	; 0x07
    29f6:	78 85       	ldd	r23, Y+8	; 0x08
    29f8:	a7 01       	movw	r20, r14
    29fa:	96 01       	movw	r18, r12
    29fc:	01 e0       	ldi	r16, 0x01	; 1
    29fe:	10 e0       	ldi	r17, 0x00	; 0
    2a00:	0e 94 8a 22 	call	0x4514	; 0x4514 <disk_read>
    2a04:	00 97       	sbiw	r24, 0x00	; 0
    2a06:	09 f0       	breq	.+2      	; 0x2a0a <f_read+0x1a6>
    2a08:	a9 c0       	rjmp	.+338    	; 0x2b5c <f_read+0x2f8>
			}
#endif
			fp->sect = sect;
    2a0a:	f4 01       	movw	r30, r8
    2a0c:	c0 8e       	std	Z+24, r12	; 0x18
    2a0e:	d1 8e       	std	Z+25, r13	; 0x19
    2a10:	e2 8e       	std	Z+26, r14	; 0x1a
    2a12:	f3 8e       	std	Z+27, r15	; 0x1b
    2a14:	00 89       	ldd	r16, Z+16	; 0x10
    2a16:	11 89       	ldd	r17, Z+17	; 0x11
    2a18:	22 89       	ldd	r18, Z+18	; 0x12
    2a1a:	33 89       	ldd	r19, Z+19	; 0x13
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
    2a1c:	b8 01       	movw	r22, r16
    2a1e:	71 70       	andi	r23, 0x01	; 1
    2a20:	e1 2c       	mov	r14, r1
    2a22:	22 e0       	ldi	r18, 0x02	; 2
    2a24:	f2 2e       	mov	r15, r18
    2a26:	e6 1a       	sub	r14, r22
    2a28:	f7 0a       	sbc	r15, r23
    2a2a:	6e 14       	cp	r6, r14
    2a2c:	7f 04       	cpc	r7, r15
    2a2e:	08 f4       	brcc	.+2      	; 0x2a32 <f_read+0x1ce>
    2a30:	73 01       	movw	r14, r6
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
    2a32:	6e 5d       	subi	r22, 0xDE	; 222
    2a34:	7f 4f       	sbci	r23, 0xFF	; 255
    2a36:	68 0d       	add	r22, r8
    2a38:	79 1d       	adc	r23, r9
    2a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3e:	a7 01       	movw	r20, r14
    2a40:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mem_cpy>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    2a44:	2d 81       	ldd	r18, Y+5	; 0x05
    2a46:	3e 81       	ldd	r19, Y+6	; 0x06
    2a48:	2e 0d       	add	r18, r14
    2a4a:	3f 1d       	adc	r19, r15
    2a4c:	3e 83       	std	Y+6, r19	; 0x06
    2a4e:	2d 83       	std	Y+5, r18	; 0x05
    2a50:	87 01       	movw	r16, r14
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	f4 01       	movw	r30, r8
    2a58:	80 89       	ldd	r24, Z+16	; 0x10
    2a5a:	91 89       	ldd	r25, Z+17	; 0x11
    2a5c:	a2 89       	ldd	r26, Z+18	; 0x12
    2a5e:	b3 89       	ldd	r27, Z+19	; 0x13
    2a60:	08 0f       	add	r16, r24
    2a62:	19 1f       	adc	r17, r25
    2a64:	2a 1f       	adc	r18, r26
    2a66:	3b 1f       	adc	r19, r27
    2a68:	00 8b       	std	Z+16, r16	; 0x10
    2a6a:	11 8b       	std	Z+17, r17	; 0x11
    2a6c:	22 8b       	std	Z+18, r18	; 0x12
    2a6e:	33 8b       	std	Z+19, r19	; 0x13
    2a70:	eb 81       	ldd	r30, Y+3	; 0x03
    2a72:	fc 81       	ldd	r31, Y+4	; 0x04
    2a74:	80 81       	ld	r24, Z
    2a76:	91 81       	ldd	r25, Z+1	; 0x01
    2a78:	8e 0d       	add	r24, r14
    2a7a:	9f 1d       	adc	r25, r15
    2a7c:	91 83       	std	Z+1, r25	; 0x01
    2a7e:	80 83       	st	Z, r24
    2a80:	6e 18       	sub	r6, r14
    2a82:	7f 08       	sbc	r7, r15
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
	remain = fp->obj.objsize - fp->fptr;
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <f_read+0x224>
    2a86:	60 cf       	rjmp	.-320    	; 0x2948 <f_read+0xe4>
    2a88:	49 84       	ldd	r4, Y+9	; 0x09
    2a8a:	5a 84       	ldd	r5, Y+10	; 0x0a
    2a8c:	22 cf       	rjmp	.-444    	; 0x28d2 <f_read+0x6e>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
			if (csect == 0) {					/* On the cluster boundary? */
				if (fp->fptr == 0) {			/* On the top of the file? */
    2a8e:	01 15       	cp	r16, r1
    2a90:	11 05       	cpc	r17, r1
    2a92:	21 05       	cpc	r18, r1
    2a94:	31 05       	cpc	r19, r1
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <f_read+0x236>
    2a98:	68 c0       	rjmp	.+208    	; 0x2b6a <f_read+0x306>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
    2a9a:	86 81       	ldd	r24, Z+6	; 0x06
    2a9c:	97 81       	ldd	r25, Z+7	; 0x07
    2a9e:	a0 85       	ldd	r26, Z+8	; 0x08
    2aa0:	b1 85       	ldd	r27, Z+9	; 0x09
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
    2aa2:	82 30       	cpi	r24, 0x02	; 2
    2aa4:	91 05       	cpc	r25, r1
    2aa6:	a1 05       	cpc	r26, r1
    2aa8:	b1 05       	cpc	r27, r1
    2aaa:	08 f4       	brcc	.+2      	; 0x2aae <f_read+0x24a>
    2aac:	8d cf       	rjmp	.-230    	; 0x29c8 <f_read+0x164>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2aae:	8f 3f       	cpi	r24, 0xFF	; 255
    2ab0:	ff ef       	ldi	r31, 0xFF	; 255
    2ab2:	9f 07       	cpc	r25, r31
    2ab4:	ff ef       	ldi	r31, 0xFF	; 255
    2ab6:	af 07       	cpc	r26, r31
    2ab8:	ff ef       	ldi	r31, 0xFF	; 255
    2aba:	bf 07       	cpc	r27, r31
    2abc:	09 f4       	brne	.+2      	; 0x2ac0 <f_read+0x25c>
    2abe:	4e c0       	rjmp	.+156    	; 0x2b5c <f_read+0x2f8>
				fp->clust = clst;				/* Update current cluster */
    2ac0:	f4 01       	movw	r30, r8
    2ac2:	84 8b       	std	Z+20, r24	; 0x14
    2ac4:	95 8b       	std	Z+21, r25	; 0x15
    2ac6:	a6 8b       	std	Z+22, r26	; 0x16
    2ac8:	b7 8b       	std	Z+23, r27	; 0x17
    2aca:	29 80       	ldd	r2, Y+1	; 0x01
    2acc:	3a 80       	ldd	r3, Y+2	; 0x02
    2ace:	62 cf       	rjmp	.-316    	; 0x2994 <f_read+0x130>
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
	return clst * fs->csize + fs->database;
    2ad0:	01 85       	ldd	r16, Z+9	; 0x09
    2ad2:	12 85       	ldd	r17, Z+10	; 0x0a
    2ad4:	98 01       	movw	r18, r16
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	c7 01       	movw	r24, r14
    2adc:	b6 01       	movw	r22, r12
    2ade:	0e 94 23 29 	call	0x5246	; 0x5246 <__mulsi3>
    2ae2:	ab 01       	movw	r20, r22
    2ae4:	bc 01       	movw	r22, r24
    2ae6:	f1 01       	movw	r30, r2
    2ae8:	87 a1       	lds	r24, 0x47
    2aea:	90 a5       	lds	r25, 0x60
    2aec:	a1 a5       	lds	r26, 0x61
    2aee:	b2 a5       	lds	r27, 0x62
    2af0:	48 0f       	add	r20, r24
    2af2:	59 1f       	adc	r21, r25
    2af4:	6a 1f       	adc	r22, r26
    2af6:	7b 1f       	adc	r23, r27
				if (clst < 2) ABORT(fs, FR_INT_ERR);
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
    2af8:	41 15       	cp	r20, r1
    2afa:	51 05       	cpc	r21, r1
    2afc:	61 05       	cpc	r22, r1
    2afe:	71 05       	cpc	r23, r1
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <f_read+0x2a0>
    2b02:	62 cf       	rjmp	.-316    	; 0x29c8 <f_read+0x164>
			sect += csect;
    2b04:	65 01       	movw	r12, r10
    2b06:	ee 24       	eor	r14, r14
    2b08:	ff 24       	eor	r15, r15
    2b0a:	c4 0e       	add	r12, r20
    2b0c:	d5 1e       	adc	r13, r21
    2b0e:	e6 1e       	adc	r14, r22
    2b10:	f7 1e       	adc	r15, r23
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
    2b12:	23 01       	movw	r4, r6
    2b14:	45 2c       	mov	r4, r5
    2b16:	55 24       	eor	r5, r5
    2b18:	46 94       	lsr	r4
			if (cc) {							/* Read maximum contiguous sectors directly */
    2b1a:	41 14       	cp	r4, r1
    2b1c:	51 04       	cpc	r5, r1
    2b1e:	09 f4       	brne	.+2      	; 0x2b22 <f_read+0x2be>
    2b20:	5a cf       	rjmp	.-332    	; 0x29d6 <f_read+0x172>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    2b22:	c5 01       	movw	r24, r10
    2b24:	84 0d       	add	r24, r4
    2b26:	95 1d       	adc	r25, r5
    2b28:	08 17       	cp	r16, r24
    2b2a:	19 07       	cpc	r17, r25
    2b2c:	18 f4       	brcc	.+6      	; 0x2b34 <f_read+0x2d0>
					cc = fs->csize - csect;
    2b2e:	28 01       	movw	r4, r16
    2b30:	4a 18       	sub	r4, r10
    2b32:	5b 08       	sbc	r5, r11
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    2b34:	f1 01       	movw	r30, r2
    2b36:	81 81       	ldd	r24, Z+1	; 0x01
    2b38:	6d 81       	ldd	r22, Y+5	; 0x05
    2b3a:	7e 81       	ldd	r23, Y+6	; 0x06
    2b3c:	a7 01       	movw	r20, r14
    2b3e:	96 01       	movw	r18, r12
    2b40:	82 01       	movw	r16, r4
    2b42:	0e 94 8a 22 	call	0x4514	; 0x4514 <disk_read>
    2b46:	00 97       	sbiw	r24, 0x00	; 0
    2b48:	49 f4       	brne	.+18     	; 0x2b5c <f_read+0x2f8>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
    2b4a:	f4 01       	movw	r30, r8
    2b4c:	86 85       	ldd	r24, Z+14	; 0x0e
    2b4e:	87 fd       	sbrc	r24, 7
    2b50:	2a c0       	rjmp	.+84     	; 0x2ba6 <f_read+0x342>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
    2b52:	72 01       	movw	r14, r4
    2b54:	fe 2c       	mov	r15, r14
    2b56:	ee 24       	eor	r14, r14
    2b58:	ff 0c       	add	r15, r15
				continue;
    2b5a:	74 cf       	rjmp	.-280    	; 0x2a44 <f_read+0x1e0>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
					fp->flag &= ~FA_DIRTY;
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	f4 01       	movw	r30, r8
    2b60:	87 87       	std	Z+15, r24	; 0x0f
    2b62:	31 e0       	ldi	r19, 0x01	; 1
    2b64:	43 2e       	mov	r4, r19
    2b66:	51 2c       	mov	r5, r1
    2b68:	b4 ce       	rjmp	.-664    	; 0x28d2 <f_read+0x6e>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
    2b6a:	44 89       	ldd	r20, Z+20	; 0x14
    2b6c:	55 89       	ldd	r21, Z+21	; 0x15
    2b6e:	66 89       	ldd	r22, Z+22	; 0x16
    2b70:	77 89       	ldd	r23, Z+23	; 0x17
    2b72:	80 81       	ld	r24, Z
    2b74:	91 81       	ldd	r25, Z+1	; 0x01
    2b76:	0e 94 14 09 	call	0x1228	; 0x1228 <get_fat.isra.8>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	91 cf       	rjmp	.-222    	; 0x2aa2 <f_read+0x23e>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    2b80:	f1 01       	movw	r30, r2
    2b82:	81 81       	ldd	r24, Z+1	; 0x01
    2b84:	6f 81       	ldd	r22, Y+7	; 0x07
    2b86:	78 85       	ldd	r23, Y+8	; 0x08
    2b88:	a9 01       	movw	r20, r18
    2b8a:	98 01       	movw	r18, r16
    2b8c:	01 e0       	ldi	r16, 0x01	; 1
    2b8e:	10 e0       	ldi	r17, 0x00	; 0
    2b90:	0e 94 8d 22 	call	0x451a	; 0x451a <disk_write>
    2b94:	00 97       	sbiw	r24, 0x00	; 0
    2b96:	11 f7       	brne	.-60     	; 0x2b5c <f_read+0x2f8>
					fp->flag &= ~FA_DIRTY;
    2b98:	f4 01       	movw	r30, r8
    2b9a:	86 85       	ldd	r24, Z+14	; 0x0e
    2b9c:	8f 77       	andi	r24, 0x7F	; 127
    2b9e:	86 87       	std	Z+14, r24	; 0x0e
    2ba0:	29 80       	ldd	r2, Y+1	; 0x01
    2ba2:	3a 80       	ldd	r3, Y+2	; 0x02
    2ba4:	25 cf       	rjmp	.-438    	; 0x29f0 <f_read+0x18c>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
    2ba6:	40 8d       	ldd	r20, Z+24	; 0x18
    2ba8:	51 8d       	ldd	r21, Z+25	; 0x19
    2baa:	62 8d       	ldd	r22, Z+26	; 0x1a
    2bac:	73 8d       	ldd	r23, Z+27	; 0x1b
    2bae:	4c 19       	sub	r20, r12
    2bb0:	5d 09       	sbc	r21, r13
    2bb2:	6e 09       	sbc	r22, r14
    2bb4:	7f 09       	sbc	r23, r15
    2bb6:	c2 01       	movw	r24, r4
    2bb8:	a0 e0       	ldi	r26, 0x00	; 0
    2bba:	b0 e0       	ldi	r27, 0x00	; 0
    2bbc:	48 17       	cp	r20, r24
    2bbe:	59 07       	cpc	r21, r25
    2bc0:	6a 07       	cpc	r22, r26
    2bc2:	7b 07       	cpc	r23, r27
    2bc4:	30 f6       	brcc	.-116    	; 0x2b52 <f_read+0x2ee>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
    2bc6:	ca 01       	movw	r24, r20
    2bc8:	98 2f       	mov	r25, r24
    2bca:	88 27       	eor	r24, r24
    2bcc:	99 0f       	add	r25, r25
    2bce:	2d 81       	ldd	r18, Y+5	; 0x05
    2bd0:	3e 81       	ldd	r19, Y+6	; 0x06
    2bd2:	82 0f       	add	r24, r18
    2bd4:	93 1f       	adc	r25, r19
    2bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd8:	78 85       	ldd	r23, Y+8	; 0x08
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	52 e0       	ldi	r21, 0x02	; 2
    2bde:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mem_cpy>
    2be2:	b7 cf       	rjmp	.-146    	; 0x2b52 <f_read+0x2ee>

00002be4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
    2be4:	2f 92       	push	r2
    2be6:	3f 92       	push	r3
    2be8:	4f 92       	push	r4
    2bea:	5f 92       	push	r5
    2bec:	6f 92       	push	r6
    2bee:	7f 92       	push	r7
    2bf0:	8f 92       	push	r8
    2bf2:	9f 92       	push	r9
    2bf4:	af 92       	push	r10
    2bf6:	bf 92       	push	r11
    2bf8:	cf 92       	push	r12
    2bfa:	df 92       	push	r13
    2bfc:	ef 92       	push	r14
    2bfe:	ff 92       	push	r15
    2c00:	0f 93       	push	r16
    2c02:	1f 93       	push	r17
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	2c 97       	sbiw	r28, 0x0c	; 12
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	7c 01       	movw	r14, r24
    2c1a:	06 2f       	mov	r16, r22
    2c1c:	87 2e       	mov	r8, r23
    2c1e:	3a 01       	movw	r6, r20
    2c20:	3c 83       	std	Y+4, r19	; 0x04
    2c22:	2b 83       	std	Y+3, r18	; 0x03
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
    2c24:	d9 01       	movw	r26, r18
    2c26:	1d 92       	st	X+, r1
    2c28:	1c 92       	st	X, r1
	res = validate(fp, &fs);
    2c2a:	be 01       	movw	r22, r28
    2c2c:	6f 5f       	subi	r22, 0xFF	; 255
    2c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c30:	0e 94 97 01 	call	0x32e	; 0x32e <validate>
    2c34:	1c 01       	movw	r2, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    2c36:	00 97       	sbiw	r24, 0x00	; 0
    2c38:	61 f4       	brne	.+24     	; 0x2c52 <f_write+0x6e>
    2c3a:	f7 01       	movw	r30, r14
    2c3c:	27 84       	ldd	r2, Z+15	; 0x0f
    2c3e:	33 24       	eor	r3, r3
    2c40:	21 14       	cp	r2, r1
    2c42:	31 04       	cpc	r3, r1
    2c44:	31 f4       	brne	.+12     	; 0x2c52 <f_write+0x6e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    2c46:	26 85       	ldd	r18, Z+14	; 0x0e
    2c48:	21 fd       	sbrc	r18, 1
    2c4a:	1d c0       	rjmp	.+58     	; 0x2c86 <f_write+0xa2>
    2c4c:	57 e0       	ldi	r21, 0x07	; 7
    2c4e:	25 2e       	mov	r2, r21
    2c50:	31 2c       	mov	r3, r1
	}

	fp->flag |= FA_MODIFIED;						/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
    2c52:	c1 01       	movw	r24, r2
    2c54:	2c 96       	adiw	r28, 0x0c	; 12
    2c56:	0f b6       	in	r0, 0x3f	; 63
    2c58:	f8 94       	cli
    2c5a:	de bf       	out	0x3e, r29	; 62
    2c5c:	0f be       	out	0x3f, r0	; 63
    2c5e:	cd bf       	out	0x3d, r28	; 61
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	1f 91       	pop	r17
    2c66:	0f 91       	pop	r16
    2c68:	ff 90       	pop	r15
    2c6a:	ef 90       	pop	r14
    2c6c:	df 90       	pop	r13
    2c6e:	cf 90       	pop	r12
    2c70:	bf 90       	pop	r11
    2c72:	af 90       	pop	r10
    2c74:	9f 90       	pop	r9
    2c76:	8f 90       	pop	r8
    2c78:	7f 90       	pop	r7
    2c7a:	6f 90       	pop	r6
    2c7c:	5f 90       	pop	r5
    2c7e:	4f 90       	pop	r4
    2c80:	3f 90       	pop	r3
    2c82:	2f 90       	pop	r2
    2c84:	08 95       	ret
	res = validate(fp, &fs);
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
    2c86:	40 89       	ldd	r20, Z+16	; 0x10
    2c88:	51 89       	ldd	r21, Z+17	; 0x11
    2c8a:	62 89       	ldd	r22, Z+18	; 0x12
    2c8c:	73 89       	ldd	r23, Z+19	; 0x13
    2c8e:	c3 01       	movw	r24, r6
    2c90:	a0 e0       	ldi	r26, 0x00	; 0
    2c92:	b0 e0       	ldi	r27, 0x00	; 0
    2c94:	84 0f       	add	r24, r20
    2c96:	95 1f       	adc	r25, r21
    2c98:	a6 1f       	adc	r26, r22
    2c9a:	b7 1f       	adc	r27, r23
    2c9c:	84 17       	cp	r24, r20
    2c9e:	95 07       	cpc	r25, r21
    2ca0:	a6 07       	cpc	r26, r22
    2ca2:	b7 07       	cpc	r27, r23
    2ca4:	18 f4       	brcc	.+6      	; 0x2cac <f_write+0xc8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
    2ca6:	3a 01       	movw	r6, r20
    2ca8:	60 94       	com	r6
    2caa:	70 94       	com	r7
	}

	for ( ;  btw;							/* Repeat until all data written */
    2cac:	61 14       	cp	r6, r1
    2cae:	71 04       	cpc	r7, r1
    2cb0:	09 f4       	brne	.+2      	; 0x2cb4 <f_write+0xd0>
    2cb2:	00 c1       	rjmp	.+512    	; 0x2eb4 <f_write+0x2d0>
    2cb4:	0d 83       	std	Y+5, r16	; 0x05
    2cb6:	8e 82       	std	Y+6, r8	; 0x06
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
    2cb8:	97 01       	movw	r18, r14
    2cba:	2e 5d       	subi	r18, 0xDE	; 222
    2cbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbe:	3a 87       	std	Y+10, r19	; 0x0a
    2cc0:	29 87       	std	Y+9, r18	; 0x09
    2cc2:	3c 86       	std	Y+12, r3	; 0x0c
    2cc4:	2b 86       	std	Y+11, r2	; 0x0b
    2cc6:	23 01       	movw	r4, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
    2cc8:	db 01       	movw	r26, r22
    2cca:	ca 01       	movw	r24, r20
    2ccc:	91 70       	andi	r25, 0x01	; 1
    2cce:	a0 70       	andi	r26, 0x00	; 0
    2cd0:	b0 70       	andi	r27, 0x00	; 0
    2cd2:	00 97       	sbiw	r24, 0x00	; 0
    2cd4:	a1 05       	cpc	r26, r1
    2cd6:	b1 05       	cpc	r27, r1
    2cd8:	09 f0       	breq	.+2      	; 0x2cdc <f_write+0xf8>
    2cda:	91 c0       	rjmp	.+290    	; 0x2dfe <f_write+0x21a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
    2cdc:	29 80       	ldd	r2, Y+1	; 0x01
    2cde:	3a 80       	ldd	r3, Y+2	; 0x02
    2ce0:	db 01       	movw	r26, r22
    2ce2:	ca 01       	movw	r24, r20
    2ce4:	09 e0       	ldi	r16, 0x09	; 9
    2ce6:	b6 95       	lsr	r27
    2ce8:	a7 95       	ror	r26
    2cea:	97 95       	ror	r25
    2cec:	87 95       	ror	r24
    2cee:	0a 95       	dec	r16
    2cf0:	d1 f7       	brne	.-12     	; 0x2ce6 <f_write+0x102>
    2cf2:	f1 01       	movw	r30, r2
    2cf4:	c1 84       	ldd	r12, Z+9	; 0x09
    2cf6:	d2 84       	ldd	r13, Z+10	; 0x0a
    2cf8:	08 94       	sec
    2cfa:	c1 08       	sbc	r12, r1
    2cfc:	d1 08       	sbc	r13, r1
    2cfe:	c8 22       	and	r12, r24
    2d00:	d9 22       	and	r13, r25
			if (csect == 0) {				/* On the cluster boundary? */
    2d02:	c1 14       	cp	r12, r1
    2d04:	d1 04       	cpc	r13, r1
    2d06:	99 f5       	brne	.+102    	; 0x2d6e <f_write+0x18a>
				if (fp->fptr == 0) {		/* On the top of the file? */
    2d08:	41 15       	cp	r20, r1
    2d0a:	51 05       	cpc	r21, r1
    2d0c:	61 05       	cpc	r22, r1
    2d0e:	71 05       	cpc	r23, r1
    2d10:	09 f0       	breq	.+2      	; 0x2d14 <f_write+0x130>
    2d12:	3c c1       	rjmp	.+632    	; 0x2f8c <f_write+0x3a8>
					clst = fp->obj.sclust;	/* Follow from the origin */
    2d14:	f7 01       	movw	r30, r14
    2d16:	86 81       	ldd	r24, Z+6	; 0x06
    2d18:	97 81       	ldd	r25, Z+7	; 0x07
    2d1a:	a0 85       	ldd	r26, Z+8	; 0x08
    2d1c:	b1 85       	ldd	r27, Z+9	; 0x09
					if (clst == 0) {		/* If no cluster is allocated, */
    2d1e:	00 97       	sbiw	r24, 0x00	; 0
    2d20:	a1 05       	cpc	r26, r1
    2d22:	b1 05       	cpc	r27, r1
    2d24:	09 f4       	brne	.+2      	; 0x2d28 <f_write+0x144>
    2d26:	5f c1       	rjmp	.+702    	; 0x2fe6 <f_write+0x402>
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
				if (clst == 1) ABORT(fs, FR_INT_ERR);
    2d28:	81 30       	cpi	r24, 0x01	; 1
    2d2a:	91 05       	cpc	r25, r1
    2d2c:	a1 05       	cpc	r26, r1
    2d2e:	b1 05       	cpc	r27, r1
    2d30:	e9 f1       	breq	.+122    	; 0x2dac <f_write+0x1c8>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    2d32:	8f 3f       	cpi	r24, 0xFF	; 255
    2d34:	ef ef       	ldi	r30, 0xFF	; 255
    2d36:	9e 07       	cpc	r25, r30
    2d38:	ef ef       	ldi	r30, 0xFF	; 255
    2d3a:	ae 07       	cpc	r26, r30
    2d3c:	ef ef       	ldi	r30, 0xFF	; 255
    2d3e:	be 07       	cpc	r27, r30
    2d40:	09 f4       	brne	.+2      	; 0x2d44 <f_write+0x160>
    2d42:	68 c1       	rjmp	.+720    	; 0x3014 <f_write+0x430>
				fp->clust = clst;			/* Update current cluster */
    2d44:	f7 01       	movw	r30, r14
    2d46:	84 8b       	std	Z+20, r24	; 0x14
    2d48:	95 8b       	std	Z+21, r25	; 0x15
    2d4a:	a6 8b       	std	Z+22, r26	; 0x16
    2d4c:	b7 8b       	std	Z+23, r27	; 0x17
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
    2d4e:	46 81       	ldd	r20, Z+6	; 0x06
    2d50:	57 81       	ldd	r21, Z+7	; 0x07
    2d52:	60 85       	ldd	r22, Z+8	; 0x08
    2d54:	71 85       	ldd	r23, Z+9	; 0x09
    2d56:	41 15       	cp	r20, r1
    2d58:	51 05       	cpc	r21, r1
    2d5a:	61 05       	cpc	r22, r1
    2d5c:	71 05       	cpc	r23, r1
    2d5e:	29 f4       	brne	.+10     	; 0x2d6a <f_write+0x186>
    2d60:	f7 01       	movw	r30, r14
    2d62:	86 83       	std	Z+6, r24	; 0x06
    2d64:	97 83       	std	Z+7, r25	; 0x07
    2d66:	a0 87       	std	Z+8, r26	; 0x08
    2d68:	b1 87       	std	Z+9, r27	; 0x09
    2d6a:	29 80       	ldd	r2, Y+1	; 0x01
    2d6c:	3a 80       	ldd	r3, Y+2	; 0x02
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
    2d6e:	d7 01       	movw	r26, r14
    2d70:	1e 96       	adiw	r26, 0x0e	; 14
    2d72:	8c 91       	ld	r24, X
    2d74:	1e 97       	sbiw	r26, 0x0e	; 14
    2d76:	87 fd       	sbrc	r24, 7
    2d78:	1f c1       	rjmp	.+574    	; 0x2fb8 <f_write+0x3d4>
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    2d7a:	d7 01       	movw	r26, r14
    2d7c:	54 96       	adiw	r26, 0x14	; 20
    2d7e:	0d 91       	ld	r16, X+
    2d80:	1d 91       	ld	r17, X+
    2d82:	2d 91       	ld	r18, X+
    2d84:	3c 91       	ld	r19, X
    2d86:	57 97       	sbiw	r26, 0x17	; 23
    2d88:	02 50       	subi	r16, 0x02	; 2
    2d8a:	10 40       	sbci	r17, 0x00	; 0
    2d8c:	20 40       	sbci	r18, 0x00	; 0
    2d8e:	30 40       	sbci	r19, 0x00	; 0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    2d90:	f1 01       	movw	r30, r2
    2d92:	83 89       	ldd	r24, Z+19	; 0x13
    2d94:	94 89       	ldd	r25, Z+20	; 0x14
    2d96:	a5 89       	ldd	r26, Z+21	; 0x15
    2d98:	b6 89       	ldd	r27, Z+22	; 0x16
    2d9a:	02 97       	sbiw	r24, 0x02	; 2
    2d9c:	a1 09       	sbc	r26, r1
    2d9e:	b1 09       	sbc	r27, r1
    2da0:	08 17       	cp	r16, r24
    2da2:	19 07       	cpc	r17, r25
    2da4:	2a 07       	cpc	r18, r26
    2da6:	3b 07       	cpc	r19, r27
    2da8:	08 f4       	brcc	.+2      	; 0x2dac <f_write+0x1c8>
    2daa:	88 c0       	rjmp	.+272    	; 0x2ebc <f_write+0x2d8>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= ~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
    2dac:	82 e0       	ldi	r24, 0x02	; 2
    2dae:	d7 01       	movw	r26, r14
    2db0:	1f 96       	adiw	r26, 0x0f	; 15
    2db2:	8c 93       	st	X, r24
    2db4:	1f 97       	sbiw	r26, 0x0f	; 15
    2db6:	12 e0       	ldi	r17, 0x02	; 2
    2db8:	21 2e       	mov	r2, r17
    2dba:	31 2c       	mov	r3, r1
    2dbc:	4a cf       	rjmp	.-364    	; 0x2c52 <f_write+0x6e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
    2dbe:	f7 01       	movw	r30, r14
    2dc0:	80 8d       	ldd	r24, Z+24	; 0x18
    2dc2:	91 8d       	ldd	r25, Z+25	; 0x19
    2dc4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2dc6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2dc8:	88 15       	cp	r24, r8
    2dca:	99 05       	cpc	r25, r9
    2dcc:	aa 05       	cpc	r26, r10
    2dce:	bb 05       	cpc	r27, r11
    2dd0:	09 f4       	brne	.+2      	; 0x2dd4 <f_write+0x1f0>
    2dd2:	cf c0       	rjmp	.+414    	; 0x2f72 <f_write+0x38e>
				fp->fptr < fp->obj.objsize &&
    2dd4:	40 89       	ldd	r20, Z+16	; 0x10
    2dd6:	51 89       	ldd	r21, Z+17	; 0x11
    2dd8:	62 89       	ldd	r22, Z+18	; 0x12
    2dda:	73 89       	ldd	r23, Z+19	; 0x13
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
    2ddc:	82 85       	ldd	r24, Z+10	; 0x0a
    2dde:	93 85       	ldd	r25, Z+11	; 0x0b
    2de0:	a4 85       	ldd	r26, Z+12	; 0x0c
    2de2:	b5 85       	ldd	r27, Z+13	; 0x0d
    2de4:	48 17       	cp	r20, r24
    2de6:	59 07       	cpc	r21, r25
    2de8:	6a 07       	cpc	r22, r26
    2dea:	7b 07       	cpc	r23, r27
    2dec:	08 f4       	brcc	.+2      	; 0x2df0 <f_write+0x20c>
    2dee:	04 c1       	rjmp	.+520    	; 0x2ff8 <f_write+0x414>
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
			}
#endif
			fp->sect = sect;
    2df0:	d7 01       	movw	r26, r14
    2df2:	58 96       	adiw	r26, 0x18	; 24
    2df4:	8d 92       	st	X+, r8
    2df6:	9d 92       	st	X+, r9
    2df8:	ad 92       	st	X+, r10
    2dfa:	bc 92       	st	X, r11
    2dfc:	5b 97       	sbiw	r26, 0x1b	; 27
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
    2dfe:	ca 01       	movw	r24, r20
    2e00:	91 70       	andi	r25, 0x01	; 1
    2e02:	00 e0       	ldi	r16, 0x00	; 0
    2e04:	12 e0       	ldi	r17, 0x02	; 2
    2e06:	08 1b       	sub	r16, r24
    2e08:	19 0b       	sbc	r17, r25
    2e0a:	40 16       	cp	r4, r16
    2e0c:	51 06       	cpc	r5, r17
    2e0e:	08 f4       	brcc	.+2      	; 0x2e12 <f_write+0x22e>
    2e10:	82 01       	movw	r16, r4
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
    2e12:	82 96       	adiw	r24, 0x22	; 34
    2e14:	8e 0d       	add	r24, r14
    2e16:	9f 1d       	adc	r25, r15
    2e18:	6d 81       	ldd	r22, Y+5	; 0x05
    2e1a:	7e 81       	ldd	r23, Y+6	; 0x06
    2e1c:	a8 01       	movw	r20, r16
    2e1e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mem_cpy>
		fp->flag |= FA_DIRTY;
    2e22:	f7 01       	movw	r30, r14
    2e24:	86 85       	ldd	r24, Z+14	; 0x0e
    2e26:	80 68       	ori	r24, 0x80	; 128
    2e28:	86 87       	std	Z+14, r24	; 0x0e
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
    2e2a:	2d 81       	ldd	r18, Y+5	; 0x05
    2e2c:	3e 81       	ldd	r19, Y+6	; 0x06
    2e2e:	20 0f       	add	r18, r16
    2e30:	31 1f       	adc	r19, r17
    2e32:	3e 83       	std	Y+6, r19	; 0x06
    2e34:	2d 83       	std	Y+5, r18	; 0x05
    2e36:	a8 01       	movw	r20, r16
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	70 e0       	ldi	r23, 0x00	; 0
    2e3c:	f7 01       	movw	r30, r14
    2e3e:	80 89       	ldd	r24, Z+16	; 0x10
    2e40:	91 89       	ldd	r25, Z+17	; 0x11
    2e42:	a2 89       	ldd	r26, Z+18	; 0x12
    2e44:	b3 89       	ldd	r27, Z+19	; 0x13
    2e46:	48 0f       	add	r20, r24
    2e48:	59 1f       	adc	r21, r25
    2e4a:	6a 1f       	adc	r22, r26
    2e4c:	7b 1f       	adc	r23, r27
    2e4e:	40 8b       	std	Z+16, r20	; 0x10
    2e50:	51 8b       	std	Z+17, r21	; 0x11
    2e52:	62 8b       	std	Z+18, r22	; 0x12
    2e54:	73 8b       	std	Z+19, r23	; 0x13
    2e56:	82 85       	ldd	r24, Z+10	; 0x0a
    2e58:	93 85       	ldd	r25, Z+11	; 0x0b
    2e5a:	a4 85       	ldd	r26, Z+12	; 0x0c
    2e5c:	b5 85       	ldd	r27, Z+13	; 0x0d
    2e5e:	f4 2f       	mov	r31, r20
    2e60:	e5 2f       	mov	r30, r21
    2e62:	36 2f       	mov	r19, r22
    2e64:	27 2f       	mov	r18, r23
    2e66:	48 17       	cp	r20, r24
    2e68:	59 07       	cpc	r21, r25
    2e6a:	6a 07       	cpc	r22, r26
    2e6c:	7b 07       	cpc	r23, r27
    2e6e:	20 f4       	brcc	.+8      	; 0x2e78 <f_write+0x294>
    2e70:	f8 2f       	mov	r31, r24
    2e72:	e9 2f       	mov	r30, r25
    2e74:	3a 2f       	mov	r19, r26
    2e76:	2b 2f       	mov	r18, r27
    2e78:	d7 01       	movw	r26, r14
    2e7a:	1a 96       	adiw	r26, 0x0a	; 10
    2e7c:	fc 93       	st	X, r31
    2e7e:	1a 97       	sbiw	r26, 0x0a	; 10
    2e80:	1b 96       	adiw	r26, 0x0b	; 11
    2e82:	ec 93       	st	X, r30
    2e84:	1b 97       	sbiw	r26, 0x0b	; 11
    2e86:	1c 96       	adiw	r26, 0x0c	; 12
    2e88:	3c 93       	st	X, r19
    2e8a:	1c 97       	sbiw	r26, 0x0c	; 12
    2e8c:	1d 96       	adiw	r26, 0x0d	; 13
    2e8e:	2c 93       	st	X, r18
    2e90:	1d 97       	sbiw	r26, 0x0d	; 13
    2e92:	eb 81       	ldd	r30, Y+3	; 0x03
    2e94:	fc 81       	ldd	r31, Y+4	; 0x04
    2e96:	80 81       	ld	r24, Z
    2e98:	91 81       	ldd	r25, Z+1	; 0x01
    2e9a:	80 0f       	add	r24, r16
    2e9c:	91 1f       	adc	r25, r17
    2e9e:	91 83       	std	Z+1, r25	; 0x01
    2ea0:	80 83       	st	Z, r24
    2ea2:	40 1a       	sub	r4, r16
    2ea4:	51 0a       	sbc	r5, r17
	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
    2ea6:	09 f0       	breq	.+2      	; 0x2eaa <f_write+0x2c6>
    2ea8:	0f cf       	rjmp	.-482    	; 0x2cc8 <f_write+0xe4>
    2eaa:	2b 84       	ldd	r2, Y+11	; 0x0b
    2eac:	3c 84       	ldd	r3, Y+12	; 0x0c
    2eae:	1e 96       	adiw	r26, 0x0e	; 14
    2eb0:	2c 91       	ld	r18, X
    2eb2:	1e 97       	sbiw	r26, 0x0e	; 14
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;						/* Set file change flag */
    2eb4:	20 64       	ori	r18, 0x40	; 64
    2eb6:	f7 01       	movw	r30, r14
    2eb8:	26 87       	std	Z+14, r18	; 0x0e

	LEAVE_FF(fs, FR_OK);
    2eba:	cb ce       	rjmp	.-618    	; 0x2c52 <f_write+0x6e>
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
	return clst * fs->csize + fs->database;
    2ebc:	41 85       	ldd	r20, Z+9	; 0x09
    2ebe:	52 85       	ldd	r21, Z+10	; 0x0a
    2ec0:	58 87       	std	Y+8, r21	; 0x08
    2ec2:	4f 83       	std	Y+7, r20	; 0x07
    2ec4:	ba 01       	movw	r22, r20
    2ec6:	80 e0       	ldi	r24, 0x00	; 0
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	a9 01       	movw	r20, r18
    2ecc:	98 01       	movw	r18, r16
    2ece:	0e 94 23 29 	call	0x5246	; 0x5246 <__mulsi3>
    2ed2:	ab 01       	movw	r20, r22
    2ed4:	bc 01       	movw	r22, r24
    2ed6:	f1 01       	movw	r30, r2
    2ed8:	87 a1       	lds	r24, 0x47
    2eda:	90 a5       	lds	r25, 0x60
    2edc:	a1 a5       	lds	r26, 0x61
    2ede:	b2 a5       	lds	r27, 0x62
    2ee0:	48 0f       	add	r20, r24
    2ee2:	59 1f       	adc	r21, r25
    2ee4:	6a 1f       	adc	r22, r26
    2ee6:	7b 1f       	adc	r23, r27
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= ~FA_DIRTY;
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fs, FR_INT_ERR);
    2ee8:	41 15       	cp	r20, r1
    2eea:	51 05       	cpc	r21, r1
    2eec:	61 05       	cpc	r22, r1
    2eee:	71 05       	cpc	r23, r1
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <f_write+0x310>
    2ef2:	5c cf       	rjmp	.-328    	; 0x2dac <f_write+0x1c8>
			sect += csect;
    2ef4:	46 01       	movw	r8, r12
    2ef6:	aa 24       	eor	r10, r10
    2ef8:	bb 24       	eor	r11, r11
    2efa:	84 0e       	add	r8, r20
    2efc:	95 1e       	adc	r9, r21
    2efe:	a6 1e       	adc	r10, r22
    2f00:	b7 1e       	adc	r11, r23
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
    2f02:	32 01       	movw	r6, r4
    2f04:	67 2c       	mov	r6, r7
    2f06:	77 24       	eor	r7, r7
    2f08:	66 94       	lsr	r6
			if (cc) {						/* Write maximum contiguous sectors directly */
    2f0a:	61 14       	cp	r6, r1
    2f0c:	71 04       	cpc	r7, r1
    2f0e:	09 f4       	brne	.+2      	; 0x2f12 <f_write+0x32e>
    2f10:	56 cf       	rjmp	.-340    	; 0x2dbe <f_write+0x1da>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
    2f12:	c6 01       	movw	r24, r12
    2f14:	86 0d       	add	r24, r6
    2f16:	97 1d       	adc	r25, r7
    2f18:	ef 81       	ldd	r30, Y+7	; 0x07
    2f1a:	f8 85       	ldd	r31, Y+8	; 0x08
    2f1c:	e8 17       	cp	r30, r24
    2f1e:	f9 07       	cpc	r31, r25
    2f20:	18 f4       	brcc	.+6      	; 0x2f28 <f_write+0x344>
					cc = fs->csize - csect;
    2f22:	3f 01       	movw	r6, r30
    2f24:	6c 18       	sub	r6, r12
    2f26:	7d 08       	sbc	r7, r13
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    2f28:	d1 01       	movw	r26, r2
    2f2a:	11 96       	adiw	r26, 0x01	; 1
    2f2c:	8c 91       	ld	r24, X
    2f2e:	6d 81       	ldd	r22, Y+5	; 0x05
    2f30:	7e 81       	ldd	r23, Y+6	; 0x06
    2f32:	a5 01       	movw	r20, r10
    2f34:	94 01       	movw	r18, r8
    2f36:	83 01       	movw	r16, r6
    2f38:	0e 94 8d 22 	call	0x451a	; 0x451a <disk_write>
    2f3c:	00 97       	sbiw	r24, 0x00	; 0
    2f3e:	f9 f4       	brne	.+62     	; 0x2f7e <f_write+0x39a>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
    2f40:	d7 01       	movw	r26, r14
    2f42:	58 96       	adiw	r26, 0x18	; 24
    2f44:	4d 91       	ld	r20, X+
    2f46:	5d 91       	ld	r21, X+
    2f48:	6d 91       	ld	r22, X+
    2f4a:	7c 91       	ld	r23, X
    2f4c:	5b 97       	sbiw	r26, 0x1b	; 27
    2f4e:	48 19       	sub	r20, r8
    2f50:	59 09       	sbc	r21, r9
    2f52:	6a 09       	sbc	r22, r10
    2f54:	7b 09       	sbc	r23, r11
    2f56:	c3 01       	movw	r24, r6
    2f58:	a0 e0       	ldi	r26, 0x00	; 0
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	48 17       	cp	r20, r24
    2f5e:	59 07       	cpc	r21, r25
    2f60:	6a 07       	cpc	r22, r26
    2f62:	7b 07       	cpc	r23, r27
    2f64:	08 f4       	brcc	.+2      	; 0x2f68 <f_write+0x384>
    2f66:	5f c0       	rjmp	.+190    	; 0x3026 <f_write+0x442>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
					fp->flag &= ~FA_DIRTY;
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
    2f68:	83 01       	movw	r16, r6
    2f6a:	10 2f       	mov	r17, r16
    2f6c:	00 27       	eor	r16, r16
    2f6e:	11 0f       	add	r17, r17
				continue;
    2f70:	5c cf       	rjmp	.-328    	; 0x2e2a <f_write+0x246>
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
    2f72:	f7 01       	movw	r30, r14
    2f74:	40 89       	ldd	r20, Z+16	; 0x10
    2f76:	51 89       	ldd	r21, Z+17	; 0x11
    2f78:	62 89       	ldd	r22, Z+18	; 0x12
    2f7a:	73 89       	ldd	r23, Z+19	; 0x13
    2f7c:	39 cf       	rjmp	.-398    	; 0x2df0 <f_write+0x20c>
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
					cc = fs->csize - csect;
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	f7 01       	movw	r30, r14
    2f82:	87 87       	std	Z+15, r24	; 0x0f
    2f84:	a1 e0       	ldi	r26, 0x01	; 1
    2f86:	2a 2e       	mov	r2, r26
    2f88:	31 2c       	mov	r3, r1
    2f8a:	63 ce       	rjmp	.-826    	; 0x2c52 <f_write+0x6e>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
    2f8c:	d7 01       	movw	r26, r14
    2f8e:	54 96       	adiw	r26, 0x14	; 20
    2f90:	4d 91       	ld	r20, X+
    2f92:	5d 91       	ld	r21, X+
    2f94:	6d 91       	ld	r22, X+
    2f96:	7c 91       	ld	r23, X
    2f98:	57 97       	sbiw	r26, 0x17	; 23
    2f9a:	c7 01       	movw	r24, r14
    2f9c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <create_chain>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
    2fa4:	00 97       	sbiw	r24, 0x00	; 0
    2fa6:	a1 05       	cpc	r26, r1
    2fa8:	b1 05       	cpc	r27, r1
    2faa:	09 f0       	breq	.+2      	; 0x2fae <f_write+0x3ca>
    2fac:	bd ce       	rjmp	.-646    	; 0x2d28 <f_write+0x144>
    2fae:	2b 84       	ldd	r2, Y+11	; 0x0b
    2fb0:	3c 84       	ldd	r3, Y+12	; 0x0c
    2fb2:	f7 01       	movw	r30, r14
    2fb4:	26 85       	ldd	r18, Z+14	; 0x0e
    2fb6:	7e cf       	rjmp	.-260    	; 0x2eb4 <f_write+0x2d0>
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    2fb8:	58 96       	adiw	r26, 0x18	; 24
    2fba:	2d 91       	ld	r18, X+
    2fbc:	3d 91       	ld	r19, X+
    2fbe:	4d 91       	ld	r20, X+
    2fc0:	5c 91       	ld	r21, X
    2fc2:	5b 97       	sbiw	r26, 0x1b	; 27
    2fc4:	f1 01       	movw	r30, r2
    2fc6:	81 81       	ldd	r24, Z+1	; 0x01
    2fc8:	69 85       	ldd	r22, Y+9	; 0x09
    2fca:	7a 85       	ldd	r23, Y+10	; 0x0a
    2fcc:	01 e0       	ldi	r16, 0x01	; 1
    2fce:	10 e0       	ldi	r17, 0x00	; 0
    2fd0:	0e 94 8d 22 	call	0x451a	; 0x451a <disk_write>
    2fd4:	00 97       	sbiw	r24, 0x00	; 0
    2fd6:	f1 f4       	brne	.+60     	; 0x3014 <f_write+0x430>
				fp->flag &= ~FA_DIRTY;
    2fd8:	f7 01       	movw	r30, r14
    2fda:	86 85       	ldd	r24, Z+14	; 0x0e
    2fdc:	8f 77       	andi	r24, 0x7F	; 127
    2fde:	86 87       	std	Z+14, r24	; 0x0e
    2fe0:	29 80       	ldd	r2, Y+1	; 0x01
    2fe2:	3a 80       	ldd	r3, Y+2	; 0x02
    2fe4:	ca ce       	rjmp	.-620    	; 0x2d7a <f_write+0x196>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
			if (csect == 0) {				/* On the cluster boundary? */
				if (fp->fptr == 0) {		/* On the top of the file? */
					clst = fp->obj.sclust;	/* Follow from the origin */
					if (clst == 0) {		/* If no cluster is allocated, */
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
    2fe6:	c7 01       	movw	r24, r14
    2fe8:	40 e0       	ldi	r20, 0x00	; 0
    2fea:	50 e0       	ldi	r21, 0x00	; 0
    2fec:	ba 01       	movw	r22, r20
    2fee:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <create_chain>
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	cb 01       	movw	r24, r22
    2ff6:	d6 cf       	rjmp	.-84     	; 0x2fa4 <f_write+0x3c0>
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
    2ff8:	d1 01       	movw	r26, r2
    2ffa:	11 96       	adiw	r26, 0x01	; 1
    2ffc:	8c 91       	ld	r24, X
    2ffe:	69 85       	ldd	r22, Y+9	; 0x09
    3000:	7a 85       	ldd	r23, Y+10	; 0x0a
    3002:	a5 01       	movw	r20, r10
    3004:	94 01       	movw	r18, r8
    3006:	01 e0       	ldi	r16, 0x01	; 1
    3008:	10 e0       	ldi	r17, 0x00	; 0
    300a:	0e 94 8a 22 	call	0x4514	; 0x4514 <disk_read>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
				fp->fptr < fp->obj.objsize &&
    300e:	00 97       	sbiw	r24, 0x00	; 0
    3010:	09 f4       	brne	.+2      	; 0x3014 <f_write+0x430>
    3012:	af cf       	rjmp	.-162    	; 0x2f72 <f_write+0x38e>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
					ABORT(fs, FR_DISK_ERR);
    3014:	81 e0       	ldi	r24, 0x01	; 1
    3016:	d7 01       	movw	r26, r14
    3018:	1f 96       	adiw	r26, 0x0f	; 15
    301a:	8c 93       	st	X, r24
    301c:	1f 97       	sbiw	r26, 0x0f	; 15
    301e:	61 e0       	ldi	r22, 0x01	; 1
    3020:	26 2e       	mov	r2, r22
    3022:	31 2c       	mov	r3, r1
    3024:	16 ce       	rjmp	.-980    	; 0x2c52 <f_write+0x6e>
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
    3026:	ba 01       	movw	r22, r20
    3028:	76 2f       	mov	r23, r22
    302a:	66 27       	eor	r22, r22
    302c:	77 0f       	add	r23, r23
    302e:	ed 81       	ldd	r30, Y+5	; 0x05
    3030:	fe 81       	ldd	r31, Y+6	; 0x06
    3032:	6e 0f       	add	r22, r30
    3034:	7f 1f       	adc	r23, r31
    3036:	89 85       	ldd	r24, Y+9	; 0x09
    3038:	9a 85       	ldd	r25, Y+10	; 0x0a
    303a:	40 e0       	ldi	r20, 0x00	; 0
    303c:	52 e0       	ldi	r21, 0x02	; 2
    303e:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mem_cpy>
					fp->flag &= ~FA_DIRTY;
    3042:	d7 01       	movw	r26, r14
    3044:	1e 96       	adiw	r26, 0x0e	; 14
    3046:	8c 91       	ld	r24, X
    3048:	1e 97       	sbiw	r26, 0x0e	; 14
    304a:	8f 77       	andi	r24, 0x7F	; 127
    304c:	1e 96       	adiw	r26, 0x0e	; 14
    304e:	8c 93       	st	X, r24
    3050:	1e 97       	sbiw	r26, 0x0e	; 14
    3052:	8a cf       	rjmp	.-236    	; 0x2f68 <f_write+0x384>

00003054 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
    3054:	ef 92       	push	r14
    3056:	ff 92       	push	r15
    3058:	0f 93       	push	r16
    305a:	1f 93       	push	r17
    305c:	cf 93       	push	r28
    305e:	df 93       	push	r29
    3060:	00 d0       	rcall	.+0      	; 0x3062 <f_sync+0xe>
    3062:	cd b7       	in	r28, 0x3d	; 61
    3064:	de b7       	in	r29, 0x3e	; 62
    3066:	7c 01       	movw	r14, r24
	DWORD tm;
	BYTE *dir;
	DEF_NAMBUF


	res = validate(fp, &fs);	/* Check validity of the object */
    3068:	be 01       	movw	r22, r28
    306a:	6f 5f       	subi	r22, 0xFF	; 255
    306c:	7f 4f       	sbci	r23, 0xFF	; 255
    306e:	0e 94 97 01 	call	0x32e	; 0x32e <validate>
	if (res == FR_OK) {
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	09 f0       	breq	.+2      	; 0x3078 <f_sync+0x24>
    3076:	55 c0       	rjmp	.+170    	; 0x3122 <f_sync+0xce>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
    3078:	d7 01       	movw	r26, r14
    307a:	1e 96       	adiw	r26, 0x0e	; 14
    307c:	2c 91       	ld	r18, X
    307e:	1e 97       	sbiw	r26, 0x0e	; 14
    3080:	26 ff       	sbrs	r18, 6
    3082:	4f c0       	rjmp	.+158    	; 0x3122 <f_sync+0xce>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
    3084:	27 fd       	sbrc	r18, 7
    3086:	56 c0       	rjmp	.+172    	; 0x3134 <f_sync+0xe0>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
    3088:	d7 01       	movw	r26, r14
    308a:	5c 96       	adiw	r26, 0x1c	; 28
    308c:	4d 91       	ld	r20, X+
    308e:	5d 91       	ld	r21, X+
    3090:	6d 91       	ld	r22, X+
    3092:	7c 91       	ld	r23, X
    3094:	5f 97       	sbiw	r26, 0x1f	; 31
    3096:	89 81       	ldd	r24, Y+1	; 0x01
    3098:	9a 81       	ldd	r25, Y+2	; 0x02
    309a:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
				if (res == FR_OK) {
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	09 f0       	breq	.+2      	; 0x30a4 <f_sync+0x50>
    30a2:	3f c0       	rjmp	.+126    	; 0x3122 <f_sync+0xce>
					dir = fp->dir_ptr;
    30a4:	d7 01       	movw	r26, r14
    30a6:	90 96       	adiw	r26, 0x20	; 32
    30a8:	ed 91       	ld	r30, X+
    30aa:	fc 91       	ld	r31, X
    30ac:	91 97       	sbiw	r26, 0x21	; 33
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
    30ae:	83 85       	ldd	r24, Z+11	; 0x0b
    30b0:	80 62       	ori	r24, 0x20	; 32
    30b2:	83 87       	std	Z+11, r24	; 0x0b
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
    30b4:	8d 91       	ld	r24, X+
    30b6:	9c 91       	ld	r25, X
    30b8:	11 97       	sbiw	r26, 0x01	; 1
    30ba:	16 96       	adiw	r26, 0x06	; 6
    30bc:	4d 91       	ld	r20, X+
    30be:	5d 91       	ld	r21, X+
    30c0:	6d 91       	ld	r22, X+
    30c2:	7c 91       	ld	r23, X
    30c4:	19 97       	sbiw	r26, 0x09	; 9

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    30c6:	42 8f       	std	Z+26, r20	; 0x1a
	*ptr++ = (BYTE)val;
    30c8:	53 8f       	std	Z+27, r21	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    30ca:	dc 01       	movw	r26, r24
    30cc:	8c 91       	ld	r24, X
    30ce:	83 30       	cpi	r24, 0x03	; 3
    30d0:	09 f4       	brne	.+2      	; 0x30d4 <f_sync+0x80>
    30d2:	4a c0       	rjmp	.+148    	; 0x3168 <f_sync+0x114>
				res = move_window(fs, fp->dir_sect);
				if (res == FR_OK) {
					dir = fp->dir_ptr;
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
    30d4:	d7 01       	movw	r26, r14
    30d6:	1a 96       	adiw	r26, 0x0a	; 10
    30d8:	3c 91       	ld	r19, X
    30da:	1a 97       	sbiw	r26, 0x0a	; 10
    30dc:	1b 96       	adiw	r26, 0x0b	; 11
    30de:	2c 91       	ld	r18, X
    30e0:	1b 97       	sbiw	r26, 0x0b	; 11
    30e2:	1c 96       	adiw	r26, 0x0c	; 12
    30e4:	9c 91       	ld	r25, X
    30e6:	1c 97       	sbiw	r26, 0x0c	; 12
    30e8:	1d 96       	adiw	r26, 0x0d	; 13
    30ea:	8c 91       	ld	r24, X
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    30ec:	34 8f       	std	Z+28, r19	; 0x1c
	*ptr++ = (BYTE)val; val >>= 8;
    30ee:	25 8f       	std	Z+29, r18	; 0x1d
	*ptr++ = (BYTE)val; val >>= 8;
    30f0:	96 8f       	std	Z+30, r25	; 0x1e
	*ptr++ = (BYTE)val;
    30f2:	87 8f       	std	Z+31, r24	; 0x1f
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    30f4:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    30f6:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    30f8:	81 e2       	ldi	r24, 0x21	; 33
    30fa:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    30fc:	88 e4       	ldi	r24, 0x48	; 72
    30fe:	81 8f       	std	Z+25, r24	; 0x19

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    3100:	12 8a       	std	Z+18, r1	; 0x12
	*ptr++ = (BYTE)val;
    3102:	13 8a       	std	Z+19, r1	; 0x13
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	9a 81       	ldd	r25, Y+2	; 0x02
    3108:	21 e0       	ldi	r18, 0x01	; 1
    310a:	fc 01       	movw	r30, r24
    310c:	23 83       	std	Z+3, r18	; 0x03
					res = sync_fs(fs);					/* Restore it to the directory */
    310e:	0e 94 d7 02 	call	0x5ae	; 0x5ae <sync_fs>
					fp->flag &= ~FA_MODIFIED;
    3112:	d7 01       	movw	r26, r14
    3114:	1e 96       	adiw	r26, 0x0e	; 14
    3116:	2c 91       	ld	r18, X
    3118:	1e 97       	sbiw	r26, 0x0e	; 14
    311a:	2f 7b       	andi	r18, 0xBF	; 191
    311c:	1e 96       	adiw	r26, 0x0e	; 14
    311e:	2c 93       	st	X, r18
    3120:	1e 97       	sbiw	r26, 0x0e	; 14
			}
		}
	}

	LEAVE_FF(fs, res);
}
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	df 91       	pop	r29
    3128:	cf 91       	pop	r28
    312a:	1f 91       	pop	r17
    312c:	0f 91       	pop	r16
    312e:	ff 90       	pop	r15
    3130:	ef 90       	pop	r14
    3132:	08 95       	ret
	res = validate(fp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    3134:	e9 81       	ldd	r30, Y+1	; 0x01
    3136:	fa 81       	ldd	r31, Y+2	; 0x02
    3138:	b7 01       	movw	r22, r14
    313a:	6e 5d       	subi	r22, 0xDE	; 222
    313c:	7f 4f       	sbci	r23, 0xFF	; 255
    313e:	58 96       	adiw	r26, 0x18	; 24
    3140:	2d 91       	ld	r18, X+
    3142:	3d 91       	ld	r19, X+
    3144:	4d 91       	ld	r20, X+
    3146:	5c 91       	ld	r21, X
    3148:	5b 97       	sbiw	r26, 0x1b	; 27
    314a:	81 81       	ldd	r24, Z+1	; 0x01
    314c:	01 e0       	ldi	r16, 0x01	; 1
    314e:	10 e0       	ldi	r17, 0x00	; 0
    3150:	0e 94 8d 22 	call	0x451a	; 0x451a <disk_write>
    3154:	00 97       	sbiw	r24, 0x00	; 0
    3156:	29 f4       	brne	.+10     	; 0x3162 <f_sync+0x10e>
				fp->flag &= ~FA_DIRTY;
    3158:	f7 01       	movw	r30, r14
    315a:	86 85       	ldd	r24, Z+14	; 0x0e
    315c:	8f 77       	andi	r24, 0x7F	; 127
    315e:	86 87       	std	Z+14, r24	; 0x0e
    3160:	93 cf       	rjmp	.-218    	; 0x3088 <f_sync+0x34>
	res = validate(fp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	dd cf       	rjmp	.-70     	; 0x3122 <f_sync+0xce>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    3168:	ab 01       	movw	r20, r22
    316a:	66 27       	eor	r22, r22
    316c:	77 27       	eor	r23, r23

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    316e:	44 8b       	std	Z+20, r20	; 0x14
	*ptr++ = (BYTE)val;
    3170:	55 8b       	std	Z+21, r21	; 0x15
    3172:	b0 cf       	rjmp	.-160    	; 0x30d4 <f_sync+0x80>

00003174 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
    3174:	0f 93       	push	r16
    3176:	1f 93       	push	r17
    3178:	cf 93       	push	r28
    317a:	df 93       	push	r29
    317c:	00 d0       	rcall	.+0      	; 0x317e <f_close+0xa>
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
    3184:	0e 94 2a 18 	call	0x3054	; 0x3054 <f_sync>
	if (res == FR_OK)
    3188:	00 97       	sbiw	r24, 0x00	; 0
    318a:	39 f0       	breq	.+14     	; 0x319a <f_close+0x26>
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	df 91       	pop	r29
    3192:	cf 91       	pop	r28
    3194:	1f 91       	pop	r17
    3196:	0f 91       	pop	r16
    3198:	08 95       	ret
#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
	if (res == FR_OK)
#endif
	{
		res = validate(fp, &fs);	/* Lock volume */
    319a:	c8 01       	movw	r24, r16
    319c:	be 01       	movw	r22, r28
    319e:	6f 5f       	subi	r22, 0xFF	; 255
    31a0:	7f 4f       	sbci	r23, 0xFF	; 255
    31a2:	0e 94 97 01 	call	0x32e	; 0x32e <validate>
		if (res == FR_OK) {
    31a6:	00 97       	sbiw	r24, 0x00	; 0
    31a8:	89 f7       	brne	.-30     	; 0x318c <f_close+0x18>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
    31aa:	f8 01       	movw	r30, r16
    31ac:	11 82       	std	Z+1, r1	; 0x01
    31ae:	10 82       	st	Z, r1
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	df 91       	pop	r29
    31b6:	cf 91       	pop	r28
    31b8:	1f 91       	pop	r17
    31ba:	0f 91       	pop	r16
    31bc:	08 95       	ret

000031be <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
    31be:	4f 92       	push	r4
    31c0:	5f 92       	push	r5
    31c2:	6f 92       	push	r6
    31c4:	7f 92       	push	r7
    31c6:	8f 92       	push	r8
    31c8:	9f 92       	push	r9
    31ca:	af 92       	push	r10
    31cc:	bf 92       	push	r11
    31ce:	cf 92       	push	r12
    31d0:	df 92       	push	r13
    31d2:	ef 92       	push	r14
    31d4:	ff 92       	push	r15
    31d6:	0f 93       	push	r16
    31d8:	1f 93       	push	r17
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	cd b7       	in	r28, 0x3d	; 61
    31e0:	de b7       	in	r29, 0x3e	; 62
    31e2:	2a 97       	sbiw	r28, 0x0a	; 10
    31e4:	0f b6       	in	r0, 0x3f	; 63
    31e6:	f8 94       	cli
    31e8:	de bf       	out	0x3e, r29	; 62
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	cd bf       	out	0x3d, r28	; 61
    31ee:	5c 01       	movw	r10, r24
    31f0:	2a 01       	movw	r4, r20
    31f2:	3b 01       	movw	r6, r22
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(fp, &fs);		/* Check validity of the object */
    31f4:	be 01       	movw	r22, r28
    31f6:	6f 5f       	subi	r22, 0xFF	; 255
    31f8:	7f 4f       	sbci	r23, 0xFF	; 255
    31fa:	0e 94 97 01 	call	0x32e	; 0x32e <validate>
    31fe:	4c 01       	movw	r8, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    3200:	00 97       	sbiw	r24, 0x00	; 0
    3202:	09 f0       	breq	.+2      	; 0x3206 <f_lseek+0x48>
    3204:	2c c1       	rjmp	.+600    	; 0x345e <f_lseek+0x2a0>
    3206:	d5 01       	movw	r26, r10
    3208:	1f 96       	adiw	r26, 0x0f	; 15
    320a:	8c 90       	ld	r8, X
    320c:	1f 97       	sbiw	r26, 0x0f	; 15
    320e:	99 24       	eor	r9, r9
    3210:	81 14       	cp	r8, r1
    3212:	91 04       	cpc	r9, r1
    3214:	09 f0       	breq	.+2      	; 0x3218 <f_lseek+0x5a>
    3216:	23 c1       	rjmp	.+582    	; 0x345e <f_lseek+0x2a0>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
    3218:	1a 96       	adiw	r26, 0x0a	; 10
    321a:	8d 91       	ld	r24, X+
    321c:	9d 91       	ld	r25, X+
    321e:	0d 90       	ld	r0, X+
    3220:	bc 91       	ld	r27, X
    3222:	a0 2d       	mov	r26, r0
    3224:	84 15       	cp	r24, r4
    3226:	95 05       	cpc	r25, r5
    3228:	a6 05       	cpc	r26, r6
    322a:	b7 05       	cpc	r27, r7
    322c:	30 f4       	brcc	.+12     	; 0x323a <f_lseek+0x7c>
    322e:	f5 01       	movw	r30, r10
    3230:	26 85       	ldd	r18, Z+14	; 0x0e
    3232:	21 fd       	sbrc	r18, 1
    3234:	02 c0       	rjmp	.+4      	; 0x323a <f_lseek+0x7c>
    3236:	2c 01       	movw	r4, r24
    3238:	3d 01       	movw	r6, r26
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
    323a:	f5 01       	movw	r30, r10
    323c:	80 89       	ldd	r24, Z+16	; 0x10
    323e:	91 89       	ldd	r25, Z+17	; 0x11
    3240:	a2 89       	ldd	r26, Z+18	; 0x12
    3242:	b3 89       	ldd	r27, Z+19	; 0x13
		fp->fptr = nsect = 0;
    3244:	10 8a       	std	Z+16, r1	; 0x10
    3246:	11 8a       	std	Z+17, r1	; 0x11
    3248:	12 8a       	std	Z+18, r1	; 0x12
    324a:	13 8a       	std	Z+19, r1	; 0x13
		if (ofs) {
    324c:	41 14       	cp	r4, r1
    324e:	51 04       	cpc	r5, r1
    3250:	61 04       	cpc	r6, r1
    3252:	71 04       	cpc	r7, r1
    3254:	09 f4       	brne	.+2      	; 0x3258 <f_lseek+0x9a>
    3256:	03 c1       	rjmp	.+518    	; 0x345e <f_lseek+0x2a0>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
    3258:	e9 81       	ldd	r30, Y+1	; 0x01
    325a:	fa 81       	ldd	r31, Y+2	; 0x02
    325c:	c1 84       	ldd	r12, Z+9	; 0x09
    325e:	d2 84       	ldd	r13, Z+10	; 0x0a
    3260:	ee 24       	eor	r14, r14
    3262:	ff 24       	eor	r15, r15
    3264:	09 e0       	ldi	r16, 0x09	; 9
    3266:	cc 0c       	add	r12, r12
    3268:	dd 1c       	adc	r13, r13
    326a:	ee 1c       	adc	r14, r14
    326c:	ff 1c       	adc	r15, r15
    326e:	0a 95       	dec	r16
    3270:	d1 f7       	brne	.-12     	; 0x3266 <f_lseek+0xa8>
			if (ifptr > 0 &&
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	a1 05       	cpc	r26, r1
    3276:	b1 05       	cpc	r27, r1
    3278:	51 f1       	breq	.+84     	; 0x32ce <f_lseek+0x110>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
    327a:	9c 01       	movw	r18, r24
    327c:	ad 01       	movw	r20, r26
    327e:	21 50       	subi	r18, 0x01	; 1
    3280:	30 40       	sbci	r19, 0x00	; 0
    3282:	40 40       	sbci	r20, 0x00	; 0
    3284:	50 40       	sbci	r21, 0x00	; 0
    3286:	2f 83       	std	Y+7, r18	; 0x07
    3288:	38 87       	std	Y+8, r19	; 0x08
    328a:	49 87       	std	Y+9, r20	; 0x09
    328c:	5a 87       	std	Y+10, r21	; 0x0a
    328e:	c3 01       	movw	r24, r6
    3290:	b2 01       	movw	r22, r4
    3292:	61 50       	subi	r22, 0x01	; 1
    3294:	70 40       	sbci	r23, 0x00	; 0
    3296:	80 40       	sbci	r24, 0x00	; 0
    3298:	90 40       	sbci	r25, 0x00	; 0
    329a:	a7 01       	movw	r20, r14
    329c:	96 01       	movw	r18, r12
    329e:	0e 94 42 29 	call	0x5284	; 0x5284 <__udivmodsi4>
    32a2:	2b 83       	std	Y+3, r18	; 0x03
    32a4:	3c 83       	std	Y+4, r19	; 0x04
    32a6:	4d 83       	std	Y+5, r20	; 0x05
    32a8:	5e 83       	std	Y+6, r21	; 0x06
    32aa:	6f 81       	ldd	r22, Y+7	; 0x07
    32ac:	78 85       	ldd	r23, Y+8	; 0x08
    32ae:	89 85       	ldd	r24, Y+9	; 0x09
    32b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32b2:	a7 01       	movw	r20, r14
    32b4:	96 01       	movw	r18, r12
    32b6:	0e 94 42 29 	call	0x5284	; 0x5284 <__udivmodsi4>
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
    32ba:	8b 81       	ldd	r24, Y+3	; 0x03
    32bc:	9c 81       	ldd	r25, Y+4	; 0x04
    32be:	ad 81       	ldd	r26, Y+5	; 0x05
    32c0:	be 81       	ldd	r27, Y+6	; 0x06
    32c2:	82 17       	cp	r24, r18
    32c4:	93 07       	cpc	r25, r19
    32c6:	a4 07       	cpc	r26, r20
    32c8:	b5 07       	cpc	r27, r21
    32ca:	08 f0       	brcs	.+2      	; 0x32ce <f_lseek+0x110>
    32cc:	e7 c0       	rjmp	.+462    	; 0x349c <f_lseek+0x2de>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(QWORD)(bcs - 1);	/* start from the current cluster */
				ofs -= fp->fptr;
				clst = fp->clust;
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
    32ce:	f5 01       	movw	r30, r10
    32d0:	46 81       	ldd	r20, Z+6	; 0x06
    32d2:	57 81       	ldd	r21, Z+7	; 0x07
    32d4:	60 85       	ldd	r22, Z+8	; 0x08
    32d6:	71 85       	ldd	r23, Z+9	; 0x09
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
    32d8:	41 15       	cp	r20, r1
    32da:	51 05       	cpc	r21, r1
    32dc:	61 05       	cpc	r22, r1
    32de:	71 05       	cpc	r23, r1
    32e0:	09 f4       	brne	.+2      	; 0x32e4 <f_lseek+0x126>
    32e2:	01 c1       	rjmp	.+514    	; 0x34e6 <f_lseek+0x328>
    32e4:	1b 82       	std	Y+3, r1	; 0x03
    32e6:	1c 82       	std	Y+4, r1	; 0x04
    32e8:	1d 82       	std	Y+5, r1	; 0x05
    32ea:	1e 82       	std	Y+6, r1	; 0x06
					if (clst == 1) ABORT(fs, FR_INT_ERR);
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					fp->obj.sclust = clst;
				}
#endif
				fp->clust = clst;
    32ec:	f5 01       	movw	r30, r10
    32ee:	44 8b       	std	Z+20, r20	; 0x14
    32f0:	55 8b       	std	Z+21, r21	; 0x15
    32f2:	66 8b       	std	Z+22, r22	; 0x16
    32f4:	77 8b       	std	Z+23, r23	; 0x17
			}
			if (clst != 0) {
    32f6:	41 15       	cp	r20, r1
    32f8:	51 05       	cpc	r21, r1
    32fa:	61 05       	cpc	r22, r1
    32fc:	71 05       	cpc	r23, r1
    32fe:	09 f4       	brne	.+2      	; 0x3302 <f_lseek+0x144>
    3300:	5c c0       	rjmp	.+184    	; 0x33ba <f_lseek+0x1fc>
				while (ofs > bcs) {						/* Cluster following loop */
    3302:	c4 14       	cp	r12, r4
    3304:	d5 04       	cpc	r13, r5
    3306:	e6 04       	cpc	r14, r6
    3308:	f7 04       	cpc	r15, r7
    330a:	08 f0       	brcs	.+2      	; 0x330e <f_lseek+0x150>
    330c:	4a c1       	rjmp	.+660    	; 0x35a2 <f_lseek+0x3e4>
    330e:	8b 81       	ldd	r24, Y+3	; 0x03
    3310:	9c 81       	ldd	r25, Y+4	; 0x04
    3312:	ad 81       	ldd	r26, Y+5	; 0x05
    3314:	be 81       	ldd	r27, Y+6	; 0x06
    3316:	3d c0       	rjmp	.+122    	; 0x3392 <f_lseek+0x1d4>
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
    3318:	c5 01       	movw	r24, r10
    331a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <create_chain>
    331e:	ab 01       	movw	r20, r22
    3320:	bc 01       	movw	r22, r24
						if (clst == 0) {				/* Clip file size in case of disk full */
    3322:	41 15       	cp	r20, r1
    3324:	51 05       	cpc	r21, r1
    3326:	61 05       	cpc	r22, r1
    3328:	71 05       	cpc	r23, r1
    332a:	09 f4       	brne	.+2      	; 0x332e <f_lseek+0x170>
    332c:	9f c1       	rjmp	.+830    	; 0x366c <f_lseek+0x4ae>
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    332e:	4f 3f       	cpi	r20, 0xFF	; 255
    3330:	ff ef       	ldi	r31, 0xFF	; 255
    3332:	5f 07       	cpc	r21, r31
    3334:	ff ef       	ldi	r31, 0xFF	; 255
    3336:	6f 07       	cpc	r22, r31
    3338:	ff ef       	ldi	r31, 0xFF	; 255
    333a:	7f 07       	cpc	r23, r31
    333c:	09 f4       	brne	.+2      	; 0x3340 <f_lseek+0x182>
    333e:	8d c1       	rjmp	.+794    	; 0x365a <f_lseek+0x49c>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    3340:	42 30       	cpi	r20, 0x02	; 2
    3342:	51 05       	cpc	r21, r1
    3344:	61 05       	cpc	r22, r1
    3346:	71 05       	cpc	r23, r1
    3348:	08 f4       	brcc	.+2      	; 0x334c <f_lseek+0x18e>
    334a:	10 c1       	rjmp	.+544    	; 0x356c <f_lseek+0x3ae>
    334c:	e9 81       	ldd	r30, Y+1	; 0x01
    334e:	fa 81       	ldd	r31, Y+2	; 0x02
    3350:	83 89       	ldd	r24, Z+19	; 0x13
    3352:	94 89       	ldd	r25, Z+20	; 0x14
    3354:	a5 89       	ldd	r26, Z+21	; 0x15
    3356:	b6 89       	ldd	r27, Z+22	; 0x16
    3358:	48 17       	cp	r20, r24
    335a:	59 07       	cpc	r21, r25
    335c:	6a 07       	cpc	r22, r26
    335e:	7b 07       	cpc	r23, r27
    3360:	08 f0       	brcs	.+2      	; 0x3364 <f_lseek+0x1a6>
    3362:	04 c1       	rjmp	.+520    	; 0x356c <f_lseek+0x3ae>
#if _FS_MINIMIZE <= 2
/*-----------------------------------------------------------------------*/
/* Seek File R/W Pointer                                                 */
/*-----------------------------------------------------------------------*/

FRESULT f_lseek (
    3364:	4c 18       	sub	r4, r12
    3366:	5d 08       	sbc	r5, r13
    3368:	6e 08       	sbc	r6, r14
    336a:	7f 08       	sbc	r7, r15
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
    336c:	d5 01       	movw	r26, r10
    336e:	54 96       	adiw	r26, 0x14	; 20
    3370:	4d 93       	st	X+, r20
    3372:	5d 93       	st	X+, r21
    3374:	6d 93       	st	X+, r22
    3376:	7c 93       	st	X, r23
    3378:	57 97       	sbiw	r26, 0x17	; 23
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    337a:	c4 14       	cp	r12, r4
    337c:	d5 04       	cpc	r13, r5
    337e:	e6 04       	cpc	r14, r6
    3380:	f7 04       	cpc	r15, r7
    3382:	08 f0       	brcs	.+2      	; 0x3386 <f_lseek+0x1c8>
    3384:	03 c1       	rjmp	.+518    	; 0x358c <f_lseek+0x3ce>
    3386:	50 96       	adiw	r26, 0x10	; 16
    3388:	8d 91       	ld	r24, X+
    338a:	9d 91       	ld	r25, X+
    338c:	0d 90       	ld	r0, X+
    338e:	bc 91       	ld	r27, X
    3390:	a0 2d       	mov	r26, r0
					ofs -= bcs; fp->fptr += bcs;
    3392:	8c 0d       	add	r24, r12
    3394:	9d 1d       	adc	r25, r13
    3396:	ae 1d       	adc	r26, r14
    3398:	bf 1d       	adc	r27, r15
    339a:	f5 01       	movw	r30, r10
    339c:	80 8b       	std	Z+16, r24	; 0x10
    339e:	91 8b       	std	Z+17, r25	; 0x11
    33a0:	a2 8b       	std	Z+18, r26	; 0x12
    33a2:	b3 8b       	std	Z+19, r27	; 0x13
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
    33a4:	86 85       	ldd	r24, Z+14	; 0x0e
    33a6:	81 fd       	sbrc	r24, 1
    33a8:	b7 cf       	rjmp	.-146    	; 0x3318 <f_lseek+0x15a>
							ofs = 0; break;
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
    33aa:	f5 01       	movw	r30, r10
    33ac:	80 81       	ld	r24, Z
    33ae:	91 81       	ldd	r25, Z+1	; 0x01
    33b0:	0e 94 14 09 	call	0x1228	; 0x1228 <get_fat.isra.8>
    33b4:	ab 01       	movw	r20, r22
    33b6:	bc 01       	movw	r22, r24
    33b8:	ba cf       	rjmp	.-140    	; 0x332e <f_lseek+0x170>
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    33ba:	44 24       	eor	r4, r4
    33bc:	55 24       	eor	r5, r5
    33be:	32 01       	movw	r6, r4
					if (!nsect) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
    33c0:	f5 01       	movw	r30, r10
    33c2:	82 85       	ldd	r24, Z+10	; 0x0a
    33c4:	93 85       	ldd	r25, Z+11	; 0x0b
    33c6:	a4 85       	ldd	r26, Z+12	; 0x0c
    33c8:	b5 85       	ldd	r27, Z+13	; 0x0d
    33ca:	2b 81       	ldd	r18, Y+3	; 0x03
    33cc:	3c 81       	ldd	r19, Y+4	; 0x04
    33ce:	4d 81       	ldd	r20, Y+5	; 0x05
    33d0:	5e 81       	ldd	r21, Y+6	; 0x06
    33d2:	82 17       	cp	r24, r18
    33d4:	93 07       	cpc	r25, r19
    33d6:	a4 07       	cpc	r26, r20
    33d8:	b5 07       	cpc	r27, r21
    33da:	08 f0       	brcs	.+2      	; 0x33de <f_lseek+0x220>
    33dc:	56 c1       	rjmp	.+684    	; 0x368a <f_lseek+0x4cc>
			fp->obj.objsize = fp->fptr;
    33de:	8b 81       	ldd	r24, Y+3	; 0x03
    33e0:	9c 81       	ldd	r25, Y+4	; 0x04
    33e2:	ad 81       	ldd	r26, Y+5	; 0x05
    33e4:	be 81       	ldd	r27, Y+6	; 0x06
    33e6:	f5 01       	movw	r30, r10
    33e8:	82 87       	std	Z+10, r24	; 0x0a
    33ea:	93 87       	std	Z+11, r25	; 0x0b
    33ec:	a4 87       	std	Z+12, r26	; 0x0c
    33ee:	b5 87       	std	Z+13, r27	; 0x0d
			fp->flag |= FA_MODIFIED;
    33f0:	86 85       	ldd	r24, Z+14	; 0x0e
    33f2:	80 64       	ori	r24, 0x40	; 64
    33f4:	86 87       	std	Z+14, r24	; 0x0e
    33f6:	8b 81       	ldd	r24, Y+3	; 0x03
    33f8:	9c 81       	ldd	r25, Y+4	; 0x04
    33fa:	ad 81       	ldd	r26, Y+5	; 0x05
    33fc:	be 81       	ldd	r27, Y+6	; 0x06
    33fe:	91 70       	andi	r25, 0x01	; 1
    3400:	a0 70       	andi	r26, 0x00	; 0
    3402:	b0 70       	andi	r27, 0x00	; 0
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	a1 05       	cpc	r26, r1
    3408:	b1 05       	cpc	r27, r1
    340a:	49 f1       	breq	.+82     	; 0x345e <f_lseek+0x2a0>
    340c:	d5 01       	movw	r26, r10
    340e:	58 96       	adiw	r26, 0x18	; 24
    3410:	0d 91       	ld	r16, X+
    3412:	1d 91       	ld	r17, X+
    3414:	2d 91       	ld	r18, X+
    3416:	3c 91       	ld	r19, X
    3418:	5b 97       	sbiw	r26, 0x1b	; 27
    341a:	40 16       	cp	r4, r16
    341c:	51 06       	cpc	r5, r17
    341e:	62 06       	cpc	r6, r18
    3420:	73 06       	cpc	r7, r19
    3422:	e9 f0       	breq	.+58     	; 0x345e <f_lseek+0x2a0>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
    3424:	1e 96       	adiw	r26, 0x0e	; 14
    3426:	8c 91       	ld	r24, X
    3428:	1e 97       	sbiw	r26, 0x0e	; 14
    342a:	87 fd       	sbrc	r24, 7
    342c:	84 c0       	rjmp	.+264    	; 0x3536 <f_lseek+0x378>
    342e:	52 e2       	ldi	r21, 0x22	; 34
    3430:	c5 2e       	mov	r12, r21
    3432:	d1 2c       	mov	r13, r1
    3434:	ca 0c       	add	r12, r10
    3436:	db 1c       	adc	r13, r11
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= ~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    3438:	e9 81       	ldd	r30, Y+1	; 0x01
    343a:	fa 81       	ldd	r31, Y+2	; 0x02
    343c:	81 81       	ldd	r24, Z+1	; 0x01
    343e:	b6 01       	movw	r22, r12
    3440:	a3 01       	movw	r20, r6
    3442:	92 01       	movw	r18, r4
    3444:	01 e0       	ldi	r16, 0x01	; 1
    3446:	10 e0       	ldi	r17, 0x00	; 0
    3448:	0e 94 8a 22 	call	0x4514	; 0x4514 <disk_read>
    344c:	00 97       	sbiw	r24, 0x00	; 0
    344e:	f9 f4       	brne	.+62     	; 0x348e <f_lseek+0x2d0>
#endif
			fp->sect = nsect;
    3450:	d5 01       	movw	r26, r10
    3452:	58 96       	adiw	r26, 0x18	; 24
    3454:	4d 92       	st	X+, r4
    3456:	5d 92       	st	X+, r5
    3458:	6d 92       	st	X+, r6
    345a:	7c 92       	st	X, r7
    345c:	5b 97       	sbiw	r26, 0x1b	; 27
		}
	}

	LEAVE_FF(fs, res);
}
    345e:	c4 01       	movw	r24, r8
    3460:	2a 96       	adiw	r28, 0x0a	; 10
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	f8 94       	cli
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	0f be       	out	0x3f, r0	; 63
    346a:	cd bf       	out	0x3d, r28	; 61
    346c:	df 91       	pop	r29
    346e:	cf 91       	pop	r28
    3470:	1f 91       	pop	r17
    3472:	0f 91       	pop	r16
    3474:	ff 90       	pop	r15
    3476:	ef 90       	pop	r14
    3478:	df 90       	pop	r13
    347a:	cf 90       	pop	r12
    347c:	bf 90       	pop	r11
    347e:	af 90       	pop	r10
    3480:	9f 90       	pop	r9
    3482:	8f 90       	pop	r8
    3484:	7f 90       	pop	r7
    3486:	6f 90       	pop	r6
    3488:	5f 90       	pop	r5
    348a:	4f 90       	pop	r4
    348c:	08 95       	ret
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
				fp->flag &= ~FA_DIRTY;
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	f5 01       	movw	r30, r10
    3492:	87 87       	std	Z+15, r24	; 0x0f
    3494:	91 e0       	ldi	r25, 0x01	; 1
    3496:	89 2e       	mov	r8, r25
    3498:	91 2c       	mov	r9, r1
    349a:	e1 cf       	rjmp	.-62     	; 0x345e <f_lseek+0x2a0>
		fp->fptr = nsect = 0;
		if (ofs) {
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
			if (ifptr > 0 &&
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
				fp->fptr = (ifptr - 1) & ~(QWORD)(bcs - 1);	/* start from the current cluster */
    349c:	22 27       	eor	r18, r18
    349e:	33 27       	eor	r19, r19
    34a0:	a9 01       	movw	r20, r18
    34a2:	2c 19       	sub	r18, r12
    34a4:	3d 09       	sbc	r19, r13
    34a6:	4e 09       	sbc	r20, r14
    34a8:	5f 09       	sbc	r21, r15
    34aa:	8f 81       	ldd	r24, Y+7	; 0x07
    34ac:	98 85       	ldd	r25, Y+8	; 0x08
    34ae:	a9 85       	ldd	r26, Y+9	; 0x09
    34b0:	ba 85       	ldd	r27, Y+10	; 0x0a
    34b2:	28 23       	and	r18, r24
    34b4:	39 23       	and	r19, r25
    34b6:	4a 23       	and	r20, r26
    34b8:	5b 23       	and	r21, r27
    34ba:	2b 83       	std	Y+3, r18	; 0x03
    34bc:	3c 83       	std	Y+4, r19	; 0x04
    34be:	4d 83       	std	Y+5, r20	; 0x05
    34c0:	5e 83       	std	Y+6, r21	; 0x06
    34c2:	d5 01       	movw	r26, r10
    34c4:	50 96       	adiw	r26, 0x10	; 16
    34c6:	2d 93       	st	X+, r18
    34c8:	3d 93       	st	X+, r19
    34ca:	4d 93       	st	X+, r20
    34cc:	5c 93       	st	X, r21
    34ce:	53 97       	sbiw	r26, 0x13	; 19
				ofs -= fp->fptr;
    34d0:	42 1a       	sub	r4, r18
    34d2:	53 0a       	sbc	r5, r19
    34d4:	64 0a       	sbc	r6, r20
    34d6:	75 0a       	sbc	r7, r21
				clst = fp->clust;
    34d8:	54 96       	adiw	r26, 0x14	; 20
    34da:	4d 91       	ld	r20, X+
    34dc:	5d 91       	ld	r21, X+
    34de:	6d 91       	ld	r22, X+
    34e0:	7c 91       	ld	r23, X
    34e2:	57 97       	sbiw	r26, 0x17	; 23
    34e4:	08 cf       	rjmp	.-496    	; 0x32f6 <f_lseek+0x138>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
					clst = create_chain(&fp->obj, 0);
    34e6:	c5 01       	movw	r24, r10
    34e8:	40 e0       	ldi	r20, 0x00	; 0
    34ea:	50 e0       	ldi	r21, 0x00	; 0
    34ec:	ba 01       	movw	r22, r20
    34ee:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <create_chain>
    34f2:	ab 01       	movw	r20, r22
    34f4:	bc 01       	movw	r22, r24
					if (clst == 1) ABORT(fs, FR_INT_ERR);
    34f6:	41 30       	cpi	r20, 0x01	; 1
    34f8:	51 05       	cpc	r21, r1
    34fa:	61 05       	cpc	r22, r1
    34fc:	71 05       	cpc	r23, r1
    34fe:	e9 f1       	breq	.+122    	; 0x357a <f_lseek+0x3bc>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    3500:	4f 3f       	cpi	r20, 0xFF	; 255
    3502:	bf ef       	ldi	r27, 0xFF	; 255
    3504:	5b 07       	cpc	r21, r27
    3506:	bf ef       	ldi	r27, 0xFF	; 255
    3508:	6b 07       	cpc	r22, r27
    350a:	bf ef       	ldi	r27, 0xFF	; 255
    350c:	7b 07       	cpc	r23, r27
    350e:	09 f4       	brne	.+2      	; 0x3512 <f_lseek+0x354>
    3510:	be cf       	rjmp	.-132    	; 0x348e <f_lseek+0x2d0>
					fp->obj.sclust = clst;
    3512:	d5 01       	movw	r26, r10
    3514:	16 96       	adiw	r26, 0x06	; 6
    3516:	4d 93       	st	X+, r20
    3518:	5d 93       	st	X+, r21
    351a:	6d 93       	st	X+, r22
    351c:	7c 93       	st	X, r23
    351e:	19 97       	sbiw	r26, 0x09	; 9
    3520:	50 96       	adiw	r26, 0x10	; 16
    3522:	8d 91       	ld	r24, X+
    3524:	9d 91       	ld	r25, X+
    3526:	0d 90       	ld	r0, X+
    3528:	bc 91       	ld	r27, X
    352a:	a0 2d       	mov	r26, r0
    352c:	8b 83       	std	Y+3, r24	; 0x03
    352e:	9c 83       	std	Y+4, r25	; 0x04
    3530:	ad 83       	std	Y+5, r26	; 0x05
    3532:	be 83       	std	Y+6, r27	; 0x06
    3534:	db ce       	rjmp	.-586    	; 0x32ec <f_lseek+0x12e>
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
    3536:	e9 81       	ldd	r30, Y+1	; 0x01
    3538:	fa 81       	ldd	r31, Y+2	; 0x02
    353a:	42 e2       	ldi	r20, 0x22	; 34
    353c:	c4 2e       	mov	r12, r20
    353e:	d1 2c       	mov	r13, r1
    3540:	ca 0c       	add	r12, r10
    3542:	db 1c       	adc	r13, r11
    3544:	81 81       	ldd	r24, Z+1	; 0x01
    3546:	b6 01       	movw	r22, r12
    3548:	a9 01       	movw	r20, r18
    354a:	98 01       	movw	r18, r16
    354c:	01 e0       	ldi	r16, 0x01	; 1
    354e:	10 e0       	ldi	r17, 0x00	; 0
    3550:	0e 94 8d 22 	call	0x451a	; 0x451a <disk_write>
    3554:	00 97       	sbiw	r24, 0x00	; 0
    3556:	09 f0       	breq	.+2      	; 0x355a <f_lseek+0x39c>
    3558:	9a cf       	rjmp	.-204    	; 0x348e <f_lseek+0x2d0>
				fp->flag &= ~FA_DIRTY;
    355a:	d5 01       	movw	r26, r10
    355c:	1e 96       	adiw	r26, 0x0e	; 14
    355e:	8c 91       	ld	r24, X
    3560:	1e 97       	sbiw	r26, 0x0e	; 14
    3562:	8f 77       	andi	r24, 0x7F	; 127
    3564:	1e 96       	adiw	r26, 0x0e	; 14
    3566:	8c 93       	st	X, r24
    3568:	1e 97       	sbiw	r26, 0x0e	; 14
    356a:	66 cf       	rjmp	.-308    	; 0x3438 <f_lseek+0x27a>
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
    356c:	82 e0       	ldi	r24, 0x02	; 2
    356e:	f5 01       	movw	r30, r10
    3570:	87 87       	std	Z+15, r24	; 0x0f
    3572:	b2 e0       	ldi	r27, 0x02	; 2
    3574:	8b 2e       	mov	r8, r27
    3576:	91 2c       	mov	r9, r1
    3578:	72 cf       	rjmp	.-284    	; 0x345e <f_lseek+0x2a0>
					fp->clust = clst;
				}
				fp->fptr += ofs;
				if (ofs % SS(fs)) {
					nsect = clust2sect(fs, clst);	/* Current sector */
					if (!nsect) ABORT(fs, FR_INT_ERR);
    357a:	82 e0       	ldi	r24, 0x02	; 2
    357c:	d5 01       	movw	r26, r10
    357e:	1f 96       	adiw	r26, 0x0f	; 15
    3580:	8c 93       	st	X, r24
    3582:	1f 97       	sbiw	r26, 0x0f	; 15
    3584:	f2 e0       	ldi	r31, 0x02	; 2
    3586:	8f 2e       	mov	r8, r31
    3588:	91 2c       	mov	r9, r1
    358a:	69 cf       	rjmp	.-302    	; 0x345e <f_lseek+0x2a0>
				}
#endif
				fp->clust = clst;
			}
			if (clst != 0) {
				while (ofs > bcs) {						/* Cluster following loop */
    358c:	d5 01       	movw	r26, r10
    358e:	50 96       	adiw	r26, 0x10	; 16
    3590:	8d 91       	ld	r24, X+
    3592:	9d 91       	ld	r25, X+
    3594:	0d 90       	ld	r0, X+
    3596:	bc 91       	ld	r27, X
    3598:	a0 2d       	mov	r26, r0
    359a:	8b 83       	std	Y+3, r24	; 0x03
    359c:	9c 83       	std	Y+4, r25	; 0x04
    359e:	ad 83       	std	Y+5, r26	; 0x05
    35a0:	be 83       	std	Y+6, r27	; 0x06
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
					fp->clust = clst;
				}
				fp->fptr += ofs;
    35a2:	8b 81       	ldd	r24, Y+3	; 0x03
    35a4:	9c 81       	ldd	r25, Y+4	; 0x04
    35a6:	ad 81       	ldd	r26, Y+5	; 0x05
    35a8:	be 81       	ldd	r27, Y+6	; 0x06
    35aa:	84 0d       	add	r24, r4
    35ac:	95 1d       	adc	r25, r5
    35ae:	a6 1d       	adc	r26, r6
    35b0:	b7 1d       	adc	r27, r7
    35b2:	8b 83       	std	Y+3, r24	; 0x03
    35b4:	9c 83       	std	Y+4, r25	; 0x04
    35b6:	ad 83       	std	Y+5, r26	; 0x05
    35b8:	be 83       	std	Y+6, r27	; 0x06
    35ba:	f5 01       	movw	r30, r10
    35bc:	80 8b       	std	Z+16, r24	; 0x10
    35be:	91 8b       	std	Z+17, r25	; 0x11
    35c0:	a2 8b       	std	Z+18, r26	; 0x12
    35c2:	b3 8b       	std	Z+19, r27	; 0x13
				if (ofs % SS(fs)) {
    35c4:	d3 01       	movw	r26, r6
    35c6:	c2 01       	movw	r24, r4
    35c8:	91 70       	andi	r25, 0x01	; 1
    35ca:	a0 70       	andi	r26, 0x00	; 0
    35cc:	b0 70       	andi	r27, 0x00	; 0
    35ce:	00 97       	sbiw	r24, 0x00	; 0
    35d0:	a1 05       	cpc	r26, r1
    35d2:	b1 05       	cpc	r27, r1
    35d4:	09 f4       	brne	.+2      	; 0x35d8 <f_lseek+0x41a>
    35d6:	f1 ce       	rjmp	.-542    	; 0x33ba <f_lseek+0x1fc>
					nsect = clust2sect(fs, clst);	/* Current sector */
    35d8:	09 81       	ldd	r16, Y+1	; 0x01
    35da:	1a 81       	ldd	r17, Y+2	; 0x02
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    35dc:	ae ef       	ldi	r26, 0xFE	; 254
    35de:	ca 2e       	mov	r12, r26
    35e0:	af ef       	ldi	r26, 0xFF	; 255
    35e2:	da 2e       	mov	r13, r26
    35e4:	af ef       	ldi	r26, 0xFF	; 255
    35e6:	ea 2e       	mov	r14, r26
    35e8:	af ef       	ldi	r26, 0xFF	; 255
    35ea:	fa 2e       	mov	r15, r26
    35ec:	c4 0e       	add	r12, r20
    35ee:	d5 1e       	adc	r13, r21
    35f0:	e6 1e       	adc	r14, r22
    35f2:	f7 1e       	adc	r15, r23
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    35f4:	f8 01       	movw	r30, r16
    35f6:	83 89       	ldd	r24, Z+19	; 0x13
    35f8:	94 89       	ldd	r25, Z+20	; 0x14
    35fa:	a5 89       	ldd	r26, Z+21	; 0x15
    35fc:	b6 89       	ldd	r27, Z+22	; 0x16
    35fe:	02 97       	sbiw	r24, 0x02	; 2
    3600:	a1 09       	sbc	r26, r1
    3602:	b1 09       	sbc	r27, r1
    3604:	c8 16       	cp	r12, r24
    3606:	d9 06       	cpc	r13, r25
    3608:	ea 06       	cpc	r14, r26
    360a:	fb 06       	cpc	r15, r27
    360c:	08 f0       	brcs	.+2      	; 0x3610 <f_lseek+0x452>
    360e:	b5 cf       	rjmp	.-150    	; 0x357a <f_lseek+0x3bc>
	return clst * fs->csize + fs->database;
    3610:	21 85       	ldd	r18, Z+9	; 0x09
    3612:	32 85       	ldd	r19, Z+10	; 0x0a
    3614:	40 e0       	ldi	r20, 0x00	; 0
    3616:	50 e0       	ldi	r21, 0x00	; 0
    3618:	c7 01       	movw	r24, r14
    361a:	b6 01       	movw	r22, r12
    361c:	0e 94 23 29 	call	0x5246	; 0x5246 <__mulsi3>
    3620:	ab 01       	movw	r20, r22
    3622:	bc 01       	movw	r22, r24
    3624:	f8 01       	movw	r30, r16
    3626:	87 a1       	lds	r24, 0x47
    3628:	90 a5       	lds	r25, 0x60
    362a:	a1 a5       	lds	r26, 0x61
    362c:	b2 a5       	lds	r27, 0x62
    362e:	48 0f       	add	r20, r24
    3630:	59 1f       	adc	r21, r25
    3632:	6a 1f       	adc	r22, r26
    3634:	7b 1f       	adc	r23, r27
					fp->clust = clst;
				}
				fp->fptr += ofs;
				if (ofs % SS(fs)) {
					nsect = clust2sect(fs, clst);	/* Current sector */
					if (!nsect) ABORT(fs, FR_INT_ERR);
    3636:	41 15       	cp	r20, r1
    3638:	51 05       	cpc	r21, r1
    363a:	61 05       	cpc	r22, r1
    363c:	71 05       	cpc	r23, r1
    363e:	09 f4       	brne	.+2      	; 0x3642 <f_lseek+0x484>
    3640:	9c cf       	rjmp	.-200    	; 0x357a <f_lseek+0x3bc>
					nsect += (DWORD)(ofs / SS(fs));
    3642:	e9 e0       	ldi	r30, 0x09	; 9
    3644:	76 94       	lsr	r7
    3646:	67 94       	ror	r6
    3648:	57 94       	ror	r5
    364a:	47 94       	ror	r4
    364c:	ea 95       	dec	r30
    364e:	d1 f7       	brne	.-12     	; 0x3644 <f_lseek+0x486>
    3650:	44 0e       	add	r4, r20
    3652:	55 1e       	adc	r5, r21
    3654:	66 1e       	adc	r6, r22
    3656:	77 1e       	adc	r7, r23
    3658:	b3 ce       	rjmp	.-666    	; 0x33c0 <f_lseek+0x202>
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
    365a:	81 e0       	ldi	r24, 0x01	; 1
    365c:	d5 01       	movw	r26, r10
    365e:	1f 96       	adiw	r26, 0x0f	; 15
    3660:	8c 93       	st	X, r24
    3662:	1f 97       	sbiw	r26, 0x0f	; 15
    3664:	11 e0       	ldi	r17, 0x01	; 1
    3666:	81 2e       	mov	r8, r17
    3668:	91 2c       	mov	r9, r1
    366a:	f9 ce       	rjmp	.-526    	; 0x345e <f_lseek+0x2a0>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
						if (clst == 0) {				/* Clip file size in case of disk full */
    366c:	d5 01       	movw	r26, r10
    366e:	50 96       	adiw	r26, 0x10	; 16
    3670:	2d 91       	ld	r18, X+
    3672:	3d 91       	ld	r19, X+
    3674:	4d 91       	ld	r20, X+
    3676:	5c 91       	ld	r21, X
    3678:	53 97       	sbiw	r26, 0x13	; 19
    367a:	2b 83       	std	Y+3, r18	; 0x03
    367c:	3c 83       	std	Y+4, r19	; 0x04
    367e:	4d 83       	std	Y+5, r20	; 0x05
    3680:	5e 83       	std	Y+6, r21	; 0x06
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
			ofs = fp->obj.objsize;
		}
		ifptr = fp->fptr;
		fp->fptr = nsect = 0;
    3682:	44 24       	eor	r4, r4
    3684:	55 24       	eor	r5, r5
    3686:	32 01       	movw	r6, r4
    3688:	9b ce       	rjmp	.-714    	; 0x33c0 <f_lseek+0x202>
					if (!nsect) ABORT(fs, FR_INT_ERR);
					nsect += (DWORD)(ofs / SS(fs));
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
    368a:	da 01       	movw	r26, r20
    368c:	c9 01       	movw	r24, r18
    368e:	91 70       	andi	r25, 0x01	; 1
    3690:	a0 70       	andi	r26, 0x00	; 0
    3692:	b0 70       	andi	r27, 0x00	; 0
    3694:	b7 ce       	rjmp	.-658    	; 0x3404 <f_lseek+0x246>

00003696 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
    3696:	0f 93       	push	r16
    3698:	1f 93       	push	r17
    369a:	cf 93       	push	r28
    369c:	df 93       	push	r29
    369e:	00 d0       	rcall	.+0      	; 0x36a0 <f_opendir+0xa>
    36a0:	00 d0       	rcall	.+0      	; 0x36a2 <f_opendir+0xc>
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	8c 01       	movw	r16, r24
    36a8:	7c 83       	std	Y+4, r23	; 0x04
    36aa:	6b 83       	std	Y+3, r22	; 0x03
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    36ac:	00 97       	sbiw	r24, 0x00	; 0
    36ae:	b9 f0       	breq	.+46     	; 0x36de <f_opendir+0x48>

	/* Get logical drive number */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
    36b0:	ce 01       	movw	r24, r28
    36b2:	03 96       	adiw	r24, 0x03	; 3
    36b4:	be 01       	movw	r22, r28
    36b6:	6f 5f       	subi	r22, 0xFF	; 255
    36b8:	7f 4f       	sbci	r23, 0xFF	; 255
    36ba:	40 e0       	ldi	r20, 0x00	; 0
    36bc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <find_volume>
	if (res == FR_OK) {
    36c0:	00 97       	sbiw	r24, 0x00	; 0
    36c2:	81 f0       	breq	.+32     	; 0x36e4 <f_opendir+0x4e>
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
    36c4:	d8 01       	movw	r26, r16
    36c6:	11 96       	adiw	r26, 0x01	; 1
    36c8:	1c 92       	st	X, r1
    36ca:	1e 92       	st	-X, r1

	LEAVE_FF(fs, res);
}
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	df 91       	pop	r29
    36d6:	cf 91       	pop	r28
    36d8:	1f 91       	pop	r17
    36da:	0f 91       	pop	r16
    36dc:	08 95       	ret
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
    36de:	89 e0       	ldi	r24, 0x09	; 9
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	f4 cf       	rjmp	.-24     	; 0x36cc <f_opendir+0x36>

	/* Get logical drive number */
	obj = &dp->obj;
	res = find_volume(&path, &fs, 0);
	if (res == FR_OK) {
		obj->fs = fs;
    36e4:	89 81       	ldd	r24, Y+1	; 0x01
    36e6:	9a 81       	ldd	r25, Y+2	; 0x02
    36e8:	d8 01       	movw	r26, r16
    36ea:	8d 93       	st	X+, r24
    36ec:	9c 93       	st	X, r25
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
    36ee:	6b 81       	ldd	r22, Y+3	; 0x03
    36f0:	7c 81       	ldd	r23, Y+4	; 0x04
    36f2:	c8 01       	movw	r24, r16
    36f4:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	49 f5       	brne	.+82     	; 0x374e <f_opendir+0xb8>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
    36fc:	f8 01       	movw	r30, r16
    36fe:	87 a1       	lds	r24, 0x47
    3700:	87 fd       	sbrc	r24, 7
    3702:	2f c0       	rjmp	.+94     	; 0x3762 <f_opendir+0xcc>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
    3704:	84 81       	ldd	r24, Z+4	; 0x04
    3706:	84 ff       	sbrs	r24, 4
    3708:	29 c0       	rjmp	.+82     	; 0x375c <f_opendir+0xc6>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
    370a:	02 8c       	ldd	r0, Z+26	; 0x1a
    370c:	f3 8d       	ldd	r31, Z+27	; 0x1b
    370e:	e0 2d       	mov	r30, r0
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    3710:	33 8d       	ldd	r19, Z+27	; 0x1b
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	82 8d       	ldd	r24, Z+26	; 0x1a
    3716:	90 e0       	ldi	r25, 0x00	; 0
    3718:	82 2b       	or	r24, r18
    371a:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    371c:	ac 01       	movw	r20, r24
    371e:	60 e0       	ldi	r22, 0x00	; 0
    3720:	70 e0       	ldi	r23, 0x00	; 0
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    3722:	29 81       	ldd	r18, Y+1	; 0x01
    3724:	3a 81       	ldd	r19, Y+2	; 0x02
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
    3726:	d9 01       	movw	r26, r18
    3728:	8c 91       	ld	r24, X
    372a:	83 30       	cpi	r24, 0x03	; 3
    372c:	e9 f0       	breq	.+58     	; 0x3768 <f_opendir+0xd2>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
    372e:	f8 01       	movw	r30, r16
    3730:	46 83       	std	Z+6, r20	; 0x06
    3732:	57 83       	std	Z+7, r21	; 0x07
    3734:	60 87       	std	Z+8, r22	; 0x08
    3736:	71 87       	std	Z+9, r23	; 0x09
				} else {						/* This object is a file */
					res = FR_NO_PATH;
				}
			}
			if (res == FR_OK) {
				obj->id = fs->id;
    3738:	d9 01       	movw	r26, r18
    373a:	15 96       	adiw	r26, 0x05	; 5
    373c:	8d 91       	ld	r24, X+
    373e:	9c 91       	ld	r25, X
    3740:	16 97       	sbiw	r26, 0x06	; 6
    3742:	f8 01       	movw	r30, r16
    3744:	93 83       	std	Z+3, r25	; 0x03
    3746:	82 83       	std	Z+2, r24	; 0x02
				res = dir_sdi(dp, 0);			/* Rewind directory */
    3748:	c8 01       	movw	r24, r16
    374a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <dir_sdi.constprop.11>
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    374e:	84 30       	cpi	r24, 0x04	; 4
    3750:	91 05       	cpc	r25, r1
    3752:	21 f0       	breq	.+8      	; 0x375c <f_opendir+0xc6>
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
    3754:	00 97       	sbiw	r24, 0x00	; 0
    3756:	09 f4       	brne	.+2      	; 0x375a <f_opendir+0xc4>
    3758:	b9 cf       	rjmp	.-142    	; 0x36cc <f_opendir+0x36>
    375a:	b4 cf       	rjmp	.-152    	; 0x36c4 <f_opendir+0x2e>
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object location */
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
    375c:	85 e0       	ldi	r24, 0x05	; 5
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	b1 cf       	rjmp	.-158    	; 0x36c4 <f_opendir+0x2e>
    3762:	29 81       	ldd	r18, Y+1	; 0x01
    3764:	3a 81       	ldd	r19, Y+2	; 0x02
    3766:	e8 cf       	rjmp	.-48     	; 0x3738 <f_opendir+0xa2>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    3768:	b5 89       	ldd	r27, Z+21	; 0x15
    376a:	a0 e0       	ldi	r26, 0x00	; 0
    376c:	84 89       	ldd	r24, Z+20	; 0x14
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	8a 2b       	or	r24, r26
    3772:	9b 2b       	or	r25, r27
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    3774:	a0 e0       	ldi	r26, 0x00	; 0
    3776:	b0 e0       	ldi	r27, 0x00	; 0
    3778:	dc 01       	movw	r26, r24
    377a:	99 27       	eor	r25, r25
    377c:	88 27       	eor	r24, r24
    377e:	48 2b       	or	r20, r24
    3780:	59 2b       	or	r21, r25
    3782:	6a 2b       	or	r22, r26
    3784:	7b 2b       	or	r23, r27
    3786:	d3 cf       	rjmp	.-90     	; 0x372e <f_opendir+0x98>

00003788 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
    3788:	0f 93       	push	r16
    378a:	1f 93       	push	r17
    378c:	cf 93       	push	r28
    378e:	df 93       	push	r29
    3790:	00 d0       	rcall	.+0      	; 0x3792 <f_closedir+0xa>
    3792:	cd b7       	in	r28, 0x3d	; 61
    3794:	de b7       	in	r29, 0x3e	; 62
    3796:	8c 01       	movw	r16, r24
	FRESULT res;
	FATFS *fs;


	res = validate(dp, &fs);
    3798:	be 01       	movw	r22, r28
    379a:	6f 5f       	subi	r22, 0xFF	; 255
    379c:	7f 4f       	sbci	r23, 0xFF	; 255
    379e:	0e 94 97 01 	call	0x32e	; 0x32e <validate>
	if (res == FR_OK) {
    37a2:	00 97       	sbiw	r24, 0x00	; 0
    37a4:	19 f4       	brne	.+6      	; 0x37ac <f_closedir+0x24>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
    37a6:	f8 01       	movw	r30, r16
    37a8:	11 82       	std	Z+1, r1	; 0x01
    37aa:	10 82       	st	Z, r1
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
}
    37ac:	0f 90       	pop	r0
    37ae:	0f 90       	pop	r0
    37b0:	df 91       	pop	r29
    37b2:	cf 91       	pop	r28
    37b4:	1f 91       	pop	r17
    37b6:	0f 91       	pop	r16
    37b8:	08 95       	ret

000037ba <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    37ba:	cf 92       	push	r12
    37bc:	df 92       	push	r13
    37be:	ef 92       	push	r14
    37c0:	ff 92       	push	r15
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <f_readdir+0x12>
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
    37d0:	8c 01       	movw	r16, r24
    37d2:	6b 01       	movw	r12, r22
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(dp, &fs);	/* Check validity of the object */
    37d4:	be 01       	movw	r22, r28
    37d6:	6f 5f       	subi	r22, 0xFF	; 255
    37d8:	7f 4f       	sbci	r23, 0xFF	; 255
    37da:	0e 94 97 01 	call	0x32e	; 0x32e <validate>
    37de:	7c 01       	movw	r14, r24
	if (res == FR_OK) {
    37e0:	00 97       	sbiw	r24, 0x00	; 0
    37e2:	61 f4       	brne	.+24     	; 0x37fc <f_readdir+0x42>
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    37e4:	c8 01       	movw	r24, r16
	DEF_NAMBUF


	res = validate(dp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (!fno) {
    37e6:	c1 14       	cp	r12, r1
    37e8:	d1 04       	cpc	r13, r1
    37ea:	79 f1       	breq	.+94     	; 0x384a <f_readdir+0x90>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
    37ec:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <dir_read.constprop.10>
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
    37f0:	84 30       	cpi	r24, 0x04	; 4
    37f2:	91 05       	cpc	r25, r1
    37f4:	79 f0       	breq	.+30     	; 0x3814 <f_readdir+0x5a>
			if (res == FR_OK) {				/* A valid entry is found */
    37f6:	00 97       	sbiw	r24, 0x00	; 0
    37f8:	69 f0       	breq	.+26     	; 0x3814 <f_readdir+0x5a>
    37fa:	7c 01       	movw	r14, r24
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
}
    37fc:	c7 01       	movw	r24, r14
    37fe:	0f 90       	pop	r0
    3800:	0f 90       	pop	r0
    3802:	df 91       	pop	r29
    3804:	cf 91       	pop	r28
    3806:	1f 91       	pop	r17
    3808:	0f 91       	pop	r16
    380a:	ff 90       	pop	r15
    380c:	ef 90       	pop	r14
    380e:	df 90       	pop	r13
    3810:	cf 90       	pop	r12
    3812:	08 95       	ret
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
    3814:	f6 01       	movw	r30, r12
    3816:	11 86       	std	Z+9, r1	; 0x09
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
    3818:	f8 01       	movw	r30, r16
    381a:	86 89       	ldd	r24, Z+22	; 0x16
    381c:	97 89       	ldd	r25, Z+23	; 0x17
    381e:	a0 8d       	ldd	r26, Z+24	; 0x18
    3820:	b1 8d       	ldd	r27, Z+25	; 0x19
    3822:	00 97       	sbiw	r24, 0x00	; 0
    3824:	a1 05       	cpc	r26, r1
    3826:	b1 05       	cpc	r27, r1
    3828:	51 f4       	brne	.+20     	; 0x383e <f_readdir+0x84>
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
				res = dir_next(dp, 0);		/* Increment index for next */
    382a:	c8 01       	movw	r24, r16
    382c:	60 e0       	ldi	r22, 0x00	; 0
    382e:	70 e0       	ldi	r23, 0x00	; 0
    3830:	0e 94 fd 0b 	call	0x17fa	; 0x17fa <dir_next>
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
    3834:	84 30       	cpi	r24, 0x04	; 4
    3836:	91 05       	cpc	r25, r1
    3838:	09 f3       	breq	.-62     	; 0x37fc <f_readdir+0x42>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
			if (res == FR_OK) {				/* A valid entry is found */
    383a:	7c 01       	movw	r14, r24
    383c:	df cf       	rjmp	.-66     	; 0x37fc <f_readdir+0x42>
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
    383e:	c8 01       	movw	r24, r16
    3840:	4a 96       	adiw	r24, 0x1a	; 26
    3842:	b6 01       	movw	r22, r12
    3844:	0e 94 dd 01 	call	0x3ba	; 0x3ba <get_fileinfo.isra.3.part.4>
    3848:	f0 cf       	rjmp	.-32     	; 0x382a <f_readdir+0x70>


	res = validate(dp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (!fno) {
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
    384a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <dir_sdi.constprop.11>
    384e:	7c 01       	movw	r14, r24
    3850:	d5 cf       	rjmp	.-86     	; 0x37fc <f_readdir+0x42>

00003852 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
    3852:	ef 92       	push	r14
    3854:	ff 92       	push	r15
    3856:	0f 93       	push	r16
    3858:	1f 93       	push	r17
    385a:	cf 93       	push	r28
    385c:	df 93       	push	r29
    385e:	cd b7       	in	r28, 0x3d	; 61
    3860:	de b7       	in	r29, 0x3e	; 62
    3862:	aa 97       	sbiw	r28, 0x2a	; 42
    3864:	0f b6       	in	r0, 0x3f	; 63
    3866:	f8 94       	cli
    3868:	de bf       	out	0x3e, r29	; 62
    386a:	0f be       	out	0x3f, r0	; 63
    386c:	cd bf       	out	0x3d, r28	; 61
    386e:	9a a7       	lds	r25, 0x7a
    3870:	89 a7       	lds	r24, 0x79
    3872:	7b 01       	movw	r14, r22
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive number */
	res = find_volume(&path, &dj.obj.fs, 0);
    3874:	ce 01       	movw	r24, r28
    3876:	89 96       	adiw	r24, 0x29	; 41
    3878:	be 01       	movw	r22, r28
    387a:	6f 5f       	subi	r22, 0xFF	; 255
    387c:	7f 4f       	sbci	r23, 0xFF	; 255
    387e:	40 e0       	ldi	r20, 0x00	; 0
    3880:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <find_volume>
    3884:	8c 01       	movw	r16, r24
	if (res == FR_OK) {
    3886:	00 97       	sbiw	r24, 0x00	; 0
    3888:	71 f0       	breq	.+28     	; 0x38a6 <f_stat+0x54>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
}
    388a:	c8 01       	movw	r24, r16
    388c:	aa 96       	adiw	r28, 0x2a	; 42
    388e:	0f b6       	in	r0, 0x3f	; 63
    3890:	f8 94       	cli
    3892:	de bf       	out	0x3e, r29	; 62
    3894:	0f be       	out	0x3f, r0	; 63
    3896:	cd bf       	out	0x3d, r28	; 61
    3898:	df 91       	pop	r29
    389a:	cf 91       	pop	r28
    389c:	1f 91       	pop	r17
    389e:	0f 91       	pop	r16
    38a0:	ff 90       	pop	r15
    38a2:	ef 90       	pop	r14
    38a4:	08 95       	ret

	/* Get logical drive number */
	res = find_volume(&path, &dj.obj.fs, 0);
	if (res == FR_OK) {
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
    38a6:	69 a5       	lds	r22, 0x69
    38a8:	7a a5       	lds	r23, 0x6a
    38aa:	ce 01       	movw	r24, r28
    38ac:	01 96       	adiw	r24, 0x01	; 1
    38ae:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <follow_path>
    38b2:	8c 01       	movw	r16, r24
		if (res == FR_OK) {				/* Follow completed */
    38b4:	00 97       	sbiw	r24, 0x00	; 0
    38b6:	49 f7       	brne	.-46     	; 0x388a <f_stat+0x38>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
    38b8:	88 a5       	lds	r24, 0x68
    38ba:	87 fd       	sbrc	r24, 7
    38bc:	13 c0       	rjmp	.+38     	; 0x38e4 <f_stat+0x92>
				res = FR_INVALID_NAME;
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
    38be:	e1 14       	cp	r14, r1
    38c0:	f1 04       	cpc	r15, r1
    38c2:	19 f3       	breq	.-58     	; 0x388a <f_stat+0x38>
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
    38c4:	f7 01       	movw	r30, r14
    38c6:	11 86       	std	Z+9, r1	; 0x09
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
    38c8:	8f 89       	ldd	r24, Y+23	; 0x17
    38ca:	98 8d       	ldd	r25, Y+24	; 0x18
    38cc:	a9 8d       	ldd	r26, Y+25	; 0x19
    38ce:	ba 8d       	ldd	r27, Y+26	; 0x1a
    38d0:	00 97       	sbiw	r24, 0x00	; 0
    38d2:	a1 05       	cpc	r26, r1
    38d4:	b1 05       	cpc	r27, r1
    38d6:	c9 f2       	breq	.-78     	; 0x388a <f_stat+0x38>
    38d8:	ce 01       	movw	r24, r28
    38da:	4b 96       	adiw	r24, 0x1b	; 27
    38dc:	b7 01       	movw	r22, r14
    38de:	0e 94 dd 01 	call	0x3ba	; 0x3ba <get_fileinfo.isra.3.part.4>
    38e2:	d3 cf       	rjmp	.-90     	; 0x388a <f_stat+0x38>
	if (res == FR_OK) {
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
		if (res == FR_OK) {				/* Follow completed */
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
				res = FR_INVALID_NAME;
    38e4:	06 e0       	ldi	r16, 0x06	; 6
    38e6:	10 e0       	ldi	r17, 0x00	; 0
    38e8:	d0 cf       	rjmp	.-96     	; 0x388a <f_stat+0x38>

000038ea <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
    38ea:	2f 92       	push	r2
    38ec:	3f 92       	push	r3
    38ee:	4f 92       	push	r4
    38f0:	5f 92       	push	r5
    38f2:	6f 92       	push	r6
    38f4:	7f 92       	push	r7
    38f6:	8f 92       	push	r8
    38f8:	9f 92       	push	r9
    38fa:	af 92       	push	r10
    38fc:	bf 92       	push	r11
    38fe:	cf 92       	push	r12
    3900:	df 92       	push	r13
    3902:	ef 92       	push	r14
    3904:	ff 92       	push	r15
    3906:	0f 93       	push	r16
    3908:	1f 93       	push	r17
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	28 97       	sbiw	r28, 0x08	; 8
    3914:	0f b6       	in	r0, 0x3f	; 63
    3916:	f8 94       	cli
    3918:	de bf       	out	0x3e, r29	; 62
    391a:	0f be       	out	0x3f, r0	; 63
    391c:	cd bf       	out	0x3d, r28	; 61
    391e:	9c 83       	std	Y+4, r25	; 0x04
    3920:	8b 83       	std	Y+3, r24	; 0x03
    3922:	7e 83       	std	Y+6, r23	; 0x06
    3924:	6d 83       	std	Y+5, r22	; 0x05
    3926:	8a 01       	movw	r16, r20
	BYTE *p;
	_FDID obj;


	/* Get logical drive number */
	res = find_volume(&path, &fs, 0);
    3928:	ce 01       	movw	r24, r28
    392a:	03 96       	adiw	r24, 0x03	; 3
    392c:	be 01       	movw	r22, r28
    392e:	6f 5f       	subi	r22, 0xFF	; 255
    3930:	7f 4f       	sbci	r23, 0xFF	; 255
    3932:	40 e0       	ldi	r20, 0x00	; 0
    3934:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <find_volume>
    3938:	4c 01       	movw	r8, r24
	if (res == FR_OK) {
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	09 f0       	breq	.+2      	; 0x3940 <f_getfree+0x56>
    393e:	b8 c0       	rjmp	.+368    	; 0x3ab0 <f_getfree+0x1c6>
		*fatfs = fs;				/* Return ptr to the fs object */
    3940:	a9 80       	ldd	r10, Y+1	; 0x01
    3942:	ba 80       	ldd	r11, Y+2	; 0x02
    3944:	d8 01       	movw	r26, r16
    3946:	ad 92       	st	X+, r10
    3948:	bc 92       	st	X, r11
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
    394a:	f5 01       	movw	r30, r10
    394c:	87 85       	ldd	r24, Z+15	; 0x0f
    394e:	90 89       	ldd	r25, Z+16	; 0x10
    3950:	a1 89       	ldd	r26, Z+17	; 0x11
    3952:	b2 89       	ldd	r27, Z+18	; 0x12
    3954:	c3 88       	ldd	r12, Z+19	; 0x13
    3956:	d4 88       	ldd	r13, Z+20	; 0x14
    3958:	e5 88       	ldd	r14, Z+21	; 0x15
    395a:	f6 88       	ldd	r15, Z+22	; 0x16
    395c:	b7 01       	movw	r22, r14
    395e:	a6 01       	movw	r20, r12
    3960:	42 50       	subi	r20, 0x02	; 2
    3962:	50 40       	sbci	r21, 0x00	; 0
    3964:	60 40       	sbci	r22, 0x00	; 0
    3966:	70 40       	sbci	r23, 0x00	; 0
    3968:	48 17       	cp	r20, r24
    396a:	59 07       	cpc	r21, r25
    396c:	6a 07       	cpc	r22, r26
    396e:	7b 07       	cpc	r23, r27
    3970:	08 f0       	brcs	.+2      	; 0x3974 <f_getfree+0x8a>
    3972:	b8 c0       	rjmp	.+368    	; 0x3ae4 <f_getfree+0x1fa>
			*nclst = fs->free_clst;
		} else {
			/* Get number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
    3974:	80 81       	ld	r24, Z
    3976:	81 30       	cpi	r24, 0x01	; 1
    3978:	09 f4       	brne	.+2      	; 0x397c <f_getfree+0x92>
    397a:	bb c0       	rjmp	.+374    	; 0x3af2 <f_getfree+0x208>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
    397c:	47 8d       	ldd	r20, Z+31	; 0x1f
    397e:	50 a1       	lds	r21, 0x40
    3980:	61 a1       	lds	r22, 0x41
    3982:	72 a1       	lds	r23, 0x42
					i = 0; p = 0;
    3984:	e0 e0       	ldi	r30, 0x00	; 0
    3986:	f0 e0       	ldi	r31, 0x00	; 0
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
			*nclst = fs->free_clst;
		} else {
			/* Get number of free clusters */
			nfree = 0;
    398c:	44 24       	eor	r4, r4
    398e:	55 24       	eor	r5, r5
    3990:	32 01       	movw	r6, r4
    3992:	98 86       	std	Y+8, r9	; 0x08
    3994:	8f 82       	std	Y+7, r8	; 0x07
    3996:	85 01       	movw	r16, r10
    3998:	4a 01       	movw	r8, r20
    399a:	5b 01       	movw	r10, r22
    399c:	45 c0       	rjmp	.+138    	; 0x3a28 <f_getfree+0x13e>
							res = move_window(fs, sect++);
							if (res != FR_OK) break;
							p = fs->win;
							i = SS(fs);
						}
						if (fs->fs_type == FS_FAT16) {
    399e:	d8 01       	movw	r26, r16
    39a0:	8c 91       	ld	r24, X
    39a2:	82 30       	cpi	r24, 0x02	; 2
    39a4:	09 f4       	brne	.+2      	; 0x39a8 <f_getfree+0xbe>
    39a6:	5c c0       	rjmp	.+184    	; 0x3a60 <f_getfree+0x176>
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
    39a8:	83 81       	ldd	r24, Z+3	; 0x03
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	a0 e0       	ldi	r26, 0x00	; 0
    39ae:	b0 e0       	ldi	r27, 0x00	; 0
	rv = rv << 8 | ptr[2];
    39b0:	44 27       	eor	r20, r20
    39b2:	58 2f       	mov	r21, r24
    39b4:	69 2f       	mov	r22, r25
    39b6:	7a 2f       	mov	r23, r26
    39b8:	82 81       	ldd	r24, Z+2	; 0x02
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	a0 e0       	ldi	r26, 0x00	; 0
    39be:	b0 e0       	ldi	r27, 0x00	; 0
    39c0:	48 2b       	or	r20, r24
    39c2:	59 2b       	or	r21, r25
    39c4:	6a 2b       	or	r22, r26
    39c6:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[1];
    39c8:	76 2f       	mov	r23, r22
    39ca:	65 2f       	mov	r22, r21
    39cc:	54 2f       	mov	r21, r20
    39ce:	44 27       	eor	r20, r20
    39d0:	81 81       	ldd	r24, Z+1	; 0x01
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	a0 e0       	ldi	r26, 0x00	; 0
    39d6:	b0 e0       	ldi	r27, 0x00	; 0
    39d8:	48 2b       	or	r20, r24
    39da:	59 2b       	or	r21, r25
    39dc:	6a 2b       	or	r22, r26
    39de:	7b 2b       	or	r23, r27
	rv = rv << 8 | ptr[0];
    39e0:	76 2f       	mov	r23, r22
    39e2:	65 2f       	mov	r22, r21
    39e4:	54 2f       	mov	r21, r20
    39e6:	44 27       	eor	r20, r20
    39e8:	80 81       	ld	r24, Z
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	a0 e0       	ldi	r26, 0x00	; 0
    39ee:	b0 e0       	ldi	r27, 0x00	; 0
    39f0:	48 2b       	or	r20, r24
    39f2:	59 2b       	or	r21, r25
    39f4:	6a 2b       	or	r22, r26
    39f6:	7b 2b       	or	r23, r27
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(p) == 0) nfree++;
							p += 2; i -= 2;
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
    39f8:	7f 70       	andi	r23, 0x0F	; 15
    39fa:	41 15       	cp	r20, r1
    39fc:	51 05       	cpc	r21, r1
    39fe:	61 05       	cpc	r22, r1
    3a00:	71 05       	cpc	r23, r1
    3a02:	29 f4       	brne	.+10     	; 0x3a0e <f_getfree+0x124>
    3a04:	08 94       	sec
    3a06:	41 1c       	adc	r4, r1
    3a08:	51 1c       	adc	r5, r1
    3a0a:	61 1c       	adc	r6, r1
    3a0c:	71 1c       	adc	r7, r1
							p += 4; i -= 4;
    3a0e:	34 96       	adiw	r30, 0x04	; 4
    3a10:	24 50       	subi	r18, 0x04	; 4
    3a12:	30 40       	sbci	r19, 0x00	; 0
						}
					} while (--clst);
    3a14:	08 94       	sec
    3a16:	c1 08       	sbc	r12, r1
    3a18:	d1 08       	sbc	r13, r1
    3a1a:	e1 08       	sbc	r14, r1
    3a1c:	f1 08       	sbc	r15, r1
    3a1e:	c1 14       	cp	r12, r1
    3a20:	d1 04       	cpc	r13, r1
    3a22:	e1 04       	cpc	r14, r1
    3a24:	f1 04       	cpc	r15, r1
    3a26:	69 f1       	breq	.+90     	; 0x3a82 <f_getfree+0x198>
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
					i = 0; p = 0;
					do {
						if (i == 0) {
    3a28:	21 15       	cp	r18, r1
    3a2a:	31 05       	cpc	r19, r1
    3a2c:	09 f0       	breq	.+2      	; 0x3a30 <f_getfree+0x146>
    3a2e:	b7 cf       	rjmp	.-146    	; 0x399e <f_getfree+0xb4>
							res = move_window(fs, sect++);
    3a30:	c8 01       	movw	r24, r16
    3a32:	b5 01       	movw	r22, r10
    3a34:	a4 01       	movw	r20, r8
    3a36:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
							if (res != FR_OK) break;
    3a3a:	00 97       	sbiw	r24, 0x00	; 0
    3a3c:	09 f0       	breq	.+2      	; 0x3a40 <f_getfree+0x156>
    3a3e:	95 c0       	rjmp	.+298    	; 0x3b6a <f_getfree+0x280>
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
					i = 0; p = 0;
					do {
						if (i == 0) {
							res = move_window(fs, sect++);
    3a40:	08 94       	sec
    3a42:	81 1c       	adc	r8, r1
    3a44:	91 1c       	adc	r9, r1
    3a46:	a1 1c       	adc	r10, r1
    3a48:	b1 1c       	adc	r11, r1
							if (res != FR_OK) break;
							p = fs->win;
    3a4a:	09 81       	ldd	r16, Y+1	; 0x01
    3a4c:	1a 81       	ldd	r17, Y+2	; 0x02
    3a4e:	f8 01       	movw	r30, r16
    3a50:	bf 96       	adiw	r30, 0x2f	; 47
							i = SS(fs);
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	32 e0       	ldi	r19, 0x02	; 2
						}
						if (fs->fs_type == FS_FAT16) {
    3a56:	d8 01       	movw	r26, r16
    3a58:	8c 91       	ld	r24, X
    3a5a:	82 30       	cpi	r24, 0x02	; 2
    3a5c:	09 f0       	breq	.+2      	; 0x3a60 <f_getfree+0x176>
    3a5e:	a4 cf       	rjmp	.-184    	; 0x39a8 <f_getfree+0xbe>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    3a60:	31 80       	ldd	r3, Z+1	; 0x01
    3a62:	22 24       	eor	r2, r2
    3a64:	80 81       	ld	r24, Z
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	82 29       	or	r24, r2
    3a6a:	93 29       	or	r25, r3
							if (res != FR_OK) break;
							p = fs->win;
							i = SS(fs);
						}
						if (fs->fs_type == FS_FAT16) {
							if (ld_word(p) == 0) nfree++;
    3a6c:	00 97       	sbiw	r24, 0x00	; 0
    3a6e:	29 f4       	brne	.+10     	; 0x3a7a <f_getfree+0x190>
    3a70:	08 94       	sec
    3a72:	41 1c       	adc	r4, r1
    3a74:	51 1c       	adc	r5, r1
    3a76:	61 1c       	adc	r6, r1
    3a78:	71 1c       	adc	r7, r1
							p += 2; i -= 2;
    3a7a:	32 96       	adiw	r30, 0x02	; 2
    3a7c:	22 50       	subi	r18, 0x02	; 2
    3a7e:	30 40       	sbci	r19, 0x00	; 0
    3a80:	c9 cf       	rjmp	.-110    	; 0x3a14 <f_getfree+0x12a>
    3a82:	8f 80       	ldd	r8, Y+7	; 0x07
    3a84:	98 84       	ldd	r9, Y+8	; 0x08
    3a86:	58 01       	movw	r10, r16
							p += 4; i -= 4;
						}
					} while (--clst);
				}
			}
			*nclst = nfree;			/* Return the free clusters */
    3a88:	ed 81       	ldd	r30, Y+5	; 0x05
    3a8a:	fe 81       	ldd	r31, Y+6	; 0x06
    3a8c:	40 82       	st	Z, r4
    3a8e:	51 82       	std	Z+1, r5	; 0x01
    3a90:	62 82       	std	Z+2, r6	; 0x02
    3a92:	73 82       	std	Z+3, r7	; 0x03
			fs->free_clst = nfree;	/* Now free_clst is valid */
    3a94:	d5 01       	movw	r26, r10
    3a96:	1f 96       	adiw	r26, 0x0f	; 15
    3a98:	4d 92       	st	X+, r4
    3a9a:	5d 92       	st	X+, r5
    3a9c:	6d 92       	st	X+, r6
    3a9e:	7c 92       	st	X, r7
    3aa0:	52 97       	sbiw	r26, 0x12	; 18
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
    3aa2:	14 96       	adiw	r26, 0x04	; 4
    3aa4:	8c 91       	ld	r24, X
    3aa6:	14 97       	sbiw	r26, 0x04	; 4
    3aa8:	81 60       	ori	r24, 0x01	; 1
    3aaa:	14 96       	adiw	r26, 0x04	; 4
    3aac:	8c 93       	st	X, r24
    3aae:	14 97       	sbiw	r26, 0x04	; 4
		}
	}

	LEAVE_FF(fs, res);
}
    3ab0:	c4 01       	movw	r24, r8
    3ab2:	28 96       	adiw	r28, 0x08	; 8
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	de bf       	out	0x3e, r29	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	cd bf       	out	0x3d, r28	; 61
    3abe:	df 91       	pop	r29
    3ac0:	cf 91       	pop	r28
    3ac2:	1f 91       	pop	r17
    3ac4:	0f 91       	pop	r16
    3ac6:	ff 90       	pop	r15
    3ac8:	ef 90       	pop	r14
    3aca:	df 90       	pop	r13
    3acc:	cf 90       	pop	r12
    3ace:	bf 90       	pop	r11
    3ad0:	af 90       	pop	r10
    3ad2:	9f 90       	pop	r9
    3ad4:	8f 90       	pop	r8
    3ad6:	7f 90       	pop	r7
    3ad8:	6f 90       	pop	r6
    3ada:	5f 90       	pop	r5
    3adc:	4f 90       	pop	r4
    3ade:	3f 90       	pop	r3
    3ae0:	2f 90       	pop	r2
    3ae2:	08 95       	ret
	res = find_volume(&path, &fs, 0);
	if (res == FR_OK) {
		*fatfs = fs;				/* Return ptr to the fs object */
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
			*nclst = fs->free_clst;
    3ae4:	ed 81       	ldd	r30, Y+5	; 0x05
    3ae6:	fe 81       	ldd	r31, Y+6	; 0x06
    3ae8:	80 83       	st	Z, r24
    3aea:	91 83       	std	Z+1, r25	; 0x01
    3aec:	a2 83       	std	Z+2, r26	; 0x02
    3aee:	b3 83       	std	Z+3, r27	; 0x03
    3af0:	df cf       	rjmp	.-66     	; 0x3ab0 <f_getfree+0x1c6>
		} else {
			/* Get number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
    3af2:	22 e0       	ldi	r18, 0x02	; 2
    3af4:	c2 2e       	mov	r12, r18
    3af6:	d1 2c       	mov	r13, r1
    3af8:	e1 2c       	mov	r14, r1
    3afa:	f1 2c       	mov	r15, r1
    3afc:	44 24       	eor	r4, r4
    3afe:	55 24       	eor	r5, r5
    3b00:	32 01       	movw	r6, r4
    3b02:	1e c0       	rjmp	.+60     	; 0x3b40 <f_getfree+0x256>
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
					if (stat == 1) { res = FR_INT_ERR; break; }
    3b04:	81 30       	cpi	r24, 0x01	; 1
    3b06:	91 05       	cpc	r25, r1
    3b08:	a1 05       	cpc	r26, r1
    3b0a:	b1 05       	cpc	r27, r1
    3b0c:	91 f1       	breq	.+100    	; 0x3b72 <f_getfree+0x288>
					if (stat == 0) nfree++;
    3b0e:	00 97       	sbiw	r24, 0x00	; 0
    3b10:	a1 05       	cpc	r26, r1
    3b12:	b1 05       	cpc	r27, r1
    3b14:	29 f4       	brne	.+10     	; 0x3b20 <f_getfree+0x236>
    3b16:	08 94       	sec
    3b18:	41 1c       	adc	r4, r1
    3b1a:	51 1c       	adc	r5, r1
    3b1c:	61 1c       	adc	r6, r1
    3b1e:	71 1c       	adc	r7, r1
				} while (++clst < fs->n_fatent);
    3b20:	08 94       	sec
    3b22:	c1 1c       	adc	r12, r1
    3b24:	d1 1c       	adc	r13, r1
    3b26:	e1 1c       	adc	r14, r1
    3b28:	f1 1c       	adc	r15, r1
    3b2a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b2c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b2e:	83 89       	ldd	r24, Z+19	; 0x13
    3b30:	94 89       	ldd	r25, Z+20	; 0x14
    3b32:	a5 89       	ldd	r26, Z+21	; 0x15
    3b34:	b6 89       	ldd	r27, Z+22	; 0x16
    3b36:	c8 16       	cp	r12, r24
    3b38:	d9 06       	cpc	r13, r25
    3b3a:	ea 06       	cpc	r14, r26
    3b3c:	fb 06       	cpc	r15, r27
    3b3e:	f8 f4       	brcc	.+62     	; 0x3b7e <f_getfree+0x294>
			/* Get number of free clusters */
			nfree = 0;
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
    3b40:	c5 01       	movw	r24, r10
    3b42:	b7 01       	movw	r22, r14
    3b44:	a6 01       	movw	r20, r12
    3b46:	0e 94 14 09 	call	0x1228	; 0x1228 <get_fat.isra.8>
    3b4a:	dc 01       	movw	r26, r24
    3b4c:	cb 01       	movw	r24, r22
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
    3b4e:	8f 3f       	cpi	r24, 0xFF	; 255
    3b50:	ef ef       	ldi	r30, 0xFF	; 255
    3b52:	9e 07       	cpc	r25, r30
    3b54:	ef ef       	ldi	r30, 0xFF	; 255
    3b56:	ae 07       	cpc	r26, r30
    3b58:	ef ef       	ldi	r30, 0xFF	; 255
    3b5a:	be 07       	cpc	r27, r30
    3b5c:	99 f6       	brne	.-90     	; 0x3b04 <f_getfree+0x21a>
    3b5e:	a9 80       	ldd	r10, Y+1	; 0x01
    3b60:	ba 80       	ldd	r11, Y+2	; 0x02
    3b62:	91 e0       	ldi	r25, 0x01	; 1
    3b64:	89 2e       	mov	r8, r25
    3b66:	91 2c       	mov	r9, r1
    3b68:	8f cf       	rjmp	.-226    	; 0x3a88 <f_getfree+0x19e>
					clst = fs->n_fatent; sect = fs->fatbase;
					i = 0; p = 0;
					do {
						if (i == 0) {
							res = move_window(fs, sect++);
							if (res != FR_OK) break;
    3b6a:	a9 80       	ldd	r10, Y+1	; 0x01
    3b6c:	ba 80       	ldd	r11, Y+2	; 0x02
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
					i = 0; p = 0;
					do {
						if (i == 0) {
							res = move_window(fs, sect++);
    3b6e:	4c 01       	movw	r8, r24
    3b70:	8b cf       	rjmp	.-234    	; 0x3a88 <f_getfree+0x19e>
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
				clst = 2; obj.fs = fs;
				do {
					stat = get_fat(&obj, clst);
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
					if (stat == 1) { res = FR_INT_ERR; break; }
    3b72:	a9 80       	ldd	r10, Y+1	; 0x01
    3b74:	ba 80       	ldd	r11, Y+2	; 0x02
    3b76:	82 e0       	ldi	r24, 0x02	; 2
    3b78:	88 2e       	mov	r8, r24
    3b7a:	91 2c       	mov	r9, r1
    3b7c:	85 cf       	rjmp	.-246    	; 0x3a88 <f_getfree+0x19e>
					if (stat == 0) nfree++;
				} while (++clst < fs->n_fatent);
    3b7e:	5f 01       	movw	r10, r30
    3b80:	83 cf       	rjmp	.-250    	; 0x3a88 <f_getfree+0x19e>

00003b82 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
    3b82:	cf 92       	push	r12
    3b84:	df 92       	push	r13
    3b86:	ef 92       	push	r14
    3b88:	ff 92       	push	r15
    3b8a:	0f 93       	push	r16
    3b8c:	1f 93       	push	r17
    3b8e:	cf 93       	push	r28
    3b90:	df 93       	push	r29
    3b92:	00 d0       	rcall	.+0      	; 0x3b94 <f_truncate+0x12>
    3b94:	cd b7       	in	r28, 0x3d	; 61
    3b96:	de b7       	in	r29, 0x3e	; 62
    3b98:	6c 01       	movw	r12, r24
	FRESULT res;
	FATFS *fs;
	DWORD ncl;


	res = validate(fp, &fs);	/* Check validity of the object */
    3b9a:	be 01       	movw	r22, r28
    3b9c:	6f 5f       	subi	r22, 0xFF	; 255
    3b9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3ba0:	0e 94 97 01 	call	0x32e	; 0x32e <validate>
    3ba4:	7c 01       	movw	r14, r24
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
    3ba6:	00 97       	sbiw	r24, 0x00	; 0
    3ba8:	81 f4       	brne	.+32     	; 0x3bca <f_truncate+0x48>
    3baa:	d6 01       	movw	r26, r12
    3bac:	1f 96       	adiw	r26, 0x0f	; 15
    3bae:	ec 90       	ld	r14, X
    3bb0:	1f 97       	sbiw	r26, 0x0f	; 15
    3bb2:	ff 24       	eor	r15, r15
    3bb4:	e1 14       	cp	r14, r1
    3bb6:	f1 04       	cpc	r15, r1
    3bb8:	41 f4       	brne	.+16     	; 0x3bca <f_truncate+0x48>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
    3bba:	1e 96       	adiw	r26, 0x0e	; 14
    3bbc:	8c 91       	ld	r24, X
    3bbe:	1e 97       	sbiw	r26, 0x0e	; 14
    3bc0:	81 fd       	sbrc	r24, 1
    3bc2:	0f c0       	rjmp	.+30     	; 0x3be2 <f_truncate+0x60>
    3bc4:	67 e0       	ldi	r22, 0x07	; 7
    3bc6:	e6 2e       	mov	r14, r22
    3bc8:	f1 2c       	mov	r15, r1
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    3bca:	c7 01       	movw	r24, r14
    3bcc:	0f 90       	pop	r0
    3bce:	0f 90       	pop	r0
    3bd0:	df 91       	pop	r29
    3bd2:	cf 91       	pop	r28
    3bd4:	1f 91       	pop	r17
    3bd6:	0f 91       	pop	r16
    3bd8:	ff 90       	pop	r15
    3bda:	ef 90       	pop	r14
    3bdc:	df 90       	pop	r13
    3bde:	cf 90       	pop	r12
    3be0:	08 95       	ret

	res = validate(fp, &fs);	/* Check validity of the object */
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */

	if (fp->obj.objsize > fp->fptr) {
    3be2:	50 96       	adiw	r26, 0x10	; 16
    3be4:	8d 91       	ld	r24, X+
    3be6:	9d 91       	ld	r25, X+
    3be8:	0d 90       	ld	r0, X+
    3bea:	bc 91       	ld	r27, X
    3bec:	a0 2d       	mov	r26, r0
    3bee:	f6 01       	movw	r30, r12
    3bf0:	42 85       	ldd	r20, Z+10	; 0x0a
    3bf2:	53 85       	ldd	r21, Z+11	; 0x0b
    3bf4:	64 85       	ldd	r22, Z+12	; 0x0c
    3bf6:	75 85       	ldd	r23, Z+13	; 0x0d
    3bf8:	84 17       	cp	r24, r20
    3bfa:	95 07       	cpc	r25, r21
    3bfc:	a6 07       	cpc	r26, r22
    3bfe:	b7 07       	cpc	r27, r23
    3c00:	20 f7       	brcc	.-56     	; 0x3bca <f_truncate+0x48>
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
    3c02:	00 97       	sbiw	r24, 0x00	; 0
    3c04:	a1 05       	cpc	r26, r1
    3c06:	b1 05       	cpc	r27, r1
    3c08:	09 f4       	brne	.+2      	; 0x3c0c <f_truncate+0x8a>
    3c0a:	4d c0       	rjmp	.+154    	; 0x3ca6 <f_truncate+0x124>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
			fp->obj.sclust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
    3c0c:	f6 01       	movw	r30, r12
    3c0e:	44 89       	ldd	r20, Z+20	; 0x14
    3c10:	55 89       	ldd	r21, Z+21	; 0x15
    3c12:	66 89       	ldd	r22, Z+22	; 0x16
    3c14:	77 89       	ldd	r23, Z+23	; 0x17
    3c16:	80 81       	ld	r24, Z
    3c18:	91 81       	ldd	r25, Z+1	; 0x01
    3c1a:	0e 94 14 09 	call	0x1228	; 0x1228 <get_fat.isra.8>
    3c1e:	ab 01       	movw	r20, r22
    3c20:	bc 01       	movw	r22, r24
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3c22:	4f 3f       	cpi	r20, 0xFF	; 255
    3c24:	ff ef       	ldi	r31, 0xFF	; 255
    3c26:	5f 07       	cpc	r21, r31
    3c28:	ff ef       	ldi	r31, 0xFF	; 255
    3c2a:	6f 07       	cpc	r22, r31
    3c2c:	ff ef       	ldi	r31, 0xFF	; 255
    3c2e:	7f 07       	cpc	r23, r31
    3c30:	09 f4       	brne	.+2      	; 0x3c34 <f_truncate+0xb2>
    3c32:	72 c0       	rjmp	.+228    	; 0x3d18 <f_truncate+0x196>
			if (ncl == 1) res = FR_INT_ERR;
    3c34:	41 30       	cpi	r20, 0x01	; 1
    3c36:	51 05       	cpc	r21, r1
    3c38:	61 05       	cpc	r22, r1
    3c3a:	71 05       	cpc	r23, r1
    3c3c:	09 f4       	brne	.+2      	; 0x3c40 <f_truncate+0xbe>
    3c3e:	5b c0       	rjmp	.+182    	; 0x3cf6 <f_truncate+0x174>
			if (res == FR_OK && ncl < fs->n_fatent) {
    3c40:	e9 81       	ldd	r30, Y+1	; 0x01
    3c42:	fa 81       	ldd	r31, Y+2	; 0x02
    3c44:	83 89       	ldd	r24, Z+19	; 0x13
    3c46:	94 89       	ldd	r25, Z+20	; 0x14
    3c48:	a5 89       	ldd	r26, Z+21	; 0x15
    3c4a:	b6 89       	ldd	r27, Z+22	; 0x16
    3c4c:	48 17       	cp	r20, r24
    3c4e:	59 07       	cpc	r21, r25
    3c50:	6a 07       	cpc	r22, r26
    3c52:	7b 07       	cpc	r23, r27
    3c54:	08 f4       	brcc	.+2      	; 0x3c58 <f_truncate+0xd6>
    3c56:	65 c0       	rjmp	.+202    	; 0x3d22 <f_truncate+0x1a0>
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
    3c58:	f6 01       	movw	r30, r12
    3c5a:	80 89       	ldd	r24, Z+16	; 0x10
    3c5c:	91 89       	ldd	r25, Z+17	; 0x11
    3c5e:	a2 89       	ldd	r26, Z+18	; 0x12
    3c60:	b3 89       	ldd	r27, Z+19	; 0x13
    3c62:	82 87       	std	Z+10, r24	; 0x0a
    3c64:	93 87       	std	Z+11, r25	; 0x0b
    3c66:	a4 87       	std	Z+12, r26	; 0x0c
    3c68:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA_MODIFIED;
    3c6a:	86 85       	ldd	r24, Z+14	; 0x0e
    3c6c:	80 64       	ori	r24, 0x40	; 64
    3c6e:	86 87       	std	Z+14, r24	; 0x0e
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
    3c70:	87 ff       	sbrs	r24, 7
    3c72:	ab cf       	rjmp	.-170    	; 0x3bca <f_truncate+0x48>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
    3c74:	e9 81       	ldd	r30, Y+1	; 0x01
    3c76:	fa 81       	ldd	r31, Y+2	; 0x02
    3c78:	b6 01       	movw	r22, r12
    3c7a:	6e 5d       	subi	r22, 0xDE	; 222
    3c7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c7e:	d6 01       	movw	r26, r12
    3c80:	58 96       	adiw	r26, 0x18	; 24
    3c82:	2d 91       	ld	r18, X+
    3c84:	3d 91       	ld	r19, X+
    3c86:	4d 91       	ld	r20, X+
    3c88:	5c 91       	ld	r21, X
    3c8a:	5b 97       	sbiw	r26, 0x1b	; 27
    3c8c:	81 81       	ldd	r24, Z+1	; 0x01
    3c8e:	01 e0       	ldi	r16, 0x01	; 1
    3c90:	10 e0       	ldi	r17, 0x00	; 0
    3c92:	0e 94 8d 22 	call	0x451a	; 0x451a <disk_write>
    3c96:	00 97       	sbiw	r24, 0x00	; 0
    3c98:	09 f0       	breq	.+2      	; 0x3c9c <f_truncate+0x11a>
    3c9a:	4f c0       	rjmp	.+158    	; 0x3d3a <f_truncate+0x1b8>
				res = FR_DISK_ERR;
			} else {
				fp->flag &= ~FA_DIRTY;
    3c9c:	f6 01       	movw	r30, r12
    3c9e:	86 85       	ldd	r24, Z+14	; 0x0e
    3ca0:	8f 77       	andi	r24, 0x7F	; 127
    3ca2:	86 87       	std	Z+14, r24	; 0x0e
    3ca4:	92 cf       	rjmp	.-220    	; 0x3bca <f_truncate+0x48>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */

	if (fp->obj.objsize > fp->fptr) {
		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
    3ca6:	46 81       	ldd	r20, Z+6	; 0x06
    3ca8:	57 81       	ldd	r21, Z+7	; 0x07
    3caa:	60 85       	ldd	r22, Z+8	; 0x08
    3cac:	71 85       	ldd	r23, Z+9	; 0x09
    3cae:	c6 01       	movw	r24, r12
    3cb0:	00 e0       	ldi	r16, 0x00	; 0
    3cb2:	10 e0       	ldi	r17, 0x00	; 0
    3cb4:	98 01       	movw	r18, r16
    3cb6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <remove_chain>
    3cba:	9c 01       	movw	r18, r24
			fp->obj.sclust = 0;
    3cbc:	d6 01       	movw	r26, r12
    3cbe:	16 96       	adiw	r26, 0x06	; 6
    3cc0:	1d 92       	st	X+, r1
    3cc2:	1d 92       	st	X+, r1
    3cc4:	1d 92       	st	X+, r1
    3cc6:	1c 92       	st	X, r1
    3cc8:	19 97       	sbiw	r26, 0x09	; 9
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
    3cca:	f6 01       	movw	r30, r12
    3ccc:	80 89       	ldd	r24, Z+16	; 0x10
    3cce:	91 89       	ldd	r25, Z+17	; 0x11
    3cd0:	a2 89       	ldd	r26, Z+18	; 0x12
    3cd2:	b3 89       	ldd	r27, Z+19	; 0x13
    3cd4:	82 87       	std	Z+10, r24	; 0x0a
    3cd6:	93 87       	std	Z+11, r25	; 0x0b
    3cd8:	a4 87       	std	Z+12, r26	; 0x0c
    3cda:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA_MODIFIED;
    3cdc:	86 85       	ldd	r24, Z+14	; 0x0e
    3cde:	80 64       	ori	r24, 0x40	; 64
    3ce0:	86 87       	std	Z+14, r24	; 0x0e
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
    3ce2:	21 15       	cp	r18, r1
    3ce4:	31 05       	cpc	r19, r1
    3ce6:	21 f2       	breq	.-120    	; 0x3c70 <f_truncate+0xee>
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
				res = FR_DISK_ERR;
			} else {
				fp->flag &= ~FA_DIRTY;
    3ce8:	42 2f       	mov	r20, r18
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
		fp->flag |= FA_MODIFIED;
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
    3cea:	79 01       	movw	r14, r18
			} else {
				fp->flag &= ~FA_DIRTY;
			}
		}
#endif
		if (res != FR_OK) ABORT(fs, res);
    3cec:	d6 01       	movw	r26, r12
    3cee:	1f 96       	adiw	r26, 0x0f	; 15
    3cf0:	4c 93       	st	X, r20
    3cf2:	1f 97       	sbiw	r26, 0x0f	; 15
    3cf4:	6a cf       	rjmp	.-300    	; 0x3bca <f_truncate+0x48>
			fp->obj.sclust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (ncl == 1) res = FR_INT_ERR;
    3cf6:	42 e0       	ldi	r20, 0x02	; 2
    3cf8:	32 e0       	ldi	r19, 0x02	; 2
    3cfa:	e3 2e       	mov	r14, r19
    3cfc:	f1 2c       	mov	r15, r1
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
			}
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
    3cfe:	f6 01       	movw	r30, r12
    3d00:	80 89       	ldd	r24, Z+16	; 0x10
    3d02:	91 89       	ldd	r25, Z+17	; 0x11
    3d04:	a2 89       	ldd	r26, Z+18	; 0x12
    3d06:	b3 89       	ldd	r27, Z+19	; 0x13
    3d08:	82 87       	std	Z+10, r24	; 0x0a
    3d0a:	93 87       	std	Z+11, r25	; 0x0b
    3d0c:	a4 87       	std	Z+12, r26	; 0x0c
    3d0e:	b5 87       	std	Z+13, r27	; 0x0d
		fp->flag |= FA_MODIFIED;
    3d10:	86 85       	ldd	r24, Z+14	; 0x0e
    3d12:	80 64       	ori	r24, 0x40	; 64
    3d14:	86 87       	std	Z+14, r24	; 0x0e
    3d16:	ea cf       	rjmp	.-44     	; 0x3cec <f_truncate+0x16a>
			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
			fp->obj.sclust = 0;
		} else {				/* When truncate a part of the file, remove remaining clusters */
			ncl = get_fat(&fp->obj, fp->clust);
			res = FR_OK;
			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3d18:	41 e0       	ldi	r20, 0x01	; 1
    3d1a:	51 e0       	ldi	r21, 0x01	; 1
    3d1c:	e5 2e       	mov	r14, r21
    3d1e:	f1 2c       	mov	r15, r1
    3d20:	ee cf       	rjmp	.-36     	; 0x3cfe <f_truncate+0x17c>
			if (ncl == 1) res = FR_INT_ERR;
			if (res == FR_OK && ncl < fs->n_fatent) {
				res = remove_chain(&fp->obj, ncl, fp->clust);
    3d22:	d6 01       	movw	r26, r12
    3d24:	54 96       	adiw	r26, 0x14	; 20
    3d26:	0d 91       	ld	r16, X+
    3d28:	1d 91       	ld	r17, X+
    3d2a:	2d 91       	ld	r18, X+
    3d2c:	3c 91       	ld	r19, X
    3d2e:	57 97       	sbiw	r26, 0x17	; 23
    3d30:	c6 01       	movw	r24, r12
    3d32:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <remove_chain>
    3d36:	9c 01       	movw	r18, r24
    3d38:	c8 cf       	rjmp	.-112    	; 0x3cca <f_truncate+0x148>
		}
		fp->obj.objsize = fp->fptr;	/* Set file size to current R/W point */
		fp->flag |= FA_MODIFIED;
#if !_FS_TINY
		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
			if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) {
    3d3a:	41 e0       	ldi	r20, 0x01	; 1
				res = FR_DISK_ERR;
    3d3c:	71 e0       	ldi	r23, 0x01	; 1
    3d3e:	e7 2e       	mov	r14, r23
    3d40:	f1 2c       	mov	r15, r1
    3d42:	d4 cf       	rjmp	.-88     	; 0x3cec <f_truncate+0x16a>

00003d44 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    3d44:	cf 92       	push	r12
    3d46:	df 92       	push	r13
    3d48:	ef 92       	push	r14
    3d4a:	ff 92       	push	r15
    3d4c:	0f 93       	push	r16
    3d4e:	1f 93       	push	r17
    3d50:	cf 93       	push	r28
    3d52:	df 93       	push	r29
    3d54:	cd b7       	in	r28, 0x3d	; 61
    3d56:	de b7       	in	r29, 0x3e	; 62
    3d58:	c4 55       	subi	r28, 0x54	; 84
    3d5a:	d0 40       	sbci	r29, 0x00	; 0
    3d5c:	0f b6       	in	r0, 0x3f	; 63
    3d5e:	f8 94       	cli
    3d60:	de bf       	out	0x3e, r29	; 62
    3d62:	0f be       	out	0x3f, r0	; 63
    3d64:	cd bf       	out	0x3d, r28	; 61
    3d66:	65 96       	adiw	r28, 0x15	; 21
    3d68:	9f af       	sts	0x7f, r25
    3d6a:	8e af       	sts	0x7e, r24
    3d6c:	65 97       	sbiw	r28, 0x15	; 21
#endif
	DEF_NAMBUF


	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
    3d6e:	ce 01       	movw	r24, r28
    3d70:	8d 5a       	subi	r24, 0xAD	; 173
    3d72:	9f 4f       	sbci	r25, 0xFF	; 255
    3d74:	be 01       	movw	r22, r28
    3d76:	6f 5f       	subi	r22, 0xFF	; 255
    3d78:	7f 4f       	sbci	r23, 0xFF	; 255
    3d7a:	42 e0       	ldi	r20, 0x02	; 2
    3d7c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <find_volume>
	dj.obj.fs = fs;
    3d80:	29 81       	ldd	r18, Y+1	; 0x01
    3d82:	3a 81       	ldd	r19, Y+2	; 0x02
    3d84:	3c a7       	lds	r19, 0x7c
    3d86:	2b a7       	lds	r18, 0x7b
	if (res == FR_OK) {
    3d88:	00 97       	sbiw	r24, 0x00	; 0
    3d8a:	81 f0       	breq	.+32     	; 0x3dac <f_unlink+0x68>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    3d8c:	cc 5a       	subi	r28, 0xAC	; 172
    3d8e:	df 4f       	sbci	r29, 0xFF	; 255
    3d90:	0f b6       	in	r0, 0x3f	; 63
    3d92:	f8 94       	cli
    3d94:	de bf       	out	0x3e, r29	; 62
    3d96:	0f be       	out	0x3f, r0	; 63
    3d98:	cd bf       	out	0x3d, r28	; 61
    3d9a:	df 91       	pop	r29
    3d9c:	cf 91       	pop	r28
    3d9e:	1f 91       	pop	r17
    3da0:	0f 91       	pop	r16
    3da2:	ff 90       	pop	r15
    3da4:	ef 90       	pop	r14
    3da6:	df 90       	pop	r13
    3da8:	cf 90       	pop	r12
    3daa:	08 95       	ret
	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
    3dac:	65 96       	adiw	r28, 0x15	; 21
    3dae:	6e ad       	sts	0x6e, r22
    3db0:	7f ad       	sts	0x6f, r23
    3db2:	65 97       	sbiw	r28, 0x15	; 21
    3db4:	ce 01       	movw	r24, r28
    3db6:	8b 96       	adiw	r24, 0x2b	; 43
    3db8:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <follow_path>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    3dbc:	00 97       	sbiw	r24, 0x00	; 0
    3dbe:	31 f7       	brne	.-52     	; 0x3d8c <f_unlink+0x48>
			if (dj.fn[NSFLAG] & NS_NONAME) {
    3dc0:	63 96       	adiw	r28, 0x13	; 19
    3dc2:	8f ad       	sts	0x6f, r24
    3dc4:	63 97       	sbiw	r28, 0x13	; 19
    3dc6:	87 fd       	sbrc	r24, 7
    3dc8:	06 c0       	rjmp	.+12     	; 0x3dd6 <f_unlink+0x92>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    3dca:	4f a5       	lds	r20, 0x6f
    3dcc:	40 ff       	sbrs	r20, 0
    3dce:	06 c0       	rjmp	.+12     	; 0x3ddc <f_unlink+0x98>
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = dir_read(&sdj, 0);			/* Read an item */
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    3dd0:	87 e0       	ldi	r24, 0x07	; 7
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	db cf       	rjmp	.-74     	; 0x3d8c <f_unlink+0x48>
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    3dd6:	86 e0       	ldi	r24, 0x06	; 6
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	d8 cf       	rjmp	.-80     	; 0x3d8c <f_unlink+0x48>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    3ddc:	69 81       	ldd	r22, Y+1	; 0x01
    3dde:	7a 81       	ldd	r23, Y+2	; 0x02
    3de0:	27 96       	adiw	r28, 0x07	; 7
    3de2:	ee ad       	sts	0x6e, r30
    3de4:	ff ad       	sts	0x6f, r31
    3de6:	27 97       	sbiw	r28, 0x07	; 7
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    3de8:	33 8d       	ldd	r19, Z+27	; 0x1b
    3dea:	20 e0       	ldi	r18, 0x00	; 0
    3dec:	82 8d       	ldd	r24, Z+26	; 0x1a
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	82 2b       	or	r24, r18
    3df2:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    3df4:	6c 01       	movw	r12, r24
    3df6:	ee 24       	eor	r14, r14
    3df8:	ff 24       	eor	r15, r15
	if (fs->fs_type == FS_FAT32) {
    3dfa:	db 01       	movw	r26, r22
    3dfc:	8c 91       	ld	r24, X
    3dfe:	83 30       	cpi	r24, 0x03	; 3
    3e00:	79 f4       	brne	.+30     	; 0x3e20 <f_unlink+0xdc>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    3e02:	35 89       	ldd	r19, Z+21	; 0x15
    3e04:	20 e0       	ldi	r18, 0x00	; 0
    3e06:	84 89       	ldd	r24, Z+20	; 0x14
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	82 2b       	or	r24, r18
    3e0c:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    3e0e:	a0 e0       	ldi	r26, 0x00	; 0
    3e10:	b0 e0       	ldi	r27, 0x00	; 0
    3e12:	dc 01       	movw	r26, r24
    3e14:	99 27       	eor	r25, r25
    3e16:	88 27       	eor	r24, r24
    3e18:	c8 2a       	or	r12, r24
    3e1a:	d9 2a       	or	r13, r25
    3e1c:	ea 2a       	or	r14, r26
    3e1e:	fb 2a       	or	r15, r27
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory ? */
    3e20:	44 fd       	sbrc	r20, 4
    3e22:	23 c0       	rjmp	.+70     	; 0x3e6a <f_unlink+0x126>
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    3e24:	0b a5       	lds	r16, 0x6b
    3e26:	1c a5       	lds	r17, 0x6c
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
    3e28:	25 96       	adiw	r28, 0x05	; 5
    3e2a:	4c ad       	sts	0x6c, r20
    3e2c:	5d ad       	sts	0x6d, r21
    3e2e:	6e ad       	sts	0x6e, r22
    3e30:	7f ad       	sts	0x6f, r23
    3e32:	25 97       	sbiw	r28, 0x05	; 5
    3e34:	c8 01       	movw	r24, r16
    3e36:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
	if (res == FR_OK) {
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	09 f0       	breq	.+2      	; 0x3e40 <f_unlink+0xfc>
    3e3e:	a6 cf       	rjmp	.-180    	; 0x3d8c <f_unlink+0x48>
		dp->dir[DIR_Name] = DDEM;
    3e40:	27 96       	adiw	r28, 0x07	; 7
    3e42:	ee ad       	sts	0x6e, r30
    3e44:	ff ad       	sts	0x6f, r31
    3e46:	27 97       	sbiw	r28, 0x07	; 7
    3e48:	85 ee       	ldi	r24, 0xE5	; 229
    3e4a:	80 83       	st	Z, r24
		fs->wflag = 1;
    3e4c:	81 e0       	ldi	r24, 0x01	; 1
    3e4e:	d8 01       	movw	r26, r16
    3e50:	13 96       	adiw	r26, 0x03	; 3
    3e52:	8c 93       	st	X, r24
    3e54:	13 97       	sbiw	r26, 0x03	; 3
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
    3e56:	c1 14       	cp	r12, r1
    3e58:	d1 04       	cpc	r13, r1
    3e5a:	e1 04       	cpc	r14, r1
    3e5c:	f1 04       	cpc	r15, r1
    3e5e:	e9 f4       	brne	.+58     	; 0x3e9a <f_unlink+0x156>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    3e60:	89 81       	ldd	r24, Y+1	; 0x01
    3e62:	9a 81       	ldd	r25, Y+2	; 0x02
    3e64:	0e 94 d7 02 	call	0x5ae	; 0x5ae <sync_fs>
    3e68:	91 cf       	rjmp	.-222    	; 0x3d8c <f_unlink+0x48>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
    3e6a:	7c 83       	std	Y+4, r23	; 0x04
    3e6c:	6b 83       	std	Y+3, r22	; 0x03
						sdj.obj.sclust = dclst;
    3e6e:	c9 86       	std	Y+9, r12	; 0x09
    3e70:	da 86       	std	Y+10, r13	; 0x0a
    3e72:	eb 86       	std	Y+11, r14	; 0x0b
    3e74:	fc 86       	std	Y+12, r15	; 0x0c
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    3e76:	ce 01       	movw	r24, r28
    3e78:	03 96       	adiw	r24, 0x03	; 3
    3e7a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <dir_sdi.constprop.11>
						if (res == FR_OK) {
    3e7e:	00 97       	sbiw	r24, 0x00	; 0
    3e80:	09 f0       	breq	.+2      	; 0x3e84 <f_unlink+0x140>
    3e82:	84 cf       	rjmp	.-248    	; 0x3d8c <f_unlink+0x48>
							res = dir_read(&sdj, 0);			/* Read an item */
    3e84:	ce 01       	movw	r24, r28
    3e86:	03 96       	adiw	r24, 0x03	; 3
    3e88:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <dir_read.constprop.10>
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    3e8c:	00 97       	sbiw	r24, 0x00	; 0
    3e8e:	09 f4       	brne	.+2      	; 0x3e92 <f_unlink+0x14e>
    3e90:	9f cf       	rjmp	.-194    	; 0x3dd0 <f_unlink+0x8c>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    3e92:	84 30       	cpi	r24, 0x04	; 4
    3e94:	91 05       	cpc	r25, r1
    3e96:	31 f2       	breq	.-116    	; 0x3e24 <f_unlink+0xe0>
    3e98:	79 cf       	rjmp	.-270    	; 0x3d8c <f_unlink+0x48>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    3e9a:	ce 01       	movw	r24, r28
    3e9c:	8b 96       	adiw	r24, 0x2b	; 43
    3e9e:	b7 01       	movw	r22, r14
    3ea0:	a6 01       	movw	r20, r12
    3ea2:	00 e0       	ldi	r16, 0x00	; 0
    3ea4:	10 e0       	ldi	r17, 0x00	; 0
    3ea6:	98 01       	movw	r18, r16
    3ea8:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <remove_chain>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    3eac:	00 97       	sbiw	r24, 0x00	; 0
    3eae:	09 f0       	breq	.+2      	; 0x3eb2 <f_unlink+0x16e>
    3eb0:	6d cf       	rjmp	.-294    	; 0x3d8c <f_unlink+0x48>
    3eb2:	d6 cf       	rjmp	.-84     	; 0x3e60 <f_unlink+0x11c>

00003eb4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    3eb4:	2f 92       	push	r2
    3eb6:	3f 92       	push	r3
    3eb8:	4f 92       	push	r4
    3eba:	5f 92       	push	r5
    3ebc:	6f 92       	push	r6
    3ebe:	7f 92       	push	r7
    3ec0:	8f 92       	push	r8
    3ec2:	9f 92       	push	r9
    3ec4:	af 92       	push	r10
    3ec6:	bf 92       	push	r11
    3ec8:	cf 92       	push	r12
    3eca:	df 92       	push	r13
    3ecc:	ef 92       	push	r14
    3ece:	ff 92       	push	r15
    3ed0:	0f 93       	push	r16
    3ed2:	1f 93       	push	r17
    3ed4:	cf 93       	push	r28
    3ed6:	df 93       	push	r29
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	e1 97       	sbiw	r28, 0x31	; 49
    3ede:	0f b6       	in	r0, 0x3f	; 63
    3ee0:	f8 94       	cli
    3ee2:	de bf       	out	0x3e, r29	; 62
    3ee4:	0f be       	out	0x3f, r0	; 63
    3ee6:	cd bf       	out	0x3d, r28	; 61
    3ee8:	9c a7       	lds	r25, 0x7c
    3eea:	8b a7       	lds	r24, 0x7b
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
    3eec:	ce 01       	movw	r24, r28
    3eee:	8b 96       	adiw	r24, 0x2b	; 43
    3ef0:	be 01       	movw	r22, r28
    3ef2:	6f 5f       	subi	r22, 0xFF	; 255
    3ef4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef6:	42 e0       	ldi	r20, 0x02	; 2
    3ef8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <find_volume>
    3efc:	7c 01       	movw	r14, r24
	dj.obj.fs = fs;
    3efe:	89 81       	ldd	r24, Y+1	; 0x01
    3f00:	9a 81       	ldd	r25, Y+2	; 0x02
    3f02:	9c 83       	std	Y+4, r25	; 0x04
    3f04:	8b 83       	std	Y+3, r24	; 0x03
	if (res == FR_OK) {
    3f06:	e1 14       	cp	r14, r1
    3f08:	f1 04       	cpc	r15, r1
    3f0a:	d1 f0       	breq	.+52     	; 0x3f40 <f_mkdir+0x8c>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    3f0c:	c7 01       	movw	r24, r14
    3f0e:	e1 96       	adiw	r28, 0x31	; 49
    3f10:	0f b6       	in	r0, 0x3f	; 63
    3f12:	f8 94       	cli
    3f14:	de bf       	out	0x3e, r29	; 62
    3f16:	0f be       	out	0x3f, r0	; 63
    3f18:	cd bf       	out	0x3d, r28	; 61
    3f1a:	df 91       	pop	r29
    3f1c:	cf 91       	pop	r28
    3f1e:	1f 91       	pop	r17
    3f20:	0f 91       	pop	r16
    3f22:	ff 90       	pop	r15
    3f24:	ef 90       	pop	r14
    3f26:	df 90       	pop	r13
    3f28:	cf 90       	pop	r12
    3f2a:	bf 90       	pop	r11
    3f2c:	af 90       	pop	r10
    3f2e:	9f 90       	pop	r9
    3f30:	8f 90       	pop	r8
    3f32:	7f 90       	pop	r7
    3f34:	6f 90       	pop	r6
    3f36:	5f 90       	pop	r5
    3f38:	4f 90       	pop	r4
    3f3a:	3f 90       	pop	r3
    3f3c:	2f 90       	pop	r2
    3f3e:	08 95       	ret
	/* Get logical drive number */
	res = find_volume(&path, &fs, FA_WRITE);
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
    3f40:	6b a5       	lds	r22, 0x6b
    3f42:	7c a5       	lds	r23, 0x6c
    3f44:	ce 01       	movw	r24, r28
    3f46:	03 96       	adiw	r24, 0x03	; 3
    3f48:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <follow_path>
    3f4c:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3f4e:	00 97       	sbiw	r24, 0x00	; 0
    3f50:	b9 f1       	breq	.+110    	; 0x3fc0 <f_mkdir+0x10c>
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
    3f52:	84 30       	cpi	r24, 0x04	; 4
    3f54:	91 05       	cpc	r25, r1
    3f56:	d1 f6       	brne	.-76     	; 0x3f0c <f_mkdir+0x58>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
    3f58:	ce 01       	movw	r24, r28
    3f5a:	03 96       	adiw	r24, 0x03	; 3
    3f5c:	40 e0       	ldi	r20, 0x00	; 0
    3f5e:	50 e0       	ldi	r21, 0x00	; 0
    3f60:	ba 01       	movw	r22, r20
    3f62:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <create_chain>
    3f66:	6d a7       	lds	r22, 0x7d
    3f68:	7e a7       	lds	r23, 0x7e
    3f6a:	8f a7       	lds	r24, 0x7f
    3f6c:	98 ab       	sts	0x58, r25
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
    3f6e:	e9 81       	ldd	r30, Y+1	; 0x01
    3f70:	fa 81       	ldd	r31, Y+2	; 0x02
    3f72:	81 85       	ldd	r24, Z+9	; 0x09
    3f74:	92 85       	ldd	r25, Z+10	; 0x0a
    3f76:	a0 e0       	ldi	r26, 0x00	; 0
    3f78:	b0 e0       	ldi	r27, 0x00	; 0
    3f7a:	19 e0       	ldi	r17, 0x09	; 9
    3f7c:	88 0f       	add	r24, r24
    3f7e:	99 1f       	adc	r25, r25
    3f80:	aa 1f       	adc	r26, r26
    3f82:	bb 1f       	adc	r27, r27
    3f84:	1a 95       	dec	r17
    3f86:	d1 f7       	brne	.-12     	; 0x3f7c <f_mkdir+0xc8>
    3f88:	8d 87       	std	Y+13, r24	; 0x0d
    3f8a:	9e 87       	std	Y+14, r25	; 0x0e
    3f8c:	af 87       	std	Y+15, r26	; 0x0f
    3f8e:	b8 8b       	std	Y+16, r27	; 0x10
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
    3f90:	0d a5       	lds	r16, 0x6d
    3f92:	1e a5       	lds	r17, 0x6e
    3f94:	2f a5       	lds	r18, 0x6f
    3f96:	38 a9       	sts	0x48, r19
    3f98:	01 15       	cp	r16, r1
    3f9a:	11 05       	cpc	r17, r1
    3f9c:	21 05       	cpc	r18, r1
    3f9e:	31 05       	cpc	r19, r1
    3fa0:	99 f4       	brne	.+38     	; 0x3fc8 <f_mkdir+0x114>
    3fa2:	97 e0       	ldi	r25, 0x07	; 7
    3fa4:	e9 2e       	mov	r14, r25
    3fa6:	f1 2c       	mov	r15, r1
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
					fs->wflag = 1;
				}
				if (res == FR_OK) res = sync_fs(fs);
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
    3fa8:	ce 01       	movw	r24, r28
    3faa:	03 96       	adiw	r24, 0x03	; 3
    3fac:	4d a5       	lds	r20, 0x6d
    3fae:	5e a5       	lds	r21, 0x6e
    3fb0:	6f a5       	lds	r22, 0x6f
    3fb2:	78 a9       	sts	0x48, r23
    3fb4:	00 e0       	ldi	r16, 0x00	; 0
    3fb6:	10 e0       	ldi	r17, 0x00	; 0
    3fb8:	98 01       	movw	r18, r16
    3fba:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <remove_chain>
    3fbe:	a6 cf       	rjmp	.-180    	; 0x3f0c <f_mkdir+0x58>
	res = find_volume(&path, &fs, FA_WRITE);
	dj.obj.fs = fs;
	if (res == FR_OK) {
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
    3fc0:	28 e0       	ldi	r18, 0x08	; 8
    3fc2:	e2 2e       	mov	r14, r18
    3fc4:	f1 2c       	mov	r15, r1
    3fc6:	a2 cf       	rjmp	.-188    	; 0x3f0c <f_mkdir+0x58>
		if (res == FR_NO_FILE) {				/* Can create a new directory */
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
			if (dcl == 1) res = FR_INT_ERR;
    3fc8:	01 30       	cpi	r16, 0x01	; 1
    3fca:	11 05       	cpc	r17, r1
    3fcc:	21 05       	cpc	r18, r1
    3fce:	31 05       	cpc	r19, r1
    3fd0:	21 f4       	brne	.+8      	; 0x3fda <f_mkdir+0x126>
    3fd2:	82 e0       	ldi	r24, 0x02	; 2
    3fd4:	e8 2e       	mov	r14, r24
    3fd6:	f1 2c       	mov	r15, r1
    3fd8:	e7 cf       	rjmp	.-50     	; 0x3fa8 <f_mkdir+0xf4>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
    3fda:	0f 3f       	cpi	r16, 0xFF	; 255
    3fdc:	4f ef       	ldi	r20, 0xFF	; 255
    3fde:	14 07       	cpc	r17, r20
    3fe0:	4f ef       	ldi	r20, 0xFF	; 255
    3fe2:	24 07       	cpc	r18, r20
    3fe4:	4f ef       	ldi	r20, 0xFF	; 255
    3fe6:	34 07       	cpc	r19, r20
    3fe8:	21 f4       	brne	.+8      	; 0x3ff2 <f_mkdir+0x13e>
    3fea:	01 e0       	ldi	r16, 0x01	; 1
    3fec:	e0 2e       	mov	r14, r16
    3fee:	f1 2c       	mov	r15, r1
    3ff0:	db cf       	rjmp	.-74     	; 0x3fa8 <f_mkdir+0xf4>
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
    3ff2:	cf 01       	movw	r24, r30
    3ff4:	0e 94 6f 02 	call	0x4de	; 0x4de <sync_window>
    3ff8:	7c 01       	movw	r14, r24
			tm = GET_FATTIME();
			if (res == FR_OK) {					/* Initialize the new directory table */
    3ffa:	00 97       	sbiw	r24, 0x00	; 0
    3ffc:	a9 f6       	brne	.-86     	; 0x3fa8 <f_mkdir+0xf4>
				dsc = clust2sect(fs, dcl);
    3ffe:	e9 80       	ldd	r14, Y+1	; 0x01
    4000:	fa 80       	ldd	r15, Y+2	; 0x02
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    4002:	8d a4       	lds	r24, 0xad
    4004:	9e a4       	lds	r25, 0xae
    4006:	af a4       	lds	r26, 0xaf
    4008:	b8 a8       	sts	0x88, r27
    400a:	8e ef       	ldi	r24, 0xFE	; 254
    400c:	9f ef       	ldi	r25, 0xFF	; 255
    400e:	af ef       	ldi	r26, 0xFF	; 255
    4010:	bf ef       	ldi	r27, 0xFF	; 255
    4012:	88 0e       	add	r8, r24
    4014:	99 1e       	adc	r9, r25
    4016:	aa 1e       	adc	r10, r26
    4018:	bb 1e       	adc	r11, r27
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    401a:	f7 01       	movw	r30, r14
    401c:	83 89       	ldd	r24, Z+19	; 0x13
    401e:	94 89       	ldd	r25, Z+20	; 0x14
    4020:	a5 89       	ldd	r26, Z+21	; 0x15
    4022:	b6 89       	ldd	r27, Z+22	; 0x16
    4024:	02 97       	sbiw	r24, 0x02	; 2
    4026:	a1 09       	sbc	r26, r1
    4028:	b1 09       	sbc	r27, r1
    402a:	88 16       	cp	r8, r24
    402c:	99 06       	cpc	r9, r25
    402e:	aa 06       	cpc	r10, r26
    4030:	bb 06       	cpc	r11, r27
    4032:	08 f0       	brcs	.+2      	; 0x4036 <f_mkdir+0x182>
    4034:	e4 c0       	rjmp	.+456    	; 0x41fe <f_mkdir+0x34a>
	return clst * fs->csize + fs->database;
    4036:	21 85       	ldd	r18, Z+9	; 0x09
    4038:	32 85       	ldd	r19, Z+10	; 0x0a
    403a:	40 e0       	ldi	r20, 0x00	; 0
    403c:	50 e0       	ldi	r21, 0x00	; 0
    403e:	c5 01       	movw	r24, r10
    4040:	b4 01       	movw	r22, r8
    4042:	0e 94 23 29 	call	0x5246	; 0x5246 <__mulsi3>
    4046:	2b 01       	movw	r4, r22
    4048:	3c 01       	movw	r6, r24
    404a:	f7 01       	movw	r30, r14
    404c:	87 a1       	lds	r24, 0x47
    404e:	90 a5       	lds	r25, 0x60
    4050:	a1 a5       	lds	r26, 0x61
    4052:	b2 a5       	lds	r27, 0x62
    4054:	48 0e       	add	r4, r24
    4056:	59 1e       	adc	r5, r25
    4058:	6a 1e       	adc	r6, r26
    405a:	7b 1e       	adc	r7, r27
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
			tm = GET_FATTIME();
			if (res == FR_OK) {					/* Initialize the new directory table */
				dsc = clust2sect(fs, dcl);
				dir = fs->win;
    405c:	af e2       	ldi	r26, 0x2F	; 47
    405e:	ca 2e       	mov	r12, r26
    4060:	d1 2c       	mov	r13, r1
    4062:	ce 0c       	add	r12, r14
    4064:	df 1c       	adc	r13, r15

/*-----------------------------------------------------------------------*/
/* Create a Directory                                                    */
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
    4066:	87 01       	movw	r16, r14
    4068:	01 5d       	subi	r16, 0xD1	; 209
    406a:	1d 4f       	sbci	r17, 0xFD	; 253
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
    406c:	f6 01       	movw	r30, r12

	do *d++ = (BYTE)val; while (--cnt);
    406e:	11 92       	st	Z+, r1
    4070:	e0 17       	cp	r30, r16
    4072:	f1 07       	cpc	r31, r17
    4074:	e1 f7       	brne	.-8      	; 0x406e <f_mkdir+0x1ba>

/*-----------------------------------------------------------------------*/
/* Create a Directory                                                    */
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
    4076:	c6 01       	movw	r24, r12
    4078:	0b 96       	adiw	r24, 0x0b	; 11
    407a:	f6 01       	movw	r30, r12
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    407c:	20 e2       	ldi	r18, 0x20	; 32
    407e:	21 93       	st	Z+, r18
    4080:	e8 17       	cp	r30, r24
    4082:	f9 07       	cpc	r31, r25
    4084:	e1 f7       	brne	.-8      	; 0x407e <f_mkdir+0x1ca>
				dsc = clust2sect(fs, dcl);
				dir = fs->win;
				mem_set(dir, 0, SS(fs));
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
					dir[DIR_Name] = '.';
    4086:	8e e2       	ldi	r24, 0x2E	; 46
    4088:	d7 01       	movw	r26, r14
    408a:	9f 96       	adiw	r26, 0x2f	; 47
    408c:	8c 93       	st	X, r24
    408e:	9f 97       	sbiw	r26, 0x2f	; 47
					dir[DIR_Attr] = AM_DIR;
    4090:	80 e1       	ldi	r24, 0x10	; 16
    4092:	da 96       	adiw	r26, 0x3a	; 58
    4094:	8c 93       	st	X, r24
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    4096:	f7 01       	movw	r30, r14
    4098:	eb 5b       	subi	r30, 0xBB	; 187
    409a:	ff 4f       	sbci	r31, 0xFF	; 255
    409c:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    409e:	f7 01       	movw	r30, r14
    40a0:	ea 5b       	subi	r30, 0xBA	; 186
    40a2:	ff 4f       	sbci	r31, 0xFF	; 255
    40a4:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    40a6:	f7 01       	movw	r30, r14
    40a8:	e9 5b       	subi	r30, 0xB9	; 185
    40aa:	ff 4f       	sbci	r31, 0xFF	; 255
    40ac:	81 e2       	ldi	r24, 0x21	; 33
    40ae:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    40b0:	f7 01       	movw	r30, r14
    40b2:	e8 5b       	subi	r30, 0xB8	; 184
    40b4:	ff 4f       	sbci	r31, 0xFF	; 255
    40b6:	88 e4       	ldi	r24, 0x48	; 72
    40b8:	80 83       	st	Z, r24
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
					dir[DIR_Name] = '.';
					dir[DIR_Attr] = AM_DIR;
					st_dword(dir + DIR_ModTime, tm);
					st_clust(fs, dir, dcl);
    40ba:	a9 81       	ldd	r26, Y+1	; 0x01
    40bc:	ba 81       	ldd	r27, Y+2	; 0x02

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    40be:	2d a4       	lds	r18, 0xad
    40c0:	f7 01       	movw	r30, r14
    40c2:	e7 5b       	subi	r30, 0xB7	; 183
    40c4:	ff 4f       	sbci	r31, 0xFF	; 255
    40c6:	20 82       	st	Z, r2
	*ptr++ = (BYTE)val;
    40c8:	3e a5       	lds	r19, 0x6e
    40ca:	39 ab       	sts	0x59, r19
    40cc:	f7 01       	movw	r30, r14
    40ce:	e6 5b       	subi	r30, 0xB6	; 182
    40d0:	ff 4f       	sbci	r31, 0xFF	; 255
    40d2:	30 83       	st	Z, r19
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    40d4:	8c 91       	ld	r24, X
    40d6:	83 30       	cpi	r24, 0x03	; 3
    40d8:	09 f4       	brne	.+2      	; 0x40dc <f_mkdir+0x228>
    40da:	ab c0       	rjmp	.+342    	; 0x4232 <f_mkdir+0x37e>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
					dir[DIR_Name] = '.';
					dir[DIR_Attr] = AM_DIR;
					st_dword(dir + DIR_ModTime, tm);
					st_clust(fs, dir, dcl);
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
    40dc:	c7 01       	movw	r24, r14
    40de:	81 5b       	subi	r24, 0xB1	; 177
    40e0:	9f 4f       	sbci	r25, 0xFF	; 255
    40e2:	b6 01       	movw	r22, r12
    40e4:	40 e2       	ldi	r20, 0x20	; 32
    40e6:	50 e0       	ldi	r21, 0x00	; 0
    40e8:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    40ec:	f7 01       	movw	r30, r14
    40ee:	e0 5b       	subi	r30, 0xB0	; 176
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	8e e2       	ldi	r24, 0x2E	; 46
    40f4:	80 83       	st	Z, r24
    40f6:	49 85       	ldd	r20, Y+9	; 0x09
    40f8:	5a 85       	ldd	r21, Y+10	; 0x0a
    40fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    40fc:	7c 85       	ldd	r23, Y+12	; 0x0c
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
    40fe:	29 81       	ldd	r18, Y+1	; 0x01
    4100:	3a 81       	ldd	r19, Y+2	; 0x02
    4102:	d9 01       	movw	r26, r18
    4104:	8c 91       	ld	r24, X
    4106:	83 30       	cpi	r24, 0x03	; 3
    4108:	09 f4       	brne	.+2      	; 0x410c <f_mkdir+0x258>
    410a:	45 c0       	rjmp	.+138    	; 0x4196 <f_mkdir+0x2e2>
    410c:	ca 01       	movw	r24, r20

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    410e:	f7 01       	movw	r30, r14
    4110:	e7 59       	subi	r30, 0x97	; 151
    4112:	ff 4f       	sbci	r31, 0xFF	; 255
    4114:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    4116:	f7 01       	movw	r30, r14
    4118:	e6 59       	subi	r30, 0x96	; 150
    411a:	ff 4f       	sbci	r31, 0xFF	; 255
    411c:	90 83       	st	Z, r25
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    411e:	d9 01       	movw	r26, r18
    4120:	8c 91       	ld	r24, X
    4122:	83 30       	cpi	r24, 0x03	; 3
    4124:	09 f4       	brne	.+2      	; 0x4128 <f_mkdir+0x274>
    4126:	79 c0       	rjmp	.+242    	; 0x421a <f_mkdir+0x366>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    4128:	f9 01       	movw	r30, r18
    412a:	81 85       	ldd	r24, Z+9	; 0x09
    412c:	92 85       	ldd	r25, Z+10	; 0x0a
    412e:	00 97       	sbiw	r24, 0x00	; 0
    4130:	09 f4       	brne	.+2      	; 0x4134 <f_mkdir+0x280>
    4132:	42 c0       	rjmp	.+132    	; 0x41b8 <f_mkdir+0x304>

/*-----------------------------------------------------------------------*/
/* Create a Directory                                                    */
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
    4134:	01 97       	sbiw	r24, 0x01	; 1
    4136:	4c 01       	movw	r8, r24
    4138:	aa 24       	eor	r10, r10
    413a:	bb 24       	eor	r11, r11
    413c:	08 94       	sec
    413e:	81 1c       	adc	r8, r1
    4140:	91 1c       	adc	r9, r1
    4142:	a1 1c       	adc	r10, r1
    4144:	b1 1c       	adc	r11, r1
    4146:	84 0c       	add	r8, r4
    4148:	95 1c       	adc	r9, r5
    414a:	a6 1c       	adc	r10, r6
    414c:	b7 1c       	adc	r11, r7
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					fs->winsect = dsc++;
					fs->wflag = 1;
    414e:	33 24       	eor	r3, r3
    4150:	33 94       	inc	r3
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
					fs->winsect = dsc++;
    4152:	d9 01       	movw	r26, r18
    4154:	9b 96       	adiw	r26, 0x2b	; 43
    4156:	4d 92       	st	X+, r4
    4158:	5d 92       	st	X+, r5
    415a:	6d 92       	st	X+, r6
    415c:	7c 92       	st	X, r7
    415e:	9e 97       	sbiw	r26, 0x2e	; 46
    4160:	08 94       	sec
    4162:	41 1c       	adc	r4, r1
    4164:	51 1c       	adc	r5, r1
    4166:	61 1c       	adc	r6, r1
    4168:	71 1c       	adc	r7, r1
					fs->wflag = 1;
    416a:	13 96       	adiw	r26, 0x03	; 3
    416c:	3c 92       	st	X, r3
					res = sync_window(fs);
    416e:	c9 01       	movw	r24, r18
    4170:	0e 94 6f 02 	call	0x4de	; 0x4de <sync_window>
    4174:	7c 01       	movw	r14, r24
					if (res != FR_OK) break;
    4176:	00 97       	sbiw	r24, 0x00	; 0
    4178:	09 f0       	breq	.+2      	; 0x417c <f_mkdir+0x2c8>
    417a:	16 cf       	rjmp	.-468    	; 0x3fa8 <f_mkdir+0xf4>
    417c:	f6 01       	movw	r30, r12
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
    417e:	11 92       	st	Z+, r1
    4180:	0e 17       	cp	r16, r30
    4182:	1f 07       	cpc	r17, r31
    4184:	e1 f7       	brne	.-8      	; 0x417e <f_mkdir+0x2ca>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
					st_clust(fs, dir + SZDIRE, pcl);
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
    4186:	48 14       	cp	r4, r8
    4188:	59 04       	cpc	r5, r9
    418a:	6a 04       	cpc	r6, r10
    418c:	7b 04       	cpc	r7, r11
    418e:	a1 f0       	breq	.+40     	; 0x41b8 <f_mkdir+0x304>
    4190:	29 81       	ldd	r18, Y+1	; 0x01
    4192:	3a 81       	ldd	r19, Y+2	; 0x02
    4194:	de cf       	rjmp	.-68     	; 0x4152 <f_mkdir+0x29e>
					dir[DIR_Attr] = AM_DIR;
					st_dword(dir + DIR_ModTime, tm);
					st_clust(fs, dir, dcl);
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
    4196:	f9 01       	movw	r30, r18
    4198:	83 a1       	lds	r24, 0x43
    419a:	94 a1       	lds	r25, 0x44
    419c:	a5 a1       	lds	r26, 0x45
    419e:	b6 a1       	lds	r27, 0x46
    41a0:	84 17       	cp	r24, r20
    41a2:	95 07       	cpc	r25, r21
    41a4:	a6 07       	cpc	r26, r22
    41a6:	b7 07       	cpc	r27, r23
    41a8:	09 f0       	breq	.+2      	; 0x41ac <f_mkdir+0x2f8>
    41aa:	b0 cf       	rjmp	.-160    	; 0x410c <f_mkdir+0x258>
    41ac:	90 e0       	ldi	r25, 0x00	; 0
    41ae:	80 e0       	ldi	r24, 0x00	; 0
    41b0:	40 e0       	ldi	r20, 0x00	; 0
    41b2:	50 e0       	ldi	r21, 0x00	; 0
    41b4:	ba 01       	movw	r22, r20
    41b6:	ab cf       	rjmp	.-170    	; 0x410e <f_mkdir+0x25a>
					res = sync_window(fs);
					if (res != FR_OK) break;
					mem_set(dir, 0, SS(fs));
				}
			}
			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
    41b8:	ce 01       	movw	r24, r28
    41ba:	03 96       	adiw	r24, 0x03	; 3
    41bc:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <dir_register>
    41c0:	7c 01       	movw	r14, r24
			if (res == FR_OK) {
    41c2:	00 97       	sbiw	r24, 0x00	; 0
    41c4:	09 f0       	breq	.+2      	; 0x41c8 <f_mkdir+0x314>
    41c6:	f0 ce       	rjmp	.-544    	; 0x3fa8 <f_mkdir+0xf4>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
    41c8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    41ca:	fe 8d       	ldd	r31, Y+30	; 0x1e
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    41cc:	16 8a       	std	Z+22, r1	; 0x16
	*ptr++ = (BYTE)val; val >>= 8;
    41ce:	17 8a       	std	Z+23, r1	; 0x17
	*ptr++ = (BYTE)val; val >>= 8;
    41d0:	81 e2       	ldi	r24, 0x21	; 33
    41d2:	80 8f       	std	Z+24, r24	; 0x18
	*ptr++ = (BYTE)val;
    41d4:	88 e4       	ldi	r24, 0x48	; 72
    41d6:	81 8f       	std	Z+25, r24	; 0x19
				} else
#endif
				{
					dir = dj.dir;
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
					st_clust(fs, dir, dcl);				/* Table start cluster */
    41d8:	89 81       	ldd	r24, Y+1	; 0x01
    41da:	9a 81       	ldd	r25, Y+2	; 0x02

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    41dc:	22 8e       	std	Z+26, r2	; 0x1a
	*ptr++ = (BYTE)val;
    41de:	09 a9       	sts	0x49, r16
    41e0:	03 8f       	std	Z+27, r16	; 0x1b
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    41e2:	dc 01       	movw	r26, r24
    41e4:	2c 91       	ld	r18, X
    41e6:	23 30       	cpi	r18, 0x03	; 3
    41e8:	71 f0       	breq	.+28     	; 0x4206 <f_mkdir+0x352>
#endif
				{
					dir = dj.dir;
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
					st_clust(fs, dir, dcl);				/* Table start cluster */
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
    41ea:	20 e1       	ldi	r18, 0x10	; 16
    41ec:	23 87       	std	Z+11, r18	; 0x0b
					fs->wflag = 1;
    41ee:	21 e0       	ldi	r18, 0x01	; 1
    41f0:	dc 01       	movw	r26, r24
    41f2:	13 96       	adiw	r26, 0x03	; 3
    41f4:	2c 93       	st	X, r18
				}
				if (res == FR_OK) res = sync_fs(fs);
    41f6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <sync_fs>
    41fa:	7c 01       	movw	r14, r24
    41fc:	87 ce       	rjmp	.-754    	; 0x3f0c <f_mkdir+0x58>
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    41fe:	44 24       	eor	r4, r4
    4200:	55 24       	eor	r5, r5
    4202:	32 01       	movw	r6, r4
    4204:	2b cf       	rjmp	.-426    	; 0x405c <f_mkdir+0x1a8>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    4206:	0d a5       	lds	r16, 0x6d
    4208:	1e a5       	lds	r17, 0x6e
    420a:	2f a5       	lds	r18, 0x6f
    420c:	38 a9       	sts	0x48, r19
    420e:	a9 01       	movw	r20, r18
    4210:	66 27       	eor	r22, r22
    4212:	77 27       	eor	r23, r23

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    4214:	44 8b       	std	Z+20, r20	; 0x14
	*ptr++ = (BYTE)val;
    4216:	55 8b       	std	Z+21, r21	; 0x15
    4218:	e8 cf       	rjmp	.-48     	; 0x41ea <f_mkdir+0x336>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    421a:	ab 01       	movw	r20, r22
    421c:	66 27       	eor	r22, r22
    421e:	77 27       	eor	r23, r23

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    4220:	f7 01       	movw	r30, r14
    4222:	ed 59       	subi	r30, 0x9D	; 157
    4224:	ff 4f       	sbci	r31, 0xFF	; 255
    4226:	40 83       	st	Z, r20
	*ptr++ = (BYTE)val;
    4228:	f7 01       	movw	r30, r14
    422a:	ec 59       	subi	r30, 0x9C	; 156
    422c:	ff 4f       	sbci	r31, 0xFF	; 255
    422e:	50 83       	st	Z, r21
    4230:	7b cf       	rjmp	.-266    	; 0x4128 <f_mkdir+0x274>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    4232:	2d a5       	lds	r18, 0x6d
    4234:	3e a5       	lds	r19, 0x6e
    4236:	4f a5       	lds	r20, 0x6f
    4238:	58 a9       	sts	0x48, r21
    423a:	ca 01       	movw	r24, r20
    423c:	aa 27       	eor	r26, r26
    423e:	bb 27       	eor	r27, r27

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    4240:	f7 01       	movw	r30, r14
    4242:	ed 5b       	subi	r30, 0xBD	; 189
    4244:	ff 4f       	sbci	r31, 0xFF	; 255
    4246:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val;
    4248:	f7 01       	movw	r30, r14
    424a:	ec 5b       	subi	r30, 0xBC	; 188
    424c:	ff 4f       	sbci	r31, 0xFF	; 255
    424e:	90 83       	st	Z, r25
    4250:	45 cf       	rjmp	.-374    	; 0x40dc <f_mkdir+0x228>

00004252 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    4252:	ef 92       	push	r14
    4254:	ff 92       	push	r15
    4256:	0f 93       	push	r16
    4258:	1f 93       	push	r17
    425a:	cf 93       	push	r28
    425c:	df 93       	push	r29
    425e:	cd b7       	in	r28, 0x3d	; 61
    4260:	de b7       	in	r29, 0x3e	; 62
    4262:	ce 56       	subi	r28, 0x6E	; 110
    4264:	d0 40       	sbci	r29, 0x00	; 0
    4266:	0f b6       	in	r0, 0x3f	; 63
    4268:	f8 94       	cli
    426a:	de bf       	out	0x3e, r29	; 62
    426c:	0f be       	out	0x3f, r0	; 63
    426e:	cd bf       	out	0x3d, r28	; 61
    4270:	ad 96       	adiw	r28, 0x2d	; 45
    4272:	9f af       	sts	0x7f, r25
    4274:	8e af       	sts	0x7e, r24
    4276:	ad 97       	sbiw	r28, 0x2d	; 45
    4278:	af 96       	adiw	r28, 0x2f	; 47
    427a:	7f af       	sts	0x7f, r23
    427c:	6e af       	sts	0x7e, r22
    427e:	af 97       	sbiw	r28, 0x2f	; 47
	BYTE buf[_FS_EXFAT ? SZDIRE * 2 : 24], *dir;
	DWORD dw;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Ignore drive number of new name */
    4280:	ce 01       	movw	r24, r28
    4282:	83 59       	subi	r24, 0x93	; 147
    4284:	9f 4f       	sbci	r25, 0xFF	; 255
    4286:	0e 94 61 01 	call	0x2c2	; 0x2c2 <get_ldnumber>
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive number of the old object */
    428a:	ce 01       	movw	r24, r28
    428c:	85 59       	subi	r24, 0x95	; 149
    428e:	9f 4f       	sbci	r25, 0xFF	; 255
    4290:	be 01       	movw	r22, r28
    4292:	6f 5f       	subi	r22, 0xFF	; 255
    4294:	7f 4f       	sbci	r23, 0xFF	; 255
    4296:	42 e0       	ldi	r20, 0x02	; 2
    4298:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <find_volume>
	if (res == FR_OK) {
    429c:	00 97       	sbiw	r24, 0x00	; 0
    429e:	71 f0       	breq	.+28     	; 0x42bc <f_rename+0x6a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    42a0:	c2 59       	subi	r28, 0x92	; 146
    42a2:	df 4f       	sbci	r29, 0xFF	; 255
    42a4:	0f b6       	in	r0, 0x3f	; 63
    42a6:	f8 94       	cli
    42a8:	de bf       	out	0x3e, r29	; 62
    42aa:	0f be       	out	0x3f, r0	; 63
    42ac:	cd bf       	out	0x3d, r28	; 61
    42ae:	df 91       	pop	r29
    42b0:	cf 91       	pop	r28
    42b2:	1f 91       	pop	r17
    42b4:	0f 91       	pop	r16
    42b6:	ff 90       	pop	r15
    42b8:	ef 90       	pop	r14
    42ba:	08 95       	ret


	get_ldnumber(&path_new);						/* Ignore drive number of new name */
	res = find_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive number of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
    42bc:	89 81       	ldd	r24, Y+1	; 0x01
    42be:	9a 81       	ldd	r25, Y+2	; 0x02
    42c0:	25 96       	adiw	r28, 0x05	; 5
    42c2:	9f af       	sts	0x7f, r25
    42c4:	8e af       	sts	0x7e, r24
    42c6:	25 97       	sbiw	r28, 0x05	; 5
		INIT_NAMBUF(fs);
		res = follow_path(&djo, path_old);		/* Check old object */
    42c8:	ad 96       	adiw	r28, 0x2d	; 45
    42ca:	6e ad       	sts	0x6e, r22
    42cc:	7f ad       	sts	0x6f, r23
    42ce:	ad 97       	sbiw	r28, 0x2d	; 45
    42d0:	ce 01       	movw	r24, r28
    42d2:	8d 5b       	subi	r24, 0xBD	; 189
    42d4:	9f 4f       	sbci	r25, 0xFF	; 255
    42d6:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <follow_path>
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    42da:	00 97       	sbiw	r24, 0x00	; 0
    42dc:	09 f7       	brne	.-62     	; 0x42a0 <f_rename+0x4e>
    42de:	ab 96       	adiw	r28, 0x2b	; 43
    42e0:	8f ad       	sts	0x6f, r24
    42e2:	ab 97       	sbiw	r28, 0x2b	; 43
    42e4:	80 7a       	andi	r24, 0xA0	; 160
    42e6:	19 f0       	breq	.+6      	; 0x42ee <f_rename+0x9c>
    42e8:	86 e0       	ldi	r24, 0x06	; 6
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	d9 cf       	rjmp	.-78     	; 0x42a0 <f_rename+0x4e>
					}
				}
			} else
#endif
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
    42ee:	6f 96       	adiw	r28, 0x1f	; 31
    42f0:	6e ad       	sts	0x6e, r22
    42f2:	7f ad       	sts	0x6f, r23
    42f4:	6f 97       	sbiw	r28, 0x1f	; 31
    42f6:	65 5f       	subi	r22, 0xF5	; 245
    42f8:	7f 4f       	sbci	r23, 0xFF	; 255
    42fa:	ce 01       	movw	r24, r28
    42fc:	03 96       	adiw	r24, 0x03	; 3
    42fe:	45 e1       	ldi	r20, 0x15	; 21
    4300:	50 e0       	ldi	r21, 0x00	; 0
    4302:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mem_cpy>
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
    4306:	ce 01       	movw	r24, r28
    4308:	4b 96       	adiw	r24, 0x1b	; 27
    430a:	be 01       	movw	r22, r28
    430c:	6d 5b       	subi	r22, 0xBD	; 189
    430e:	7f 4f       	sbci	r23, 0xFF	; 255
    4310:	48 e2       	ldi	r20, 0x28	; 40
    4312:	50 e0       	ldi	r21, 0x00	; 0
    4314:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mem_cpy>
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    4318:	af 96       	adiw	r28, 0x2f	; 47
    431a:	6e ad       	sts	0x6e, r22
    431c:	7f ad       	sts	0x6f, r23
    431e:	af 97       	sbiw	r28, 0x2f	; 47
    4320:	ce 01       	movw	r24, r28
    4322:	4b 96       	adiw	r24, 0x1b	; 27
    4324:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <follow_path>
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    4328:	00 97       	sbiw	r24, 0x00	; 0
    432a:	99 f4       	brne	.+38     	; 0x4352 <f_rename+0x100>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    432c:	49 a1       	lds	r20, 0x49
    432e:	5a a1       	lds	r21, 0x4a
    4330:	6b a1       	lds	r22, 0x4b
    4332:	7c a1       	lds	r23, 0x4c
    4334:	2d 96       	adiw	r28, 0x0d	; 13
    4336:	8c ad       	sts	0x6c, r24
    4338:	9d ad       	sts	0x6d, r25
    433a:	ae ad       	sts	0x6e, r26
    433c:	bf ad       	sts	0x6f, r27
    433e:	2d 97       	sbiw	r28, 0x0d	; 13
    4340:	48 17       	cp	r20, r24
    4342:	59 07       	cpc	r21, r25
    4344:	6a 07       	cpc	r22, r26
    4346:	7b 07       	cpc	r23, r27
    4348:	09 f4       	brne	.+2      	; 0x434c <f_rename+0xfa>
    434a:	9d c0       	rjmp	.+314    	; 0x4486 <f_rename+0x234>
    434c:	88 e0       	ldi	r24, 0x08	; 8
    434e:	90 e0       	ldi	r25, 0x00	; 0
    4350:	a7 cf       	rjmp	.-178    	; 0x42a0 <f_rename+0x4e>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    4352:	84 30       	cpi	r24, 0x04	; 4
    4354:	91 05       	cpc	r25, r1
    4356:	09 f0       	breq	.+2      	; 0x435a <f_rename+0x108>
    4358:	a3 cf       	rjmp	.-186    	; 0x42a0 <f_rename+0x4e>
					res = dir_register(&djn);			/* Register the new entry */
    435a:	ce 01       	movw	r24, r28
    435c:	4b 96       	adiw	r24, 0x1b	; 27
    435e:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <dir_register>
					if (res == FR_OK) {
    4362:	00 97       	sbiw	r24, 0x00	; 0
    4364:	09 f0       	breq	.+2      	; 0x4368 <f_rename+0x116>
    4366:	9c cf       	rjmp	.-200    	; 0x42a0 <f_rename+0x4e>
						dir = djn.dir;					/* Copy information about object except name */
    4368:	0d a9       	sts	0x4d, r16
    436a:	1e a9       	sts	0x4e, r17
						mem_cpy(dir + 13, buf + 2, 19);
    436c:	c8 01       	movw	r24, r16
    436e:	0d 96       	adiw	r24, 0x0d	; 13
    4370:	be 01       	movw	r22, r28
    4372:	6b 5f       	subi	r22, 0xFB	; 251
    4374:	7f 4f       	sbci	r23, 0xFF	; 255
    4376:	43 e1       	ldi	r20, 0x13	; 19
    4378:	50 e0       	ldi	r21, 0x00	; 0
    437a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <mem_cpy>
						dir[DIR_Attr] = buf[0] | AM_ARC;
    437e:	8b 81       	ldd	r24, Y+3	; 0x03
    4380:	80 62       	ori	r24, 0x20	; 32
    4382:	f8 01       	movw	r30, r16
    4384:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    4386:	e9 80       	ldd	r14, Y+1	; 0x01
    4388:	fa 80       	ldd	r15, Y+2	; 0x02
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	f7 01       	movw	r30, r14
    438e:	83 83       	std	Z+3, r24	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    4390:	f8 01       	movw	r30, r16
    4392:	83 85       	ldd	r24, Z+11	; 0x0b
    4394:	84 ff       	sbrs	r24, 4
    4396:	59 c0       	rjmp	.+178    	; 0x444a <f_rename+0x1f8>
    4398:	2d 96       	adiw	r28, 0x0d	; 13
    439a:	4c ad       	sts	0x6c, r20
    439c:	5d ad       	sts	0x6d, r21
    439e:	6e ad       	sts	0x6e, r22
    43a0:	7f ad       	sts	0x6f, r23
    43a2:	2d 97       	sbiw	r28, 0x0d	; 13
    43a4:	89 a1       	lds	r24, 0x49
    43a6:	9a a1       	lds	r25, 0x4a
    43a8:	ab a1       	lds	r26, 0x4b
    43aa:	bc a1       	lds	r27, 0x4c
    43ac:	48 17       	cp	r20, r24
    43ae:	59 07       	cpc	r21, r25
    43b0:	6a 07       	cpc	r22, r26
    43b2:	7b 07       	cpc	r23, r27
    43b4:	09 f4       	brne	.+2      	; 0x43b8 <f_rename+0x166>
    43b6:	49 c0       	rjmp	.+146    	; 0x444a <f_rename+0x1f8>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    43b8:	33 8d       	ldd	r19, Z+27	; 0x1b
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    43be:	90 e0       	ldi	r25, 0x00	; 0
    43c0:	82 2b       	or	r24, r18
    43c2:	93 2b       	or	r25, r19
	const BYTE* dir	/* Pointer to the key entry */
)
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
    43c4:	ac 01       	movw	r20, r24
    43c6:	60 e0       	ldi	r22, 0x00	; 0
    43c8:	70 e0       	ldi	r23, 0x00	; 0
	if (fs->fs_type == FS_FAT32) {
    43ca:	f7 01       	movw	r30, r14
    43cc:	80 81       	ld	r24, Z
    43ce:	83 30       	cpi	r24, 0x03	; 3
    43d0:	09 f4       	brne	.+2      	; 0x43d4 <f_rename+0x182>
    43d2:	6d c0       	rjmp	.+218    	; 0x44ae <f_rename+0x25c>
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
    43d4:	db 01       	movw	r26, r22
    43d6:	ca 01       	movw	r24, r20
    43d8:	02 97       	sbiw	r24, 0x02	; 2
    43da:	a1 09       	sbc	r26, r1
    43dc:	b1 09       	sbc	r27, r1
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
    43de:	f7 01       	movw	r30, r14
    43e0:	43 89       	ldd	r20, Z+19	; 0x13
    43e2:	54 89       	ldd	r21, Z+20	; 0x14
    43e4:	65 89       	ldd	r22, Z+21	; 0x15
    43e6:	76 89       	ldd	r23, Z+22	; 0x16
    43e8:	42 50       	subi	r20, 0x02	; 2
    43ea:	50 40       	sbci	r21, 0x00	; 0
    43ec:	60 40       	sbci	r22, 0x00	; 0
    43ee:	70 40       	sbci	r23, 0x00	; 0
    43f0:	84 17       	cp	r24, r20
    43f2:	95 07       	cpc	r25, r21
    43f4:	a6 07       	cpc	r26, r22
    43f6:	b7 07       	cpc	r27, r23
    43f8:	08 f0       	brcs	.+2      	; 0x43fc <f_rename+0x1aa>
    43fa:	56 c0       	rjmp	.+172    	; 0x44a8 <f_rename+0x256>
	return clst * fs->csize + fs->database;
    43fc:	21 85       	ldd	r18, Z+9	; 0x09
    43fe:	32 85       	ldd	r19, Z+10	; 0x0a
    4400:	40 e0       	ldi	r20, 0x00	; 0
    4402:	50 e0       	ldi	r21, 0x00	; 0
    4404:	bc 01       	movw	r22, r24
    4406:	cd 01       	movw	r24, r26
    4408:	0e 94 23 29 	call	0x5246	; 0x5246 <__mulsi3>
    440c:	ab 01       	movw	r20, r22
    440e:	bc 01       	movw	r22, r24
    4410:	f7 01       	movw	r30, r14
    4412:	87 a1       	lds	r24, 0x47
    4414:	90 a5       	lds	r25, 0x60
    4416:	a1 a5       	lds	r26, 0x61
    4418:	b2 a5       	lds	r27, 0x62
    441a:	48 0f       	add	r20, r24
    441c:	59 1f       	adc	r21, r25
    441e:	6a 1f       	adc	r22, r26
    4420:	7b 1f       	adc	r23, r27
						mem_cpy(dir + 13, buf + 2, 19);
						dir[DIR_Attr] = buf[0] | AM_ARC;
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							dw = clust2sect(fs, ld_clust(fs, dir));
							if (!dw) {
    4422:	41 15       	cp	r20, r1
    4424:	51 05       	cpc	r21, r1
    4426:	61 05       	cpc	r22, r1
    4428:	71 05       	cpc	r23, r1
    442a:	f1 f1       	breq	.+124    	; 0x44a8 <f_rename+0x256>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where any interruption can cause a cross-link */
								res = move_window(fs, dw);
    442c:	c7 01       	movw	r24, r14
    442e:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    4432:	e9 81       	ldd	r30, Y+1	; 0x01
    4434:	fa 81       	ldd	r31, Y+2	; 0x02
								if (res == FR_OK && dir[1] == '.') {
    4436:	00 97       	sbiw	r24, 0x00	; 0
    4438:	09 f0       	breq	.+2      	; 0x443c <f_rename+0x1ea>
    443a:	32 cf       	rjmp	.-412    	; 0x42a0 <f_rename+0x4e>
    443c:	df 01       	movw	r26, r30
    443e:	a0 5b       	subi	r26, 0xB0	; 176
    4440:	bf 4f       	sbci	r27, 0xFF	; 255
    4442:	8c 91       	ld	r24, X
    4444:	8e 32       	cpi	r24, 0x2E	; 46
    4446:	09 f4       	brne	.+2      	; 0x444a <f_rename+0x1f8>
    4448:	43 c0       	rjmp	.+134    	; 0x44d0 <f_rename+0x27e>
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
	FRESULT res;
	FATFS *fs = dp->obj.fs;
    444a:	25 96       	adiw	r28, 0x05	; 5
    444c:	0e ad       	sts	0x6e, r16
    444e:	1f ad       	sts	0x6f, r17
    4450:	25 97       	sbiw	r28, 0x05	; 5
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
    4452:	6d 96       	adiw	r28, 0x1d	; 29
    4454:	4c ad       	sts	0x6c, r20
    4456:	5d ad       	sts	0x6d, r21
    4458:	6e ad       	sts	0x6e, r22
    445a:	7f ad       	sts	0x6f, r23
    445c:	6d 97       	sbiw	r28, 0x1d	; 29
    445e:	c8 01       	movw	r24, r16
    4460:	0e 94 69 03 	call	0x6d2	; 0x6d2 <move_window>
	if (res == FR_OK) {
    4464:	00 97       	sbiw	r24, 0x00	; 0
    4466:	09 f0       	breq	.+2      	; 0x446a <f_rename+0x218>
    4468:	1b cf       	rjmp	.-458    	; 0x42a0 <f_rename+0x4e>
		dp->dir[DIR_Name] = DDEM;
    446a:	6f 96       	adiw	r28, 0x1f	; 31
    446c:	ee ad       	sts	0x6e, r30
    446e:	ff ad       	sts	0x6f, r31
    4470:	6f 97       	sbiw	r28, 0x1f	; 31
    4472:	85 ee       	ldi	r24, 0xE5	; 229
    4474:	80 83       	st	Z, r24
		fs->wflag = 1;
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	f8 01       	movw	r30, r16
    447a:	83 83       	std	Z+3, r24	; 0x03
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
				if (res == FR_OK) {
					res = sync_fs(fs);
    447c:	89 81       	ldd	r24, Y+1	; 0x01
    447e:	9a 81       	ldd	r25, Y+2	; 0x02
    4480:	0e 94 d7 02 	call	0x5ae	; 0x5ae <sync_fs>
    4484:	0d cf       	rjmp	.-486    	; 0x42a0 <f_rename+0x4e>
			{	/* At FAT12/FAT16/FAT32 */
				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    4486:	49 a5       	lds	r20, 0x69
    4488:	5a a5       	lds	r21, 0x6a
    448a:	6b a5       	lds	r22, 0x6b
    448c:	7c a5       	lds	r23, 0x6c
    448e:	65 96       	adiw	r28, 0x15	; 21
    4490:	8c ad       	sts	0x6c, r24
    4492:	9d ad       	sts	0x6d, r25
    4494:	ae ad       	sts	0x6e, r26
    4496:	bf ad       	sts	0x6f, r27
    4498:	65 97       	sbiw	r28, 0x15	; 21
    449a:	48 17       	cp	r20, r24
    449c:	59 07       	cpc	r21, r25
    449e:	6a 07       	cpc	r22, r26
    44a0:	7b 07       	cpc	r23, r27
    44a2:	09 f0       	breq	.+2      	; 0x44a6 <f_rename+0x254>
    44a4:	53 cf       	rjmp	.-346    	; 0x434c <f_rename+0xfa>
    44a6:	59 cf       	rjmp	.-334    	; 0x435a <f_rename+0x108>
						dir[DIR_Attr] = buf[0] | AM_ARC;
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							dw = clust2sect(fs, ld_clust(fs, dir));
							if (!dw) {
								res = FR_INT_ERR;
    44a8:	82 e0       	ldi	r24, 0x02	; 2
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	f9 ce       	rjmp	.-526    	; 0x42a0 <f_rename+0x4e>
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
	rv = rv << 8 | ptr[0];
    44ae:	f8 01       	movw	r30, r16
    44b0:	35 89       	ldd	r19, Z+21	; 0x15
    44b2:	20 e0       	ldi	r18, 0x00	; 0
    44b4:	84 89       	ldd	r24, Z+20	; 0x14
    44b6:	90 e0       	ldi	r25, 0x00	; 0
    44b8:	82 2b       	or	r24, r18
    44ba:	93 2b       	or	r25, r19
{
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
	if (fs->fs_type == FS_FAT32) {
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
    44bc:	a0 e0       	ldi	r26, 0x00	; 0
    44be:	b0 e0       	ldi	r27, 0x00	; 0
    44c0:	dc 01       	movw	r26, r24
    44c2:	99 27       	eor	r25, r25
    44c4:	88 27       	eor	r24, r24
    44c6:	48 2b       	or	r20, r24
    44c8:	59 2b       	or	r21, r25
    44ca:	6a 2b       	or	r22, r26
    44cc:	7b 2b       	or	r23, r27
    44ce:	82 cf       	rjmp	.-252    	; 0x43d4 <f_rename+0x182>
							} else {
/* Start of critical section where any interruption can cause a cross-link */
								res = move_window(fs, dw);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    44d0:	49 a1       	lds	r20, 0x49
    44d2:	5a a1       	lds	r21, 0x4a
    44d4:	6b a1       	lds	r22, 0x4b
    44d6:	7c a1       	lds	r23, 0x4c

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    44d8:	df 01       	movw	r26, r30
    44da:	a7 59       	subi	r26, 0x97	; 151
    44dc:	bf 4f       	sbci	r27, 0xFF	; 255
    44de:	4c 93       	st	X, r20
	*ptr++ = (BYTE)val;
    44e0:	df 01       	movw	r26, r30
    44e2:	a6 59       	subi	r26, 0x96	; 150
    44e4:	bf 4f       	sbci	r27, 0xFF	; 255
    44e6:	5c 93       	st	X, r21
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
    44e8:	80 81       	ld	r24, Z
    44ea:	83 30       	cpi	r24, 0x03	; 3
    44ec:	19 f0       	breq	.+6      	; 0x44f4 <f_rename+0x2a2>
/* Start of critical section where any interruption can cause a cross-link */
								res = move_window(fs, dw);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
									fs->wflag = 1;
    44ee:	81 e0       	ldi	r24, 0x01	; 1
    44f0:	83 83       	std	Z+3, r24	; 0x03
    44f2:	ab cf       	rjmp	.-170    	; 0x444a <f_rename+0x1f8>
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
    44f4:	ab 01       	movw	r20, r22
    44f6:	66 27       	eor	r22, r22
    44f8:	77 27       	eor	r23, r23

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    44fa:	df 01       	movw	r26, r30
    44fc:	ad 59       	subi	r26, 0x9D	; 157
    44fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4500:	4c 93       	st	X, r20
	*ptr++ = (BYTE)val;
    4502:	df 01       	movw	r26, r30
    4504:	ac 59       	subi	r26, 0x9C	; 156
    4506:	bf 4f       	sbci	r27, 0xFF	; 255
    4508:	5c 93       	st	X, r21
    450a:	f1 cf       	rjmp	.-30     	; 0x44ee <f_rename+0x29c>

0000450c <disk_status>:
	case DRV_MMC :
		return mmc_disk_status();
#endif
	}
	return STA_NOINIT;
}
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	08 95       	ret

00004510 <disk_initialize>:
	case DRV_MMC :
		return mmc_disk_initialize();
#endif
	}
	return STA_NOINIT;
}
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	08 95       	ret

00004514 <disk_read>:
	case DRV_MMC :
		return mmc_disk_read(buff, sector, count);
#endif
	}
	return RES_PARERR;
}
    4514:	84 e0       	ldi	r24, 0x04	; 4
    4516:	90 e0       	ldi	r25, 0x00	; 0
    4518:	08 95       	ret

0000451a <disk_write>:
	case DRV_MMC :
		return mmc_disk_write(buff, sector, count);
#endif
	}
	return RES_PARERR;
}
    451a:	84 e0       	ldi	r24, 0x04	; 4
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	08 95       	ret

00004520 <disk_ioctl>:
	case DRV_MMC :
		return mmc_disk_ioctl(cmd, buff);
#endif
	}
	return RES_PARERR;
}
    4520:	84 e0       	ldi	r24, 0x04	; 4
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	08 95       	ret

00004526 <disk_timerproc>:
	cf_disk_timerproc();
#endif
#ifdef DRV_MMC
	mmc_disk_timerproc();
#endif
}
    4526:	08 95       	ret

00004528 <select>:
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4528:	8f ef       	ldi	r24, 0xFF	; 255
    452a:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    452c:	77 9b       	sbis	0x0e, 7	; 14
    452e:	fe cf       	rjmp	.-4      	; 0x452c <select+0x4>
	return SPDR;
    4530:	8f b1       	in	r24, 0x0f	; 15
)
{
	BYTE d;


	Timer2 = wt / 10;
    4532:	82 e3       	ldi	r24, 0x32	; 50
    4534:	80 93 20 01 	sts	0x0120, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4538:	9f ef       	ldi	r25, 0xFF	; 255
    453a:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    453c:	77 9b       	sbis	0x0e, 7	; 14
    453e:	fe cf       	rjmp	.-4      	; 0x453c <select+0x14>
	return SPDR;
    4540:	8f b1       	in	r24, 0x0f	; 15


	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    4542:	8f 3f       	cpi	r24, 0xFF	; 255
    4544:	61 f0       	breq	.+24     	; 0x455e <select+0x36>
    4546:	80 91 20 01 	lds	r24, 0x0120
    454a:	88 23       	and	r24, r24
    454c:	b1 f7       	brne	.-20     	; 0x453a <select+0x12>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    454e:	8f ef       	ldi	r24, 0xFF	; 255
    4550:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4552:	77 9b       	sbis	0x0e, 7	; 14
    4554:	fe cf       	rjmp	.-4      	; 0x4552 <select+0x2a>
	return SPDR;
    4556:	8f b1       	in	r24, 0x0f	; 15
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */

	deselect();
	return 0;	/* Timeout */
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	08 95       	ret
static
int select (void)	/* 1:Successful, 0:Timeout */
{
	CS_LOW();		/* Set CS# low */
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
	if (wait_ready(500)) return 1;	/* Wait for card ready */
    455e:	81 e0       	ldi	r24, 0x01	; 1
    4560:	90 e0       	ldi	r25, 0x00	; 0

	deselect();
	return 0;	/* Timeout */
}
    4562:	08 95       	ret

00004564 <send_cmd>:
static
BYTE send_cmd (		/* Returns R1 resp (bit7==1:Send failed) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
    4564:	cf 92       	push	r12
    4566:	df 92       	push	r13
    4568:	ef 92       	push	r14
    456a:	ff 92       	push	r15
    456c:	cf 93       	push	r28
    456e:	c8 2f       	mov	r28, r24
    4570:	6a 01       	movw	r12, r20
    4572:	7b 01       	movw	r14, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    4574:	87 fd       	sbrc	r24, 7
    4576:	58 c0       	rjmp	.+176    	; 0x4628 <send_cmd+0xc4>
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
    4578:	cc 30       	cpi	r28, 0x0C	; 12
    457a:	81 f0       	breq	.+32     	; 0x459c <send_cmd+0x38>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    457c:	8f ef       	ldi	r24, 0xFF	; 255
    457e:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4580:	77 9b       	sbis	0x0e, 7	; 14
    4582:	fe cf       	rjmp	.-4      	; 0x4580 <send_cmd+0x1c>
	return SPDR;
    4584:	8f b1       	in	r24, 0x0f	; 15
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
		deselect();
		if (!select()) return 0xFF;
    4586:	0e 94 94 22 	call	0x4528	; 0x4528 <select>
    458a:	00 97       	sbiw	r24, 0x00	; 0
    458c:	39 f4       	brne	.+14     	; 0x459c <send_cmd+0x38>
    458e:	8f ef       	ldi	r24, 0xFF	; 255
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
    4590:	cf 91       	pop	r28
    4592:	ff 90       	pop	r15
    4594:	ef 90       	pop	r14
    4596:	df 90       	pop	r13
    4598:	cf 90       	pop	r12
    459a:	08 95       	ret
		deselect();
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
    459c:	8c 2f       	mov	r24, r28
    459e:	80 64       	ori	r24, 0x40	; 64
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    45a0:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    45a2:	77 9b       	sbis	0x0e, 7	; 14
    45a4:	fe cf       	rjmp	.-4      	; 0x45a2 <send_cmd+0x3e>
	return SPDR;
    45a6:	8f b1       	in	r24, 0x0f	; 15
		if (!select()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    45a8:	8f 2d       	mov	r24, r15
    45aa:	99 27       	eor	r25, r25
    45ac:	aa 27       	eor	r26, r26
    45ae:	bb 27       	eor	r27, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    45b0:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    45b2:	77 9b       	sbis	0x0e, 7	; 14
    45b4:	fe cf       	rjmp	.-4      	; 0x45b2 <send_cmd+0x4e>
	return SPDR;
    45b6:	8f b1       	in	r24, 0x0f	; 15
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    45b8:	c7 01       	movw	r24, r14
    45ba:	aa 27       	eor	r26, r26
    45bc:	bb 27       	eor	r27, r27
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    45be:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    45c0:	77 9b       	sbis	0x0e, 7	; 14
    45c2:	fe cf       	rjmp	.-4      	; 0x45c0 <send_cmd+0x5c>
	return SPDR;
    45c4:	8f b1       	in	r24, 0x0f	; 15

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    45c6:	77 27       	eor	r23, r23
    45c8:	6f 2d       	mov	r22, r15
    45ca:	5e 2d       	mov	r21, r14
    45cc:	4d 2d       	mov	r20, r13
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    45ce:	4f b9       	out	0x0f, r20	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    45d0:	77 9b       	sbis	0x0e, 7	; 14
    45d2:	fe cf       	rjmp	.-4      	; 0x45d0 <send_cmd+0x6c>
	return SPDR;
    45d4:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    45d6:	cf b8       	out	0x0f, r12	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    45d8:	77 9b       	sbis	0x0e, 7	; 14
    45da:	fe cf       	rjmp	.-4      	; 0x45d8 <send_cmd+0x74>
	return SPDR;
    45dc:	8f b1       	in	r24, 0x0f	; 15
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    45de:	cc 23       	and	r28, r28
    45e0:	c9 f0       	breq	.+50     	; 0x4614 <send_cmd+0xb0>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    45e2:	c8 30       	cpi	r28, 0x08	; 8
    45e4:	c9 f4       	brne	.+50     	; 0x4618 <send_cmd+0xb4>
    45e6:	87 e8       	ldi	r24, 0x87	; 135
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    45e8:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    45ea:	77 9b       	sbis	0x0e, 7	; 14
    45ec:	fe cf       	rjmp	.-4      	; 0x45ea <send_cmd+0x86>
	return SPDR;
    45ee:	8f b1       	in	r24, 0x0f	; 15
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
	xchg_spi(n);

	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
    45f0:	cc 30       	cpi	r28, 0x0C	; 12
    45f2:	a1 f0       	breq	.+40     	; 0x461c <send_cmd+0xb8>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) Stop */
    45f4:	9a e0       	ldi	r25, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    45f6:	2f ef       	ldi	r18, 0xFF	; 255
    45f8:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    45fa:	77 9b       	sbis	0x0e, 7	; 14
    45fc:	fe cf       	rjmp	.-4      	; 0x45fa <send_cmd+0x96>
	return SPDR;
    45fe:	8f b1       	in	r24, 0x0f	; 15
	/* Receive command response */
	if (cmd == CMD12) xchg_spi(0xFF);		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = xchg_spi(0xFF);
	while ((res & 0x80) && --n);
    4600:	87 ff       	sbrs	r24, 7
    4602:	c6 cf       	rjmp	.-116    	; 0x4590 <send_cmd+0x2c>
    4604:	91 50       	subi	r25, 0x01	; 1
    4606:	c1 f7       	brne	.-16     	; 0x45f8 <send_cmd+0x94>

	return res;			/* Return with the response value */
}
    4608:	cf 91       	pop	r28
    460a:	ff 90       	pop	r15
    460c:	ef 90       	pop	r14
    460e:	df 90       	pop	r13
    4610:	cf 90       	pop	r12
    4612:	08 95       	ret
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) + Stop */
    4614:	85 e9       	ldi	r24, 0x95	; 149
    4616:	e8 cf       	rjmp	.-48     	; 0x45e8 <send_cmd+0x84>
	xchg_spi(0x40 | cmd);				/* Start + Command index */
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
    4618:	81 e0       	ldi	r24, 0x01	; 1
    461a:	e6 cf       	rjmp	.-52     	; 0x45e8 <send_cmd+0x84>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    461c:	8f ef       	ldi	r24, 0xFF	; 255
    461e:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4620:	77 9b       	sbis	0x0e, 7	; 14
    4622:	fe cf       	rjmp	.-4      	; 0x4620 <send_cmd+0xbc>
	return SPDR;
    4624:	8f b1       	in	r24, 0x0f	; 15
    4626:	e6 cf       	rjmp	.-52     	; 0x45f4 <send_cmd+0x90>
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    4628:	87 e3       	ldi	r24, 0x37	; 55
    462a:	40 e0       	ldi	r20, 0x00	; 0
    462c:	50 e0       	ldi	r21, 0x00	; 0
    462e:	ba 01       	movw	r22, r20
    4630:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
		if (res > 1) return res;
    4634:	82 30       	cpi	r24, 0x02	; 2
    4636:	08 f0       	brcs	.+2      	; 0x463a <send_cmd+0xd6>
    4638:	ab cf       	rjmp	.-170    	; 0x4590 <send_cmd+0x2c>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    463a:	cf 77       	andi	r28, 0x7F	; 127
    463c:	9d cf       	rjmp	.-198    	; 0x4578 <send_cmd+0x14>

0000463e <rcvr_datablock>:
static
int rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
    463e:	fc 01       	movw	r30, r24
	BYTE token;


	Timer1 = 20;
    4640:	84 e1       	ldi	r24, 0x14	; 20
    4642:	80 93 21 01 	sts	0x0121, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4646:	9f ef       	ldi	r25, 0xFF	; 255
    4648:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    464a:	77 9b       	sbis	0x0e, 7	; 14
    464c:	fe cf       	rjmp	.-4      	; 0x464a <rcvr_datablock+0xc>
	return SPDR;
    464e:	8f b1       	in	r24, 0x0f	; 15


	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
    4650:	8f 3f       	cpi	r24, 0xFF	; 255
    4652:	39 f4       	brne	.+14     	; 0x4662 <rcvr_datablock+0x24>
    4654:	80 91 21 01 	lds	r24, 0x0121
    4658:	88 23       	and	r24, r24
    465a:	b1 f7       	brne	.-20     	; 0x4648 <rcvr_datablock+0xa>
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    465c:	80 e0       	ldi	r24, 0x00	; 0
    465e:	90 e0       	ldi	r25, 0x00	; 0
    4660:	08 95       	ret
    4662:	8e 3f       	cpi	r24, 0xFE	; 254
    4664:	e1 f4       	brne	.+56     	; 0x469e <rcvr_datablock+0x60>
	BYTE *p,	/* Data read buffer */
	UINT cnt	/* Size of data block */
)
{
	do {
		SPDR = 0xFF;
    4666:	8f ef       	ldi	r24, 0xFF	; 255
    4668:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
    466a:	77 9b       	sbis	0x0e, 7	; 14
    466c:	fe cf       	rjmp	.-4      	; 0x466a <rcvr_datablock+0x2c>
		*p++ = SPDR;
    466e:	9f b1       	in	r25, 0x0f	; 15
    4670:	90 83       	st	Z, r25
		SPDR = 0xFF;
    4672:	8f b9       	out	0x0f, r24	; 15
		loop_until_bit_is_set(SPSR, SPIF);
    4674:	77 9b       	sbis	0x0e, 7	; 14
    4676:	fe cf       	rjmp	.-4      	; 0x4674 <rcvr_datablock+0x36>
		*p++ = SPDR;
    4678:	9f b1       	in	r25, 0x0f	; 15
    467a:	91 83       	std	Z+1, r25	; 0x01
/*-----------------------------------------------------------------------*/
/* Receive a data packet from MMC                                        */
/*-----------------------------------------------------------------------*/

static
int rcvr_datablock (
    467c:	32 96       	adiw	r30, 0x02	; 2
		loop_until_bit_is_set(SPSR, SPIF);
		*p++ = SPDR;
		SPDR = 0xFF;
		loop_until_bit_is_set(SPSR, SPIF);
		*p++ = SPDR;
	} while (cnt -= 2);
    467e:	62 50       	subi	r22, 0x02	; 2
    4680:	70 40       	sbci	r23, 0x00	; 0
    4682:	91 f7       	brne	.-28     	; 0x4668 <rcvr_datablock+0x2a>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4684:	8f ef       	ldi	r24, 0xFF	; 255
    4686:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4688:	77 9b       	sbis	0x0e, 7	; 14
    468a:	fe cf       	rjmp	.-4      	; 0x4688 <rcvr_datablock+0x4a>
	return SPDR;
    468c:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    468e:	8f ef       	ldi	r24, 0xFF	; 255
    4690:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4692:	77 9b       	sbis	0x0e, 7	; 14
    4694:	fe cf       	rjmp	.-4      	; 0x4692 <rcvr_datablock+0x54>
	return SPDR;
    4696:	8f b1       	in	r24, 0x0f	; 15
    4698:	81 e0       	ldi	r24, 0x01	; 1
    469a:	90 e0       	ldi	r25, 0x00	; 0
    469c:	08 95       	ret

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = xchg_spi(0xFF);
	} while ((token == 0xFF) && Timer1);
	if (token != 0xFE) return 0;	/* If not valid data token, retutn with error */
    469e:	80 e0       	ldi	r24, 0x00	; 0
    46a0:	90 e0       	ldi	r25, 0x00	; 0
	rcvr_spi_multi(buff, btr);		/* Receive the data block into buffer */
	xchg_spi(0xFF);					/* Discard CRC */
	xchg_spi(0xFF);

	return 1;						/* Return with success */
}
    46a2:	08 95       	ret

000046a4 <xmit_datablock>:
static
int xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
    46a4:	fc 01       	movw	r30, r24
)
{
	BYTE d;


	Timer2 = wt / 10;
    46a6:	82 e3       	ldi	r24, 0x32	; 50
    46a8:	80 93 20 01 	sts	0x0120, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    46ac:	9f ef       	ldi	r25, 0xFF	; 255
    46ae:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    46b0:	77 9b       	sbis	0x0e, 7	; 14
    46b2:	fe cf       	rjmp	.-4      	; 0x46b0 <xmit_datablock+0xc>
	return SPDR;
    46b4:	8f b1       	in	r24, 0x0f	; 15


	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    46b6:	8f 3f       	cpi	r24, 0xFF	; 255
    46b8:	39 f0       	breq	.+14     	; 0x46c8 <xmit_datablock+0x24>
    46ba:	80 91 20 01 	lds	r24, 0x0120
    46be:	88 23       	and	r24, r24
    46c0:	b1 f7       	brne	.-20     	; 0x46ae <xmit_datablock+0xa>
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
    46c2:	80 e0       	ldi	r24, 0x00	; 0
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	08 95       	ret
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    46c8:	6f b9       	out	0x0f, r22	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    46ca:	77 9b       	sbis	0x0e, 7	; 14
    46cc:	fe cf       	rjmp	.-4      	; 0x46ca <xmit_datablock+0x26>
	return SPDR;
    46ce:	8f b1       	in	r24, 0x0f	; 15


	if (!wait_ready(500)) return 0;

	xchg_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
    46d0:	6d 3f       	cpi	r22, 0xFD	; 253
    46d2:	21 f1       	breq	.+72     	; 0x471c <xmit_datablock+0x78>
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
    46d4:	cf 01       	movw	r24, r30
    46d6:	80 50       	subi	r24, 0x00	; 0
    46d8:	9e 4f       	sbci	r25, 0xFE	; 254
	const BYTE *p,	/* Data block to be sent */
	UINT cnt		/* Size of data block */
)
{
	do {
		SPDR = *p++;
    46da:	20 81       	ld	r18, Z
    46dc:	2f b9       	out	0x0f, r18	; 15
		loop_until_bit_is_set(SPSR, SPIF);
    46de:	77 9b       	sbis	0x0e, 7	; 14
    46e0:	fe cf       	rjmp	.-4      	; 0x46de <xmit_datablock+0x3a>
		SPDR = *p++;
    46e2:	21 81       	ldd	r18, Z+1	; 0x01
    46e4:	2f b9       	out	0x0f, r18	; 15
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
    46e6:	32 96       	adiw	r30, 0x02	; 2
{
	do {
		SPDR = *p++;
		loop_until_bit_is_set(SPSR, SPIF);
		SPDR = *p++;
		loop_until_bit_is_set(SPSR, SPIF);
    46e8:	77 9b       	sbis	0x0e, 7	; 14
    46ea:	fe cf       	rjmp	.-4      	; 0x46e8 <xmit_datablock+0x44>
	} while (cnt -= 2);
    46ec:	8e 17       	cp	r24, r30
    46ee:	9f 07       	cpc	r25, r31
    46f0:	a1 f7       	brne	.-24     	; 0x46da <xmit_datablock+0x36>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    46f2:	8f ef       	ldi	r24, 0xFF	; 255
    46f4:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    46f6:	77 9b       	sbis	0x0e, 7	; 14
    46f8:	fe cf       	rjmp	.-4      	; 0x46f6 <xmit_datablock+0x52>
	return SPDR;
    46fa:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    46fc:	8f ef       	ldi	r24, 0xFF	; 255
    46fe:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4700:	77 9b       	sbis	0x0e, 7	; 14
    4702:	fe cf       	rjmp	.-4      	; 0x4700 <xmit_datablock+0x5c>
	return SPDR;
    4704:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4706:	8f ef       	ldi	r24, 0xFF	; 255
    4708:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    470a:	77 9b       	sbis	0x0e, 7	; 14
    470c:	fe cf       	rjmp	.-4      	; 0x470a <xmit_datablock+0x66>
	return SPDR;
    470e:	2f b1       	in	r18, 0x0f	; 15
	if (token != 0xFD) {	/* Is data token */
		xmit_spi_multi(buff, 512);		/* Xmit the data block to the MMC */
		xchg_spi(0xFF);					/* CRC (Dummy) */
		xchg_spi(0xFF);
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
    4710:	2f 71       	andi	r18, 0x1F	; 31
/* Send a data packet to MMC                                             */
/*-----------------------------------------------------------------------*/

#if	_USE_WRITE
static
int xmit_datablock (
    4712:	81 e0       	ldi	r24, 0x01	; 1
    4714:	90 e0       	ldi	r25, 0x00	; 0
    4716:	25 30       	cpi	r18, 0x05	; 5
    4718:	a1 f6       	brne	.-88     	; 0x46c2 <xmit_datablock+0x1e>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
}
    471a:	08 95       	ret
		resp = xchg_spi(0xFF);			/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return 0;
	}

	return 1;
    471c:	81 e0       	ldi	r24, 0x01	; 1
    471e:	90 e0       	ldi	r25, 0x00	; 0
}
    4720:	08 95       	ret

00004722 <mmc_disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_initialize (void)
{
    4722:	ef 92       	push	r14
    4724:	ff 92       	push	r15
    4726:	0f 93       	push	r16
    4728:	1f 93       	push	r17
    472a:	cf 93       	push	r28
    472c:	df 93       	push	r29
    472e:	00 d0       	rcall	.+0      	; 0x4730 <mmc_disk_initialize+0xe>
    4730:	00 d0       	rcall	.+0      	; 0x4732 <mmc_disk_initialize+0x10>
    4732:	cd b7       	in	r28, 0x3d	; 61
    4734:	de b7       	in	r29, 0x3e	; 62
	BYTE n, cmd, ty, ocr[4];


	power_off();						/* Turn off the socket power to reset the card */
	for (Timer1 = 10; Timer1; ) ;		/* Wait for 100ms */
    4736:	8a e0       	ldi	r24, 0x0A	; 10
    4738:	80 93 21 01 	sts	0x0121, r24
    473c:	80 91 21 01 	lds	r24, 0x0121
    4740:	88 23       	and	r24, r24
    4742:	e1 f7       	brne	.-8      	; 0x473c <mmc_disk_initialize+0x1a>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */
    4744:	80 91 1b 01 	lds	r24, 0x011B
    4748:	81 fd       	sbrc	r24, 1
    474a:	1e c0       	rjmp	.+60     	; 0x4788 <mmc_disk_initialize+0x66>
    474c:	8a e0       	ldi	r24, 0x0A	; 10
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    474e:	9f ef       	ldi	r25, 0xFF	; 255
    4750:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4752:	77 9b       	sbis	0x0e, 7	; 14
    4754:	fe cf       	rjmp	.-4      	; 0x4752 <mmc_disk_initialize+0x30>
	return SPDR;
    4756:	2f b1       	in	r18, 0x0f	; 15
    4758:	81 50       	subi	r24, 0x01	; 1
	for (Timer1 = 10; Timer1; ) ;		/* Wait for 100ms */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket? */

	power_on();							/* Turn on the socket power */
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */
    475a:	d1 f7       	brne	.-12     	; 0x4750 <mmc_disk_initialize+0x2e>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI mode */
    475c:	40 e0       	ldi	r20, 0x00	; 0
    475e:	50 e0       	ldi	r21, 0x00	; 0
    4760:	ba 01       	movw	r22, r20
    4762:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4766:	81 30       	cpi	r24, 0x01	; 1
    4768:	e1 f0       	breq	.+56     	; 0x47a2 <mmc_disk_initialize+0x80>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
    476a:	00 e0       	ldi	r16, 0x00	; 0
		}
	}
	CardType = ty;
    476c:	00 93 22 01 	sts	0x0122, r16
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4770:	8f ef       	ldi	r24, 0xFF	; 255
    4772:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4774:	77 9b       	sbis	0x0e, 7	; 14
    4776:	fe cf       	rjmp	.-4      	; 0x4774 <mmc_disk_initialize+0x52>
	return SPDR;
    4778:	8f b1       	in	r24, 0x0f	; 15
		}
	}
	CardType = ty;
	deselect();

	if (ty) {			/* Initialization succeded */
    477a:	00 23       	and	r16, r16
    477c:	29 f0       	breq	.+10     	; 0x4788 <mmc_disk_initialize+0x66>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
    477e:	80 91 1b 01 	lds	r24, 0x011B
    4782:	8e 7f       	andi	r24, 0xFE	; 254
    4784:	80 93 1b 01 	sts	0x011B, r24
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
    4788:	80 91 1b 01 	lds	r24, 0x011B
}
    478c:	0f 90       	pop	r0
    478e:	0f 90       	pop	r0
    4790:	0f 90       	pop	r0
    4792:	0f 90       	pop	r0
    4794:	df 91       	pop	r29
    4796:	cf 91       	pop	r28
    4798:	1f 91       	pop	r17
    479a:	0f 91       	pop	r16
    479c:	ff 90       	pop	r15
    479e:	ef 90       	pop	r14
    47a0:	08 95       	ret
	FCLK_SLOW();
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI mode */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
    47a2:	84 e6       	ldi	r24, 0x64	; 100
    47a4:	80 93 21 01 	sts	0x0121, r24
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
    47a8:	88 e0       	ldi	r24, 0x08	; 8
    47aa:	4a ea       	ldi	r20, 0xAA	; 170
    47ac:	51 e0       	ldi	r21, 0x01	; 1
    47ae:	60 e0       	ldi	r22, 0x00	; 0
    47b0:	70 e0       	ldi	r23, 0x00	; 0
    47b2:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    47b6:	81 30       	cpi	r24, 0x01	; 1
    47b8:	39 f1       	breq	.+78     	; 0x4808 <mmc_disk_initialize+0xe6>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    47ba:	89 ea       	ldi	r24, 0xA9	; 169
    47bc:	40 e0       	ldi	r20, 0x00	; 0
    47be:	50 e0       	ldi	r21, 0x00	; 0
    47c0:	ba 01       	movw	r22, r20
    47c2:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    47c6:	82 30       	cpi	r24, 0x02	; 2
    47c8:	08 f4       	brcc	.+2      	; 0x47cc <mmc_disk_initialize+0xaa>
    47ca:	63 c0       	rjmp	.+198    	; 0x4892 <mmc_disk_initialize+0x170>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
    47cc:	01 e0       	ldi	r16, 0x01	; 1
    47ce:	11 e0       	ldi	r17, 0x01	; 1
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
    47d0:	80 91 21 01 	lds	r24, 0x0121
    47d4:	88 23       	and	r24, r24
    47d6:	41 f0       	breq	.+16     	; 0x47e8 <mmc_disk_initialize+0xc6>
    47d8:	81 2f       	mov	r24, r17
    47da:	40 e0       	ldi	r20, 0x00	; 0
    47dc:	50 e0       	ldi	r21, 0x00	; 0
    47de:	ba 01       	movw	r22, r20
    47e0:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    47e4:	88 23       	and	r24, r24
    47e6:	a1 f7       	brne	.-24     	; 0x47d0 <mmc_disk_initialize+0xae>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
    47e8:	80 91 21 01 	lds	r24, 0x0121
    47ec:	88 23       	and	r24, r24
    47ee:	09 f4       	brne	.+2      	; 0x47f2 <mmc_disk_initialize+0xd0>
    47f0:	bc cf       	rjmp	.-136    	; 0x476a <mmc_disk_initialize+0x48>
    47f2:	80 e1       	ldi	r24, 0x10	; 16
    47f4:	40 e0       	ldi	r20, 0x00	; 0
    47f6:	52 e0       	ldi	r21, 0x02	; 2
    47f8:	60 e0       	ldi	r22, 0x00	; 0
    47fa:	70 e0       	ldi	r23, 0x00	; 0
    47fc:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4800:	88 23       	and	r24, r24
    4802:	09 f0       	breq	.+2      	; 0x4806 <mmc_disk_initialize+0xe4>
    4804:	b2 cf       	rjmp	.-156    	; 0x476a <mmc_disk_initialize+0x48>
    4806:	b2 cf       	rjmp	.-156    	; 0x476c <mmc_disk_initialize+0x4a>
	for (n = 10; n; n--) xchg_spi(0xFF);	/* 80 dummy clocks */

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI mode */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
    4808:	8e 01       	movw	r16, r28
    480a:	0f 5f       	subi	r16, 0xFF	; 255
    480c:	1f 4f       	sbci	r17, 0xFF	; 255

/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_initialize (void)
    480e:	35 e0       	ldi	r19, 0x05	; 5
    4810:	e3 2e       	mov	r14, r19
    4812:	f1 2c       	mov	r15, r1
    4814:	ec 0e       	add	r14, r28
    4816:	fd 1e       	adc	r15, r29
    4818:	f8 01       	movw	r30, r16
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    481a:	9f ef       	ldi	r25, 0xFF	; 255
    481c:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    481e:	77 9b       	sbis	0x0e, 7	; 14
    4820:	fe cf       	rjmp	.-4      	; 0x481e <mmc_disk_initialize+0xfc>
	return SPDR;
    4822:	8f b1       	in	r24, 0x0f	; 15

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI mode */
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
    4824:	81 93       	st	Z+, r24
    4826:	ee 15       	cp	r30, r14
    4828:	ff 05       	cpc	r31, r15
    482a:	c1 f7       	brne	.-16     	; 0x481c <mmc_disk_initialize+0xfa>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    482c:	8b 81       	ldd	r24, Y+3	; 0x03
    482e:	81 30       	cpi	r24, 0x01	; 1
    4830:	09 f0       	breq	.+2      	; 0x4834 <mmc_disk_initialize+0x112>
    4832:	9b cf       	rjmp	.-202    	; 0x476a <mmc_disk_initialize+0x48>
    4834:	8c 81       	ldd	r24, Y+4	; 0x04
    4836:	8a 3a       	cpi	r24, 0xAA	; 170
    4838:	09 f0       	breq	.+2      	; 0x483c <mmc_disk_initialize+0x11a>
    483a:	97 cf       	rjmp	.-210    	; 0x476a <mmc_disk_initialize+0x48>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    483c:	80 91 21 01 	lds	r24, 0x0121
    4840:	88 23       	and	r24, r24
    4842:	49 f0       	breq	.+18     	; 0x4856 <mmc_disk_initialize+0x134>
    4844:	89 ea       	ldi	r24, 0xA9	; 169
    4846:	40 e0       	ldi	r20, 0x00	; 0
    4848:	50 e0       	ldi	r21, 0x00	; 0
    484a:	60 e0       	ldi	r22, 0x00	; 0
    484c:	70 e4       	ldi	r23, 0x40	; 64
    484e:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4852:	88 23       	and	r24, r24
    4854:	99 f7       	brne	.-26     	; 0x483c <mmc_disk_initialize+0x11a>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    4856:	80 91 21 01 	lds	r24, 0x0121
    485a:	88 23       	and	r24, r24
    485c:	09 f4       	brne	.+2      	; 0x4860 <mmc_disk_initialize+0x13e>
    485e:	85 cf       	rjmp	.-246    	; 0x476a <mmc_disk_initialize+0x48>
    4860:	8a e3       	ldi	r24, 0x3A	; 58
    4862:	40 e0       	ldi	r20, 0x00	; 0
    4864:	50 e0       	ldi	r21, 0x00	; 0
    4866:	ba 01       	movw	r22, r20
    4868:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    486c:	88 23       	and	r24, r24
    486e:	09 f0       	breq	.+2      	; 0x4872 <mmc_disk_initialize+0x150>
    4870:	7c cf       	rjmp	.-264    	; 0x476a <mmc_disk_initialize+0x48>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4872:	8f ef       	ldi	r24, 0xFF	; 255
    4874:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4876:	77 9b       	sbis	0x0e, 7	; 14
    4878:	fe cf       	rjmp	.-4      	; 0x4876 <mmc_disk_initialize+0x154>
	return SPDR;
    487a:	9f b1       	in	r25, 0x0f	; 15
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* Is the card SDv2? */
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    487c:	f8 01       	movw	r30, r16
    487e:	91 93       	st	Z+, r25
    4880:	8f 01       	movw	r16, r30
    4882:	ee 16       	cp	r14, r30
    4884:	ff 06       	cpc	r15, r31
    4886:	b1 f7       	brne	.-20     	; 0x4874 <mmc_disk_initialize+0x152>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
    4888:	89 81       	ldd	r24, Y+1	; 0x01
    488a:	86 ff       	sbrs	r24, 6
    488c:	05 c0       	rjmp	.+10     	; 0x4898 <mmc_disk_initialize+0x176>
    488e:	0c e0       	ldi	r16, 0x0C	; 12
    4890:	6d cf       	rjmp	.-294    	; 0x476c <mmc_disk_initialize+0x4a>
				}
			}
		} else {							/* SDv1 or MMCv3 */
			if (send_cmd(ACMD41, 0) <= 1) 	{
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
    4892:	02 e0       	ldi	r16, 0x02	; 2
    4894:	19 ea       	ldi	r17, 0xA9	; 169
    4896:	9c cf       	rjmp	.-200    	; 0x47d0 <mmc_disk_initialize+0xae>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Check if the card is SDv2 */
    4898:	04 e0       	ldi	r16, 0x04	; 4
    489a:	68 cf       	rjmp	.-304    	; 0x476c <mmc_disk_initialize+0x4a>

0000489c <mmc_disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/

DSTATUS mmc_disk_status (void)
{
	return Stat;
    489c:	80 91 1b 01 	lds	r24, 0x011B
}
    48a0:	08 95       	ret

000048a2 <mmc_disk_read>:
DRESULT mmc_disk_read (
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    48a2:	ff 92       	push	r15
    48a4:	0f 93       	push	r16
    48a6:	1f 93       	push	r17
    48a8:	cf 93       	push	r28
    48aa:	df 93       	push	r29
    48ac:	ec 01       	movw	r28, r24
    48ae:	89 01       	movw	r16, r18
	BYTE cmd;


	if (!count) return RES_PARERR;
    48b0:	21 15       	cp	r18, r1
    48b2:	31 05       	cpc	r19, r1
    48b4:	49 f4       	brne	.+18     	; 0x48c8 <mmc_disk_read+0x26>
    48b6:	c4 e0       	ldi	r28, 0x04	; 4
    48b8:	d0 e0       	ldi	r29, 0x00	; 0
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    48ba:	ce 01       	movw	r24, r28
    48bc:	df 91       	pop	r29
    48be:	cf 91       	pop	r28
    48c0:	1f 91       	pop	r17
    48c2:	0f 91       	pop	r16
    48c4:	ff 90       	pop	r15
    48c6:	08 95       	ret
{
	BYTE cmd;


	if (!count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    48c8:	80 91 1b 01 	lds	r24, 0x011B
    48cc:	80 ff       	sbrs	r24, 0
    48ce:	09 c0       	rjmp	.+18     	; 0x48e2 <mmc_disk_read+0x40>
    48d0:	c3 e0       	ldi	r28, 0x03	; 3
    48d2:	d0 e0       	ldi	r29, 0x00	; 0
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    48d4:	ce 01       	movw	r24, r28
    48d6:	df 91       	pop	r29
    48d8:	cf 91       	pop	r28
    48da:	1f 91       	pop	r17
    48dc:	0f 91       	pop	r16
    48de:	ff 90       	pop	r15
    48e0:	08 95       	ret


	if (!count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    48e2:	80 91 22 01 	lds	r24, 0x0122
    48e6:	83 fd       	sbrc	r24, 3
    48e8:	07 c0       	rjmp	.+14     	; 0x48f8 <mmc_disk_read+0x56>
    48ea:	a9 e0       	ldi	r26, 0x09	; 9
    48ec:	44 0f       	add	r20, r20
    48ee:	55 1f       	adc	r21, r21
    48f0:	66 1f       	adc	r22, r22
    48f2:	77 1f       	adc	r23, r23
    48f4:	aa 95       	dec	r26
    48f6:	d1 f7       	brne	.-12     	; 0x48ec <mmc_disk_read+0x4a>

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    48f8:	02 30       	cpi	r16, 0x02	; 2
    48fa:	11 05       	cpc	r17, r1
    48fc:	68 f1       	brcs	.+90     	; 0x4958 <mmc_disk_read+0xb6>
    48fe:	f2 e1       	ldi	r31, 0x12	; 18
    4900:	ff 2e       	mov	r15, r31
	if (send_cmd(cmd, sector) == 0) {
    4902:	8f 2d       	mov	r24, r15
    4904:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4908:	88 23       	and	r24, r24
    490a:	71 f0       	breq	.+28     	; 0x4928 <mmc_disk_read+0x86>
    490c:	c1 e0       	ldi	r28, 0x01	; 1
    490e:	d0 e0       	ldi	r29, 0x00	; 0
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4910:	8f ef       	ldi	r24, 0xFF	; 255
    4912:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4914:	77 9b       	sbis	0x0e, 7	; 14
    4916:	fe cf       	rjmp	.-4      	; 0x4914 <mmc_disk_read+0x72>
	return SPDR;
    4918:	8f b1       	in	r24, 0x0f	; 15
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    491a:	ce 01       	movw	r24, r28
    491c:	df 91       	pop	r29
    491e:	cf 91       	pop	r28
    4920:	1f 91       	pop	r17
    4922:	0f 91       	pop	r16
    4924:	ff 90       	pop	r15
    4926:	08 95       	ret
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
    4928:	ce 01       	movw	r24, r28
    492a:	60 e0       	ldi	r22, 0x00	; 0
    492c:	72 e0       	ldi	r23, 0x02	; 2
    492e:	0e 94 1f 23 	call	0x463e	; 0x463e <rcvr_datablock>
    4932:	00 97       	sbiw	r24, 0x00	; 0
    4934:	a1 f0       	breq	.+40     	; 0x495e <mmc_disk_read+0xbc>
			buff += 512;
    4936:	c0 50       	subi	r28, 0x00	; 0
    4938:	de 4f       	sbci	r29, 0xFE	; 254
		} while (--count);
    493a:	01 50       	subi	r16, 0x01	; 1
    493c:	10 40       	sbci	r17, 0x00	; 0
    493e:	a1 f7       	brne	.-24     	; 0x4928 <mmc_disk_read+0x86>
    4940:	c0 e0       	ldi	r28, 0x00	; 0
    4942:	d0 e0       	ldi	r29, 0x00	; 0
		if (cmd == CMD18) send_cmd(CMD12, 0);	/* STOP_TRANSMISSION */
    4944:	82 e1       	ldi	r24, 0x12	; 18
    4946:	f8 16       	cp	r15, r24
    4948:	19 f7       	brne	.-58     	; 0x4910 <mmc_disk_read+0x6e>
    494a:	8c e0       	ldi	r24, 0x0C	; 12
    494c:	40 e0       	ldi	r20, 0x00	; 0
    494e:	50 e0       	ldi	r21, 0x00	; 0
    4950:	ba 01       	movw	r22, r20
    4952:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4956:	dc cf       	rjmp	.-72     	; 0x4910 <mmc_disk_read+0x6e>
	if (!count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	cmd = count > 1 ? CMD18 : CMD17;			/*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    4958:	e1 e1       	ldi	r30, 0x11	; 17
    495a:	fe 2e       	mov	r15, r30
    495c:	d2 cf       	rjmp	.-92     	; 0x4902 <mmc_disk_read+0x60>
	if (send_cmd(cmd, sector) == 0) {
		do {
			if (!rcvr_datablock(buff, 512)) break;
    495e:	c1 e0       	ldi	r28, 0x01	; 1
    4960:	d0 e0       	ldi	r29, 0x00	; 0
    4962:	01 15       	cp	r16, r1
    4964:	11 05       	cpc	r17, r1
    4966:	71 f7       	brne	.-36     	; 0x4944 <mmc_disk_read+0xa2>
    4968:	eb cf       	rjmp	.-42     	; 0x4940 <mmc_disk_read+0x9e>

0000496a <mmc_disk_write>:
DRESULT mmc_disk_write (
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
    496a:	cf 92       	push	r12
    496c:	df 92       	push	r13
    496e:	ef 92       	push	r14
    4970:	ff 92       	push	r15
    4972:	0f 93       	push	r16
    4974:	1f 93       	push	r17
    4976:	cf 93       	push	r28
    4978:	df 93       	push	r29
    497a:	00 d0       	rcall	.+0      	; 0x497c <mmc_disk_write+0x12>
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
    4980:	8c 01       	movw	r16, r24
    4982:	6a 01       	movw	r12, r20
    4984:	7b 01       	movw	r14, r22
	if (!count) return RES_PARERR;
    4986:	21 15       	cp	r18, r1
    4988:	31 05       	cpc	r19, r1
    498a:	69 f4       	brne	.+26     	; 0x49a6 <mmc_disk_write+0x3c>
    498c:	84 e0       	ldi	r24, 0x04	; 4
    498e:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
    4990:	0f 90       	pop	r0
    4992:	0f 90       	pop	r0
    4994:	df 91       	pop	r29
    4996:	cf 91       	pop	r28
    4998:	1f 91       	pop	r17
    499a:	0f 91       	pop	r16
    499c:	ff 90       	pop	r15
    499e:	ef 90       	pop	r14
    49a0:	df 90       	pop	r13
    49a2:	cf 90       	pop	r12
    49a4:	08 95       	ret
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..128) */
)
{
	if (!count) return RES_PARERR;
	if (Stat & STA_NOINIT) return RES_NOTRDY;
    49a6:	80 91 1b 01 	lds	r24, 0x011B
    49aa:	80 ff       	sbrs	r24, 0
    49ac:	03 c0       	rjmp	.+6      	; 0x49b4 <mmc_disk_write+0x4a>
    49ae:	83 e0       	ldi	r24, 0x03	; 3
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	ee cf       	rjmp	.-36     	; 0x4990 <mmc_disk_write+0x26>
	if (Stat & STA_PROTECT) return RES_WRPRT;
    49b4:	80 91 1b 01 	lds	r24, 0x011B
    49b8:	82 ff       	sbrs	r24, 2
    49ba:	03 c0       	rjmp	.+6      	; 0x49c2 <mmc_disk_write+0x58>
    49bc:	82 e0       	ldi	r24, 0x02	; 2
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	e7 cf       	rjmp	.-50     	; 0x4990 <mmc_disk_write+0x26>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
    49c2:	80 91 22 01 	lds	r24, 0x0122
    49c6:	90 e0       	ldi	r25, 0x00	; 0
    49c8:	83 fd       	sbrc	r24, 3
    49ca:	07 c0       	rjmp	.+14     	; 0x49da <mmc_disk_write+0x70>
    49cc:	b9 e0       	ldi	r27, 0x09	; 9
    49ce:	cc 0c       	add	r12, r12
    49d0:	dd 1c       	adc	r13, r13
    49d2:	ee 1c       	adc	r14, r14
    49d4:	ff 1c       	adc	r15, r15
    49d6:	ba 95       	dec	r27
    49d8:	d1 f7       	brne	.-12     	; 0x49ce <mmc_disk_write+0x64>

	if (count == 1) {	/* Single block write */
    49da:	21 30       	cpi	r18, 0x01	; 1
    49dc:	31 05       	cpc	r19, r1
    49de:	09 f4       	brne	.+2      	; 0x49e2 <mmc_disk_write+0x78>
    49e0:	44 c0       	rjmp	.+136    	; 0x4a6a <mmc_disk_write+0x100>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    49e2:	86 70       	andi	r24, 0x06	; 6
    49e4:	90 70       	andi	r25, 0x00	; 0
    49e6:	00 97       	sbiw	r24, 0x00	; 0
    49e8:	a9 f5       	brne	.+106    	; 0x4a54 <mmc_disk_write+0xea>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
    49ea:	89 e1       	ldi	r24, 0x19	; 25
    49ec:	b7 01       	movw	r22, r14
    49ee:	a6 01       	movw	r20, r12
    49f0:	29 83       	std	Y+1, r18	; 0x01
    49f2:	3a 83       	std	Y+2, r19	; 0x02
    49f4:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    49f8:	29 81       	ldd	r18, Y+1	; 0x01
    49fa:	3a 81       	ldd	r19, Y+2	; 0x02
    49fc:	88 23       	and	r24, r24
    49fe:	41 f0       	breq	.+16     	; 0x4a10 <mmc_disk_write+0xa6>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	90 e0       	ldi	r25, 0x00	; 0
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4a04:	2f ef       	ldi	r18, 0xFF	; 255
    4a06:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4a08:	77 9b       	sbis	0x0e, 7	; 14
    4a0a:	fe cf       	rjmp	.-4      	; 0x4a08 <mmc_disk_write+0x9e>
	return SPDR;
    4a0c:	2f b1       	in	r18, 0x0f	; 15
				count = 1;
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
    4a0e:	c0 cf       	rjmp	.-128    	; 0x4990 <mmc_disk_write+0x26>
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
    4a10:	c8 01       	movw	r24, r16
    4a12:	6c ef       	ldi	r22, 0xFC	; 252
    4a14:	29 83       	std	Y+1, r18	; 0x01
    4a16:	3a 83       	std	Y+2, r19	; 0x02
    4a18:	0e 94 52 23 	call	0x46a4	; 0x46a4 <xmit_datablock>
    4a1c:	29 81       	ldd	r18, Y+1	; 0x01
    4a1e:	3a 81       	ldd	r19, Y+2	; 0x02
    4a20:	00 97       	sbiw	r24, 0x00	; 0
    4a22:	29 f0       	breq	.+10     	; 0x4a2e <mmc_disk_write+0xc4>
				buff += 512;
    4a24:	00 50       	subi	r16, 0x00	; 0
    4a26:	1e 4f       	sbci	r17, 0xFE	; 254
			} while (--count);
    4a28:	21 50       	subi	r18, 0x01	; 1
    4a2a:	30 40       	sbci	r19, 0x00	; 0
    4a2c:	89 f7       	brne	.-30     	; 0x4a10 <mmc_disk_write+0xa6>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
    4a2e:	80 e0       	ldi	r24, 0x00	; 0
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	6d ef       	ldi	r22, 0xFD	; 253
    4a34:	29 83       	std	Y+1, r18	; 0x01
    4a36:	3a 83       	std	Y+2, r19	; 0x02
    4a38:	0e 94 52 23 	call	0x46a4	; 0x46a4 <xmit_datablock>
    4a3c:	29 81       	ldd	r18, Y+1	; 0x01
    4a3e:	3a 81       	ldd	r19, Y+2	; 0x02
    4a40:	00 97       	sbiw	r24, 0x00	; 0
    4a42:	f1 f2       	breq	.-68     	; 0x4a00 <mmc_disk_write+0x96>
    4a44:	81 e0       	ldi	r24, 0x01	; 1
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	21 15       	cp	r18, r1
    4a4a:	31 05       	cpc	r19, r1
    4a4c:	d9 f6       	brne	.-74     	; 0x4a04 <mmc_disk_write+0x9a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
    4a4e:	80 e0       	ldi	r24, 0x00	; 0
    4a50:	90 e0       	ldi	r25, 0x00	; 0
    4a52:	d8 cf       	rjmp	.-80     	; 0x4a04 <mmc_disk_write+0x9a>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
    4a54:	a9 01       	movw	r20, r18
    4a56:	60 e0       	ldi	r22, 0x00	; 0
    4a58:	70 e0       	ldi	r23, 0x00	; 0
    4a5a:	87 e9       	ldi	r24, 0x97	; 151
    4a5c:	29 83       	std	Y+1, r18	; 0x01
    4a5e:	3a 83       	std	Y+2, r19	; 0x02
    4a60:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4a64:	3a 81       	ldd	r19, Y+2	; 0x02
    4a66:	29 81       	ldd	r18, Y+1	; 0x01
    4a68:	c0 cf       	rjmp	.-128    	; 0x49ea <mmc_disk_write+0x80>
	if (Stat & STA_PROTECT) return RES_WRPRT;

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
    4a6a:	88 e1       	ldi	r24, 0x18	; 24
    4a6c:	b7 01       	movw	r22, r14
    4a6e:	a6 01       	movw	r20, r12
    4a70:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4a74:	88 23       	and	r24, r24
    4a76:	21 f6       	brne	.-120    	; 0x4a00 <mmc_disk_write+0x96>
			&& xmit_datablock(buff, 0xFE))
    4a78:	c8 01       	movw	r24, r16
    4a7a:	6e ef       	ldi	r22, 0xFE	; 254
    4a7c:	0e 94 52 23 	call	0x46a4	; 0x46a4 <xmit_datablock>
    4a80:	00 97       	sbiw	r24, 0x00	; 0
    4a82:	29 f7       	brne	.-54     	; 0x4a4e <mmc_disk_write+0xe4>
    4a84:	bd cf       	rjmp	.-134    	; 0x4a00 <mmc_disk_write+0x96>

00004a86 <mmc_disk_ioctl>:
#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
    4a86:	cf 92       	push	r12
    4a88:	df 92       	push	r13
    4a8a:	ef 92       	push	r14
    4a8c:	ff 92       	push	r15
    4a8e:	0f 93       	push	r16
    4a90:	1f 93       	push	r17
    4a92:	cf 93       	push	r28
    4a94:	df 93       	push	r29
    4a96:	cd b7       	in	r28, 0x3d	; 61
    4a98:	de b7       	in	r29, 0x3e	; 62
    4a9a:	60 97       	sbiw	r28, 0x10	; 16
    4a9c:	0f b6       	in	r0, 0x3f	; 63
    4a9e:	f8 94       	cli
    4aa0:	de bf       	out	0x3e, r29	; 62
    4aa2:	0f be       	out	0x3f, r0	; 63
    4aa4:	cd bf       	out	0x3d, r28	; 61
    4aa6:	6b 01       	movw	r12, r22
	SDIO_CTRL *sdi;
	BYTE rc, *bp;
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;
    4aa8:	90 91 1b 01 	lds	r25, 0x011B
    4aac:	90 ff       	sbrs	r25, 0
    4aae:	12 c0       	rjmp	.+36     	; 0x4ad4 <mmc_disk_ioctl+0x4e>
    4ab0:	23 e0       	ldi	r18, 0x03	; 3
    4ab2:	30 e0       	ldi	r19, 0x00	; 0
	default:
		res = RES_PARERR;
	}

	return res;
}
    4ab4:	c9 01       	movw	r24, r18
    4ab6:	60 96       	adiw	r28, 0x10	; 16
    4ab8:	0f b6       	in	r0, 0x3f	; 63
    4aba:	f8 94       	cli
    4abc:	de bf       	out	0x3e, r29	; 62
    4abe:	0f be       	out	0x3f, r0	; 63
    4ac0:	cd bf       	out	0x3d, r28	; 61
    4ac2:	df 91       	pop	r29
    4ac4:	cf 91       	pop	r28
    4ac6:	1f 91       	pop	r17
    4ac8:	0f 91       	pop	r16
    4aca:	ff 90       	pop	r15
    4acc:	ef 90       	pop	r14
    4ace:	df 90       	pop	r13
    4ad0:	cf 90       	pop	r12
    4ad2:	08 95       	ret
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
    4ad4:	83 33       	cpi	r24, 0x33	; 51
    4ad6:	09 f4       	brne	.+2      	; 0x4ada <mmc_disk_ioctl+0x54>
    4ad8:	0c c1       	rjmp	.+536    	; 0x4cf2 <mmc_disk_ioctl+0x26c>
    4ada:	84 33       	cpi	r24, 0x34	; 52
    4adc:	08 f4       	brcc	.+2      	; 0x4ae0 <mmc_disk_ioctl+0x5a>
    4ade:	67 c0       	rjmp	.+206    	; 0x4bae <mmc_disk_ioctl+0x128>
    4ae0:	86 33       	cpi	r24, 0x36	; 54
    4ae2:	09 f4       	brne	.+2      	; 0x4ae6 <mmc_disk_ioctl+0x60>
    4ae4:	25 c1       	rjmp	.+586    	; 0x4d30 <mmc_disk_ioctl+0x2aa>
    4ae6:	87 33       	cpi	r24, 0x37	; 55
    4ae8:	08 f4       	brcc	.+2      	; 0x4aec <mmc_disk_ioctl+0x66>
    4aea:	7c c0       	rjmp	.+248    	; 0x4be4 <mmc_disk_ioctl+0x15e>
    4aec:	88 33       	cpi	r24, 0x38	; 56
    4aee:	09 f4       	brne	.+2      	; 0x4af2 <mmc_disk_ioctl+0x6c>
    4af0:	93 c1       	rjmp	.+806    	; 0x4e18 <mmc_disk_ioctl+0x392>
    4af2:	88 33       	cpi	r24, 0x38	; 56
    4af4:	08 f4       	brcc	.+2      	; 0x4af8 <mmc_disk_ioctl+0x72>
    4af6:	49 c1       	rjmp	.+658    	; 0x4d8a <mmc_disk_ioctl+0x304>
    4af8:	89 33       	cpi	r24, 0x39	; 57
    4afa:	09 f0       	breq	.+2      	; 0x4afe <mmc_disk_ioctl+0x78>
    4afc:	77 c0       	rjmp	.+238    	; 0x4bec <mmc_disk_ioctl+0x166>
		deselect();
		break;

	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
    4afe:	db 01       	movw	r26, r22
    4b00:	13 96       	adiw	r26, 0x03	; 3
    4b02:	4d 91       	ld	r20, X+
    4b04:	5d 91       	ld	r21, X+
    4b06:	6d 91       	ld	r22, X+
    4b08:	7c 91       	ld	r23, X
    4b0a:	16 97       	sbiw	r26, 0x06	; 6
    4b0c:	19 e0       	ldi	r17, 0x09	; 9
    4b0e:	44 0f       	add	r20, r20
    4b10:	55 1f       	adc	r21, r21
    4b12:	66 1f       	adc	r22, r22
    4b14:	77 1f       	adc	r23, r23
    4b16:	1a 95       	dec	r17
    4b18:	d1 f7       	brne	.-12     	; 0x4b0e <mmc_disk_ioctl+0x88>
    4b1a:	74 68       	ori	r23, 0x84	; 132
    4b1c:	8c 91       	ld	r24, X
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	a0 e0       	ldi	r26, 0x00	; 0
    4b22:	b0 e0       	ldi	r27, 0x00	; 0
    4b24:	0c e1       	ldi	r16, 0x1C	; 28
    4b26:	88 0f       	add	r24, r24
    4b28:	99 1f       	adc	r25, r25
    4b2a:	aa 1f       	adc	r26, r26
    4b2c:	bb 1f       	adc	r27, r27
    4b2e:	0a 95       	dec	r16
    4b30:	d1 f7       	brne	.-12     	; 0x4b26 <mmc_disk_ioctl+0xa0>
    4b32:	48 2b       	or	r20, r24
    4b34:	59 2b       	or	r21, r25
    4b36:	6a 2b       	or	r22, r26
    4b38:	7b 2b       	or	r23, r27
    4b3a:	f6 01       	movw	r30, r12
    4b3c:	82 81       	ldd	r24, Z+2	; 0x02
    4b3e:	90 e0       	ldi	r25, 0x00	; 0
    4b40:	a0 e0       	ldi	r26, 0x00	; 0
    4b42:	b0 e0       	ldi	r27, 0x00	; 0
    4b44:	48 2b       	or	r20, r24
    4b46:	59 2b       	or	r21, r25
    4b48:	6a 2b       	or	r22, r26
    4b4a:	7b 2b       	or	r23, r27
    4b4c:	81 e3       	ldi	r24, 0x31	; 49
    4b4e:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4b52:	88 23       	and	r24, r24
    4b54:	21 f5       	brne	.+72     	; 0x4b9e <mmc_disk_ioctl+0x118>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4b56:	8f ef       	ldi	r24, 0xFF	; 255
    4b58:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4b5a:	77 9b       	sbis	0x0e, 7	; 14
    4b5c:	fe cf       	rjmp	.-4      	; 0x4b5a <mmc_disk_ioctl+0xd4>
	return SPDR;
    4b5e:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4b60:	8e ef       	ldi	r24, 0xFE	; 254
    4b62:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4b64:	77 9b       	sbis	0x0e, 7	; 14
    4b66:	fe cf       	rjmp	.-4      	; 0x4b64 <mmc_disk_ioctl+0xde>
	return SPDR;
    4b68:	8f b1       	in	r24, 0x0f	; 15

	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
    4b6a:	d6 01       	movw	r26, r12
    4b6c:	11 96       	adiw	r26, 0x01	; 1
    4b6e:	8c 91       	ld	r24, X
    4b70:	11 97       	sbiw	r26, 0x01	; 1
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4b72:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4b74:	77 9b       	sbis	0x0e, 7	; 14
    4b76:	fe cf       	rjmp	.-4      	; 0x4b74 <mmc_disk_ioctl+0xee>
	return SPDR;
    4b78:	8f b1       	in	r24, 0x0f	; 15
    4b7a:	81 e0       	ldi	r24, 0x01	; 1
    4b7c:	92 e0       	ldi	r25, 0x02	; 2
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4b7e:	2f ef       	ldi	r18, 0xFF	; 255
    4b80:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4b82:	77 9b       	sbis	0x0e, 7	; 14
    4b84:	fe cf       	rjmp	.-4      	; 0x4b82 <mmc_disk_ioctl+0xfc>
	return SPDR;
    4b86:	3f b1       	in	r19, 0x0f	; 15
    4b88:	01 97       	sbiw	r24, 0x01	; 1
	case ISDIO_MRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
    4b8a:	d1 f7       	brne	.-12     	; 0x4b80 <mmc_disk_ioctl+0xfa>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4b8c:	8f ef       	ldi	r24, 0xFF	; 255
    4b8e:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4b90:	77 9b       	sbis	0x0e, 7	; 14
    4b92:	fe cf       	rjmp	.-4      	; 0x4b90 <mmc_disk_ioctl+0x10a>
	return SPDR;
    4b94:	8f b1       	in	r24, 0x0f	; 15
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    4b96:	8f 71       	andi	r24, 0x1F	; 31
    4b98:	85 30       	cpi	r24, 0x05	; 5
    4b9a:	09 f4       	brne	.+2      	; 0x4b9e <mmc_disk_ioctl+0x118>
    4b9c:	9e c2       	rjmp	.+1340   	; 0x50da <mmc_disk_ioctl+0x654>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4b9e:	21 e0       	ldi	r18, 0x01	; 1
    4ba0:	30 e0       	ldi	r19, 0x00	; 0
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4ba2:	8f ef       	ldi	r24, 0xFF	; 255
    4ba4:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4ba6:	77 9b       	sbis	0x0e, 7	; 14
    4ba8:	fe cf       	rjmp	.-4      	; 0x4ba6 <mmc_disk_ioctl+0x120>
	return SPDR;
    4baa:	8f b1       	in	r24, 0x0f	; 15
    4bac:	83 cf       	rjmp	.-250    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
    4bae:	83 30       	cpi	r24, 0x03	; 3
    4bb0:	09 f4       	brne	.+2      	; 0x4bb4 <mmc_disk_ioctl+0x12e>
    4bb2:	61 c0       	rjmp	.+194    	; 0x4c76 <mmc_disk_ioctl+0x1f0>
    4bb4:	84 30       	cpi	r24, 0x04	; 4
    4bb6:	e8 f4       	brcc	.+58     	; 0x4bf2 <mmc_disk_ioctl+0x16c>
    4bb8:	88 23       	and	r24, r24
    4bba:	09 f4       	brne	.+2      	; 0x4bbe <mmc_disk_ioctl+0x138>
    4bbc:	ab c0       	rjmp	.+342    	; 0x4d14 <mmc_disk_ioctl+0x28e>
    4bbe:	81 30       	cpi	r24, 0x01	; 1
    4bc0:	a9 f4       	brne	.+42     	; 0x4bec <mmc_disk_ioctl+0x166>
		if (select()) res = RES_OK;
		deselect();
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    4bc2:	89 e0       	ldi	r24, 0x09	; 9
    4bc4:	40 e0       	ldi	r20, 0x00	; 0
    4bc6:	50 e0       	ldi	r21, 0x00	; 0
    4bc8:	ba 01       	movw	r22, r20
    4bca:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4bce:	88 23       	and	r24, r24
    4bd0:	09 f4       	brne	.+2      	; 0x4bd4 <mmc_disk_ioctl+0x14e>
    4bd2:	cf c1       	rjmp	.+926    	; 0x4f72 <mmc_disk_ioctl+0x4ec>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4bd4:	21 e0       	ldi	r18, 0x01	; 1
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4bd8:	8f ef       	ldi	r24, 0xFF	; 255
    4bda:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4bdc:	77 9b       	sbis	0x0e, 7	; 14
    4bde:	fe cf       	rjmp	.-4      	; 0x4bdc <mmc_disk_ioctl+0x156>
	return SPDR;
    4be0:	8f b1       	in	r24, 0x0f	; 15
    4be2:	68 cf       	rjmp	.-304    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
    4be4:	84 33       	cpi	r24, 0x34	; 52
    4be6:	b1 f1       	breq	.+108    	; 0x4c54 <mmc_disk_ioctl+0x1ce>
    4be8:	85 33       	cpi	r24, 0x35	; 53
    4bea:	b9 f0       	breq	.+46     	; 0x4c1a <mmc_disk_ioctl+0x194>
		}
		deselect();
		break;
#endif
	default:
		res = RES_PARERR;
    4bec:	24 e0       	ldi	r18, 0x04	; 4
    4bee:	30 e0       	ldi	r19, 0x00	; 0
    4bf0:	61 cf       	rjmp	.-318    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
    4bf2:	87 30       	cpi	r24, 0x07	; 7
    4bf4:	09 f4       	brne	.+2      	; 0x4bf8 <mmc_disk_ioctl+0x172>
    4bf6:	c1 c0       	rjmp	.+386    	; 0x4d7a <mmc_disk_ioctl+0x2f4>
    4bf8:	82 33       	cpi	r24, 0x32	; 50
    4bfa:	09 f4       	brne	.+2      	; 0x4bfe <mmc_disk_ioctl+0x178>
    4bfc:	b7 c0       	rjmp	.+366    	; 0x4d6c <mmc_disk_ioctl+0x2e6>
    4bfe:	84 30       	cpi	r24, 0x04	; 4
    4c00:	a9 f7       	brne	.-22     	; 0x4bec <mmc_disk_ioctl+0x166>
		}
		deselect();
		break;

	case CTRL_TRIM:		/* Erase a block of sectors (used when _USE_TRIM in ffconf.h is 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
    4c02:	00 91 22 01 	lds	r16, 0x0122
    4c06:	10 e0       	ldi	r17, 0x00	; 0
    4c08:	c8 01       	movw	r24, r16
    4c0a:	86 70       	andi	r24, 0x06	; 6
    4c0c:	90 70       	andi	r25, 0x00	; 0
    4c0e:	00 97       	sbiw	r24, 0x00	; 0
    4c10:	09 f0       	breq	.+2      	; 0x4c14 <mmc_disk_ioctl+0x18e>
    4c12:	0e c2       	rjmp	.+1052   	; 0x5030 <mmc_disk_ioctl+0x5aa>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4c14:	21 e0       	ldi	r18, 0x01	; 1
    4c16:	30 e0       	ldi	r19, 0x00	; 0
    4c18:	4d cf       	rjmp	.-358    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
			res = RES_OK;
		deselect();
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
    4c1a:	8a e3       	ldi	r24, 0x3A	; 58
    4c1c:	40 e0       	ldi	r20, 0x00	; 0
    4c1e:	50 e0       	ldi	r21, 0x00	; 0
    4c20:	ba 01       	movw	r22, r20
    4c22:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4c26:	88 23       	and	r24, r24
    4c28:	09 f0       	breq	.+2      	; 0x4c2c <mmc_disk_ioctl+0x1a6>
    4c2a:	69 c1       	rjmp	.+722    	; 0x4efe <mmc_disk_ioctl+0x478>
/*-----------------------------------------------------------------------*/
/* Miscellaneous Functions                                               */
/*-----------------------------------------------------------------------*/

#if _USE_IOCTL
DRESULT mmc_disk_ioctl (
    4c2c:	c6 01       	movw	r24, r12
    4c2e:	04 96       	adiw	r24, 0x04	; 4
    4c30:	f6 01       	movw	r30, r12
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4c32:	3f ef       	ldi	r19, 0xFF	; 255
    4c34:	3f b9       	out	0x0f, r19	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4c36:	77 9b       	sbis	0x0e, 7	; 14
    4c38:	fe cf       	rjmp	.-4      	; 0x4c36 <mmc_disk_ioctl+0x1b0>
	return SPDR;
    4c3a:	2f b1       	in	r18, 0x0f	; 15
		deselect();
		break;

	case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
		if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
			for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    4c3c:	21 93       	st	Z+, r18
    4c3e:	e8 17       	cp	r30, r24
    4c40:	f9 07       	cpc	r31, r25
    4c42:	c1 f7       	brne	.-16     	; 0x4c34 <mmc_disk_ioctl+0x1ae>
			res = RES_OK;
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	30 e0       	ldi	r19, 0x00	; 0
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4c48:	8f ef       	ldi	r24, 0xFF	; 255
    4c4a:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4c4c:	77 9b       	sbis	0x0e, 7	; 14
    4c4e:	fe cf       	rjmp	.-4      	; 0x4c4c <mmc_disk_ioctl+0x1c6>
	return SPDR;
    4c50:	8f b1       	in	r24, 0x0f	; 15
    4c52:	30 cf       	rjmp	.-416    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
			res = RES_OK;
		deselect();
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))		/* READ_CID */
    4c54:	8a e0       	ldi	r24, 0x0A	; 10
    4c56:	40 e0       	ldi	r20, 0x00	; 0
    4c58:	50 e0       	ldi	r21, 0x00	; 0
    4c5a:	ba 01       	movw	r22, r20
    4c5c:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4c60:	88 23       	and	r24, r24
    4c62:	09 f4       	brne	.+2      	; 0x4c66 <mmc_disk_ioctl+0x1e0>
    4c64:	cf c1       	rjmp	.+926    	; 0x5004 <mmc_disk_ioctl+0x57e>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4c66:	21 e0       	ldi	r18, 0x01	; 1
    4c68:	30 e0       	ldi	r19, 0x00	; 0
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4c6a:	8f ef       	ldi	r24, 0xFF	; 255
    4c6c:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4c6e:	77 9b       	sbis	0x0e, 7	; 14
    4c70:	fe cf       	rjmp	.-4      	; 0x4c6e <mmc_disk_ioctl+0x1e8>
	return SPDR;
    4c72:	8f b1       	in	r24, 0x0f	; 15
    4c74:	1f cf       	rjmp	.-450    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
		}
		deselect();
		break;

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
    4c76:	00 91 22 01 	lds	r16, 0x0122
    4c7a:	02 ff       	sbrs	r16, 2
    4c7c:	43 c1       	rjmp	.+646    	; 0x4f04 <mmc_disk_ioctl+0x47e>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
    4c7e:	8d e8       	ldi	r24, 0x8D	; 141
    4c80:	40 e0       	ldi	r20, 0x00	; 0
    4c82:	50 e0       	ldi	r21, 0x00	; 0
    4c84:	ba 01       	movw	r22, r20
    4c86:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4c8a:	88 23       	and	r24, r24
    4c8c:	09 f0       	breq	.+2      	; 0x4c90 <mmc_disk_ioctl+0x20a>
    4c8e:	31 c1       	rjmp	.+610    	; 0x4ef2 <mmc_disk_ioctl+0x46c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4c90:	8f ef       	ldi	r24, 0xFF	; 255
    4c92:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4c94:	77 9b       	sbis	0x0e, 7	; 14
    4c96:	fe cf       	rjmp	.-4      	; 0x4c94 <mmc_disk_ioctl+0x20e>
	return SPDR;
    4c98:	8f b1       	in	r24, 0x0f	; 15

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
				xchg_spi(0xFF);
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
    4c9a:	ce 01       	movw	r24, r28
    4c9c:	01 96       	adiw	r24, 0x01	; 1
    4c9e:	60 e1       	ldi	r22, 0x10	; 16
    4ca0:	70 e0       	ldi	r23, 0x00	; 0
    4ca2:	0e 94 1f 23 	call	0x463e	; 0x463e <rcvr_datablock>
    4ca6:	00 97       	sbiw	r24, 0x00	; 0
    4ca8:	09 f4       	brne	.+2      	; 0x4cac <mmc_disk_ioctl+0x226>
    4caa:	23 c1       	rjmp	.+582    	; 0x4ef2 <mmc_disk_ioctl+0x46c>
    4cac:	80 e3       	ldi	r24, 0x30	; 48
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4cae:	9f ef       	ldi	r25, 0xFF	; 255
    4cb0:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4cb2:	77 9b       	sbis	0x0e, 7	; 14
    4cb4:	fe cf       	rjmp	.-4      	; 0x4cb2 <mmc_disk_ioctl+0x22c>
	return SPDR;
    4cb6:	2f b1       	in	r18, 0x0f	; 15
    4cb8:	81 50       	subi	r24, 0x01	; 1
	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDv2? */
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
				xchg_spi(0xFF);
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
    4cba:	d1 f7       	brne	.-12     	; 0x4cb0 <mmc_disk_ioctl+0x22a>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
    4cbc:	2b 85       	ldd	r18, Y+11	; 0x0b
    4cbe:	22 95       	swap	r18
    4cc0:	2f 70       	andi	r18, 0x0F	; 15
    4cc2:	80 e1       	ldi	r24, 0x10	; 16
    4cc4:	90 e0       	ldi	r25, 0x00	; 0
    4cc6:	a0 e0       	ldi	r26, 0x00	; 0
    4cc8:	b0 e0       	ldi	r27, 0x00	; 0
    4cca:	04 c0       	rjmp	.+8      	; 0x4cd4 <mmc_disk_ioctl+0x24e>
    4ccc:	88 0f       	add	r24, r24
    4cce:	99 1f       	adc	r25, r25
    4cd0:	aa 1f       	adc	r26, r26
    4cd2:	bb 1f       	adc	r27, r27
    4cd4:	2a 95       	dec	r18
    4cd6:	d2 f7       	brpl	.-12     	; 0x4ccc <mmc_disk_ioctl+0x246>
    4cd8:	f6 01       	movw	r30, r12
    4cda:	80 83       	st	Z, r24
    4cdc:	91 83       	std	Z+1, r25	; 0x01
    4cde:	a2 83       	std	Z+2, r26	; 0x02
    4ce0:	b3 83       	std	Z+3, r27	; 0x03
					res = RES_OK;
    4ce2:	20 e0       	ldi	r18, 0x00	; 0
    4ce4:	30 e0       	ldi	r19, 0x00	; 0
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4ce6:	8f ef       	ldi	r24, 0xFF	; 255
    4ce8:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4cea:	77 9b       	sbis	0x0e, 7	; 14
    4cec:	fe cf       	rjmp	.-4      	; 0x4cea <mmc_disk_ioctl+0x264>
	return SPDR;
    4cee:	8f b1       	in	r24, 0x0f	; 15
    4cf0:	e1 ce       	rjmp	.-574    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
		*ptr = CardType;
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))		/* READ_CSD */
    4cf2:	89 e0       	ldi	r24, 0x09	; 9
    4cf4:	40 e0       	ldi	r20, 0x00	; 0
    4cf6:	50 e0       	ldi	r21, 0x00	; 0
    4cf8:	ba 01       	movw	r22, r20
    4cfa:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4cfe:	88 23       	and	r24, r24
    4d00:	09 f4       	brne	.+2      	; 0x4d04 <mmc_disk_ioctl+0x27e>
    4d02:	8b c1       	rjmp	.+790    	; 0x501a <mmc_disk_ioctl+0x594>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4d04:	21 e0       	ldi	r18, 0x01	; 1
    4d06:	30 e0       	ldi	r19, 0x00	; 0
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4d08:	8f ef       	ldi	r24, 0xFF	; 255
    4d0a:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4d0c:	77 9b       	sbis	0x0e, 7	; 14
    4d0e:	fe cf       	rjmp	.-4      	; 0x4d0c <mmc_disk_ioctl+0x286>
	return SPDR;
    4d10:	8f b1       	in	r24, 0x0f	; 15
    4d12:	d0 ce       	rjmp	.-608    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
	switch (cmd) {
	case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
		if (select()) res = RES_OK;
    4d14:	0e 94 94 22 	call	0x4528	; 0x4528 <select>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4d18:	21 e0       	ldi	r18, 0x01	; 1
    4d1a:	30 e0       	ldi	r19, 0x00	; 0
    4d1c:	00 97       	sbiw	r24, 0x00	; 0
    4d1e:	11 f0       	breq	.+4      	; 0x4d24 <mmc_disk_ioctl+0x29e>
    4d20:	20 e0       	ldi	r18, 0x00	; 0
    4d22:	30 e0       	ldi	r19, 0x00	; 0
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4d24:	8f ef       	ldi	r24, 0xFF	; 255
    4d26:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4d28:	77 9b       	sbis	0x0e, 7	; 14
    4d2a:	fe cf       	rjmp	.-4      	; 0x4d28 <mmc_disk_ioctl+0x2a2>
	return SPDR;
    4d2c:	8f b1       	in	r24, 0x0f	; 15
    4d2e:	c2 ce       	rjmp	.-636    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
		}
		deselect();
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
    4d30:	8d e8       	ldi	r24, 0x8D	; 141
    4d32:	40 e0       	ldi	r20, 0x00	; 0
    4d34:	50 e0       	ldi	r21, 0x00	; 0
    4d36:	ba 01       	movw	r22, r20
    4d38:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4d3c:	88 23       	and	r24, r24
    4d3e:	09 f0       	breq	.+2      	; 0x4d42 <mmc_disk_ioctl+0x2bc>
    4d40:	db c0       	rjmp	.+438    	; 0x4ef8 <mmc_disk_ioctl+0x472>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4d42:	8f ef       	ldi	r24, 0xFF	; 255
    4d44:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4d46:	77 9b       	sbis	0x0e, 7	; 14
    4d48:	fe cf       	rjmp	.-4      	; 0x4d46 <mmc_disk_ioctl+0x2c0>
	return SPDR;
    4d4a:	8f b1       	in	r24, 0x0f	; 15
		break;

	case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
		if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
			xchg_spi(0xFF);
			if (rcvr_datablock(ptr, 64)) res = RES_OK;
    4d4c:	c6 01       	movw	r24, r12
    4d4e:	60 e4       	ldi	r22, 0x40	; 64
    4d50:	70 e0       	ldi	r23, 0x00	; 0
    4d52:	0e 94 1f 23 	call	0x463e	; 0x463e <rcvr_datablock>
    4d56:	00 97       	sbiw	r24, 0x00	; 0
    4d58:	09 f4       	brne	.+2      	; 0x4d5c <mmc_disk_ioctl+0x2d6>
    4d5a:	ce c0       	rjmp	.+412    	; 0x4ef8 <mmc_disk_ioctl+0x472>
    4d5c:	20 e0       	ldi	r18, 0x00	; 0
    4d5e:	30 e0       	ldi	r19, 0x00	; 0
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4d60:	8f ef       	ldi	r24, 0xFF	; 255
    4d62:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4d64:	77 9b       	sbis	0x0e, 7	; 14
    4d66:	fe cf       	rjmp	.-4      	; 0x4d64 <mmc_disk_ioctl+0x2de>
	return SPDR;
    4d68:	8f b1       	in	r24, 0x0f	; 15
    4d6a:	a4 ce       	rjmp	.-696    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
		break;

	/* Following commands are never used by FatFs module */

	case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
		*ptr = CardType;
    4d6c:	80 91 22 01 	lds	r24, 0x0122
    4d70:	fb 01       	movw	r30, r22
    4d72:	80 83       	st	Z, r24
		res = RES_OK;
    4d74:	20 e0       	ldi	r18, 0x00	; 0
    4d76:	30 e0       	ldi	r19, 0x00	; 0
		break;
    4d78:	9d ce       	rjmp	.-710    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
		deselect();
		break;

	case CTRL_POWER_OFF :	/* Power off */
		power_off();
		Stat |= STA_NOINIT;
    4d7a:	80 91 1b 01 	lds	r24, 0x011B
    4d7e:	81 60       	ori	r24, 0x01	; 1
    4d80:	80 93 1b 01 	sts	0x011B, r24
		res = RES_OK;
    4d84:	20 e0       	ldi	r18, 0x00	; 0
    4d86:	30 e0       	ldi	r19, 0x00	; 0
		break;
    4d88:	95 ce       	rjmp	.-726    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
    4d8a:	db 01       	movw	r26, r22
    4d8c:	13 96       	adiw	r26, 0x03	; 3
    4d8e:	4d 91       	ld	r20, X+
    4d90:	5d 91       	ld	r21, X+
    4d92:	6d 91       	ld	r22, X+
    4d94:	7c 91       	ld	r23, X
    4d96:	16 97       	sbiw	r26, 0x06	; 6
    4d98:	39 e0       	ldi	r19, 0x09	; 9
    4d9a:	44 0f       	add	r20, r20
    4d9c:	55 1f       	adc	r21, r21
    4d9e:	66 1f       	adc	r22, r22
    4da0:	77 1f       	adc	r23, r23
    4da2:	3a 95       	dec	r19
    4da4:	d1 f7       	brne	.-12     	; 0x4d9a <mmc_disk_ioctl+0x314>
    4da6:	70 68       	ori	r23, 0x80	; 128
    4da8:	8c 91       	ld	r24, X
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	a0 e0       	ldi	r26, 0x00	; 0
    4dae:	b0 e0       	ldi	r27, 0x00	; 0
    4db0:	ec e1       	ldi	r30, 0x1C	; 28
    4db2:	88 0f       	add	r24, r24
    4db4:	99 1f       	adc	r25, r25
    4db6:	aa 1f       	adc	r26, r26
    4db8:	bb 1f       	adc	r27, r27
    4dba:	ea 95       	dec	r30
    4dbc:	d1 f7       	brne	.-12     	; 0x4db2 <mmc_disk_ioctl+0x32c>
    4dbe:	48 2b       	or	r20, r24
    4dc0:	59 2b       	or	r21, r25
    4dc2:	6a 2b       	or	r22, r26
    4dc4:	7b 2b       	or	r23, r27
    4dc6:	f6 01       	movw	r30, r12
    4dc8:	81 81       	ldd	r24, Z+1	; 0x01
    4dca:	92 81       	ldd	r25, Z+2	; 0x02
    4dcc:	01 97       	sbiw	r24, 0x01	; 1
    4dce:	a0 e0       	ldi	r26, 0x00	; 0
    4dd0:	b0 e0       	ldi	r27, 0x00	; 0
    4dd2:	91 70       	andi	r25, 0x01	; 1
    4dd4:	a0 70       	andi	r26, 0x00	; 0
    4dd6:	b0 70       	andi	r27, 0x00	; 0
    4dd8:	48 2b       	or	r20, r24
    4dda:	59 2b       	or	r21, r25
    4ddc:	6a 2b       	or	r22, r26
    4dde:	7b 2b       	or	r23, r27
    4de0:	80 e3       	ldi	r24, 0x30	; 48
    4de2:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4de6:	88 23       	and	r24, r24
    4de8:	79 f4       	brne	.+30     	; 0x4e08 <mmc_disk_ioctl+0x382>
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
    4dea:	84 e6       	ldi	r24, 0x64	; 100
    4dec:	80 93 21 01 	sts	0x0121, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4df0:	9f ef       	ldi	r25, 0xFF	; 255
    4df2:	9f b9       	out	0x0f, r25	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4df4:	77 9b       	sbis	0x0e, 7	; 14
    4df6:	fe cf       	rjmp	.-4      	; 0x4df4 <mmc_disk_ioctl+0x36e>
	return SPDR;
    4df8:	8f b1       	in	r24, 0x0f	; 15
		break;
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
    4dfa:	8f 3f       	cpi	r24, 0xFF	; 255
    4dfc:	09 f0       	breq	.+2      	; 0x4e00 <mmc_disk_ioctl+0x37a>
    4dfe:	70 c1       	rjmp	.+736    	; 0x50e0 <mmc_disk_ioctl+0x65a>
    4e00:	80 91 21 01 	lds	r24, 0x0121
    4e04:	88 23       	and	r24, r24
    4e06:	a9 f7       	brne	.-22     	; 0x4df2 <mmc_disk_ioctl+0x36c>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4e08:	21 e0       	ldi	r18, 0x01	; 1
    4e0a:	30 e0       	ldi	r19, 0x00	; 0
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4e0c:	8f ef       	ldi	r24, 0xFF	; 255
    4e0e:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4e10:	77 9b       	sbis	0x0e, 7	; 14
    4e12:	fe cf       	rjmp	.-4      	; 0x4e10 <mmc_disk_ioctl+0x38a>
	return SPDR;
    4e14:	8f b1       	in	r24, 0x0f	; 15
    4e16:	4e ce       	rjmp	.-868    	; 0x4ab4 <mmc_disk_ioctl+0x2e>
		deselect();
		break;

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
    4e18:	db 01       	movw	r26, r22
    4e1a:	13 96       	adiw	r26, 0x03	; 3
    4e1c:	4d 91       	ld	r20, X+
    4e1e:	5d 91       	ld	r21, X+
    4e20:	6d 91       	ld	r22, X+
    4e22:	7c 91       	ld	r23, X
    4e24:	16 97       	sbiw	r26, 0x06	; 6
    4e26:	89 e0       	ldi	r24, 0x09	; 9
    4e28:	44 0f       	add	r20, r20
    4e2a:	55 1f       	adc	r21, r21
    4e2c:	66 1f       	adc	r22, r22
    4e2e:	77 1f       	adc	r23, r23
    4e30:	8a 95       	dec	r24
    4e32:	d1 f7       	brne	.-12     	; 0x4e28 <mmc_disk_ioctl+0x3a2>
    4e34:	70 68       	ori	r23, 0x80	; 128
    4e36:	8c 91       	ld	r24, X
    4e38:	90 e0       	ldi	r25, 0x00	; 0
    4e3a:	a0 e0       	ldi	r26, 0x00	; 0
    4e3c:	b0 e0       	ldi	r27, 0x00	; 0
    4e3e:	2c e1       	ldi	r18, 0x1C	; 28
    4e40:	88 0f       	add	r24, r24
    4e42:	99 1f       	adc	r25, r25
    4e44:	aa 1f       	adc	r26, r26
    4e46:	bb 1f       	adc	r27, r27
    4e48:	2a 95       	dec	r18
    4e4a:	d1 f7       	brne	.-12     	; 0x4e40 <mmc_disk_ioctl+0x3ba>
    4e4c:	48 2b       	or	r20, r24
    4e4e:	59 2b       	or	r21, r25
    4e50:	6a 2b       	or	r22, r26
    4e52:	7b 2b       	or	r23, r27
    4e54:	f6 01       	movw	r30, r12
    4e56:	81 81       	ldd	r24, Z+1	; 0x01
    4e58:	92 81       	ldd	r25, Z+2	; 0x02
    4e5a:	01 97       	sbiw	r24, 0x01	; 1
    4e5c:	a0 e0       	ldi	r26, 0x00	; 0
    4e5e:	b0 e0       	ldi	r27, 0x00	; 0
    4e60:	91 70       	andi	r25, 0x01	; 1
    4e62:	a0 70       	andi	r26, 0x00	; 0
    4e64:	b0 70       	andi	r27, 0x00	; 0
    4e66:	48 2b       	or	r20, r24
    4e68:	59 2b       	or	r21, r25
    4e6a:	6a 2b       	or	r22, r26
    4e6c:	7b 2b       	or	r23, r27
    4e6e:	81 e3       	ldi	r24, 0x31	; 49
    4e70:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4e74:	88 23       	and	r24, r24
    4e76:	a9 f5       	brne	.+106    	; 0x4ee2 <mmc_disk_ioctl+0x45c>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4e78:	8f ef       	ldi	r24, 0xFF	; 255
    4e7a:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4e7c:	77 9b       	sbis	0x0e, 7	; 14
    4e7e:	fe cf       	rjmp	.-4      	; 0x4e7c <mmc_disk_ioctl+0x3f6>
	return SPDR;
    4e80:	8f b1       	in	r24, 0x0f	; 15
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4e82:	8e ef       	ldi	r24, 0xFE	; 254
    4e84:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4e86:	77 9b       	sbis	0x0e, 7	; 14
    4e88:	fe cf       	rjmp	.-4      	; 0x4e86 <mmc_disk_ioctl+0x400>
	return SPDR;
    4e8a:	8f b1       	in	r24, 0x0f	; 15

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    4e8c:	d6 01       	movw	r26, r12
    4e8e:	17 96       	adiw	r26, 0x07	; 7
    4e90:	ed 91       	ld	r30, X+
    4e92:	fc 91       	ld	r31, X
    4e94:	18 97       	sbiw	r26, 0x08	; 8
    4e96:	11 96       	adiw	r26, 0x01	; 1
    4e98:	8d 91       	ld	r24, X+
    4e9a:	9c 91       	ld	r25, X
    4e9c:	12 97       	sbiw	r26, 0x02	; 2
    4e9e:	00 97       	sbiw	r24, 0x00	; 0
    4ea0:	09 f4       	brne	.+2      	; 0x4ea4 <mmc_disk_ioctl+0x41e>
    4ea2:	4a c1       	rjmp	.+660    	; 0x5138 <mmc_disk_ioctl+0x6b2>
    4ea4:	21 91       	ld	r18, Z+
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4ea6:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4ea8:	77 9b       	sbis	0x0e, 7	; 14
    4eaa:	fe cf       	rjmp	.-4      	; 0x4ea8 <mmc_disk_ioctl+0x422>
	return SPDR;
    4eac:	2f b1       	in	r18, 0x0f	; 15

	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    4eae:	01 97       	sbiw	r24, 0x01	; 1
    4eb0:	c9 f7       	brne	.-14     	; 0x4ea4 <mmc_disk_ioctl+0x41e>
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    4eb2:	82 e0       	ldi	r24, 0x02	; 2
    4eb4:	92 e0       	ldi	r25, 0x02	; 2
    4eb6:	f6 01       	movw	r30, r12
    4eb8:	21 81       	ldd	r18, Z+1	; 0x01
    4eba:	32 81       	ldd	r19, Z+2	; 0x02
    4ebc:	82 1b       	sub	r24, r18
    4ebe:	93 0b       	sbc	r25, r19
    4ec0:	39 f0       	breq	.+14     	; 0x4ed0 <mmc_disk_ioctl+0x44a>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4ec2:	2f ef       	ldi	r18, 0xFF	; 255
    4ec4:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4ec6:	77 9b       	sbis	0x0e, 7	; 14
    4ec8:	fe cf       	rjmp	.-4      	; 0x4ec6 <mmc_disk_ioctl+0x440>
	return SPDR;
    4eca:	3f b1       	in	r19, 0x0f	; 15
	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    4ecc:	01 97       	sbiw	r24, 0x01	; 1
    4ece:	d1 f7       	brne	.-12     	; 0x4ec4 <mmc_disk_ioctl+0x43e>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4ed0:	8f ef       	ldi	r24, 0xFF	; 255
    4ed2:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4ed4:	77 9b       	sbis	0x0e, 7	; 14
    4ed6:	fe cf       	rjmp	.-4      	; 0x4ed4 <mmc_disk_ioctl+0x44e>
	return SPDR;
    4ed8:	8f b1       	in	r24, 0x0f	; 15
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    4eda:	8f 71       	andi	r24, 0x1F	; 31
    4edc:	85 30       	cpi	r24, 0x05	; 5
    4ede:	09 f4       	brne	.+2      	; 0x4ee2 <mmc_disk_ioctl+0x45c>
    4ee0:	28 c1       	rjmp	.+592    	; 0x5132 <mmc_disk_ioctl+0x6ac>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4ee2:	21 e0       	ldi	r18, 0x01	; 1
    4ee4:	30 e0       	ldi	r19, 0x00	; 0
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    4ee6:	8f ef       	ldi	r24, 0xFF	; 255
    4ee8:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    4eea:	77 9b       	sbis	0x0e, 7	; 14
    4eec:	fe cf       	rjmp	.-4      	; 0x4eea <mmc_disk_ioctl+0x464>
	return SPDR;
    4eee:	8f b1       	in	r24, 0x0f	; 15
    4ef0:	e1 cd       	rjmp	.-1086   	; 0x4ab4 <mmc_disk_ioctl+0x2e>
	UINT dc;
#endif

	if (Stat & STA_NOINIT) return RES_NOTRDY;

	res = RES_ERROR;
    4ef2:	21 e0       	ldi	r18, 0x01	; 1
    4ef4:	30 e0       	ldi	r19, 0x00	; 0
    4ef6:	f7 ce       	rjmp	.-530    	; 0x4ce6 <mmc_disk_ioctl+0x260>
    4ef8:	21 e0       	ldi	r18, 0x01	; 1
    4efa:	30 e0       	ldi	r19, 0x00	; 0
    4efc:	31 cf       	rjmp	.-414    	; 0x4d60 <mmc_disk_ioctl+0x2da>
    4efe:	21 e0       	ldi	r18, 0x01	; 1
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	a2 ce       	rjmp	.-700    	; 0x4c48 <mmc_disk_ioctl+0x1c2>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
    4f04:	89 e0       	ldi	r24, 0x09	; 9
    4f06:	40 e0       	ldi	r20, 0x00	; 0
    4f08:	50 e0       	ldi	r21, 0x00	; 0
    4f0a:	ba 01       	movw	r22, r20
    4f0c:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    4f10:	88 23       	and	r24, r24
    4f12:	79 f7       	brne	.-34     	; 0x4ef2 <mmc_disk_ioctl+0x46c>
    4f14:	ce 01       	movw	r24, r28
    4f16:	01 96       	adiw	r24, 0x01	; 1
    4f18:	60 e1       	ldi	r22, 0x10	; 16
    4f1a:	70 e0       	ldi	r23, 0x00	; 0
    4f1c:	0e 94 1f 23 	call	0x463e	; 0x463e <rcvr_datablock>
    4f20:	00 97       	sbiw	r24, 0x00	; 0
    4f22:	39 f3       	breq	.-50     	; 0x4ef2 <mmc_disk_ioctl+0x46c>
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    4f24:	8c 85       	ldd	r24, Y+12	; 0x0c
					res = RES_OK;
				}
			}
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
    4f26:	01 ff       	sbrs	r16, 1
    4f28:	0b c1       	rjmp	.+534    	; 0x5140 <mmc_disk_ioctl+0x6ba>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    4f2a:	88 1f       	adc	r24, r24
    4f2c:	88 27       	eor	r24, r24
    4f2e:	88 1f       	adc	r24, r24
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	01 96       	adiw	r24, 0x01	; 1
    4f34:	2b 85       	ldd	r18, Y+11	; 0x0b
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	2f 73       	andi	r18, 0x3F	; 63
    4f3a:	30 70       	andi	r19, 0x00	; 0
    4f3c:	22 0f       	add	r18, r18
    4f3e:	33 1f       	adc	r19, r19
    4f40:	82 0f       	add	r24, r18
    4f42:	93 1f       	adc	r25, r19
    4f44:	2e 85       	ldd	r18, Y+14	; 0x0e
    4f46:	22 95       	swap	r18
    4f48:	26 95       	lsr	r18
    4f4a:	26 95       	lsr	r18
    4f4c:	23 70       	andi	r18, 0x03	; 3
    4f4e:	30 e0       	ldi	r19, 0x00	; 0
    4f50:	21 50       	subi	r18, 0x01	; 1
    4f52:	30 40       	sbci	r19, 0x00	; 0
    4f54:	02 c0       	rjmp	.+4      	; 0x4f5a <mmc_disk_ioctl+0x4d4>
    4f56:	88 0f       	add	r24, r24
    4f58:	99 1f       	adc	r25, r25
    4f5a:	2a 95       	dec	r18
    4f5c:	e2 f7       	brpl	.-8      	; 0x4f56 <mmc_disk_ioctl+0x4d0>
    4f5e:	a0 e0       	ldi	r26, 0x00	; 0
    4f60:	b0 e0       	ldi	r27, 0x00	; 0
    4f62:	f6 01       	movw	r30, r12
    4f64:	80 83       	st	Z, r24
    4f66:	91 83       	std	Z+1, r25	; 0x01
    4f68:	a2 83       	std	Z+2, r26	; 0x02
    4f6a:	b3 83       	std	Z+3, r27	; 0x03
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
    4f6c:	20 e0       	ldi	r18, 0x00	; 0
    4f6e:	30 e0       	ldi	r19, 0x00	; 0
    4f70:	ba ce       	rjmp	.-652    	; 0x4ce6 <mmc_disk_ioctl+0x260>
		if (select()) res = RES_OK;
		deselect();
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    4f72:	ce 01       	movw	r24, r28
    4f74:	01 96       	adiw	r24, 0x01	; 1
    4f76:	60 e1       	ldi	r22, 0x10	; 16
    4f78:	70 e0       	ldi	r23, 0x00	; 0
    4f7a:	0e 94 1f 23 	call	0x463e	; 0x463e <rcvr_datablock>
    4f7e:	00 97       	sbiw	r24, 0x00	; 0
    4f80:	09 f4       	brne	.+2      	; 0x4f84 <mmc_disk_ioctl+0x4fe>
    4f82:	28 ce       	rjmp	.-944    	; 0x4bd4 <mmc_disk_ioctl+0x14e>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
    4f84:	89 81       	ldd	r24, Y+1	; 0x01
    4f86:	82 95       	swap	r24
    4f88:	86 95       	lsr	r24
    4f8a:	86 95       	lsr	r24
    4f8c:	83 70       	andi	r24, 0x03	; 3
    4f8e:	81 30       	cpi	r24, 0x01	; 1
    4f90:	09 f4       	brne	.+2      	; 0x4f94 <mmc_disk_ioctl+0x50e>
    4f92:	02 c1       	rjmp	.+516    	; 0x5198 <mmc_disk_ioctl+0x712>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
    4f94:	89 85       	ldd	r24, Y+9	; 0x09
    4f96:	82 95       	swap	r24
    4f98:	86 95       	lsr	r24
    4f9a:	86 95       	lsr	r24
    4f9c:	83 70       	andi	r24, 0x03	; 3
    4f9e:	48 85       	ldd	r20, Y+8	; 0x08
    4fa0:	50 e0       	ldi	r21, 0x00	; 0
    4fa2:	44 0f       	add	r20, r20
    4fa4:	55 1f       	adc	r21, r21
    4fa6:	44 0f       	add	r20, r20
    4fa8:	55 1f       	adc	r21, r21
    4faa:	48 0f       	add	r20, r24
    4fac:	51 1d       	adc	r21, r1
    4fae:	4f 5f       	subi	r20, 0xFF	; 255
    4fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    4fb2:	8f 81       	ldd	r24, Y+7	; 0x07
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
    4fb6:	83 70       	andi	r24, 0x03	; 3
    4fb8:	90 70       	andi	r25, 0x00	; 0
    4fba:	98 2f       	mov	r25, r24
    4fbc:	88 27       	eor	r24, r24
    4fbe:	99 0f       	add	r25, r25
    4fc0:	99 0f       	add	r25, r25
    4fc2:	48 0f       	add	r20, r24
    4fc4:	59 1f       	adc	r21, r25
    4fc6:	60 e0       	ldi	r22, 0x00	; 0
    4fc8:	70 e0       	ldi	r23, 0x00	; 0
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
				*(DWORD*)buff = csize << 10;
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
    4fca:	8e 81       	ldd	r24, Y+6	; 0x06
    4fcc:	8f 70       	andi	r24, 0x0F	; 15
    4fce:	9b 85       	ldd	r25, Y+11	; 0x0b
    4fd0:	99 1f       	adc	r25, r25
    4fd2:	99 27       	eor	r25, r25
    4fd4:	99 1f       	adc	r25, r25
    4fd6:	89 0f       	add	r24, r25
    4fd8:	8e 5f       	subi	r24, 0xFE	; 254
    4fda:	9a 85       	ldd	r25, Y+10	; 0x0a
    4fdc:	93 70       	andi	r25, 0x03	; 3
    4fde:	99 0f       	add	r25, r25
    4fe0:	89 0f       	add	r24, r25
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	09 97       	sbiw	r24, 0x09	; 9
    4fe6:	04 c0       	rjmp	.+8      	; 0x4ff0 <mmc_disk_ioctl+0x56a>
    4fe8:	44 0f       	add	r20, r20
    4fea:	55 1f       	adc	r21, r21
    4fec:	66 1f       	adc	r22, r22
    4fee:	77 1f       	adc	r23, r23
    4ff0:	8a 95       	dec	r24
    4ff2:	d2 f7       	brpl	.-12     	; 0x4fe8 <mmc_disk_ioctl+0x562>
    4ff4:	f6 01       	movw	r30, r12
    4ff6:	40 83       	st	Z, r20
    4ff8:	51 83       	std	Z+1, r21	; 0x01
    4ffa:	62 83       	std	Z+2, r22	; 0x02
    4ffc:	73 83       	std	Z+3, r23	; 0x03
			}
			res = RES_OK;
    4ffe:	20 e0       	ldi	r18, 0x00	; 0
    5000:	30 e0       	ldi	r19, 0x00	; 0
    5002:	ea cd       	rjmp	.-1068   	; 0x4bd8 <mmc_disk_ioctl+0x152>
			res = RES_OK;
		deselect();
		break;

	case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
		if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))		/* READ_CID */
    5004:	c6 01       	movw	r24, r12
    5006:	60 e1       	ldi	r22, 0x10	; 16
    5008:	70 e0       	ldi	r23, 0x00	; 0
    500a:	0e 94 1f 23 	call	0x463e	; 0x463e <rcvr_datablock>
    500e:	00 97       	sbiw	r24, 0x00	; 0
    5010:	09 f4       	brne	.+2      	; 0x5014 <mmc_disk_ioctl+0x58e>
    5012:	29 ce       	rjmp	.-942    	; 0x4c66 <mmc_disk_ioctl+0x1e0>
			
			res = RES_OK;
    5014:	20 e0       	ldi	r18, 0x00	; 0
    5016:	30 e0       	ldi	r19, 0x00	; 0
    5018:	28 ce       	rjmp	.-944    	; 0x4c6a <mmc_disk_ioctl+0x1e4>
		*ptr = CardType;
		res = RES_OK;
		break;

	case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
		if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))		/* READ_CSD */
    501a:	c6 01       	movw	r24, r12
    501c:	60 e1       	ldi	r22, 0x10	; 16
    501e:	70 e0       	ldi	r23, 0x00	; 0
    5020:	0e 94 1f 23 	call	0x463e	; 0x463e <rcvr_datablock>
    5024:	00 97       	sbiw	r24, 0x00	; 0
    5026:	09 f4       	brne	.+2      	; 0x502a <mmc_disk_ioctl+0x5a4>
    5028:	6d ce       	rjmp	.-806    	; 0x4d04 <mmc_disk_ioctl+0x27e>
			res = RES_OK;
    502a:	20 e0       	ldi	r18, 0x00	; 0
    502c:	30 e0       	ldi	r19, 0x00	; 0
    502e:	6c ce       	rjmp	.-808    	; 0x4d08 <mmc_disk_ioctl+0x282>
		deselect();
		break;

	case CTRL_TRIM:		/* Erase a block of sectors (used when _USE_TRIM in ffconf.h is 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
		if (mmc_disk_ioctl(MMC_GET_CSD, csd)) break;	/* Get CSD */
    5030:	83 e3       	ldi	r24, 0x33	; 51
    5032:	be 01       	movw	r22, r28
    5034:	6f 5f       	subi	r22, 0xFF	; 255
    5036:	7f 4f       	sbci	r23, 0xFF	; 255
    5038:	0e 94 43 25 	call	0x4a86	; 0x4a86 <mmc_disk_ioctl>
    503c:	00 97       	sbiw	r24, 0x00	; 0
    503e:	09 f0       	breq	.+2      	; 0x5042 <mmc_disk_ioctl+0x5bc>
    5040:	e9 cd       	rjmp	.-1070   	; 0x4c14 <mmc_disk_ioctl+0x18e>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
    5042:	89 81       	ldd	r24, Y+1	; 0x01
    5044:	82 95       	swap	r24
    5046:	86 95       	lsr	r24
    5048:	86 95       	lsr	r24
    504a:	83 70       	andi	r24, 0x03	; 3
    504c:	19 f4       	brne	.+6      	; 0x5054 <mmc_disk_ioctl+0x5ce>
    504e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5050:	86 ff       	sbrs	r24, 6
    5052:	e0 cd       	rjmp	.-1088   	; 0x4c14 <mmc_disk_ioctl+0x18e>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
    5054:	d6 01       	movw	r26, r12
    5056:	4d 91       	ld	r20, X+
    5058:	5d 91       	ld	r21, X+
    505a:	6d 91       	ld	r22, X+
    505c:	7c 91       	ld	r23, X
    505e:	13 97       	sbiw	r26, 0x03	; 3
    5060:	14 96       	adiw	r26, 0x04	; 4
    5062:	cd 90       	ld	r12, X+
    5064:	dd 90       	ld	r13, X+
    5066:	ed 90       	ld	r14, X+
    5068:	fc 90       	ld	r15, X
    506a:	17 97       	sbiw	r26, 0x07	; 7
		if (!(CardType & CT_BLOCK)) {
    506c:	03 fd       	sbrc	r16, 3
    506e:	0e c0       	rjmp	.+28     	; 0x508c <mmc_disk_ioctl+0x606>
			st *= 512; ed *= 512;
    5070:	f9 e0       	ldi	r31, 0x09	; 9
    5072:	44 0f       	add	r20, r20
    5074:	55 1f       	adc	r21, r21
    5076:	66 1f       	adc	r22, r22
    5078:	77 1f       	adc	r23, r23
    507a:	fa 95       	dec	r31
    507c:	d1 f7       	brne	.-12     	; 0x5072 <mmc_disk_ioctl+0x5ec>
    507e:	a9 e0       	ldi	r26, 0x09	; 9
    5080:	cc 0c       	add	r12, r12
    5082:	dd 1c       	adc	r13, r13
    5084:	ee 1c       	adc	r14, r14
    5086:	ff 1c       	adc	r15, r15
    5088:	aa 95       	dec	r26
    508a:	d1 f7       	brne	.-12     	; 0x5080 <mmc_disk_ioctl+0x5fa>
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))	/* Erase sector block */
    508c:	80 e2       	ldi	r24, 0x20	; 32
    508e:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    5092:	88 23       	and	r24, r24
    5094:	09 f0       	breq	.+2      	; 0x5098 <mmc_disk_ioctl+0x612>
    5096:	be cd       	rjmp	.-1156   	; 0x4c14 <mmc_disk_ioctl+0x18e>
    5098:	81 e2       	ldi	r24, 0x21	; 33
    509a:	b7 01       	movw	r22, r14
    509c:	a6 01       	movw	r20, r12
    509e:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    50a2:	88 23       	and	r24, r24
    50a4:	09 f0       	breq	.+2      	; 0x50a8 <mmc_disk_ioctl+0x622>
    50a6:	b6 cd       	rjmp	.-1172   	; 0x4c14 <mmc_disk_ioctl+0x18e>
    50a8:	86 e2       	ldi	r24, 0x26	; 38
    50aa:	40 e0       	ldi	r20, 0x00	; 0
    50ac:	50 e0       	ldi	r21, 0x00	; 0
    50ae:	ba 01       	movw	r22, r20
    50b0:	0e 94 b2 22 	call	0x4564	; 0x4564 <send_cmd>
    50b4:	88 23       	and	r24, r24
    50b6:	09 f0       	breq	.+2      	; 0x50ba <mmc_disk_ioctl+0x634>
    50b8:	ad cd       	rjmp	.-1190   	; 0x4c14 <mmc_disk_ioctl+0x18e>
)
{
	BYTE d;


	Timer2 = wt / 10;
    50ba:	88 eb       	ldi	r24, 0xB8	; 184
    50bc:	80 93 20 01 	sts	0x0120, r24
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    50c0:	8f ef       	ldi	r24, 0xFF	; 255
    50c2:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    50c4:	77 9b       	sbis	0x0e, 7	; 14
    50c6:	fe cf       	rjmp	.-4      	; 0x50c4 <mmc_disk_ioctl+0x63e>
	return SPDR;
    50c8:	9f b1       	in	r25, 0x0f	; 15


	Timer2 = wt / 10;
	do
		d = xchg_spi(0xFF);
	while (d != 0xFF && Timer2);
    50ca:	9f 3f       	cpi	r25, 0xFF	; 255
    50cc:	09 f4       	brne	.+2      	; 0x50d0 <mmc_disk_ioctl+0x64a>
    50ce:	92 c0       	rjmp	.+292    	; 0x51f4 <mmc_disk_ioctl+0x76e>
    50d0:	90 91 20 01 	lds	r25, 0x0120
    50d4:	99 23       	and	r25, r25
    50d6:	a9 f7       	brne	.-22     	; 0x50c2 <mmc_disk_ioctl+0x63c>
    50d8:	9d cd       	rjmp	.-1222   	; 0x4c14 <mmc_disk_ioctl+0x18e>
		sdi = buff;
		if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			xchg_spi(sdi->ndata);
			for (dc = 513; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    50da:	20 e0       	ldi	r18, 0x00	; 0
    50dc:	30 e0       	ldi	r19, 0x00	; 0
    50de:	61 cd       	rjmp	.-1342   	; 0x4ba2 <mmc_disk_ioctl+0x11c>
#if _USE_ISDIO
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
    50e0:	8e 3f       	cpi	r24, 0xFE	; 254
    50e2:	09 f0       	breq	.+2      	; 0x50e6 <mmc_disk_ioctl+0x660>
    50e4:	91 ce       	rjmp	.-734    	; 0x4e08 <mmc_disk_ioctl+0x382>
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    50e6:	d6 01       	movw	r26, r12
    50e8:	17 96       	adiw	r26, 0x07	; 7
    50ea:	ed 91       	ld	r30, X+
    50ec:	fc 91       	ld	r31, X
    50ee:	18 97       	sbiw	r26, 0x08	; 8
    50f0:	11 96       	adiw	r26, 0x01	; 1
    50f2:	8d 91       	ld	r24, X+
    50f4:	9c 91       	ld	r25, X
    50f6:	12 97       	sbiw	r26, 0x02	; 2
    50f8:	00 97       	sbiw	r24, 0x00	; 0
    50fa:	09 f4       	brne	.+2      	; 0x50fe <mmc_disk_ioctl+0x678>
    50fc:	77 c0       	rjmp	.+238    	; 0x51ec <mmc_disk_ioctl+0x766>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    50fe:	3f ef       	ldi	r19, 0xFF	; 255
    5100:	3f b9       	out	0x0f, r19	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    5102:	77 9b       	sbis	0x0e, 7	; 14
    5104:	fe cf       	rjmp	.-4      	; 0x5102 <mmc_disk_ioctl+0x67c>
	return SPDR;
    5106:	2f b1       	in	r18, 0x0f	; 15
	case ISDIO_READ:
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    5108:	21 93       	st	Z+, r18
    510a:	01 97       	sbiw	r24, 0x01	; 1
    510c:	c9 f7       	brne	.-14     	; 0x5100 <mmc_disk_ioctl+0x67a>
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    510e:	82 e0       	ldi	r24, 0x02	; 2
    5110:	92 e0       	ldi	r25, 0x02	; 2
    5112:	f6 01       	movw	r30, r12
    5114:	21 81       	ldd	r18, Z+1	; 0x01
    5116:	32 81       	ldd	r19, Z+2	; 0x02
    5118:	82 1b       	sub	r24, r18
    511a:	93 0b       	sbc	r25, r19
    511c:	39 f0       	breq	.+14     	; 0x512c <mmc_disk_ioctl+0x6a6>
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    511e:	2f ef       	ldi	r18, 0xFF	; 255
    5120:	2f b9       	out	0x0f, r18	; 15
	loop_until_bit_is_set(SPSR, SPIF);
    5122:	77 9b       	sbis	0x0e, 7	; 14
    5124:	fe cf       	rjmp	.-4      	; 0x5122 <mmc_disk_ioctl+0x69c>
	return SPDR;
    5126:	3f b1       	in	r19, 0x0f	; 15
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    5128:	01 97       	sbiw	r24, 0x01	; 1
    512a:	d1 f7       	brne	.-12     	; 0x5120 <mmc_disk_ioctl+0x69a>
				res = RES_OK;
    512c:	20 e0       	ldi	r18, 0x00	; 0
    512e:	30 e0       	ldi	r19, 0x00	; 0
    5130:	6d ce       	rjmp	.-806    	; 0x4e0c <mmc_disk_ioctl+0x386>
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
			if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
    5132:	20 e0       	ldi	r18, 0x00	; 0
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	d7 ce       	rjmp	.-594    	; 0x4ee6 <mmc_disk_ioctl+0x460>
	case ISDIO_WRITE:
		sdi = buff;
		if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			xchg_spi(0xFF); xchg_spi(0xFE);
			for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
			for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    5138:	82 e0       	ldi	r24, 0x02	; 2
    513a:	92 e0       	ldi	r25, 0x02	; 2
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    513c:	2f ef       	ldi	r18, 0xFF	; 255
    513e:	c2 ce       	rjmp	.-636    	; 0x4ec4 <mmc_disk_ioctl+0x43e>
		} else {					/* SDv1 or MMCv3 */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
				if (CardType & CT_SD1) {	/* SDv1 */
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
				} else {					/* MMCv3 */
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    5140:	48 2f       	mov	r20, r24
    5142:	50 e0       	ldi	r21, 0x00	; 0
    5144:	43 70       	andi	r20, 0x03	; 3
    5146:	50 70       	andi	r21, 0x00	; 0
    5148:	44 0f       	add	r20, r20
    514a:	55 1f       	adc	r21, r21
    514c:	44 0f       	add	r20, r20
    514e:	55 1f       	adc	r21, r21
    5150:	44 0f       	add	r20, r20
    5152:	55 1f       	adc	r21, r21
    5154:	82 95       	swap	r24
    5156:	86 95       	lsr	r24
    5158:	87 70       	andi	r24, 0x07	; 7
    515a:	48 0f       	add	r20, r24
    515c:	51 1d       	adc	r21, r1
    515e:	4f 5f       	subi	r20, 0xFF	; 255
    5160:	5f 4f       	sbci	r21, 0xFF	; 255
    5162:	8b 85       	ldd	r24, Y+11	; 0x0b
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	8c 77       	andi	r24, 0x7C	; 124
    5168:	90 70       	andi	r25, 0x00	; 0
    516a:	95 95       	asr	r25
    516c:	87 95       	ror	r24
    516e:	95 95       	asr	r25
    5170:	87 95       	ror	r24
    5172:	01 96       	adiw	r24, 0x01	; 1
    5174:	48 9f       	mul	r20, r24
    5176:	90 01       	movw	r18, r0
    5178:	49 9f       	mul	r20, r25
    517a:	30 0d       	add	r19, r0
    517c:	58 9f       	mul	r21, r24
    517e:	30 0d       	add	r19, r0
    5180:	11 24       	eor	r1, r1
    5182:	c9 01       	movw	r24, r18
    5184:	a0 e0       	ldi	r26, 0x00	; 0
    5186:	b0 e0       	ldi	r27, 0x00	; 0
    5188:	f6 01       	movw	r30, r12
    518a:	80 83       	st	Z, r24
    518c:	91 83       	std	Z+1, r25	; 0x01
    518e:	a2 83       	std	Z+2, r26	; 0x02
    5190:	b3 83       	std	Z+3, r27	; 0x03
				}
				res = RES_OK;
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	a7 cd       	rjmp	.-1202   	; 0x4ce6 <mmc_disk_ioctl+0x260>
		break;

	case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
    5198:	48 85       	ldd	r20, Y+8	; 0x08
    519a:	50 e0       	ldi	r21, 0x00	; 0
    519c:	60 e0       	ldi	r22, 0x00	; 0
    519e:	70 e0       	ldi	r23, 0x00	; 0
    51a0:	4f 73       	andi	r20, 0x3F	; 63
    51a2:	50 70       	andi	r21, 0x00	; 0
    51a4:	60 70       	andi	r22, 0x00	; 0
    51a6:	70 70       	andi	r23, 0x00	; 0
    51a8:	ba 01       	movw	r22, r20
    51aa:	55 27       	eor	r21, r21
    51ac:	44 27       	eor	r20, r20
    51ae:	4f 5f       	subi	r20, 0xFF	; 255
    51b0:	5f 4f       	sbci	r21, 0xFF	; 255
    51b2:	6f 4f       	sbci	r22, 0xFF	; 255
    51b4:	7f 4f       	sbci	r23, 0xFF	; 255
    51b6:	99 85       	ldd	r25, Y+9	; 0x09
    51b8:	80 e0       	ldi	r24, 0x00	; 0
    51ba:	2a 85       	ldd	r18, Y+10	; 0x0a
    51bc:	82 0f       	add	r24, r18
    51be:	91 1d       	adc	r25, r1
    51c0:	a0 e0       	ldi	r26, 0x00	; 0
    51c2:	b0 e0       	ldi	r27, 0x00	; 0
    51c4:	48 0f       	add	r20, r24
    51c6:	59 1f       	adc	r21, r25
    51c8:	6a 1f       	adc	r22, r26
    51ca:	7b 1f       	adc	r23, r27
				*(DWORD*)buff = csize << 10;
    51cc:	ea e0       	ldi	r30, 0x0A	; 10
    51ce:	44 0f       	add	r20, r20
    51d0:	55 1f       	adc	r21, r21
    51d2:	66 1f       	adc	r22, r22
    51d4:	77 1f       	adc	r23, r23
    51d6:	ea 95       	dec	r30
    51d8:	d1 f7       	brne	.-12     	; 0x51ce <mmc_disk_ioctl+0x748>
    51da:	d6 01       	movw	r26, r12
    51dc:	4d 93       	st	X+, r20
    51de:	5d 93       	st	X+, r21
    51e0:	6d 93       	st	X+, r22
    51e2:	7c 93       	st	X, r23
    51e4:	13 97       	sbiw	r26, 0x03	; 3
			} else {					/* SDC ver 1.XX or MMC*/
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
				*(DWORD*)buff = csize << (n - 9);
			}
			res = RES_OK;
    51e6:	20 e0       	ldi	r18, 0x00	; 0
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	f6 cc       	rjmp	.-1556   	; 0x4bd8 <mmc_disk_ioctl+0x152>
		sdi = buff;
		if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0) {
			for (Timer1 = 100; (rc = xchg_spi(0xFF)) == 0xFF && Timer1; ) ;
			if (rc == 0xFE) {
				for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
				for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    51ec:	82 e0       	ldi	r24, 0x02	; 2
    51ee:	92 e0       	ldi	r25, 0x02	; 2
static
BYTE xchg_spi (		/* Returns received data */
	BYTE dat		/* Data to be sent */
)
{
	SPDR = dat;
    51f0:	2f ef       	ldi	r18, 0xFF	; 255
    51f2:	96 cf       	rjmp	.-212    	; 0x5120 <mmc_disk_ioctl+0x69a>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
		if (!(CardType & CT_BLOCK)) {
			st *= 512; ed *= 512;
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))	/* Erase sector block */
			res = RES_OK;	/* FatFs does not check result of this command */
    51f4:	20 e0       	ldi	r18, 0x00	; 0
    51f6:	30 e0       	ldi	r19, 0x00	; 0
    51f8:	5d cc       	rjmp	.-1862   	; 0x4ab4 <mmc_disk_ioctl+0x2e>

000051fa <mmc_disk_timerproc>:
void mmc_disk_timerproc (void)
{
	BYTE n, s;


	n = Timer1;				/* 100Hz decrement timer */
    51fa:	80 91 21 01 	lds	r24, 0x0121
	if (n) Timer1 = --n;
    51fe:	88 23       	and	r24, r24
    5200:	19 f0       	breq	.+6      	; 0x5208 <mmc_disk_timerproc+0xe>
    5202:	81 50       	subi	r24, 0x01	; 1
    5204:	80 93 21 01 	sts	0x0121, r24
	n = Timer2;
    5208:	80 91 20 01 	lds	r24, 0x0120
	if (n) Timer2 = --n;
    520c:	88 23       	and	r24, r24
    520e:	19 f0       	breq	.+6      	; 0x5216 <mmc_disk_timerproc+0x1c>
    5210:	81 50       	subi	r24, 0x01	; 1
    5212:	80 93 20 01 	sts	0x0120, r24

	s = Stat;
    5216:	80 91 1b 01 	lds	r24, 0x011B
		s |= STA_PROTECT;
	else					/* Write enabled */
		s &= ~STA_PROTECT;

	if(MMC_CD)				/* Card inserted */
		s &= ~STA_NODISK;
    521a:	89 7f       	andi	r24, 0xF9	; 249
	else					/* Socket empty */
		s |= (STA_NODISK | STA_NOINIT);

	Stat = s;				/* Update MMC status */
    521c:	80 93 1b 01 	sts	0x011B, r24
}
    5220:	08 95       	ret

00005222 <main>:

#include <avr/io.h>
#include "RSXAVRD.h"

int main() {
	init_motors();
    5222:	0e 94 65 00 	call	0xca	; 0xca <init_motors>
	motor_pwr(0x00,0x00);
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	60 e0       	ldi	r22, 0x00	; 0
    522a:	0e 94 71 00 	call	0xe2	; 0xe2 <motor_pwr>
	motor_dir(0x00,0x01);
    522e:	80 e0       	ldi	r24, 0x00	; 0
    5230:	61 e0       	ldi	r22, 0x01	; 1
    5232:	0e 94 a4 00 	call	0x148	; 0x148 <motor_dir>
	while(1){
		step_motor(0,1600,97); //6400 steps per rotation, 1600 = 1/4 rotation (90 degrees)
    5236:	80 e0       	ldi	r24, 0x00	; 0
    5238:	60 e4       	ldi	r22, 0x40	; 64
    523a:	76 e0       	ldi	r23, 0x06	; 6
    523c:	41 e6       	ldi	r20, 0x61	; 97
    523e:	50 e0       	ldi	r21, 0x00	; 0
    5240:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <step_motor>
    5244:	f8 cf       	rjmp	.-16     	; 0x5236 <main+0x14>

00005246 <__mulsi3>:
    5246:	62 9f       	mul	r22, r18
    5248:	d0 01       	movw	r26, r0
    524a:	73 9f       	mul	r23, r19
    524c:	f0 01       	movw	r30, r0
    524e:	82 9f       	mul	r24, r18
    5250:	e0 0d       	add	r30, r0
    5252:	f1 1d       	adc	r31, r1
    5254:	64 9f       	mul	r22, r20
    5256:	e0 0d       	add	r30, r0
    5258:	f1 1d       	adc	r31, r1
    525a:	92 9f       	mul	r25, r18
    525c:	f0 0d       	add	r31, r0
    525e:	83 9f       	mul	r24, r19
    5260:	f0 0d       	add	r31, r0
    5262:	74 9f       	mul	r23, r20
    5264:	f0 0d       	add	r31, r0
    5266:	65 9f       	mul	r22, r21
    5268:	f0 0d       	add	r31, r0
    526a:	99 27       	eor	r25, r25
    526c:	72 9f       	mul	r23, r18
    526e:	b0 0d       	add	r27, r0
    5270:	e1 1d       	adc	r30, r1
    5272:	f9 1f       	adc	r31, r25
    5274:	63 9f       	mul	r22, r19
    5276:	b0 0d       	add	r27, r0
    5278:	e1 1d       	adc	r30, r1
    527a:	f9 1f       	adc	r31, r25
    527c:	bd 01       	movw	r22, r26
    527e:	cf 01       	movw	r24, r30
    5280:	11 24       	eor	r1, r1
    5282:	08 95       	ret

00005284 <__udivmodsi4>:
    5284:	a1 e2       	ldi	r26, 0x21	; 33
    5286:	1a 2e       	mov	r1, r26
    5288:	aa 1b       	sub	r26, r26
    528a:	bb 1b       	sub	r27, r27
    528c:	fd 01       	movw	r30, r26
    528e:	0d c0       	rjmp	.+26     	; 0x52aa <__udivmodsi4_ep>

00005290 <__udivmodsi4_loop>:
    5290:	aa 1f       	adc	r26, r26
    5292:	bb 1f       	adc	r27, r27
    5294:	ee 1f       	adc	r30, r30
    5296:	ff 1f       	adc	r31, r31
    5298:	a2 17       	cp	r26, r18
    529a:	b3 07       	cpc	r27, r19
    529c:	e4 07       	cpc	r30, r20
    529e:	f5 07       	cpc	r31, r21
    52a0:	20 f0       	brcs	.+8      	; 0x52aa <__udivmodsi4_ep>
    52a2:	a2 1b       	sub	r26, r18
    52a4:	b3 0b       	sbc	r27, r19
    52a6:	e4 0b       	sbc	r30, r20
    52a8:	f5 0b       	sbc	r31, r21

000052aa <__udivmodsi4_ep>:
    52aa:	66 1f       	adc	r22, r22
    52ac:	77 1f       	adc	r23, r23
    52ae:	88 1f       	adc	r24, r24
    52b0:	99 1f       	adc	r25, r25
    52b2:	1a 94       	dec	r1
    52b4:	69 f7       	brne	.-38     	; 0x5290 <__udivmodsi4_loop>
    52b6:	60 95       	com	r22
    52b8:	70 95       	com	r23
    52ba:	80 95       	com	r24
    52bc:	90 95       	com	r25
    52be:	9b 01       	movw	r18, r22
    52c0:	ac 01       	movw	r20, r24
    52c2:	bd 01       	movw	r22, r26
    52c4:	cf 01       	movw	r24, r30
    52c6:	08 95       	ret

000052c8 <_exit>:
    52c8:	f8 94       	cli

000052ca <__stop_program>:
    52ca:	ff cf       	rjmp	.-2      	; 0x52ca <__stop_program>
